// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVReflect
{
	public unsafe partial class SPIRV
	{
		internal const string LibName = "spirv-reflect-c-shared";

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectCreateShaderModule")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectCreateShaderModuleNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = SpvReflectCreateShaderModuleNative(size, pCode, pModule);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = SpvReflectCreateShaderModuleNative(size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectCreateShaderModule2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectCreateShaderModule2Native([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlagBits flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlagBits flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = SpvReflectCreateShaderModule2Native(flags, size, pCode, pModule);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlagBits flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = SpvReflectCreateShaderModule2Native(flags, size, pCode, pModule);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlagBits flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = SpvReflectCreateShaderModule2Native(flags, size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectCreateShaderModule2")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectCreateShaderModule2([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SpvReflectModuleFlags")] SpvReflectModuleFlagBits flags, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = SpvReflectCreateShaderModule2Native(flags, size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetShaderModule")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectGetShaderModuleNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectGetShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			SpvReflectResult ret = SpvReflectGetShaderModuleNative(size, pCode, pModule);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectGetShaderModule")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectGetShaderModule([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "p_code")] [NativeName(NativeNameType.Type, "const void*")] void* pCode, [NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] ref SpvReflectShaderModule pModule)
		{
			fixed (SpvReflectShaderModule* ppModule = &pModule)
			{
				SpvReflectResult ret = SpvReflectGetShaderModuleNative(size, pCode, (SpvReflectShaderModule*)ppModule);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectDestroyShaderModule")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "spvReflectDestroyShaderModule")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SpvReflectDestroyShaderModuleNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectDestroyShaderModule")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SpvReflectDestroyShaderModule([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			SpvReflectDestroyShaderModuleNative(pModule);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCodeSize")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetCodeSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SpvReflectGetCodeSizeNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetCodeSize")]
		[return: NativeName(NativeNameType.Type, "uint32_t")]
		public static uint SpvReflectGetCodeSize([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			uint ret = SpvReflectGetCodeSizeNative(pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetCode")]
		[return: NativeName(NativeNameType.Type, "const uint32_t*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetCode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint* SpvReflectGetCodeNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetCode")]
		[return: NativeName(NativeNameType.Type, "const uint32_t*")]
		public static uint* SpvReflectGetCode([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule)
		{
			uint* ret = SpvReflectGetCodeNative(pModule);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectEntryPoint*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPoint")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectEntryPoint* SpvReflectGetEntryPointNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectEntryPoint*")]
		public static SpvReflectEntryPoint* SpvReflectGetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint)
		{
			SpvReflectEntryPoint* ret = SpvReflectGetEntryPointNative(pModule, entryPoint);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectEntryPoint*")]
		public static SpvReflectEntryPoint* SpvReflectGetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectEntryPoint* ret = SpvReflectGetEntryPointNative(pModule, (byte*)pentryPoint);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPoint")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectEntryPoint*")]
		public static SpvReflectEntryPoint* SpvReflectGetEntryPoint([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectEntryPoint* ret = SpvReflectGetEntryPointNative(pModule, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateDescriptorBindings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateDescriptorBindingsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			SpvReflectResult ret = SpvReflectEnumerateDescriptorBindingsNative(pModule, pCount, ppBindings);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateDescriptorBindingsNative(pModule, (uint*)ppCount, ppBindings);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = SpvReflectEnumerateDescriptorBindingsNative(pModule, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = SpvReflectEnumerateDescriptorBindingsNative(pModule, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointDescriptorBindings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindingsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, pCount, ppBindings);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, ppBindings);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, pCount, ppBindings);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, (uint*)ppCount, ppBindings);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBindings);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] SpvReflectDescriptorBinding** ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, (uint*)ppCount, ppBindings);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, pCount, (SpvReflectDescriptorBinding**)pppBindings);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorBindings")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorBindings([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_bindings")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")] ref SpvReflectDescriptorBinding* ppBindings)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorBinding** pppBindings = &ppBindings)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorBindingsNative(pModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorBinding**)pppBindings);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateDescriptorSets")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateDescriptorSetsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			SpvReflectResult ret = SpvReflectEnumerateDescriptorSetsNative(pModule, pCount, ppSets);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateDescriptorSetsNative(pModule, (uint*)ppCount, ppSets);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = SpvReflectEnumerateDescriptorSetsNative(pModule, pCount, (SpvReflectDescriptorSet**)pppSets);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = SpvReflectEnumerateDescriptorSetsNative(pModule, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointDescriptorSets")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSetsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, pCount, ppSets);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, ppSets);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, pStr0, pCount, ppSets);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, (uint*)ppCount, ppSets);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppSets);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] SpvReflectDescriptorSet** ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, pStr0, (uint*)ppCount, ppSets);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, pStr0, pCount, (SpvReflectDescriptorSet**)pppSets);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointDescriptorSets")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointDescriptorSets([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_sets")] [NativeName(NativeNameType.Type, "SpvReflectDescriptorSet**")] ref SpvReflectDescriptorSet* ppSets)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectDescriptorSet** pppSets = &ppSets)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointDescriptorSetsNative(pModule, pStr0, (uint*)ppCount, (SpvReflectDescriptorSet**)pppSets);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateInterfaceVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateInterfaceVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateInterfaceVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateInterfaceVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateInterfaceVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateInterfaceVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointInterfaceVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInterfaceVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInterfaceVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInterfaceVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateInputVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateInputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateInputVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateInputVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateInputVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateInputVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointInputVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointInputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointInputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointInputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointInputVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateOutputVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateOutputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateOutputVariablesNative(pModule, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateOutputVariablesNative(pModule, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateOutputVariablesNative(pModule, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateOutputVariablesNative(pModule, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointOutputVariables")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointOutputVariablesNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, entryPoint, pCount, ppVariables);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, pStr0, pCount, ppVariables);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, entryPoint, (uint*)ppCount, ppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] SpvReflectInterfaceVariable** ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, pStr0, (uint*)ppCount, ppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, entryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, pStr0, pCount, (SpvReflectInterfaceVariable**)pppVariables);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointOutputVariables")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointOutputVariables([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_variables")] [NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")] ref SpvReflectInterfaceVariable* ppVariables)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectInterfaceVariable** pppVariables = &ppVariables)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointOutputVariablesNative(pModule, pStr0, (uint*)ppCount, (SpvReflectInterfaceVariable**)pppVariables);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumeratePushConstantBlocks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumeratePushConstantBlocksNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = SpvReflectEnumeratePushConstantBlocksNative(pModule, pCount, ppBlocks);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumeratePushConstantBlocksNative(pModule, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = SpvReflectEnumeratePushConstantBlocksNative(pModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = SpvReflectEnumeratePushConstantBlocksNative(pModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumeratePushConstants")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumeratePushConstantsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks);

		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = SpvReflectEnumeratePushConstantsNative(pModule, pCount, ppBlocks);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumeratePushConstantsNative(pModule, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = SpvReflectEnumeratePushConstantsNative(pModule, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectEnumeratePushConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumeratePushConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = SpvReflectEnumeratePushConstantsNative(pModule, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocksNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, pCount, ppBlocks);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, pCount, ppBlocks);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, (uint*)ppCount, ppBlocks);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, ppBlocks);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] SpvReflectBlockVariable** ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, (uint*)ppCount, ppBlocks);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, pCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
			{
				SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, pCount, (SpvReflectBlockVariable**)pppBlocks);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, entryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
					{
						SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, (byte*)pentryPoint, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateEntryPointPushConstantBlocks")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateEntryPointPushConstantBlocks([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_blocks")] [NativeName(NativeNameType.Type, "SpvReflectBlockVariable**")] ref SpvReflectBlockVariable* ppBlocks)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectBlockVariable** pppBlocks = &ppBlocks)
				{
					SpvReflectResult ret = SpvReflectEnumerateEntryPointPushConstantBlocksNative(pModule, pStr0, (uint*)ppCount, (SpvReflectBlockVariable**)pppBlocks);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectEnumerateSpecializationConstants")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectEnumerateSpecializationConstantsNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant**")] SpvReflectSpecializationConstant** ppConstants);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant**")] SpvReflectSpecializationConstant** ppConstants)
		{
			SpvReflectResult ret = SpvReflectEnumerateSpecializationConstantsNative(pModule, pCount, ppConstants);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant**")] SpvReflectSpecializationConstant** ppConstants)
		{
			fixed (uint* ppCount = &pCount)
			{
				SpvReflectResult ret = SpvReflectEnumerateSpecializationConstantsNative(pModule, (uint*)ppCount, ppConstants);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] uint* pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant**")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
			{
				SpvReflectResult ret = SpvReflectEnumerateSpecializationConstantsNative(pModule, pCount, (SpvReflectSpecializationConstant**)pppConstants);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectEnumerateSpecializationConstants")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectEnumerateSpecializationConstants([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_count")] [NativeName(NativeNameType.Type, "uint32_t*")] ref uint pCount, [NativeName(NativeNameType.Param, "pp_constants")] [NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant**")] ref SpvReflectSpecializationConstant* ppConstants)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (SpvReflectSpecializationConstant** pppConstants = &ppConstants)
				{
					SpvReflectResult ret = SpvReflectEnumerateSpecializationConstantsNative(pModule, (uint*)ppCount, (SpvReflectSpecializationConstant**)pppConstants);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetDescriptorBinding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectDescriptorBinding* SpvReflectGetDescriptorBindingNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorBinding* ret = SpvReflectGetDescriptorBindingNative(pModule, bindingNumber, setNumber, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = SpvReflectGetDescriptorBindingNative(pModule, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointDescriptorBinding")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBindingNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, entryPoint, bindingNumber, setNumber, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, pStr0, bindingNumber, setNumber, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, entryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, (byte*)pentryPoint, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorBinding")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")]
		public static SpvReflectDescriptorBinding* SpvReflectGetEntryPointDescriptorBinding([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint bindingNumber, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorBinding* ret = SpvReflectGetEntryPointDescriptorBindingNative(pModule, pStr0, bindingNumber, setNumber, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetDescriptorSet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectDescriptorSet* SpvReflectGetDescriptorSetNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorSet* ret = SpvReflectGetDescriptorSetNative(pModule, setNumber, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = SpvReflectGetDescriptorSetNative(pModule, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointDescriptorSet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSetNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, entryPoint, setNumber, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, pStr0, setNumber, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, entryPoint, setNumber, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, (byte*)pentryPoint, setNumber, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointDescriptorSet")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")]
		public static SpvReflectDescriptorSet* SpvReflectGetEntryPointDescriptorSet([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint setNumber, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectDescriptorSet* ret = SpvReflectGetEntryPointDescriptorSetNative(pModule, pStr0, setNumber, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetInputVariableByLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetInputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableByLocationNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableByLocationNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetInputVariable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetInputVariableNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableNative(pModule, location, pResult);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectGetInputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointInputVariableByLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, entryPoint, location, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, pStr0, location, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, entryPoint, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableByLocationNative(pModule, pStr0, location, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetInputVariableBySemantic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, semantic, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetInputVariableBySemanticNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointInputVariableBySemantic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, semantic, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, pStr0, semantic, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, pStr0, pStr1, pResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, pStr0, semantic, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointInputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointInputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointInputVariableBySemanticNative(pModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetOutputVariableByLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetOutputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableByLocationNative(pModule, location, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableByLocationNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetOutputVariable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetOutputVariableNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableNative(pModule, location, pResult);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariable")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariable([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableNative(pModule, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointOutputVariableByLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, entryPoint, location, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, pStr0, location, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, entryPoint, location, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, (byte*)pentryPoint, location, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableByLocation")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableByLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "uint32_t")] uint location, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableByLocationNative(pModule, pStr0, location, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetOutputVariableBySemantic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, semantic, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetOutputVariableBySemanticNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointOutputVariableBySemantic")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemanticNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, semantic, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, pStr0, semantic, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, pResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, pStr0, pStr1, pResult);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, semantic, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, semantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] byte* semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, pStr0, semantic, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* psemantic = &semantic)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (semantic != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(semantic, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, entryPoint, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] ref byte semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (byte* psemantic = &semantic)
				{
					fixed (SpvReflectResult* ppResult = &pResult)
					{
						SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, (byte*)pentryPoint, (byte*)psemantic, (SpvReflectResult*)ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointOutputVariableBySemantic")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")]
		public static SpvReflectInterfaceVariable* SpvReflectGetEntryPointOutputVariableBySemantic([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "semantic")] [NativeName(NativeNameType.Type, "const char*")] string semantic, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (semantic != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(semantic);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(semantic, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectInterfaceVariable* ret = SpvReflectGetEntryPointOutputVariableBySemanticNative(pModule, pStr0, pStr1, (SpvReflectResult*)ppResult);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetPushConstantBlock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectBlockVariable* SpvReflectGetPushConstantBlockNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = SpvReflectGetPushConstantBlockNative(pModule, index, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = SpvReflectGetPushConstantBlockNative(pModule, index, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetPushConstant")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectBlockVariable* SpvReflectGetPushConstantNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = SpvReflectGetPushConstantNative(pModule, index, pResult);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectGetPushConstant")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetPushConstant([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "uint32_t")] uint index, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = SpvReflectGetPushConstantNative(pModule, index, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectGetEntryPointPushConstantBlock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlockNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, entryPoint, pResult);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, pResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] SpvReflectResult* pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, pStr0, pResult);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] byte* entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, entryPoint, (SpvReflectResult*)ppResult);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] ref byte entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			fixed (byte* pentryPoint = &entryPoint)
			{
				fixed (SpvReflectResult* ppResult = &pResult)
				{
					SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, (byte*)pentryPoint, (SpvReflectResult*)ppResult);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectGetEntryPointPushConstantBlock")]
		[return: NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")]
		public static SpvReflectBlockVariable* SpvReflectGetEntryPointPushConstantBlock([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "const SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "entry_point")] [NativeName(NativeNameType.Type, "const char*")] string entryPoint, [NativeName(NativeNameType.Param, "p_result")] [NativeName(NativeNameType.Type, "SpvReflectResult*")] ref SpvReflectResult pResult)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (entryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(entryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(entryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SpvReflectResult* ppResult = &pResult)
			{
				SpvReflectBlockVariable* ret = SpvReflectGetEntryPointPushConstantBlockNative(pModule, pStr0, (SpvReflectResult*)ppResult);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectChangeDescriptorBindingNumbers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectChangeDescriptorBindingNumbersNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] SpvReflectDescriptorBinding* pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] SpvReflectDescriptorBinding* pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			SpvReflectResult ret = SpvReflectChangeDescriptorBindingNumbersNative(pModule, pBinding, newBindingNumber, newSetNumber);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumbers")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorBindingNumbers([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] ref SpvReflectDescriptorBinding pBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectDescriptorBinding* ppBinding = &pBinding)
			{
				SpvReflectResult ret = SpvReflectChangeDescriptorBindingNumbersNative(pModule, (SpvReflectDescriptorBinding*)ppBinding, newBindingNumber, newSetNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectChangeDescriptorBindingNumber")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectChangeDescriptorBindingNumberNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] SpvReflectDescriptorBinding* pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber);

		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] SpvReflectDescriptorBinding* pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			SpvReflectResult ret = SpvReflectChangeDescriptorBindingNumberNative(pModule, pDescriptorBinding, newBindingNumber, optionalNewSetNumber);
			return ret;
		}

		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorBindingNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorBindingNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_descriptor_binding")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorBinding*")] ref SpvReflectDescriptorBinding pDescriptorBinding, [NativeName(NativeNameType.Param, "new_binding_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newBindingNumber, [NativeName(NativeNameType.Param, "optional_new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint optionalNewSetNumber)
		{
			fixed (SpvReflectDescriptorBinding* ppDescriptorBinding = &pDescriptorBinding)
			{
				SpvReflectResult ret = SpvReflectChangeDescriptorBindingNumberNative(pModule, (SpvReflectDescriptorBinding*)ppDescriptorBinding, newBindingNumber, optionalNewSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectChangeDescriptorSetNumber")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectChangeDescriptorSetNumberNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")] SpvReflectDescriptorSet* pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")] SpvReflectDescriptorSet* pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			SpvReflectResult ret = SpvReflectChangeDescriptorSetNumberNative(pModule, pSet, newSetNumber);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeDescriptorSetNumber")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeDescriptorSetNumber([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_set")] [NativeName(NativeNameType.Type, "const SpvReflectDescriptorSet*")] ref SpvReflectDescriptorSet pSet, [NativeName(NativeNameType.Param, "new_set_number")] [NativeName(NativeNameType.Type, "uint32_t")] uint newSetNumber)
		{
			fixed (SpvReflectDescriptorSet* ppSet = &pSet)
			{
				SpvReflectResult ret = SpvReflectChangeDescriptorSetNumberNative(pModule, (SpvReflectDescriptorSet*)ppSet, newSetNumber);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectChangeInputVariableLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectChangeInputVariableLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] SpvReflectInterfaceVariable* pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] SpvReflectInterfaceVariable* pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			SpvReflectResult ret = SpvReflectChangeInputVariableLocationNative(pModule, pInputVariable, newLocation);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeInputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeInputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_input_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] ref SpvReflectInterfaceVariable pInputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectInterfaceVariable* ppInputVariable = &pInputVariable)
			{
				SpvReflectResult ret = SpvReflectChangeInputVariableLocationNative(pModule, (SpvReflectInterfaceVariable*)ppInputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		[LibraryImport(LibName, EntryPoint = "spvReflectChangeOutputVariableLocation")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SpvReflectResult SpvReflectChangeOutputVariableLocationNative([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] SpvReflectInterfaceVariable* pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] SpvReflectInterfaceVariable* pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			SpvReflectResult ret = SpvReflectChangeOutputVariableLocationNative(pModule, pOutputVariable, newLocation);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectChangeOutputVariableLocation")]
		[return: NativeName(NativeNameType.Type, "SpvReflectResult")]
		public static SpvReflectResult SpvReflectChangeOutputVariableLocation([NativeName(NativeNameType.Param, "p_module")] [NativeName(NativeNameType.Type, "SpvReflectShaderModule*")] SpvReflectShaderModule* pModule, [NativeName(NativeNameType.Param, "p_output_variable")] [NativeName(NativeNameType.Type, "const SpvReflectInterfaceVariable*")] ref SpvReflectInterfaceVariable pOutputVariable, [NativeName(NativeNameType.Param, "new_location")] [NativeName(NativeNameType.Type, "uint32_t")] uint newLocation)
		{
			fixed (SpvReflectInterfaceVariable* ppOutputVariable = &pOutputVariable)
			{
				SpvReflectResult ret = SpvReflectChangeOutputVariableLocationNative(pModule, (SpvReflectInterfaceVariable*)ppOutputVariable, newLocation);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectSourceLanguage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvReflectSourceLanguageNative([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvReflectSourceLanguage([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang)
		{
			byte* ret = SpvReflectSourceLanguageNative(sourceLang);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectSourceLanguage")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvReflectSourceLanguageS([NativeName(NativeNameType.Param, "source_lang")] [NativeName(NativeNameType.Type, "SpvSourceLanguage")] SpvSourceLanguage sourceLang)
		{
			string ret = Utils.DecodeStringUTF8(SpvReflectSourceLanguageNative(sourceLang));
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "spvReflectBlockVariableTypeName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SpvReflectBlockVariableTypeNameNative([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")] SpvReflectBlockVariable* pVar);

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SpvReflectBlockVariableTypeName([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")] SpvReflectBlockVariable* pVar)
		{
			byte* ret = SpvReflectBlockVariableTypeNameNative(pVar);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "spvReflectBlockVariableTypeName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SpvReflectBlockVariableTypeNameS([NativeName(NativeNameType.Param, "p_var")] [NativeName(NativeNameType.Type, "const SpvReflectBlockVariable*")] SpvReflectBlockVariable* pVar)
		{
			string ret = Utils.DecodeStringUTF8(SpvReflectBlockVariableTypeNameNative(pVar));
			return ret;
		}

	}
}
