// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SPIRVReflect
{
	[NativeName(NativeNameType.StructOrClass, "SpvReflectNumericTraits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectNumericTraits
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectNumericTraits::Scalar")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct NumericTraitScalar
		{
			[NativeName(NativeNameType.Field, "width")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Width;
			[NativeName(NativeNameType.Field, "signedness")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Signedness;

			public unsafe NumericTraitScalar(uint width = default, uint signedness = default)
			{
				Width = width;
				Signedness = signedness;
			}


		}

		[NativeName(NativeNameType.StructOrClass, "SpvReflectNumericTraits::Vector")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct NumericTraitVector
		{
			[NativeName(NativeNameType.Field, "component_count")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint ComponentCount;

			public unsafe NumericTraitVector(uint componentCount = default)
			{
				ComponentCount = componentCount;
			}


		}

		[NativeName(NativeNameType.StructOrClass, "SpvReflectNumericTraits::Matrix")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct NumericTraitMatrix
		{
			[NativeName(NativeNameType.Field, "column_count")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint ColumnCount;
			[NativeName(NativeNameType.Field, "row_count")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint RowCount;
			/// <summary>
			/// Measured in bytes<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "stride")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Stride;


			public unsafe NumericTraitMatrix(uint columnCount = default, uint rowCount = default, uint stride = default)
			{
				ColumnCount = columnCount;
				RowCount = rowCount;
				Stride = stride;
			}


		}

		[NativeName(NativeNameType.Field, "scalar")]
		[NativeName(NativeNameType.Type, "Scalar")]
		public NumericTraitScalar Scalar;
		[NativeName(NativeNameType.Field, "vector")]
		[NativeName(NativeNameType.Type, "Vector")]
		public NumericTraitVector Vector;
		[NativeName(NativeNameType.Field, "matrix")]
		[NativeName(NativeNameType.Type, "Matrix")]
		public NumericTraitMatrix Matrix;

		public unsafe SpvReflectNumericTraits(NumericTraitScalar scalar = default, NumericTraitVector vector = default, NumericTraitMatrix matrix = default)
		{
			Scalar = scalar;
			Vector = vector;
			Matrix = matrix;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SpvReflectImageTraits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectImageTraits
	{
		[NativeName(NativeNameType.Field, "dim")]
		[NativeName(NativeNameType.Type, "SpvDim")]
		public SpvDim Dim;
		[NativeName(NativeNameType.Field, "depth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Depth;
		[NativeName(NativeNameType.Field, "arrayed")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Arrayed;
		/// <summary>
		/// 0: single-sampled; 1: multisampled<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ms")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Ms;

		[NativeName(NativeNameType.Field, "sampled")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Sampled;
		[NativeName(NativeNameType.Field, "image_format")]
		[NativeName(NativeNameType.Type, "SpvImageFormat")]
		public SpvImageFormat ImageFormat;

		public unsafe SpvReflectImageTraits(SpvDim dim = default, uint depth = default, uint arrayed = default, uint ms = default, uint sampled = default, SpvImageFormat imageFormat = default)
		{
			Dim = dim;
			Depth = depth;
			Arrayed = arrayed;
			Ms = ms;
			Sampled = sampled;
			ImageFormat = imageFormat;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SpvReflectArrayTraits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectArrayTraits
	{
		[NativeName(NativeNameType.Field, "dims_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DimsCount;
		/// <summary>
		/// Each entry is either:<br/>
		/// - specialization constant dimension<br/>
		/// - OpTypeRuntimeArray<br/>
		/// - the array length otherwise<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dims")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint Dims_0;
		public uint Dims_1;
		public uint Dims_2;
		public uint Dims_3;
		public uint Dims_4;
		public uint Dims_5;
		public uint Dims_6;
		public uint Dims_7;
		public uint Dims_8;
		public uint Dims_9;
		public uint Dims_10;
		public uint Dims_11;
		public uint Dims_12;
		public uint Dims_13;
		public uint Dims_14;
		public uint Dims_15;
		public uint Dims_16;
		public uint Dims_17;
		public uint Dims_18;
		public uint Dims_19;
		public uint Dims_20;
		public uint Dims_21;
		public uint Dims_22;
		public uint Dims_23;
		public uint Dims_24;
		public uint Dims_25;
		public uint Dims_26;
		public uint Dims_27;
		public uint Dims_28;
		public uint Dims_29;
		public uint Dims_30;
		public uint Dims_31;

		/// <summary>
		/// Stores Ids for dimensions that are specialization constants<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_constant_op_ids")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint SpecConstantOpIds_0;
		public uint SpecConstantOpIds_1;
		public uint SpecConstantOpIds_2;
		public uint SpecConstantOpIds_3;
		public uint SpecConstantOpIds_4;
		public uint SpecConstantOpIds_5;
		public uint SpecConstantOpIds_6;
		public uint SpecConstantOpIds_7;
		public uint SpecConstantOpIds_8;
		public uint SpecConstantOpIds_9;
		public uint SpecConstantOpIds_10;
		public uint SpecConstantOpIds_11;
		public uint SpecConstantOpIds_12;
		public uint SpecConstantOpIds_13;
		public uint SpecConstantOpIds_14;
		public uint SpecConstantOpIds_15;
		public uint SpecConstantOpIds_16;
		public uint SpecConstantOpIds_17;
		public uint SpecConstantOpIds_18;
		public uint SpecConstantOpIds_19;
		public uint SpecConstantOpIds_20;
		public uint SpecConstantOpIds_21;
		public uint SpecConstantOpIds_22;
		public uint SpecConstantOpIds_23;
		public uint SpecConstantOpIds_24;
		public uint SpecConstantOpIds_25;
		public uint SpecConstantOpIds_26;
		public uint SpecConstantOpIds_27;
		public uint SpecConstantOpIds_28;
		public uint SpecConstantOpIds_29;
		public uint SpecConstantOpIds_30;
		public uint SpecConstantOpIds_31;

		/// <summary>
		/// Measured in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "stride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Stride;


		public unsafe SpvReflectArrayTraits(uint dimsCount = default, uint* dims = default, uint* specConstantOpIds = default, uint stride = default)
		{
			DimsCount = dimsCount;
			if (dims != default)
			{
				Dims_0 = dims[0];
				Dims_1 = dims[1];
				Dims_2 = dims[2];
				Dims_3 = dims[3];
				Dims_4 = dims[4];
				Dims_5 = dims[5];
				Dims_6 = dims[6];
				Dims_7 = dims[7];
				Dims_8 = dims[8];
				Dims_9 = dims[9];
				Dims_10 = dims[10];
				Dims_11 = dims[11];
				Dims_12 = dims[12];
				Dims_13 = dims[13];
				Dims_14 = dims[14];
				Dims_15 = dims[15];
				Dims_16 = dims[16];
				Dims_17 = dims[17];
				Dims_18 = dims[18];
				Dims_19 = dims[19];
				Dims_20 = dims[20];
				Dims_21 = dims[21];
				Dims_22 = dims[22];
				Dims_23 = dims[23];
				Dims_24 = dims[24];
				Dims_25 = dims[25];
				Dims_26 = dims[26];
				Dims_27 = dims[27];
				Dims_28 = dims[28];
				Dims_29 = dims[29];
				Dims_30 = dims[30];
				Dims_31 = dims[31];
			}
			if (specConstantOpIds != default)
			{
				SpecConstantOpIds_0 = specConstantOpIds[0];
				SpecConstantOpIds_1 = specConstantOpIds[1];
				SpecConstantOpIds_2 = specConstantOpIds[2];
				SpecConstantOpIds_3 = specConstantOpIds[3];
				SpecConstantOpIds_4 = specConstantOpIds[4];
				SpecConstantOpIds_5 = specConstantOpIds[5];
				SpecConstantOpIds_6 = specConstantOpIds[6];
				SpecConstantOpIds_7 = specConstantOpIds[7];
				SpecConstantOpIds_8 = specConstantOpIds[8];
				SpecConstantOpIds_9 = specConstantOpIds[9];
				SpecConstantOpIds_10 = specConstantOpIds[10];
				SpecConstantOpIds_11 = specConstantOpIds[11];
				SpecConstantOpIds_12 = specConstantOpIds[12];
				SpecConstantOpIds_13 = specConstantOpIds[13];
				SpecConstantOpIds_14 = specConstantOpIds[14];
				SpecConstantOpIds_15 = specConstantOpIds[15];
				SpecConstantOpIds_16 = specConstantOpIds[16];
				SpecConstantOpIds_17 = specConstantOpIds[17];
				SpecConstantOpIds_18 = specConstantOpIds[18];
				SpecConstantOpIds_19 = specConstantOpIds[19];
				SpecConstantOpIds_20 = specConstantOpIds[20];
				SpecConstantOpIds_21 = specConstantOpIds[21];
				SpecConstantOpIds_22 = specConstantOpIds[22];
				SpecConstantOpIds_23 = specConstantOpIds[23];
				SpecConstantOpIds_24 = specConstantOpIds[24];
				SpecConstantOpIds_25 = specConstantOpIds[25];
				SpecConstantOpIds_26 = specConstantOpIds[26];
				SpecConstantOpIds_27 = specConstantOpIds[27];
				SpecConstantOpIds_28 = specConstantOpIds[28];
				SpecConstantOpIds_29 = specConstantOpIds[29];
				SpecConstantOpIds_30 = specConstantOpIds[30];
				SpecConstantOpIds_31 = specConstantOpIds[31];
			}
			Stride = stride;
		}

		public unsafe SpvReflectArrayTraits(uint dimsCount = default, Span<uint> dims = default, Span<uint> specConstantOpIds = default, uint stride = default)
		{
			DimsCount = dimsCount;
			if (dims != default)
			{
				Dims_0 = dims[0];
				Dims_1 = dims[1];
				Dims_2 = dims[2];
				Dims_3 = dims[3];
				Dims_4 = dims[4];
				Dims_5 = dims[5];
				Dims_6 = dims[6];
				Dims_7 = dims[7];
				Dims_8 = dims[8];
				Dims_9 = dims[9];
				Dims_10 = dims[10];
				Dims_11 = dims[11];
				Dims_12 = dims[12];
				Dims_13 = dims[13];
				Dims_14 = dims[14];
				Dims_15 = dims[15];
				Dims_16 = dims[16];
				Dims_17 = dims[17];
				Dims_18 = dims[18];
				Dims_19 = dims[19];
				Dims_20 = dims[20];
				Dims_21 = dims[21];
				Dims_22 = dims[22];
				Dims_23 = dims[23];
				Dims_24 = dims[24];
				Dims_25 = dims[25];
				Dims_26 = dims[26];
				Dims_27 = dims[27];
				Dims_28 = dims[28];
				Dims_29 = dims[29];
				Dims_30 = dims[30];
				Dims_31 = dims[31];
			}
			if (specConstantOpIds != default)
			{
				SpecConstantOpIds_0 = specConstantOpIds[0];
				SpecConstantOpIds_1 = specConstantOpIds[1];
				SpecConstantOpIds_2 = specConstantOpIds[2];
				SpecConstantOpIds_3 = specConstantOpIds[3];
				SpecConstantOpIds_4 = specConstantOpIds[4];
				SpecConstantOpIds_5 = specConstantOpIds[5];
				SpecConstantOpIds_6 = specConstantOpIds[6];
				SpecConstantOpIds_7 = specConstantOpIds[7];
				SpecConstantOpIds_8 = specConstantOpIds[8];
				SpecConstantOpIds_9 = specConstantOpIds[9];
				SpecConstantOpIds_10 = specConstantOpIds[10];
				SpecConstantOpIds_11 = specConstantOpIds[11];
				SpecConstantOpIds_12 = specConstantOpIds[12];
				SpecConstantOpIds_13 = specConstantOpIds[13];
				SpecConstantOpIds_14 = specConstantOpIds[14];
				SpecConstantOpIds_15 = specConstantOpIds[15];
				SpecConstantOpIds_16 = specConstantOpIds[16];
				SpecConstantOpIds_17 = specConstantOpIds[17];
				SpecConstantOpIds_18 = specConstantOpIds[18];
				SpecConstantOpIds_19 = specConstantOpIds[19];
				SpecConstantOpIds_20 = specConstantOpIds[20];
				SpecConstantOpIds_21 = specConstantOpIds[21];
				SpecConstantOpIds_22 = specConstantOpIds[22];
				SpecConstantOpIds_23 = specConstantOpIds[23];
				SpecConstantOpIds_24 = specConstantOpIds[24];
				SpecConstantOpIds_25 = specConstantOpIds[25];
				SpecConstantOpIds_26 = specConstantOpIds[26];
				SpecConstantOpIds_27 = specConstantOpIds[27];
				SpecConstantOpIds_28 = specConstantOpIds[28];
				SpecConstantOpIds_29 = specConstantOpIds[29];
				SpecConstantOpIds_30 = specConstantOpIds[30];
				SpecConstantOpIds_31 = specConstantOpIds[31];
			}
			Stride = stride;
		}


		/// <summary>
		/// Each entry is either:<br/>
		/// - specialization constant dimension<br/>
		/// - OpTypeRuntimeArray<br/>
		/// - the array length otherwise<br/>
		/// </summary>
		/// <summary>
		/// Stores Ids for dimensions that are specialization constants<br/>
		/// </summary>
	}

	[NativeName(NativeNameType.StructOrClass, "SpvReflectBindingArrayTraits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectBindingArrayTraits
	{
		[NativeName(NativeNameType.Field, "dims_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DimsCount;
		[NativeName(NativeNameType.Field, "dims")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint Dims_0;
		public uint Dims_1;
		public uint Dims_2;
		public uint Dims_3;
		public uint Dims_4;
		public uint Dims_5;
		public uint Dims_6;
		public uint Dims_7;
		public uint Dims_8;
		public uint Dims_9;
		public uint Dims_10;
		public uint Dims_11;
		public uint Dims_12;
		public uint Dims_13;
		public uint Dims_14;
		public uint Dims_15;
		public uint Dims_16;
		public uint Dims_17;
		public uint Dims_18;
		public uint Dims_19;
		public uint Dims_20;
		public uint Dims_21;
		public uint Dims_22;
		public uint Dims_23;
		public uint Dims_24;
		public uint Dims_25;
		public uint Dims_26;
		public uint Dims_27;
		public uint Dims_28;
		public uint Dims_29;
		public uint Dims_30;
		public uint Dims_31;

		public unsafe SpvReflectBindingArrayTraits(uint dimsCount = default, uint* dims = default)
		{
			DimsCount = dimsCount;
			if (dims != default)
			{
				Dims_0 = dims[0];
				Dims_1 = dims[1];
				Dims_2 = dims[2];
				Dims_3 = dims[3];
				Dims_4 = dims[4];
				Dims_5 = dims[5];
				Dims_6 = dims[6];
				Dims_7 = dims[7];
				Dims_8 = dims[8];
				Dims_9 = dims[9];
				Dims_10 = dims[10];
				Dims_11 = dims[11];
				Dims_12 = dims[12];
				Dims_13 = dims[13];
				Dims_14 = dims[14];
				Dims_15 = dims[15];
				Dims_16 = dims[16];
				Dims_17 = dims[17];
				Dims_18 = dims[18];
				Dims_19 = dims[19];
				Dims_20 = dims[20];
				Dims_21 = dims[21];
				Dims_22 = dims[22];
				Dims_23 = dims[23];
				Dims_24 = dims[24];
				Dims_25 = dims[25];
				Dims_26 = dims[26];
				Dims_27 = dims[27];
				Dims_28 = dims[28];
				Dims_29 = dims[29];
				Dims_30 = dims[30];
				Dims_31 = dims[31];
			}
		}

		public unsafe SpvReflectBindingArrayTraits(uint dimsCount = default, Span<uint> dims = default)
		{
			DimsCount = dimsCount;
			if (dims != default)
			{
				Dims_0 = dims[0];
				Dims_1 = dims[1];
				Dims_2 = dims[2];
				Dims_3 = dims[3];
				Dims_4 = dims[4];
				Dims_5 = dims[5];
				Dims_6 = dims[6];
				Dims_7 = dims[7];
				Dims_8 = dims[8];
				Dims_9 = dims[9];
				Dims_10 = dims[10];
				Dims_11 = dims[11];
				Dims_12 = dims[12];
				Dims_13 = dims[13];
				Dims_14 = dims[14];
				Dims_15 = dims[15];
				Dims_16 = dims[16];
				Dims_17 = dims[17];
				Dims_18 = dims[18];
				Dims_19 = dims[19];
				Dims_20 = dims[20];
				Dims_21 = dims[21];
				Dims_22 = dims[22];
				Dims_23 = dims[23];
				Dims_24 = dims[24];
				Dims_25 = dims[25];
				Dims_26 = dims[26];
				Dims_27 = dims[27];
				Dims_28 = dims[28];
				Dims_29 = dims[29];
				Dims_30 = dims[30];
				Dims_31 = dims[31];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectTypeDescription")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectTypeDescription
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectTypeDescription::Traits")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct TypeDescriptionTraits
		{
			[NativeName(NativeNameType.Field, "numeric")]
			[NativeName(NativeNameType.Type, "SpvReflectNumericTraits")]
			public SpvReflectNumericTraits Numeric;
			[NativeName(NativeNameType.Field, "image")]
			[NativeName(NativeNameType.Type, "SpvReflectImageTraits")]
			public SpvReflectImageTraits Image;
			[NativeName(NativeNameType.Field, "array")]
			[NativeName(NativeNameType.Type, "SpvReflectArrayTraits")]
			public SpvReflectArrayTraits Array;

			public unsafe TypeDescriptionTraits(SpvReflectNumericTraits numeric = default, SpvReflectImageTraits image = default, SpvReflectArrayTraits array = default)
			{
				Numeric = numeric;
				Image = image;
				Array = array;
			}


		}

		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Id;
		[NativeName(NativeNameType.Field, "op")]
		[NativeName(NativeNameType.Type, "SpvOp")]
		public SpvOp Op;
		[NativeName(NativeNameType.Field, "type_name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* TypeName;
		/// <summary>
		/// Non-NULL if type is member of a struct<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "struct_member_name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* StructMemberName;

		[NativeName(NativeNameType.Field, "storage_class")]
		[NativeName(NativeNameType.Type, "SpvStorageClass")]
		public SpvStorageClass StorageClass;
		[NativeName(NativeNameType.Field, "type_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeFlags")]
		public SpvReflectTypeFlagBits TypeFlags;
		[NativeName(NativeNameType.Field, "decoration_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectDecorationFlags")]
		public SpvReflectDecorationFlagBits DecorationFlags;
		[NativeName(NativeNameType.Field, "traits")]
		[NativeName(NativeNameType.Type, "Traits")]
		public TypeDescriptionTraits Traits;
		/// <summary>
		/// If underlying type is a struct (ex. array of structs)<br/>
		/// this gives access to the OpTypeStruct<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "struct_type_description")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
		public unsafe SpvReflectTypeDescription* StructTypeDescription;

		/// <summary>
		/// Some pointers to SpvReflectTypeDescription are really<br/>
		/// just copies of another reference to the same OpType<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "copied")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Copied;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "member_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemberCount;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "members")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
		public unsafe SpvReflectTypeDescription* Members;


		public unsafe SpvReflectTypeDescription(uint id = default, SpvOp op = default, byte* typeName = default, byte* structMemberName = default, SpvStorageClass storageClass = default, SpvReflectTypeFlagBits typeFlags = default, SpvReflectDecorationFlagBits decorationFlags = default, TypeDescriptionTraits traits = default, SpvReflectTypeDescription* structTypeDescription = default, uint copied = default, uint memberCount = default, SpvReflectTypeDescription* members = default)
		{
			Id = id;
			Op = op;
			TypeName = typeName;
			StructMemberName = structMemberName;
			StorageClass = storageClass;
			TypeFlags = typeFlags;
			DecorationFlags = decorationFlags;
			Traits = traits;
			StructTypeDescription = structTypeDescription;
			Copied = copied;
			MemberCount = memberCount;
			Members = members;
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectInterfaceVariable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectInterfaceVariable
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectInterfaceVariable::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct WordOffsetUnion
		{
			[NativeName(NativeNameType.Field, "location")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Location;

			public unsafe WordOffsetUnion(uint location = default)
			{
				Location = location;
			}


		}

		[NativeName(NativeNameType.Field, "spirv_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpirvId;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Location;
		[NativeName(NativeNameType.Field, "component")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Component;
		[NativeName(NativeNameType.Field, "storage_class")]
		[NativeName(NativeNameType.Type, "SpvStorageClass")]
		public SpvStorageClass StorageClass;
		[NativeName(NativeNameType.Field, "semantic")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Semantic;
		[NativeName(NativeNameType.Field, "decoration_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectDecorationFlags")]
		public SpvReflectDecorationFlagBits DecorationFlags;
		[NativeName(NativeNameType.Field, "built_in")]
		[NativeName(NativeNameType.Type, "SpvBuiltIn")]
		public SpvBuiltIn BuiltIn;
		[NativeName(NativeNameType.Field, "numeric")]
		[NativeName(NativeNameType.Type, "SpvReflectNumericTraits")]
		public SpvReflectNumericTraits Numeric;
		[NativeName(NativeNameType.Field, "array")]
		[NativeName(NativeNameType.Type, "SpvReflectArrayTraits")]
		public SpvReflectArrayTraits Array;
		[NativeName(NativeNameType.Field, "member_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemberCount;
		[NativeName(NativeNameType.Field, "members")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable*")]
		public unsafe SpvReflectInterfaceVariable* Members;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "SpvReflectFormat")]
		public SpvReflectFormat Format;
		/// <summary>
		/// NOTE: SPIR-V shares type references for variables<br/>
		/// that have the same underlying type. This means<br/>
		/// that the same type name will appear for multiple<br/>
		/// variables.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type_description")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
		public unsafe SpvReflectTypeDescription* TypeDescription;

		[NativeName(NativeNameType.Field, "word_offset")]
		[NativeName(NativeNameType.Type, "")]
		public WordOffsetUnion WordOffset;

		public unsafe SpvReflectInterfaceVariable(uint spirvId = default, byte* name = default, uint location = default, uint component = default, SpvStorageClass storageClass = default, byte* semantic = default, SpvReflectDecorationFlagBits decorationFlags = default, SpvBuiltIn builtIn = default, SpvReflectNumericTraits numeric = default, SpvReflectArrayTraits array = default, uint memberCount = default, SpvReflectInterfaceVariable* members = default, SpvReflectFormat format = default, SpvReflectTypeDescription* typeDescription = default, WordOffsetUnion wordOffset = default)
		{
			SpirvId = spirvId;
			Name = name;
			Location = location;
			Component = component;
			StorageClass = storageClass;
			Semantic = semantic;
			DecorationFlags = decorationFlags;
			BuiltIn = builtIn;
			Numeric = numeric;
			Array = array;
			MemberCount = memberCount;
			Members = members;
			Format = format;
			TypeDescription = typeDescription;
			WordOffset = wordOffset;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectBlockVariable")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectBlockVariable
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectBlockVariable::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct WordOffsetUnion
		{
			[NativeName(NativeNameType.Field, "offset")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Offset;

			public unsafe WordOffsetUnion(uint offset = default)
			{
				Offset = offset;
			}


		}

		[NativeName(NativeNameType.Field, "spirv_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpirvId;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;
		/// <summary>
		/// Measured in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Offset;

		/// <summary>
		/// Measured in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "absolute_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AbsoluteOffset;

		/// <summary>
		/// Measured in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Size;

		/// <summary>
		/// Measured in bytes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padded_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PaddedSize;

		[NativeName(NativeNameType.Field, "decoration_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectDecorationFlags")]
		public SpvReflectDecorationFlagBits DecorationFlags;
		[NativeName(NativeNameType.Field, "numeric")]
		[NativeName(NativeNameType.Type, "SpvReflectNumericTraits")]
		public SpvReflectNumericTraits Numeric;
		[NativeName(NativeNameType.Field, "array")]
		[NativeName(NativeNameType.Type, "SpvReflectArrayTraits")]
		public SpvReflectArrayTraits Array;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "SpvReflectVariableFlags")]
		public SpvReflectVariableFlagBits Flags;
		[NativeName(NativeNameType.Field, "member_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemberCount;
		[NativeName(NativeNameType.Field, "members")]
		[NativeName(NativeNameType.Type, "SpvReflectBlockVariable*")]
		public unsafe SpvReflectBlockVariable* Members;
		[NativeName(NativeNameType.Field, "type_description")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
		public unsafe SpvReflectTypeDescription* TypeDescription;
		[NativeName(NativeNameType.Field, "word_offset")]
		[NativeName(NativeNameType.Type, "")]
		public WordOffsetUnion WordOffset;

		public unsafe SpvReflectBlockVariable(uint spirvId = default, byte* name = default, uint offset = default, uint absoluteOffset = default, uint size = default, uint paddedSize = default, SpvReflectDecorationFlagBits decorationFlags = default, SpvReflectNumericTraits numeric = default, SpvReflectArrayTraits array = default, SpvReflectVariableFlagBits flags = default, uint memberCount = default, SpvReflectBlockVariable* members = default, SpvReflectTypeDescription* typeDescription = default, WordOffsetUnion wordOffset = default)
		{
			SpirvId = spirvId;
			Name = name;
			Offset = offset;
			AbsoluteOffset = absoluteOffset;
			Size = size;
			PaddedSize = paddedSize;
			DecorationFlags = decorationFlags;
			Numeric = numeric;
			Array = array;
			Flags = flags;
			MemberCount = memberCount;
			Members = members;
			TypeDescription = typeDescription;
			WordOffset = wordOffset;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectDescriptorBinding")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectDescriptorBinding
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectDescriptorBinding::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct WordOffsetUnion
		{
			[NativeName(NativeNameType.Field, "binding")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Binding;
			[NativeName(NativeNameType.Field, "set")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Set;

			public unsafe WordOffsetUnion(uint binding = default, uint set = default)
			{
				Binding = binding;
				Set = set;
			}


		}

		[NativeName(NativeNameType.Field, "spirv_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpirvId;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "input_attachment_index")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputAttachmentIndex;
		[NativeName(NativeNameType.Field, "set")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Set;
		[NativeName(NativeNameType.Field, "descriptor_type")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorType")]
		public SpvReflectDescriptorType DescriptorType;
		[NativeName(NativeNameType.Field, "resource_type")]
		[NativeName(NativeNameType.Type, "SpvReflectResourceType")]
		public SpvReflectResourceType ResourceType;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "SpvReflectImageTraits")]
		public SpvReflectImageTraits Image;
		[NativeName(NativeNameType.Field, "block")]
		[NativeName(NativeNameType.Type, "SpvReflectBlockVariable")]
		public SpvReflectBlockVariable Block;
		[NativeName(NativeNameType.Field, "array")]
		[NativeName(NativeNameType.Type, "SpvReflectBindingArrayTraits")]
		public SpvReflectBindingArrayTraits Array;
		[NativeName(NativeNameType.Field, "count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Count;
		[NativeName(NativeNameType.Field, "accessed")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Accessed;
		[NativeName(NativeNameType.Field, "uav_counter_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UavCounterId;
		[NativeName(NativeNameType.Field, "uav_counter_binding")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding*")]
		public unsafe SpvReflectDescriptorBinding* UavCounterBinding;
		[NativeName(NativeNameType.Field, "byte_address_buffer_offset_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ByteAddressBufferOffsetCount;
		[NativeName(NativeNameType.Field, "byte_address_buffer_offsets")]
		[NativeName(NativeNameType.Type, "uint32_t*")]
		public unsafe uint* ByteAddressBufferOffsets;
		[NativeName(NativeNameType.Field, "type_description")]
		[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
		public unsafe SpvReflectTypeDescription* TypeDescription;
		[NativeName(NativeNameType.Field, "word_offset")]
		[NativeName(NativeNameType.Type, "")]
		public WordOffsetUnion WordOffset;
		[NativeName(NativeNameType.Field, "decoration_flags")]
		[NativeName(NativeNameType.Type, "SpvReflectDecorationFlags")]
		public SpvReflectDecorationFlagBits DecorationFlags;
		/// <summary>
		/// Requires SPV_GOOGLE_user_type<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "user_type")]
		[NativeName(NativeNameType.Type, "SpvReflectUserType")]
		public SpvReflectUserType UserType;


		public unsafe SpvReflectDescriptorBinding(uint spirvId = default, byte* name = default, uint binding = default, uint inputAttachmentIndex = default, uint set = default, SpvReflectDescriptorType descriptorType = default, SpvReflectResourceType resourceType = default, SpvReflectImageTraits image = default, SpvReflectBlockVariable block = default, SpvReflectBindingArrayTraits array = default, uint count = default, uint accessed = default, uint uavCounterId = default, SpvReflectDescriptorBinding* uavCounterBinding = default, uint byteAddressBufferOffsetCount = default, uint* byteAddressBufferOffsets = default, SpvReflectTypeDescription* typeDescription = default, WordOffsetUnion wordOffset = default, SpvReflectDecorationFlagBits decorationFlags = default, SpvReflectUserType userType = default)
		{
			SpirvId = spirvId;
			Name = name;
			Binding = binding;
			InputAttachmentIndex = inputAttachmentIndex;
			Set = set;
			DescriptorType = descriptorType;
			ResourceType = resourceType;
			Image = image;
			Block = block;
			Array = array;
			Count = count;
			Accessed = accessed;
			UavCounterId = uavCounterId;
			UavCounterBinding = uavCounterBinding;
			ByteAddressBufferOffsetCount = byteAddressBufferOffsetCount;
			ByteAddressBufferOffsets = byteAddressBufferOffsets;
			TypeDescription = typeDescription;
			WordOffset = wordOffset;
			DecorationFlags = decorationFlags;
			UserType = userType;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectDescriptorSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectDescriptorSet
	{
		[NativeName(NativeNameType.Field, "set")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Set;
		[NativeName(NativeNameType.Field, "binding_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BindingCount;
		[NativeName(NativeNameType.Field, "bindings")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding**")]
		public unsafe SpvReflectDescriptorBinding** Bindings;

		public unsafe SpvReflectDescriptorSet(uint set = default, uint bindingCount = default, SpvReflectDescriptorBinding** bindings = default)
		{
			Set = set;
			BindingCount = bindingCount;
			Bindings = bindings;
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectEntryPoint")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectEntryPoint
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectEntryPoint::LocalSize")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct EntryPointLocalSize
		{
			[NativeName(NativeNameType.Field, "x")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint X;
			[NativeName(NativeNameType.Field, "y")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Y;
			[NativeName(NativeNameType.Field, "z")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint Z;

			public unsafe EntryPointLocalSize(uint x = default, uint y = default, uint z = default)
			{
				X = x;
				Y = y;
				Z = z;
			}


		}

		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Id;
		[NativeName(NativeNameType.Field, "spirv_execution_model")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel SpirvExecutionModel;
		[NativeName(NativeNameType.Field, "shader_stage")]
		[NativeName(NativeNameType.Type, "SpvReflectShaderStageFlagBits")]
		public SpvReflectShaderStageFlagBits ShaderStage;
		[NativeName(NativeNameType.Field, "input_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputVariableCount;
		[NativeName(NativeNameType.Field, "input_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")]
		public unsafe SpvReflectInterfaceVariable** InputVariables;
		[NativeName(NativeNameType.Field, "output_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputVariableCount;
		[NativeName(NativeNameType.Field, "output_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")]
		public unsafe SpvReflectInterfaceVariable** OutputVariables;
		[NativeName(NativeNameType.Field, "interface_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InterfaceVariableCount;
		[NativeName(NativeNameType.Field, "interface_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable*")]
		public unsafe SpvReflectInterfaceVariable* InterfaceVariables;
		[NativeName(NativeNameType.Field, "descriptor_set_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorSetCount;
		[NativeName(NativeNameType.Field, "descriptor_sets")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorSet*")]
		public unsafe SpvReflectDescriptorSet* DescriptorSets;
		[NativeName(NativeNameType.Field, "used_uniform_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedUniformCount;
		[NativeName(NativeNameType.Field, "used_uniforms")]
		[NativeName(NativeNameType.Type, "uint32_t*")]
		public unsafe uint* UsedUniforms;
		[NativeName(NativeNameType.Field, "used_push_constant_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedPushConstantCount;
		[NativeName(NativeNameType.Field, "used_push_constants")]
		[NativeName(NativeNameType.Type, "uint32_t*")]
		public unsafe uint* UsedPushConstants;
		[NativeName(NativeNameType.Field, "execution_mode_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExecutionModeCount;
		[NativeName(NativeNameType.Field, "execution_modes")]
		[NativeName(NativeNameType.Type, "SpvExecutionMode*")]
		public unsafe SpvExecutionMode* ExecutionModes;
		[NativeName(NativeNameType.Field, "local_size")]
		[NativeName(NativeNameType.Type, "LocalSize")]
		public EntryPointLocalSize LocalSize;
		/// <summary>
		/// valid for geometry<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Invocations;

		/// <summary>
		/// valid for geometry, tesselation<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "output_vertices")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputVertices;


		public unsafe SpvReflectEntryPoint(byte* name = default, uint id = default, SpvExecutionModel spirvExecutionModel = default, SpvReflectShaderStageFlagBits shaderStage = default, uint inputVariableCount = default, SpvReflectInterfaceVariable** inputVariables = default, uint outputVariableCount = default, SpvReflectInterfaceVariable** outputVariables = default, uint interfaceVariableCount = default, SpvReflectInterfaceVariable* interfaceVariables = default, uint descriptorSetCount = default, SpvReflectDescriptorSet* descriptorSets = default, uint usedUniformCount = default, uint* usedUniforms = default, uint usedPushConstantCount = default, uint* usedPushConstants = default, uint executionModeCount = default, SpvExecutionMode* executionModes = default, EntryPointLocalSize localSize = default, uint invocations = default, uint outputVertices = default)
		{
			Name = name;
			Id = id;
			SpirvExecutionModel = spirvExecutionModel;
			ShaderStage = shaderStage;
			InputVariableCount = inputVariableCount;
			InputVariables = inputVariables;
			OutputVariableCount = outputVariableCount;
			OutputVariables = outputVariables;
			InterfaceVariableCount = interfaceVariableCount;
			InterfaceVariables = interfaceVariables;
			DescriptorSetCount = descriptorSetCount;
			DescriptorSets = descriptorSets;
			UsedUniformCount = usedUniformCount;
			UsedUniforms = usedUniforms;
			UsedPushConstantCount = usedPushConstantCount;
			UsedPushConstants = usedPushConstants;
			ExecutionModeCount = executionModeCount;
			ExecutionModes = executionModes;
			LocalSize = localSize;
			Invocations = invocations;
			OutputVertices = outputVertices;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectCapability")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectCapability
	{
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "SpvCapability")]
		public SpvCapability Value;
		[NativeName(NativeNameType.Field, "word_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WordOffset;

		public unsafe SpvReflectCapability(SpvCapability value = default, uint wordOffset = default)
		{
			Value = value;
			WordOffset = wordOffset;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectSpecializationConstant")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectSpecializationConstant
	{
		[NativeName(NativeNameType.Field, "spirv_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpirvId;
		[NativeName(NativeNameType.Field, "constant_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstantId;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		public unsafe SpvReflectSpecializationConstant(uint spirvId = default, uint constantId = default, byte* name = default)
		{
			SpirvId = spirvId;
			ConstantId = constantId;
			Name = name;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SpvReflectShaderModule")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SpvReflectShaderModule
	{
		[NativeName(NativeNameType.StructOrClass, "SpvReflectShaderModule::Internal")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct ShaderModuleInternal
		{
			[NativeName(NativeNameType.Field, "module_flags")]
			[NativeName(NativeNameType.Type, "SpvReflectModuleFlags")]
			public SpvReflectModuleFlagBits ModuleFlags;
			[NativeName(NativeNameType.Field, "spirv_size")]
			[NativeName(NativeNameType.Type, "size_t")]
			public ulong SpirvSize;
			[NativeName(NativeNameType.Field, "spirv_code")]
			[NativeName(NativeNameType.Type, "uint32_t*")]
			public unsafe uint* SpirvCode;
			[NativeName(NativeNameType.Field, "spirv_word_count")]
			[NativeName(NativeNameType.Type, "uint32_t")]
			public uint SpirvWordCount;
			[NativeName(NativeNameType.Field, "type_description_count")]
			[NativeName(NativeNameType.Type, "size_t")]
			public ulong TypeDescriptionCount;
			[NativeName(NativeNameType.Field, "type_descriptions")]
			[NativeName(NativeNameType.Type, "SpvReflectTypeDescription*")]
			public unsafe SpvReflectTypeDescription* TypeDescriptions;

			public unsafe ShaderModuleInternal(SpvReflectModuleFlagBits moduleFlags = default, ulong spirvSize = default, uint* spirvCode = default, uint spirvWordCount = default, ulong typeDescriptionCount = default, SpvReflectTypeDescription* typeDescriptions = default)
			{
				ModuleFlags = moduleFlags;
				SpirvSize = spirvSize;
				SpirvCode = spirvCode;
				SpirvWordCount = spirvWordCount;
				TypeDescriptionCount = typeDescriptionCount;
				TypeDescriptions = typeDescriptions;
			}


		}

		[NativeName(NativeNameType.Field, "generator")]
		[NativeName(NativeNameType.Type, "SpvReflectGenerator")]
		public SpvReflectGenerator Generator;
		[NativeName(NativeNameType.Field, "entry_point_name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* EntryPointName;
		[NativeName(NativeNameType.Field, "entry_point_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntryPointId;
		[NativeName(NativeNameType.Field, "entry_point_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntryPointCount;
		[NativeName(NativeNameType.Field, "entry_points")]
		[NativeName(NativeNameType.Type, "SpvReflectEntryPoint*")]
		public unsafe SpvReflectEntryPoint* EntryPoints;
		[NativeName(NativeNameType.Field, "source_language")]
		[NativeName(NativeNameType.Type, "SpvSourceLanguage")]
		public SpvSourceLanguage SourceLanguage;
		[NativeName(NativeNameType.Field, "source_language_version")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SourceLanguageVersion;
		[NativeName(NativeNameType.Field, "source_file")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* SourceFile;
		[NativeName(NativeNameType.Field, "source_source")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* SourceSource;
		[NativeName(NativeNameType.Field, "capability_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CapabilityCount;
		[NativeName(NativeNameType.Field, "capabilities")]
		[NativeName(NativeNameType.Type, "SpvReflectCapability*")]
		public unsafe SpvReflectCapability* Capabilities;
		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spirv_execution_model")]
		[NativeName(NativeNameType.Type, "SpvExecutionModel")]
		public SpvExecutionModel SpirvExecutionModel;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "shader_stage")]
		[NativeName(NativeNameType.Type, "SpvReflectShaderStageFlagBits")]
		public SpvReflectShaderStageFlagBits ShaderStage;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_binding_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorBindingCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_bindings")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorBinding*")]
		public unsafe SpvReflectDescriptorBinding* DescriptorBindings;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_set_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorSetCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "descriptor_sets")]
		[NativeName(NativeNameType.Type, "SpvReflectDescriptorSet[64]")]
		public SpvReflectDescriptorSet DescriptorSets_0;
		public SpvReflectDescriptorSet DescriptorSets_1;
		public SpvReflectDescriptorSet DescriptorSets_2;
		public SpvReflectDescriptorSet DescriptorSets_3;
		public SpvReflectDescriptorSet DescriptorSets_4;
		public SpvReflectDescriptorSet DescriptorSets_5;
		public SpvReflectDescriptorSet DescriptorSets_6;
		public SpvReflectDescriptorSet DescriptorSets_7;
		public SpvReflectDescriptorSet DescriptorSets_8;
		public SpvReflectDescriptorSet DescriptorSets_9;
		public SpvReflectDescriptorSet DescriptorSets_10;
		public SpvReflectDescriptorSet DescriptorSets_11;
		public SpvReflectDescriptorSet DescriptorSets_12;
		public SpvReflectDescriptorSet DescriptorSets_13;
		public SpvReflectDescriptorSet DescriptorSets_14;
		public SpvReflectDescriptorSet DescriptorSets_15;
		public SpvReflectDescriptorSet DescriptorSets_16;
		public SpvReflectDescriptorSet DescriptorSets_17;
		public SpvReflectDescriptorSet DescriptorSets_18;
		public SpvReflectDescriptorSet DescriptorSets_19;
		public SpvReflectDescriptorSet DescriptorSets_20;
		public SpvReflectDescriptorSet DescriptorSets_21;
		public SpvReflectDescriptorSet DescriptorSets_22;
		public SpvReflectDescriptorSet DescriptorSets_23;
		public SpvReflectDescriptorSet DescriptorSets_24;
		public SpvReflectDescriptorSet DescriptorSets_25;
		public SpvReflectDescriptorSet DescriptorSets_26;
		public SpvReflectDescriptorSet DescriptorSets_27;
		public SpvReflectDescriptorSet DescriptorSets_28;
		public SpvReflectDescriptorSet DescriptorSets_29;
		public SpvReflectDescriptorSet DescriptorSets_30;
		public SpvReflectDescriptorSet DescriptorSets_31;
		public SpvReflectDescriptorSet DescriptorSets_32;
		public SpvReflectDescriptorSet DescriptorSets_33;
		public SpvReflectDescriptorSet DescriptorSets_34;
		public SpvReflectDescriptorSet DescriptorSets_35;
		public SpvReflectDescriptorSet DescriptorSets_36;
		public SpvReflectDescriptorSet DescriptorSets_37;
		public SpvReflectDescriptorSet DescriptorSets_38;
		public SpvReflectDescriptorSet DescriptorSets_39;
		public SpvReflectDescriptorSet DescriptorSets_40;
		public SpvReflectDescriptorSet DescriptorSets_41;
		public SpvReflectDescriptorSet DescriptorSets_42;
		public SpvReflectDescriptorSet DescriptorSets_43;
		public SpvReflectDescriptorSet DescriptorSets_44;
		public SpvReflectDescriptorSet DescriptorSets_45;
		public SpvReflectDescriptorSet DescriptorSets_46;
		public SpvReflectDescriptorSet DescriptorSets_47;
		public SpvReflectDescriptorSet DescriptorSets_48;
		public SpvReflectDescriptorSet DescriptorSets_49;
		public SpvReflectDescriptorSet DescriptorSets_50;
		public SpvReflectDescriptorSet DescriptorSets_51;
		public SpvReflectDescriptorSet DescriptorSets_52;
		public SpvReflectDescriptorSet DescriptorSets_53;
		public SpvReflectDescriptorSet DescriptorSets_54;
		public SpvReflectDescriptorSet DescriptorSets_55;
		public SpvReflectDescriptorSet DescriptorSets_56;
		public SpvReflectDescriptorSet DescriptorSets_57;
		public SpvReflectDescriptorSet DescriptorSets_58;
		public SpvReflectDescriptorSet DescriptorSets_59;
		public SpvReflectDescriptorSet DescriptorSets_60;
		public SpvReflectDescriptorSet DescriptorSets_61;
		public SpvReflectDescriptorSet DescriptorSets_62;
		public SpvReflectDescriptorSet DescriptorSets_63;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "input_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "input_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")]
		public unsafe SpvReflectInterfaceVariable** InputVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "output_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "output_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable**")]
		public unsafe SpvReflectInterfaceVariable** OutputVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_variable_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InterfaceVariableCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_variables")]
		[NativeName(NativeNameType.Type, "SpvReflectInterfaceVariable*")]
		public unsafe SpvReflectInterfaceVariable* InterfaceVariables;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "push_constant_block_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PushConstantBlockCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "push_constant_blocks")]
		[NativeName(NativeNameType.Type, "SpvReflectBlockVariable*")]
		public unsafe SpvReflectBlockVariable* PushConstantBlocks;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_constant_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpecConstantCount;

		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "spec_constants")]
		[NativeName(NativeNameType.Type, "SpvReflectSpecializationConstant*")]
		public unsafe SpvReflectSpecializationConstant* SpecConstants;

		[NativeName(NativeNameType.Field, "_internal")]
		[NativeName(NativeNameType.Type, "Internal*")]
		public unsafe ShaderModuleInternal* Internal;

		public unsafe SpvReflectShaderModule(SpvReflectGenerator generator = default, byte* entryPointName = default, uint entryPointId = default, uint entryPointCount = default, SpvReflectEntryPoint* entryPoints = default, SpvSourceLanguage sourceLanguage = default, uint sourceLanguageVersion = default, byte* sourceFile = default, byte* sourceSource = default, uint capabilityCount = default, SpvReflectCapability* capabilities = default, SpvExecutionModel spirvExecutionModel = default, SpvReflectShaderStageFlagBits shaderStage = default, uint descriptorBindingCount = default, SpvReflectDescriptorBinding* descriptorBindings = default, uint descriptorSetCount = default, SpvReflectDescriptorSet* descriptorSets = default, uint inputVariableCount = default, SpvReflectInterfaceVariable** inputVariables = default, uint outputVariableCount = default, SpvReflectInterfaceVariable** outputVariables = default, uint interfaceVariableCount = default, SpvReflectInterfaceVariable* interfaceVariables = default, uint pushConstantBlockCount = default, SpvReflectBlockVariable* pushConstantBlocks = default, uint specConstantCount = default, SpvReflectSpecializationConstant* specConstants = default, ShaderModuleInternal* @internal = default)
		{
			Generator = generator;
			EntryPointName = entryPointName;
			EntryPointId = entryPointId;
			EntryPointCount = entryPointCount;
			EntryPoints = entryPoints;
			SourceLanguage = sourceLanguage;
			SourceLanguageVersion = sourceLanguageVersion;
			SourceFile = sourceFile;
			SourceSource = sourceSource;
			CapabilityCount = capabilityCount;
			Capabilities = capabilities;
			SpirvExecutionModel = spirvExecutionModel;
			ShaderStage = shaderStage;
			DescriptorBindingCount = descriptorBindingCount;
			DescriptorBindings = descriptorBindings;
			DescriptorSetCount = descriptorSetCount;
			if (descriptorSets != default)
			{
				DescriptorSets_0 = descriptorSets[0];
				DescriptorSets_1 = descriptorSets[1];
				DescriptorSets_2 = descriptorSets[2];
				DescriptorSets_3 = descriptorSets[3];
				DescriptorSets_4 = descriptorSets[4];
				DescriptorSets_5 = descriptorSets[5];
				DescriptorSets_6 = descriptorSets[6];
				DescriptorSets_7 = descriptorSets[7];
				DescriptorSets_8 = descriptorSets[8];
				DescriptorSets_9 = descriptorSets[9];
				DescriptorSets_10 = descriptorSets[10];
				DescriptorSets_11 = descriptorSets[11];
				DescriptorSets_12 = descriptorSets[12];
				DescriptorSets_13 = descriptorSets[13];
				DescriptorSets_14 = descriptorSets[14];
				DescriptorSets_15 = descriptorSets[15];
				DescriptorSets_16 = descriptorSets[16];
				DescriptorSets_17 = descriptorSets[17];
				DescriptorSets_18 = descriptorSets[18];
				DescriptorSets_19 = descriptorSets[19];
				DescriptorSets_20 = descriptorSets[20];
				DescriptorSets_21 = descriptorSets[21];
				DescriptorSets_22 = descriptorSets[22];
				DescriptorSets_23 = descriptorSets[23];
				DescriptorSets_24 = descriptorSets[24];
				DescriptorSets_25 = descriptorSets[25];
				DescriptorSets_26 = descriptorSets[26];
				DescriptorSets_27 = descriptorSets[27];
				DescriptorSets_28 = descriptorSets[28];
				DescriptorSets_29 = descriptorSets[29];
				DescriptorSets_30 = descriptorSets[30];
				DescriptorSets_31 = descriptorSets[31];
				DescriptorSets_32 = descriptorSets[32];
				DescriptorSets_33 = descriptorSets[33];
				DescriptorSets_34 = descriptorSets[34];
				DescriptorSets_35 = descriptorSets[35];
				DescriptorSets_36 = descriptorSets[36];
				DescriptorSets_37 = descriptorSets[37];
				DescriptorSets_38 = descriptorSets[38];
				DescriptorSets_39 = descriptorSets[39];
				DescriptorSets_40 = descriptorSets[40];
				DescriptorSets_41 = descriptorSets[41];
				DescriptorSets_42 = descriptorSets[42];
				DescriptorSets_43 = descriptorSets[43];
				DescriptorSets_44 = descriptorSets[44];
				DescriptorSets_45 = descriptorSets[45];
				DescriptorSets_46 = descriptorSets[46];
				DescriptorSets_47 = descriptorSets[47];
				DescriptorSets_48 = descriptorSets[48];
				DescriptorSets_49 = descriptorSets[49];
				DescriptorSets_50 = descriptorSets[50];
				DescriptorSets_51 = descriptorSets[51];
				DescriptorSets_52 = descriptorSets[52];
				DescriptorSets_53 = descriptorSets[53];
				DescriptorSets_54 = descriptorSets[54];
				DescriptorSets_55 = descriptorSets[55];
				DescriptorSets_56 = descriptorSets[56];
				DescriptorSets_57 = descriptorSets[57];
				DescriptorSets_58 = descriptorSets[58];
				DescriptorSets_59 = descriptorSets[59];
				DescriptorSets_60 = descriptorSets[60];
				DescriptorSets_61 = descriptorSets[61];
				DescriptorSets_62 = descriptorSets[62];
				DescriptorSets_63 = descriptorSets[63];
			}
			InputVariableCount = inputVariableCount;
			InputVariables = inputVariables;
			OutputVariableCount = outputVariableCount;
			OutputVariables = outputVariables;
			InterfaceVariableCount = interfaceVariableCount;
			InterfaceVariables = interfaceVariables;
			PushConstantBlockCount = pushConstantBlockCount;
			PushConstantBlocks = pushConstantBlocks;
			SpecConstantCount = specConstantCount;
			SpecConstants = specConstants;
			Internal = @internal;
		}

		public unsafe SpvReflectShaderModule(SpvReflectGenerator generator = default, byte* entryPointName = default, uint entryPointId = default, uint entryPointCount = default, SpvReflectEntryPoint* entryPoints = default, SpvSourceLanguage sourceLanguage = default, uint sourceLanguageVersion = default, byte* sourceFile = default, byte* sourceSource = default, uint capabilityCount = default, SpvReflectCapability* capabilities = default, SpvExecutionModel spirvExecutionModel = default, SpvReflectShaderStageFlagBits shaderStage = default, uint descriptorBindingCount = default, SpvReflectDescriptorBinding* descriptorBindings = default, uint descriptorSetCount = default, Span<SpvReflectDescriptorSet> descriptorSets = default, uint inputVariableCount = default, SpvReflectInterfaceVariable** inputVariables = default, uint outputVariableCount = default, SpvReflectInterfaceVariable** outputVariables = default, uint interfaceVariableCount = default, SpvReflectInterfaceVariable* interfaceVariables = default, uint pushConstantBlockCount = default, SpvReflectBlockVariable* pushConstantBlocks = default, uint specConstantCount = default, SpvReflectSpecializationConstant* specConstants = default, ShaderModuleInternal* @internal = default)
		{
			Generator = generator;
			EntryPointName = entryPointName;
			EntryPointId = entryPointId;
			EntryPointCount = entryPointCount;
			EntryPoints = entryPoints;
			SourceLanguage = sourceLanguage;
			SourceLanguageVersion = sourceLanguageVersion;
			SourceFile = sourceFile;
			SourceSource = sourceSource;
			CapabilityCount = capabilityCount;
			Capabilities = capabilities;
			SpirvExecutionModel = spirvExecutionModel;
			ShaderStage = shaderStage;
			DescriptorBindingCount = descriptorBindingCount;
			DescriptorBindings = descriptorBindings;
			DescriptorSetCount = descriptorSetCount;
			if (descriptorSets != default)
			{
				DescriptorSets_0 = descriptorSets[0];
				DescriptorSets_1 = descriptorSets[1];
				DescriptorSets_2 = descriptorSets[2];
				DescriptorSets_3 = descriptorSets[3];
				DescriptorSets_4 = descriptorSets[4];
				DescriptorSets_5 = descriptorSets[5];
				DescriptorSets_6 = descriptorSets[6];
				DescriptorSets_7 = descriptorSets[7];
				DescriptorSets_8 = descriptorSets[8];
				DescriptorSets_9 = descriptorSets[9];
				DescriptorSets_10 = descriptorSets[10];
				DescriptorSets_11 = descriptorSets[11];
				DescriptorSets_12 = descriptorSets[12];
				DescriptorSets_13 = descriptorSets[13];
				DescriptorSets_14 = descriptorSets[14];
				DescriptorSets_15 = descriptorSets[15];
				DescriptorSets_16 = descriptorSets[16];
				DescriptorSets_17 = descriptorSets[17];
				DescriptorSets_18 = descriptorSets[18];
				DescriptorSets_19 = descriptorSets[19];
				DescriptorSets_20 = descriptorSets[20];
				DescriptorSets_21 = descriptorSets[21];
				DescriptorSets_22 = descriptorSets[22];
				DescriptorSets_23 = descriptorSets[23];
				DescriptorSets_24 = descriptorSets[24];
				DescriptorSets_25 = descriptorSets[25];
				DescriptorSets_26 = descriptorSets[26];
				DescriptorSets_27 = descriptorSets[27];
				DescriptorSets_28 = descriptorSets[28];
				DescriptorSets_29 = descriptorSets[29];
				DescriptorSets_30 = descriptorSets[30];
				DescriptorSets_31 = descriptorSets[31];
				DescriptorSets_32 = descriptorSets[32];
				DescriptorSets_33 = descriptorSets[33];
				DescriptorSets_34 = descriptorSets[34];
				DescriptorSets_35 = descriptorSets[35];
				DescriptorSets_36 = descriptorSets[36];
				DescriptorSets_37 = descriptorSets[37];
				DescriptorSets_38 = descriptorSets[38];
				DescriptorSets_39 = descriptorSets[39];
				DescriptorSets_40 = descriptorSets[40];
				DescriptorSets_41 = descriptorSets[41];
				DescriptorSets_42 = descriptorSets[42];
				DescriptorSets_43 = descriptorSets[43];
				DescriptorSets_44 = descriptorSets[44];
				DescriptorSets_45 = descriptorSets[45];
				DescriptorSets_46 = descriptorSets[46];
				DescriptorSets_47 = descriptorSets[47];
				DescriptorSets_48 = descriptorSets[48];
				DescriptorSets_49 = descriptorSets[49];
				DescriptorSets_50 = descriptorSets[50];
				DescriptorSets_51 = descriptorSets[51];
				DescriptorSets_52 = descriptorSets[52];
				DescriptorSets_53 = descriptorSets[53];
				DescriptorSets_54 = descriptorSets[54];
				DescriptorSets_55 = descriptorSets[55];
				DescriptorSets_56 = descriptorSets[56];
				DescriptorSets_57 = descriptorSets[57];
				DescriptorSets_58 = descriptorSets[58];
				DescriptorSets_59 = descriptorSets[59];
				DescriptorSets_60 = descriptorSets[60];
				DescriptorSets_61 = descriptorSets[61];
				DescriptorSets_62 = descriptorSets[62];
				DescriptorSets_63 = descriptorSets[63];
			}
			InputVariableCount = inputVariableCount;
			InputVariables = inputVariables;
			OutputVariableCount = outputVariableCount;
			OutputVariables = outputVariables;
			InterfaceVariableCount = interfaceVariableCount;
			InterfaceVariables = interfaceVariables;
			PushConstantBlockCount = pushConstantBlockCount;
			PushConstantBlocks = pushConstantBlocks;
			SpecConstantCount = specConstantCount;
			SpecConstants = specConstants;
			Internal = @internal;
		}


		/// <summary>
		/// Uses value(s) from first entry point<br/>
		/// </summary>
		public unsafe Span<SpvReflectDescriptorSet> DescriptorSets
		
		{
			get
			{
				fixed (SpvReflectDescriptorSet* p = &this.DescriptorSets_0)
				{
					return new Span<SpvReflectDescriptorSet>(p, 64);
				}
			}
		}
	}

}
