// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace HexaEngine.Shaderc
{
	public static unsafe class Extensions
	{
		/// <summary>		/// Releases the resources held by the shaderc_compiler_t.<br/>		/// After this call it is invalid to make any future calls to functions<br/>		/// involving this shaderc_compiler_t.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compiler_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Release(this ShadercCompiler unknown0)
		{
			Shaderc.ShadercCompilerReleaseNative(unknown0);
		}

		/// <summary>		/// Releases the compilation options. It is invalid to use the given<br/>		/// shaderc_compile_options_t object in any future calls. It is safe to pass<br/>		/// NULL to this function, and doing such will have no effect.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Release(this ShadercCompileOptions oPTIONS)
		{
			Shaderc.ShadercCompileOptionsReleaseNative(oPTIONS);
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, nAME, nameLength, vALUE, valueLength);
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			fixed (byte* pnAME = &nAME)
			{
				Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, (byte*)pnAME, nameLength, vALUE, valueLength);
			}
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (nAME != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(nAME);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(nAME, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, pStr0, nameLength, vALUE, valueLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			fixed (byte* pvALUE = &vALUE)
			{
				Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, nAME, nameLength, (byte*)pvALUE, valueLength);
			}
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (vALUE != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(vALUE);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(vALUE, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, nAME, nameLength, pStr0, valueLength);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			fixed (byte* pnAME = &nAME)
			{
				fixed (byte* pvALUE = &vALUE)
				{
					Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, (byte*)pnAME, nameLength, (byte*)pvALUE, valueLength);
				}
			}
		}

		/// <summary>		/// Adds a predefined macro to the compilation options. This has the same<br/>		/// effect as passing -Dname=value to the command-line compiler.  If value<br/>		/// is NULL, it has the same effect as passing -Dname to the command-line<br/>		/// compiler. If a macro definition with the same name has previously been<br/>		/// added, the value is replaced with the new value. The macro name and<br/>		/// value are passed in with char pointers, which point to their data, and<br/>		/// the lengths of their data. The strings that the name and value pointers<br/>		/// point to must remain valid for the duration of the call, but can be<br/>		/// modified or deleted after this function has returned. In case of adding<br/>		/// a valueless macro, the value argument should be a null pointer or the<br/>		/// value_length should be 0u.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_add_macro_definition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMacroDefinition(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string nAME, [NativeName(NativeNameType.Param, "name_length")] [NativeName(NativeNameType.Type, "size_t")] nuint nameLength, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string vALUE, [NativeName(NativeNameType.Param, "value_length")] [NativeName(NativeNameType.Type, "size_t")] nuint valueLength)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (nAME != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(nAME);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(nAME, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (vALUE != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(vALUE);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(vALUE, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsAddMacroDefinitionNative(oPTIONS, pStr0, nameLength, pStr1, valueLength);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets the source language.  The default is GLSL.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_source_language")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSourceLanguage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "shaderc_source_language")] ShadercSourceLanguage lANG)
		{
			Shaderc.ShadercCompileOptionsSetSourceLanguageNative(oPTIONS, lANG);
		}

		/// <summary>		/// Sets the compiler mode to generate debug information in the output.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_generate_debug_info")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetGenerateDebugInfo(this ShadercCompileOptions oPTIONS)
		{
			Shaderc.ShadercCompileOptionsSetGenerateDebugInfoNative(oPTIONS);
		}

		/// <summary>		/// Sets the compiler optimization level to the given level. Only the last one<br/>		/// takes effect if multiple calls of this function exist.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_optimization_level")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetOptimizationLevel(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "shaderc_optimization_level")] ShadercOptimizationLevel lEVEL)
		{
			Shaderc.ShadercCompileOptionsSetOptimizationLevelNative(oPTIONS, lEVEL);
		}

		/// <summary>		/// Forces the GLSL language version and profile to a given pair. The version<br/>		/// number is the same as would appear in the #version annotation in the source.<br/>		/// Version and profile specified here overrides the #version annotation in the<br/>		/// source. Use profile: 'shaderc_profile_none' for GLSL versions that do not<br/>		/// define profiles, e.g. versions below 150.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_forced_version_profile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetForcedVersionProfile(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "int")] int vERSION, [NativeName(NativeNameType.Param, "profile")] [NativeName(NativeNameType.Type, "shaderc_profile")] ShadercProfile pROFILE)
		{
			Shaderc.ShadercCompileOptionsSetForcedVersionProfileNative(oPTIONS, vERSION, pROFILE);
		}

		/// <summary>		/// Sets includer callback functions.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_include_callbacks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetIncludeCallbacks(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "resolver")] [NativeName(NativeNameType.Type, "shaderc_include_resolve_fn")] ShadercIncludeResolveFn rESOLVER, [NativeName(NativeNameType.Param, "result_releaser")] [NativeName(NativeNameType.Type, "shaderc_include_result_release_fn")] ShadercIncludeResultReleaseFn resultReleaser, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			Shaderc.ShadercCompileOptionsSetIncludeCallbacksNative(oPTIONS, rESOLVER, resultReleaser, userData);
		}

		/// <summary>		/// Sets the compiler mode to suppress warnings, overriding warnings-as-errors<br/>		/// mode. When both suppress-warnings and warnings-as-errors modes are<br/>		/// turned on, warning messages will be inhibited, and will not be emitted<br/>		/// as error messages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_suppress_warnings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetSuppressWarnings(this ShadercCompileOptions oPTIONS)
		{
			Shaderc.ShadercCompileOptionsSetSuppressWarningsNative(oPTIONS);
		}

		/// <summary>		/// Sets the target shader environment, affecting which warnings or errors will<br/>		/// be issued.  The version will be for distinguishing between different versions<br/>		/// of the target environment.  The version value should be either 0 or<br/>		/// a value listed in shaderc_env_version.  The 0 value maps to Vulkan 1.0 if<br/>		/// |target| is Vulkan, and it maps to OpenGL 4.5 if |target| is OpenGL.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_target_env")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTargetEnv(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "shaderc_target_env")] ShadercTargetEnv tARGET, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "uint32_t")] uint vERSION)
		{
			Shaderc.ShadercCompileOptionsSetTargetEnvNative(oPTIONS, tARGET, vERSION);
		}

		/// <summary>		/// Sets the target SPIR-V version. The generated module will use this version<br/>		/// of SPIR-V.  Each target environment determines what versions of SPIR-V<br/>		/// it can consume.  Defaults to the highest version of SPIR-V 1.0 which is<br/>		/// required to be supported by the target environment.  E.g. Default to SPIR-V<br/>		/// 1.0 for Vulkan 1.0 and SPIR-V 1.3 for Vulkan 1.1.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_target_spirv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTargetSpirv(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "shaderc_spirv_version")] ShadercSpirvVersion vERSION)
		{
			Shaderc.ShadercCompileOptionsSetTargetSpirvNative(oPTIONS, vERSION);
		}

		/// <summary>		/// Sets the compiler mode to treat all warnings as errors. Note the<br/>		/// suppress-warnings mode overrides this option, i.e. if both<br/>		/// warning-as-errors and suppress-warnings modes are set, warnings will not<br/>		/// be emitted as error messages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_warnings_as_errors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWarningsAsErrors(this ShadercCompileOptions oPTIONS)
		{
			Shaderc.ShadercCompileOptionsSetWarningsAsErrorsNative(oPTIONS);
		}

		/// <summary>		/// Sets a resource limit.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_limit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetLimit(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "limit")] [NativeName(NativeNameType.Type, "shaderc_limit")] ShadercLimit lIMIT, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int vALUE)
		{
			Shaderc.ShadercCompileOptionsSetLimitNative(oPTIONS, lIMIT, vALUE);
		}

		/// <summary>		/// Sets whether the compiler should automatically assign bindings to uniforms<br/>		/// that aren't already explicitly bound in the shader source.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_auto_bind_uniforms")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAutoBindUniforms(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "auto_bind")] [NativeName(NativeNameType.Type, "bool")] bool autoBind)
		{
			Shaderc.ShadercCompileOptionsSetAutoBindUniformsNative(oPTIONS, autoBind ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler should automatically remove sampler variables<br/>		/// and convert image variables to combined image-sampler variables.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_auto_combined_image_sampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAutoCombinedImageSampler(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "upgrade")] [NativeName(NativeNameType.Type, "bool")] bool uPGRADE)
		{
			Shaderc.ShadercCompileOptionsSetAutoCombinedImageSamplerNative(oPTIONS, uPGRADE ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler should use HLSL IO mapping rules for bindings.<br/>		/// Defaults to false.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_io_mapping")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslIoMapping(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "hlsl_iomap")] [NativeName(NativeNameType.Type, "bool")] bool hlslIomap)
		{
			Shaderc.ShadercCompileOptionsSetHlslIoMappingNative(oPTIONS, hlslIomap ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler should determine block member offsets using HLSL<br/>		/// packing rules instead of standard GLSL rules.  Defaults to false.  Only<br/>		/// affects GLSL compilation.  HLSL rules are always used when compiling HLSL.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_offsets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslOffsets(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "hlsl_offsets")] [NativeName(NativeNameType.Type, "bool")] bool hlslOffsets)
		{
			Shaderc.ShadercCompileOptionsSetHlslOffsetsNative(oPTIONS, hlslOffsets ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets the base binding number used for for a uniform resource type when<br/>		/// automatically assigning bindings.  For GLSL compilation, sets the lowest<br/>		/// automatically assigned number.  For HLSL compilation, the regsiter number<br/>		/// assigned to the resource is added to this specified base.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_binding_base")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBindingBase(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "kind")] [NativeName(NativeNameType.Type, "shaderc_uniform_kind")] ShadercUniformKind kIND, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "uint32_t")] uint baseValue)
		{
			Shaderc.ShadercCompileOptionsSetBindingBaseNative(oPTIONS, kIND, baseValue);
		}

		/// <summary>		/// Like shaderc_compile_options_set_binding_base, but only takes effect when<br/>		/// compiling a given shader stage.  The stage is assumed to be one of vertex,<br/>		/// fragment, tessellation evaluation, tesselation control, geometry, or compute.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_binding_base_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBindingBaseForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "kind")] [NativeName(NativeNameType.Type, "shaderc_uniform_kind")] ShadercUniformKind kIND, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "uint32_t")] uint baseValue)
		{
			Shaderc.ShadercCompileOptionsSetBindingBaseForStageNative(oPTIONS, shaderKind, kIND, baseValue);
		}

		/// <summary>		/// Sets whether the compiler should preserve all bindings, even when those<br/>		/// bindings are not used.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_preserve_bindings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetPreserveBindings(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "preserve_bindings")] [NativeName(NativeNameType.Type, "bool")] bool preserveBindings)
		{
			Shaderc.ShadercCompileOptionsSetPreserveBindingsNative(oPTIONS, preserveBindings ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler should automatically assign locations to<br/>		/// uniform variables that don't have explicit locations in the shader source.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_auto_map_locations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAutoMapLocations(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "auto_map")] [NativeName(NativeNameType.Type, "bool")] bool autoMap)
		{
			Shaderc.ShadercCompileOptionsSetAutoMapLocationsNative(oPTIONS, autoMap ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, sET, bINDING);
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, (byte*)prEG, sET, bINDING);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, pStr0, sET, bINDING);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* psET = &sET)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, (byte*)psET, bINDING);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sET != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sET);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sET, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, pStr0, bINDING);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* psET = &sET)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, (byte*)prEG, (byte*)psET, bINDING);
				}
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (sET != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(sET);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(sET, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, pStr0, pStr1, bINDING);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* pbINDING = &bINDING)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, sET, (byte*)pbINDING);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (bINDING != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(bINDING, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, sET, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* pbINDING = &bINDING)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, (byte*)prEG, sET, (byte*)pbINDING);
				}
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (bINDING != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(bINDING, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, pStr0, sET, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* psET = &sET)
			{
				fixed (byte* pbINDING = &bINDING)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, (byte*)psET, (byte*)pbINDING);
				}
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sET != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sET);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sET, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (bINDING != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(bINDING, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, rEG, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* psET = &sET)
				{
					fixed (byte* pbINDING = &bINDING)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, (byte*)prEG, (byte*)psET, (byte*)pbINDING);
					}
				}
			}
		}

		/// <summary>		/// Sets a descriptor set and binding for an HLSL register in the given stage.<br/>		/// This method keeps a copy of the string data.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBindingForStage(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "shader_kind")] [NativeName(NativeNameType.Type, "shaderc_shader_kind")] ShadercShaderKind shaderKind, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (sET != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(sET);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(sET, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (bINDING != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(bINDING, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingForStageNative(oPTIONS, shaderKind, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, sET, bINDING);
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, (byte*)prEG, sET, bINDING);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, pStr0, sET, bINDING);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* psET = &sET)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, (byte*)psET, bINDING);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sET != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sET);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sET, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, pStr0, bINDING);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* psET = &sET)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, (byte*)prEG, (byte*)psET, bINDING);
				}
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] byte* bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (sET != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(sET);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(sET, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, pStr0, pStr1, bINDING);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* pbINDING = &bINDING)
			{
				Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, sET, (byte*)pbINDING);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (bINDING != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(bINDING, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, sET, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* pbINDING = &bINDING)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, (byte*)prEG, sET, (byte*)pbINDING);
				}
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] byte* sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (bINDING != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(bINDING, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, pStr0, sET, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* psET = &sET)
			{
				fixed (byte* pbINDING = &bINDING)
				{
					Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, (byte*)psET, (byte*)pbINDING);
				}
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] byte* rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sET != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sET);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sET, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (bINDING != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(bINDING, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, rEG, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] ref byte rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] ref byte sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] ref byte bINDING)
		{
			fixed (byte* prEG = &rEG)
			{
				fixed (byte* psET = &sET)
				{
					fixed (byte* pbINDING = &bINDING)
					{
						Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, (byte*)prEG, (byte*)psET, (byte*)pbINDING);
					}
				}
			}
		}

		/// <summary>		/// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,<br/>		/// but affects all shader stages.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_register_set_and_binding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslRegisterSetAndBinding(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "reg")] [NativeName(NativeNameType.Type, "const char*")] string rEG, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "const char*")] string sET, [NativeName(NativeNameType.Param, "binding")] [NativeName(NativeNameType.Type, "const char*")] string bINDING)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (rEG != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(rEG);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(rEG, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (sET != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(sET);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(sET, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (bINDING != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(bINDING);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(bINDING, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			Shaderc.ShadercCompileOptionsSetHlslRegisterSetAndBindingNative(oPTIONS, pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>		/// Sets whether the compiler should enable extension<br/>		/// SPV_GOOGLE_hlsl_functionality1.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_functionality1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlslFunctionality1(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool eNABLE)
		{
			Shaderc.ShadercCompileOptionsSetHlslFunctionality1Native(oPTIONS, eNABLE ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether 16-bit types are supported in HLSL or not.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_hlsl_16bit_types")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHlsl16BitTypes(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool eNABLE)
		{
			Shaderc.ShadercCompileOptionsSetHlsl16BitTypesNative(oPTIONS, eNABLE ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler should invert position.Y output in vertex shader.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_invert_y")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetInvertY(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool eNABLE)
		{
			Shaderc.ShadercCompileOptionsSetInvertYNative(oPTIONS, eNABLE ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Sets whether the compiler generates code for max and min builtins which,<br/>		/// if given a NaN operand, will return the other operand. Similarly, the clamp<br/>		/// builtin will favour the non-NaN operands, as if clamp were implemented<br/>		/// as a composition of max and min.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_compile_options_set_nan_clamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNanClamp(this ShadercCompileOptions oPTIONS, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "bool")] bool eNABLE)
		{
			Shaderc.ShadercCompileOptionsSetNanClampNative(oPTIONS, eNABLE ? (byte)1 : (byte)0);
		}

		/// <summary>		/// Releases the resources held by the result object. It is invalid to use the<br/>		/// result object for any further operations.<br/>		/// </summary>		[NativeName(NativeNameType.Func, "shaderc_result_release")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Release(this ShadercCompilationResult rESULT)
		{
			Shaderc.ShadercResultReleaseNative(rESULT);
		}

	}
}
