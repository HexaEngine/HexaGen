namespace HexaGen
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    public partial class CsCodeGeneratorConfig
    {
        public static CsCodeGeneratorConfig Default { get; } = new CsCodeGeneratorConfig()
        {
            TypeMappings = new()
            {
                {"uint8_t", "byte"},
                {"uint16_t", "ushort"},
                {"uint32_t", "uint"},
                {"uint64_t", "ulong"},
                {"int8_t", "sbyte"},
                {"int32_t", "int"},
                {"int16_t", "short"},
                {"int64_t", "long"},
                {"int64_t*", "long*"},
                {"unsigned char", "byte"},
                {"signed char", "sbyte"},
                {"char", "byte"},
                {"size_t", "nuint"},
                {"bool", "int"},
                {"BOOL", "int"},
                {"BYTE", "byte"},
                {"Uint8", "byte"},
                {"Uint16", "ushort"},
                {"Uint32", "uint"},
                {"Uint64", "ulong"},
                {"Sint8", "sbyte"},
                {"Sint16", "short"},
                {"Sint32", "int"},
                {"Sint64", "long"},
                {"UCHAR", "byte"},
                {"WCHAR", "char"},
                {"UINT8", "byte"},
                {"USHORT", "ushort"},
                {"UINT16", "ushort"},
                {"UINT", "uint"},
                {"UINT32", "uint"},
                {"LONG", "int"},
                {"ULONG", "uint"},
                {"DWORD", "uint"},
                {"WORD", "short"},
                {"INT", "int"},
                {"INT32", "int"},
                {"ULONGLONG", "ulong"},
                {"UINT64", "ulong"},
                {"LONGLONG", "long"},
                {"LARGE_INTEGER", "long"},
                {"FLOAT", "float"},
                {"LPCSTR", "byte*"},
                {"LPCWSTR", "char*"},
                {"LPSTR", "byte*"},
                {"LPWSTR", "char*"},
                {"BSTR", "void*"},
                {"GUID", "Guid"},
                {"HWND", "nint"},
                {"LPCVOID", "void*"},
                {"LPVOID", "void*"},
                {"SIZE", "nint"},
                {"SIZE_T", "nuint"},
                {"LUID", "Luid"},
                {"IID", "Guid"},
                {"RECT", "Rect32"},
                {"POINT", "Point32"},
                {"HRESULT", "HResult" },
                {"WPARAM", "nuint"},
                {"LPARAM", "nint"},
                {"HDC", "nint"},
                {"HINSTANCE", "nint"},
                {"LRESULT", "nint" },
                {"HMONITOR", "nint" },
            },
            Keywords = new()
            {
                "abstract",
                "as",
                "base",
                "bool",
                "break",
                "byte",
                "case",
                "catch",
                "char",
                "checked",
                "class",
                "const",
                "continue",
                "decimal",
                "default",
                "delegate",
                "do",
                "double",
                "else",
                "enum",
                "event",
                "explicit",
                "extern",
                "false",
                "finally",
                "fixed",
                "float",
                "for",
                "foreach",
                "goto",
                "if",
                "implicit",
                "in",
                "int",
                "interface",
                "internal",
                "is",
                "lock",
                "long",
                "namespace",
                "new",
                "null",
                "object",
                "operator",
                "out",
                "override",
                "params",
                "private",
                "protected",
                "public",
                "readonly",
                "ref",
                "return",
                "sbyte",
                "sealed",
                "short",
                "sizeof",
                "stackalloc",
                "static",
                "string",
                "struct",
                "switch",
                "this",
                "throw",
                "true",
                "try",
                "typeof",
                "uint",
                "ulong",
                "unchecked",
                "unsafe",
                "ushort",
                "using",
                "using static",
                "virtual",
                "void",
                "volatile",
                "while",
                "yield"
            },
            IgnoredTypes = new()
            {
                "HWND",
                "nint"
            },
            IgnoredTypedefs = new()
            {
                "HWND",
                "nint"
            },
            VaryingTypes = ["ReadOnlySpan<byte>", "string", "ref string"]
        };
    }
}