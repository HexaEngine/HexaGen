// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{

	[NativeName(NativeNameType.StructOrClass, "daxa_CommandLabelInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaCommandLabelInfo
	{
		[NativeName(NativeNameType.Field, "label_color")]
		[NativeName(NativeNameType.Type, "daxa_f32vec4")]
		public Vector4 LabelColor;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "daxa_SmallString")]
		public DaxaSmallString Name;

		public unsafe DaxaCommandLabelInfo(Vector4 labelColor = default, DaxaSmallString name = default)
		{
			LabelColor = labelColor;
			Name = name;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_ResetEventInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaResetEventInfo
	{
		[NativeName(NativeNameType.Field, "barrier")]
		[NativeName(NativeNameType.Type, "daxa_Event*")]
		public unsafe DaxaEvent* Barrier;
		[NativeName(NativeNameType.Field, "stage_masks")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags")]
		public uint StageMasks;

		public unsafe DaxaResetEventInfo(DaxaEvent* barrier = default, uint stageMasks = default)
		{
			Barrier = barrier;
			StageMasks = stageMasks;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_DepthBiasInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaDepthBiasInfo
	{
		[NativeName(NativeNameType.Field, "constant_factor")]
		[NativeName(NativeNameType.Type, "float")]
		public float ConstantFactor;
		[NativeName(NativeNameType.Field, "clamp")]
		[NativeName(NativeNameType.Type, "float")]
		public float Clamp;
		[NativeName(NativeNameType.Field, "slope_factor")]
		[NativeName(NativeNameType.Type, "float")]
		public float SlopeFactor;

		public unsafe DaxaDepthBiasInfo(float constantFactor = default, float clamp = default, float slopeFactor = default)
		{
			ConstantFactor = constantFactor;
			Clamp = clamp;
			SlopeFactor = slopeFactor;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_SetIndexBufferInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaSetIndexBufferInfo
	{
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "daxa_BufferId")]
		public DaxaBufferId Buffer;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "index_type")]
		[NativeName(NativeNameType.Type, "VkIndexType")]
		public VkIndexType IndexType;

		public unsafe DaxaSetIndexBufferInfo(DaxaBufferId buffer = default, ulong offset = default, VkIndexType indexType = default)
		{
			Buffer = buffer;
			Offset = offset;
			IndexType = indexType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_BuildAccelerationStucturesInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaBuildAccelerationStucturesInfo
	{
		[NativeName(NativeNameType.Field, "tlas_build_infos")]
		[NativeName(NativeNameType.Type, "const daxa_TlasBuildInfo*")]
		public unsafe DaxaTlasBuildInfo* TlasBuildInfos;
		[NativeName(NativeNameType.Field, "tlas_build_info_count")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong TlasBuildInfoCount;
		[NativeName(NativeNameType.Field, "blas_build_infos")]
		[NativeName(NativeNameType.Type, "const daxa_BlasBuildInfo*")]
		public unsafe DaxaBlasBuildInfo* BlasBuildInfos;
		[NativeName(NativeNameType.Field, "blas_build_info_count")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong BlasBuildInfoCount;

		public unsafe DaxaBuildAccelerationStucturesInfo(DaxaTlasBuildInfo* tlasBuildInfos = default, ulong tlasBuildInfoCount = default, DaxaBlasBuildInfo* blasBuildInfos = default, ulong blasBuildInfoCount = default)
		{
			TlasBuildInfos = tlasBuildInfos;
			TlasBuildInfoCount = tlasBuildInfoCount;
			BlasBuildInfos = blasBuildInfos;
			BlasBuildInfoCount = blasBuildInfoCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_SwapchainInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaSwapchainInfo
	{
		[NativeName(NativeNameType.Field, "native_window")]
		[NativeName(NativeNameType.Type, "daxa_NativeWindowHandle")]
		public DaxaNativeWindowHandle NativeWindow;
		[NativeName(NativeNameType.Field, "native_window_platform")]
		[NativeName(NativeNameType.Type, "daxa_NativeWindowPlatform")]
		public DaxaNativeWindowPlatform NativeWindowPlatform;
		[NativeName(NativeNameType.Field, "surface_format_selector")]
		[NativeName(NativeNameType.Type, "int32_t (*)(VkFormat)*")]
		public unsafe void* SurfaceFormatSelector;
		[NativeName(NativeNameType.Field, "present_mode")]
		[NativeName(NativeNameType.Type, "VkPresentModeKHR")]
		public VkPresentModeKHR PresentMode;
		[NativeName(NativeNameType.Field, "present_operation")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagBitsKHR")]
		public VkSurfaceTransformFlagBitsKHR PresentOperation;
		[NativeName(NativeNameType.Field, "image_usage")]
		[NativeName(NativeNameType.Type, "daxa_ImageUsageFlags")]
		public uint ImageUsage;
		[NativeName(NativeNameType.Field, "max_allowed_frames_in_flight")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong MaxAllowedFramesInFlight;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "daxa_SmallString")]
		public DaxaSmallString Name;

		public unsafe DaxaSwapchainInfo(DaxaNativeWindowHandle nativeWindow = default, DaxaNativeWindowPlatform nativeWindowPlatform = default, delegate*<VkFormat, int> surfaceFormatSelector = default, VkPresentModeKHR presentMode = default, VkSurfaceTransformFlagBitsKHR presentOperation = default, uint imageUsage = default, ulong maxAllowedFramesInFlight = default, DaxaSmallString name = default)
		{
			NativeWindow = nativeWindow;
			NativeWindowPlatform = nativeWindowPlatform;
			SurfaceFormatSelector = (void*)surfaceFormatSelector;
			PresentMode = presentMode;
			PresentOperation = presentOperation;
			ImageUsage = imageUsage;
			MaxAllowedFramesInFlight = maxAllowedFramesInFlight;
			Name = name;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_DeviceLimits")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaDeviceLimits
	{
		[NativeName(NativeNameType.Field, "max_image_dimension1d")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension1d;
		[NativeName(NativeNameType.Field, "max_image_dimension2d")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension2d;
		[NativeName(NativeNameType.Field, "max_image_dimension3d")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimension3d;
		[NativeName(NativeNameType.Field, "max_image_dimension_cube")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageDimensionCube;
		[NativeName(NativeNameType.Field, "max_image_array_layers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageArrayLayers;
		[NativeName(NativeNameType.Field, "max_texel_buffer_elements")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelBufferElements;
		[NativeName(NativeNameType.Field, "max_uniform_buffer_range")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxUniformBufferRange;
		[NativeName(NativeNameType.Field, "max_storage_buffer_range")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStorageBufferRange;
		[NativeName(NativeNameType.Field, "max_push_constants_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPushConstantsSize;
		[NativeName(NativeNameType.Field, "max_memory_allocation_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMemoryAllocationCount;
		[NativeName(NativeNameType.Field, "max_sampler_allocation_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSamplerAllocationCount;
		[NativeName(NativeNameType.Field, "buffer_image_granularity")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong BufferImageGranularity;
		[NativeName(NativeNameType.Field, "sparse_address_space_size")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong SparseAddressSpaceSize;
		[NativeName(NativeNameType.Field, "max_bound_descriptor_sets")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxBoundDescriptorSets;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_samplers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorSamplers;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_uniform_buffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorUniformBuffers;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_storage_buffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorStorageBuffers;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_sampled_images")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorSampledImages;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_storage_images")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorStorageImages;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_input_attachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorInputAttachments;
		[NativeName(NativeNameType.Field, "max_per_stage_resources")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageResources;
		[NativeName(NativeNameType.Field, "max_descriptor_set_samplers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetSamplers;
		[NativeName(NativeNameType.Field, "max_descriptor_set_uniform_buffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUniformBuffers;
		[NativeName(NativeNameType.Field, "max_descriptor_set_uniform_buffers_dynamic")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUniformBuffersDynamic;
		[NativeName(NativeNameType.Field, "max_descriptor_set_storage_buffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageBuffers;
		[NativeName(NativeNameType.Field, "max_descriptor_set_storage_buffers_dynamic")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageBuffersDynamic;
		[NativeName(NativeNameType.Field, "max_descriptor_set_sampled_images")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetSampledImages;
		[NativeName(NativeNameType.Field, "max_descriptor_set_storage_images")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetStorageImages;
		[NativeName(NativeNameType.Field, "max_descriptor_set_input_attachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetInputAttachments;
		[NativeName(NativeNameType.Field, "max_vertex_input_attributes")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputAttributes;
		[NativeName(NativeNameType.Field, "max_vertex_input_bindings")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputBindings;
		[NativeName(NativeNameType.Field, "max_vertex_input_attribute_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputAttributeOffset;
		[NativeName(NativeNameType.Field, "max_vertex_input_binding_stride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexInputBindingStride;
		[NativeName(NativeNameType.Field, "max_vertex_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxVertexOutputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_generation_level")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationGenerationLevel;
		[NativeName(NativeNameType.Field, "max_tessellation_patch_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationPatchSize;
		[NativeName(NativeNameType.Field, "max_tessellation_control_per_vertex_input_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerVertexInputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_control_per_vertex_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerVertexOutputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_control_per_patch_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlPerPatchOutputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_control_total_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationControlTotalOutputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_evaluation_input_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationEvaluationInputComponents;
		[NativeName(NativeNameType.Field, "max_tessellation_evaluation_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTessellationEvaluationOutputComponents;
		[NativeName(NativeNameType.Field, "max_geometry_shader_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryShaderInvocations;
		[NativeName(NativeNameType.Field, "max_geometry_input_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryInputComponents;
		[NativeName(NativeNameType.Field, "max_geometry_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryOutputComponents;
		[NativeName(NativeNameType.Field, "max_geometry_output_vertices")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryOutputVertices;
		[NativeName(NativeNameType.Field, "max_geometry_total_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxGeometryTotalOutputComponents;
		[NativeName(NativeNameType.Field, "max_fragment_input_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentInputComponents;
		[NativeName(NativeNameType.Field, "max_fragment_output_attachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentOutputAttachments;
		[NativeName(NativeNameType.Field, "max_fragment_dual_src_attachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentDualSrcAttachments;
		[NativeName(NativeNameType.Field, "max_fragment_combined_output_resources")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentCombinedOutputResources;
		[NativeName(NativeNameType.Field, "max_compute_shared_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxComputeSharedMemorySize;
		[NativeName(NativeNameType.Field, "max_compute_work_group_count")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxComputeWorkGroupCount_0;
		public uint MaxComputeWorkGroupCount_1;
		public uint MaxComputeWorkGroupCount_2;
		[NativeName(NativeNameType.Field, "max_compute_work_group_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxComputeWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "max_compute_work_group_size")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxComputeWorkGroupSize_0;
		public uint MaxComputeWorkGroupSize_1;
		public uint MaxComputeWorkGroupSize_2;
		[NativeName(NativeNameType.Field, "sub_pixel_precision_bits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPixelPrecisionBits;
		[NativeName(NativeNameType.Field, "sub_texel_precision_bits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubTexelPrecisionBits;
		[NativeName(NativeNameType.Field, "mipmap_precision_bits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MipmapPrecisionBits;
		[NativeName(NativeNameType.Field, "max_draw_indexed_index_value")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDrawIndexedIndexValue;
		[NativeName(NativeNameType.Field, "max_draw_indirect_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDrawIndirectCount;
		[NativeName(NativeNameType.Field, "max_sampler_lod_bias")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxSamplerLodBias;
		[NativeName(NativeNameType.Field, "max_sampler_anisotropy")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxSamplerAnisotropy;
		[NativeName(NativeNameType.Field, "max_viewports")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxViewports;
		[NativeName(NativeNameType.Field, "max_viewport_dimensions")]
		[NativeName(NativeNameType.Type, "uint32_t[2]")]
		public uint MaxViewportDimensions_0;
		public uint MaxViewportDimensions_1;
		[NativeName(NativeNameType.Field, "viewport_bounds_range")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float ViewportBoundsRange_0;
		public float ViewportBoundsRange_1;
		[NativeName(NativeNameType.Field, "viewport_sub_pixel_bits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewportSubPixelBits;
		[NativeName(NativeNameType.Field, "min_memory_map_alignment")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong MinMemoryMapAlignment;
		[NativeName(NativeNameType.Field, "min_texel_buffer_offset_alignment")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MinTexelBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "min_uniform_buffer_offset_alignment")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MinUniformBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "min_storage_buffer_offset_alignment")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MinStorageBufferOffsetAlignment;
		[NativeName(NativeNameType.Field, "min_texel_offset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int MinTexelOffset;
		[NativeName(NativeNameType.Field, "max_texel_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelOffset;
		[NativeName(NativeNameType.Field, "min_texel_gather_offset")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int MinTexelGatherOffset;
		[NativeName(NativeNameType.Field, "max_texel_gather_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTexelGatherOffset;
		[NativeName(NativeNameType.Field, "min_interpolation_offset")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinInterpolationOffset;
		[NativeName(NativeNameType.Field, "max_interpolation_offset")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxInterpolationOffset;
		[NativeName(NativeNameType.Field, "sub_pixel_interpolation_offset_bits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPixelInterpolationOffsetBits;
		[NativeName(NativeNameType.Field, "max_framebuffer_width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferWidth;
		[NativeName(NativeNameType.Field, "max_framebuffer_height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferHeight;
		[NativeName(NativeNameType.Field, "max_framebuffer_layers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFramebufferLayers;
		[NativeName(NativeNameType.Field, "framebuffer_color_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FramebufferColorSampleCounts;
		[NativeName(NativeNameType.Field, "framebuffer_depth_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FramebufferDepthSampleCounts;
		[NativeName(NativeNameType.Field, "framebuffer_stencil_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FramebufferStencilSampleCounts;
		[NativeName(NativeNameType.Field, "framebuffer_no_attachments_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FramebufferNoAttachmentsSampleCounts;
		[NativeName(NativeNameType.Field, "max_color_attachments")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxColorAttachments;
		[NativeName(NativeNameType.Field, "sampled_image_color_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampledImageColorSampleCounts;
		[NativeName(NativeNameType.Field, "sampled_image_integer_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampledImageIntegerSampleCounts;
		[NativeName(NativeNameType.Field, "sampled_image_depth_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampledImageDepthSampleCounts;
		[NativeName(NativeNameType.Field, "sampled_image_stencil_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampledImageStencilSampleCounts;
		[NativeName(NativeNameType.Field, "storage_image_sample_counts")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StorageImageSampleCounts;
		[NativeName(NativeNameType.Field, "max_sample_mask_words")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSampleMaskWords;
		[NativeName(NativeNameType.Field, "timestamp_compute_and_graphics")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TimestampComputeAndGraphics;
		[NativeName(NativeNameType.Field, "timestamp_period")]
		[NativeName(NativeNameType.Type, "float")]
		public float TimestampPeriod;
		[NativeName(NativeNameType.Field, "max_clip_distances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxClipDistances;
		[NativeName(NativeNameType.Field, "max_cull_distances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxCullDistances;
		[NativeName(NativeNameType.Field, "max_combined_clip_and_cull_distances")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxCombinedClipAndCullDistances;
		[NativeName(NativeNameType.Field, "discrete_queue_priorities")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DiscreteQueuePriorities;
		[NativeName(NativeNameType.Field, "point_size_range")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float PointSizeRange_0;
		public float PointSizeRange_1;
		[NativeName(NativeNameType.Field, "line_width_range")]
		[NativeName(NativeNameType.Type, "float[2]")]
		public float LineWidthRange_0;
		public float LineWidthRange_1;
		[NativeName(NativeNameType.Field, "point_size_granularity")]
		[NativeName(NativeNameType.Type, "float")]
		public float PointSizeGranularity;
		[NativeName(NativeNameType.Field, "line_width_granularity")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineWidthGranularity;
		[NativeName(NativeNameType.Field, "strict_lines")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StrictLines;
		[NativeName(NativeNameType.Field, "standard_sample_locations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StandardSampleLocations;
		[NativeName(NativeNameType.Field, "optimal_buffer_copy_offset_alignment")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong OptimalBufferCopyOffsetAlignment;
		[NativeName(NativeNameType.Field, "optimal_buffer_copy_row_pitch_alignment")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong OptimalBufferCopyRowPitchAlignment;
		[NativeName(NativeNameType.Field, "non_coherent_atom_size")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong NonCoherentAtomSize;

		public unsafe DaxaDeviceLimits(uint maxImageDimension1d = default, uint maxImageDimension2d = default, uint maxImageDimension3d = default, uint maxImageDimensionCube = default, uint maxImageArrayLayers = default, uint maxTexelBufferElements = default, uint maxUniformBufferRange = default, uint maxStorageBufferRange = default, uint maxPushConstantsSize = default, uint maxMemoryAllocationCount = default, uint maxSamplerAllocationCount = default, ulong bufferImageGranularity = default, ulong sparseAddressSpaceSize = default, uint maxBoundDescriptorSets = default, uint maxPerStageDescriptorSamplers = default, uint maxPerStageDescriptorUniformBuffers = default, uint maxPerStageDescriptorStorageBuffers = default, uint maxPerStageDescriptorSampledImages = default, uint maxPerStageDescriptorStorageImages = default, uint maxPerStageDescriptorInputAttachments = default, uint maxPerStageResources = default, uint maxDescriptorSetSamplers = default, uint maxDescriptorSetUniformBuffers = default, uint maxDescriptorSetUniformBuffersDynamic = default, uint maxDescriptorSetStorageBuffers = default, uint maxDescriptorSetStorageBuffersDynamic = default, uint maxDescriptorSetSampledImages = default, uint maxDescriptorSetStorageImages = default, uint maxDescriptorSetInputAttachments = default, uint maxVertexInputAttributes = default, uint maxVertexInputBindings = default, uint maxVertexInputAttributeOffset = default, uint maxVertexInputBindingStride = default, uint maxVertexOutputComponents = default, uint maxTessellationGenerationLevel = default, uint maxTessellationPatchSize = default, uint maxTessellationControlPerVertexInputComponents = default, uint maxTessellationControlPerVertexOutputComponents = default, uint maxTessellationControlPerPatchOutputComponents = default, uint maxTessellationControlTotalOutputComponents = default, uint maxTessellationEvaluationInputComponents = default, uint maxTessellationEvaluationOutputComponents = default, uint maxGeometryShaderInvocations = default, uint maxGeometryInputComponents = default, uint maxGeometryOutputComponents = default, uint maxGeometryOutputVertices = default, uint maxGeometryTotalOutputComponents = default, uint maxFragmentInputComponents = default, uint maxFragmentOutputAttachments = default, uint maxFragmentDualSrcAttachments = default, uint maxFragmentCombinedOutputResources = default, uint maxComputeSharedMemorySize = default, uint* maxComputeWorkGroupCount = default, uint maxComputeWorkGroupInvocations = default, uint* maxComputeWorkGroupSize = default, uint subPixelPrecisionBits = default, uint subTexelPrecisionBits = default, uint mipmapPrecisionBits = default, uint maxDrawIndexedIndexValue = default, uint maxDrawIndirectCount = default, float maxSamplerLodBias = default, float maxSamplerAnisotropy = default, uint maxViewports = default, uint* maxViewportDimensions = default, float* viewportBoundsRange = default, uint viewportSubPixelBits = default, ulong minMemoryMapAlignment = default, ulong minTexelBufferOffsetAlignment = default, ulong minUniformBufferOffsetAlignment = default, ulong minStorageBufferOffsetAlignment = default, int minTexelOffset = default, uint maxTexelOffset = default, int minTexelGatherOffset = default, uint maxTexelGatherOffset = default, float minInterpolationOffset = default, float maxInterpolationOffset = default, uint subPixelInterpolationOffsetBits = default, uint maxFramebufferWidth = default, uint maxFramebufferHeight = default, uint maxFramebufferLayers = default, uint framebufferColorSampleCounts = default, uint framebufferDepthSampleCounts = default, uint framebufferStencilSampleCounts = default, uint framebufferNoAttachmentsSampleCounts = default, uint maxColorAttachments = default, uint sampledImageColorSampleCounts = default, uint sampledImageIntegerSampleCounts = default, uint sampledImageDepthSampleCounts = default, uint sampledImageStencilSampleCounts = default, uint storageImageSampleCounts = default, uint maxSampleMaskWords = default, uint timestampComputeAndGraphics = default, float timestampPeriod = default, uint maxClipDistances = default, uint maxCullDistances = default, uint maxCombinedClipAndCullDistances = default, uint discreteQueuePriorities = default, float* pointSizeRange = default, float* lineWidthRange = default, float pointSizeGranularity = default, float lineWidthGranularity = default, uint strictLines = default, uint standardSampleLocations = default, ulong optimalBufferCopyOffsetAlignment = default, ulong optimalBufferCopyRowPitchAlignment = default, ulong nonCoherentAtomSize = default)
		{
			MaxImageDimension1d = maxImageDimension1d;
			MaxImageDimension2d = maxImageDimension2d;
			MaxImageDimension3d = maxImageDimension3d;
			MaxImageDimensionCube = maxImageDimensionCube;
			MaxImageArrayLayers = maxImageArrayLayers;
			MaxTexelBufferElements = maxTexelBufferElements;
			MaxUniformBufferRange = maxUniformBufferRange;
			MaxStorageBufferRange = maxStorageBufferRange;
			MaxPushConstantsSize = maxPushConstantsSize;
			MaxMemoryAllocationCount = maxMemoryAllocationCount;
			MaxSamplerAllocationCount = maxSamplerAllocationCount;
			BufferImageGranularity = bufferImageGranularity;
			SparseAddressSpaceSize = sparseAddressSpaceSize;
			MaxBoundDescriptorSets = maxBoundDescriptorSets;
			MaxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers;
			MaxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers;
			MaxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers;
			MaxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages;
			MaxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages;
			MaxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments;
			MaxPerStageResources = maxPerStageResources;
			MaxDescriptorSetSamplers = maxDescriptorSetSamplers;
			MaxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers;
			MaxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic;
			MaxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers;
			MaxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic;
			MaxDescriptorSetSampledImages = maxDescriptorSetSampledImages;
			MaxDescriptorSetStorageImages = maxDescriptorSetStorageImages;
			MaxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments;
			MaxVertexInputAttributes = maxVertexInputAttributes;
			MaxVertexInputBindings = maxVertexInputBindings;
			MaxVertexInputAttributeOffset = maxVertexInputAttributeOffset;
			MaxVertexInputBindingStride = maxVertexInputBindingStride;
			MaxVertexOutputComponents = maxVertexOutputComponents;
			MaxTessellationGenerationLevel = maxTessellationGenerationLevel;
			MaxTessellationPatchSize = maxTessellationPatchSize;
			MaxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents;
			MaxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents;
			MaxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents;
			MaxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents;
			MaxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents;
			MaxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents;
			MaxGeometryShaderInvocations = maxGeometryShaderInvocations;
			MaxGeometryInputComponents = maxGeometryInputComponents;
			MaxGeometryOutputComponents = maxGeometryOutputComponents;
			MaxGeometryOutputVertices = maxGeometryOutputVertices;
			MaxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents;
			MaxFragmentInputComponents = maxFragmentInputComponents;
			MaxFragmentOutputAttachments = maxFragmentOutputAttachments;
			MaxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments;
			MaxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources;
			MaxComputeSharedMemorySize = maxComputeSharedMemorySize;
			if (maxComputeWorkGroupCount != default)
			{
				MaxComputeWorkGroupCount_0 = maxComputeWorkGroupCount[0];
				MaxComputeWorkGroupCount_1 = maxComputeWorkGroupCount[1];
				MaxComputeWorkGroupCount_2 = maxComputeWorkGroupCount[2];
			}
			MaxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
			if (maxComputeWorkGroupSize != default)
			{
				MaxComputeWorkGroupSize_0 = maxComputeWorkGroupSize[0];
				MaxComputeWorkGroupSize_1 = maxComputeWorkGroupSize[1];
				MaxComputeWorkGroupSize_2 = maxComputeWorkGroupSize[2];
			}
			SubPixelPrecisionBits = subPixelPrecisionBits;
			SubTexelPrecisionBits = subTexelPrecisionBits;
			MipmapPrecisionBits = mipmapPrecisionBits;
			MaxDrawIndexedIndexValue = maxDrawIndexedIndexValue;
			MaxDrawIndirectCount = maxDrawIndirectCount;
			MaxSamplerLodBias = maxSamplerLodBias;
			MaxSamplerAnisotropy = maxSamplerAnisotropy;
			MaxViewports = maxViewports;
			if (maxViewportDimensions != default)
			{
				MaxViewportDimensions_0 = maxViewportDimensions[0];
				MaxViewportDimensions_1 = maxViewportDimensions[1];
			}
			if (viewportBoundsRange != default)
			{
				ViewportBoundsRange_0 = viewportBoundsRange[0];
				ViewportBoundsRange_1 = viewportBoundsRange[1];
			}
			ViewportSubPixelBits = viewportSubPixelBits;
			MinMemoryMapAlignment = minMemoryMapAlignment;
			MinTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment;
			MinUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment;
			MinStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment;
			MinTexelOffset = minTexelOffset;
			MaxTexelOffset = maxTexelOffset;
			MinTexelGatherOffset = minTexelGatherOffset;
			MaxTexelGatherOffset = maxTexelGatherOffset;
			MinInterpolationOffset = minInterpolationOffset;
			MaxInterpolationOffset = maxInterpolationOffset;
			SubPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits;
			MaxFramebufferWidth = maxFramebufferWidth;
			MaxFramebufferHeight = maxFramebufferHeight;
			MaxFramebufferLayers = maxFramebufferLayers;
			FramebufferColorSampleCounts = framebufferColorSampleCounts;
			FramebufferDepthSampleCounts = framebufferDepthSampleCounts;
			FramebufferStencilSampleCounts = framebufferStencilSampleCounts;
			FramebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts;
			MaxColorAttachments = maxColorAttachments;
			SampledImageColorSampleCounts = sampledImageColorSampleCounts;
			SampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts;
			SampledImageDepthSampleCounts = sampledImageDepthSampleCounts;
			SampledImageStencilSampleCounts = sampledImageStencilSampleCounts;
			StorageImageSampleCounts = storageImageSampleCounts;
			MaxSampleMaskWords = maxSampleMaskWords;
			TimestampComputeAndGraphics = timestampComputeAndGraphics;
			TimestampPeriod = timestampPeriod;
			MaxClipDistances = maxClipDistances;
			MaxCullDistances = maxCullDistances;
			MaxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances;
			DiscreteQueuePriorities = discreteQueuePriorities;
			if (pointSizeRange != default)
			{
				PointSizeRange_0 = pointSizeRange[0];
				PointSizeRange_1 = pointSizeRange[1];
			}
			if (lineWidthRange != default)
			{
				LineWidthRange_0 = lineWidthRange[0];
				LineWidthRange_1 = lineWidthRange[1];
			}
			PointSizeGranularity = pointSizeGranularity;
			LineWidthGranularity = lineWidthGranularity;
			StrictLines = strictLines;
			StandardSampleLocations = standardSampleLocations;
			OptimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment;
			OptimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment;
			NonCoherentAtomSize = nonCoherentAtomSize;
		}

		public unsafe DaxaDeviceLimits(uint maxImageDimension1d = default, uint maxImageDimension2d = default, uint maxImageDimension3d = default, uint maxImageDimensionCube = default, uint maxImageArrayLayers = default, uint maxTexelBufferElements = default, uint maxUniformBufferRange = default, uint maxStorageBufferRange = default, uint maxPushConstantsSize = default, uint maxMemoryAllocationCount = default, uint maxSamplerAllocationCount = default, ulong bufferImageGranularity = default, ulong sparseAddressSpaceSize = default, uint maxBoundDescriptorSets = default, uint maxPerStageDescriptorSamplers = default, uint maxPerStageDescriptorUniformBuffers = default, uint maxPerStageDescriptorStorageBuffers = default, uint maxPerStageDescriptorSampledImages = default, uint maxPerStageDescriptorStorageImages = default, uint maxPerStageDescriptorInputAttachments = default, uint maxPerStageResources = default, uint maxDescriptorSetSamplers = default, uint maxDescriptorSetUniformBuffers = default, uint maxDescriptorSetUniformBuffersDynamic = default, uint maxDescriptorSetStorageBuffers = default, uint maxDescriptorSetStorageBuffersDynamic = default, uint maxDescriptorSetSampledImages = default, uint maxDescriptorSetStorageImages = default, uint maxDescriptorSetInputAttachments = default, uint maxVertexInputAttributes = default, uint maxVertexInputBindings = default, uint maxVertexInputAttributeOffset = default, uint maxVertexInputBindingStride = default, uint maxVertexOutputComponents = default, uint maxTessellationGenerationLevel = default, uint maxTessellationPatchSize = default, uint maxTessellationControlPerVertexInputComponents = default, uint maxTessellationControlPerVertexOutputComponents = default, uint maxTessellationControlPerPatchOutputComponents = default, uint maxTessellationControlTotalOutputComponents = default, uint maxTessellationEvaluationInputComponents = default, uint maxTessellationEvaluationOutputComponents = default, uint maxGeometryShaderInvocations = default, uint maxGeometryInputComponents = default, uint maxGeometryOutputComponents = default, uint maxGeometryOutputVertices = default, uint maxGeometryTotalOutputComponents = default, uint maxFragmentInputComponents = default, uint maxFragmentOutputAttachments = default, uint maxFragmentDualSrcAttachments = default, uint maxFragmentCombinedOutputResources = default, uint maxComputeSharedMemorySize = default, Span<uint> maxComputeWorkGroupCount = default, uint maxComputeWorkGroupInvocations = default, Span<uint> maxComputeWorkGroupSize = default, uint subPixelPrecisionBits = default, uint subTexelPrecisionBits = default, uint mipmapPrecisionBits = default, uint maxDrawIndexedIndexValue = default, uint maxDrawIndirectCount = default, float maxSamplerLodBias = default, float maxSamplerAnisotropy = default, uint maxViewports = default, Span<uint> maxViewportDimensions = default, Span<float> viewportBoundsRange = default, uint viewportSubPixelBits = default, ulong minMemoryMapAlignment = default, ulong minTexelBufferOffsetAlignment = default, ulong minUniformBufferOffsetAlignment = default, ulong minStorageBufferOffsetAlignment = default, int minTexelOffset = default, uint maxTexelOffset = default, int minTexelGatherOffset = default, uint maxTexelGatherOffset = default, float minInterpolationOffset = default, float maxInterpolationOffset = default, uint subPixelInterpolationOffsetBits = default, uint maxFramebufferWidth = default, uint maxFramebufferHeight = default, uint maxFramebufferLayers = default, uint framebufferColorSampleCounts = default, uint framebufferDepthSampleCounts = default, uint framebufferStencilSampleCounts = default, uint framebufferNoAttachmentsSampleCounts = default, uint maxColorAttachments = default, uint sampledImageColorSampleCounts = default, uint sampledImageIntegerSampleCounts = default, uint sampledImageDepthSampleCounts = default, uint sampledImageStencilSampleCounts = default, uint storageImageSampleCounts = default, uint maxSampleMaskWords = default, uint timestampComputeAndGraphics = default, float timestampPeriod = default, uint maxClipDistances = default, uint maxCullDistances = default, uint maxCombinedClipAndCullDistances = default, uint discreteQueuePriorities = default, Span<float> pointSizeRange = default, Span<float> lineWidthRange = default, float pointSizeGranularity = default, float lineWidthGranularity = default, uint strictLines = default, uint standardSampleLocations = default, ulong optimalBufferCopyOffsetAlignment = default, ulong optimalBufferCopyRowPitchAlignment = default, ulong nonCoherentAtomSize = default)
		{
			MaxImageDimension1d = maxImageDimension1d;
			MaxImageDimension2d = maxImageDimension2d;
			MaxImageDimension3d = maxImageDimension3d;
			MaxImageDimensionCube = maxImageDimensionCube;
			MaxImageArrayLayers = maxImageArrayLayers;
			MaxTexelBufferElements = maxTexelBufferElements;
			MaxUniformBufferRange = maxUniformBufferRange;
			MaxStorageBufferRange = maxStorageBufferRange;
			MaxPushConstantsSize = maxPushConstantsSize;
			MaxMemoryAllocationCount = maxMemoryAllocationCount;
			MaxSamplerAllocationCount = maxSamplerAllocationCount;
			BufferImageGranularity = bufferImageGranularity;
			SparseAddressSpaceSize = sparseAddressSpaceSize;
			MaxBoundDescriptorSets = maxBoundDescriptorSets;
			MaxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers;
			MaxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers;
			MaxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers;
			MaxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages;
			MaxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages;
			MaxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments;
			MaxPerStageResources = maxPerStageResources;
			MaxDescriptorSetSamplers = maxDescriptorSetSamplers;
			MaxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers;
			MaxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic;
			MaxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers;
			MaxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic;
			MaxDescriptorSetSampledImages = maxDescriptorSetSampledImages;
			MaxDescriptorSetStorageImages = maxDescriptorSetStorageImages;
			MaxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments;
			MaxVertexInputAttributes = maxVertexInputAttributes;
			MaxVertexInputBindings = maxVertexInputBindings;
			MaxVertexInputAttributeOffset = maxVertexInputAttributeOffset;
			MaxVertexInputBindingStride = maxVertexInputBindingStride;
			MaxVertexOutputComponents = maxVertexOutputComponents;
			MaxTessellationGenerationLevel = maxTessellationGenerationLevel;
			MaxTessellationPatchSize = maxTessellationPatchSize;
			MaxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents;
			MaxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents;
			MaxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents;
			MaxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents;
			MaxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents;
			MaxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents;
			MaxGeometryShaderInvocations = maxGeometryShaderInvocations;
			MaxGeometryInputComponents = maxGeometryInputComponents;
			MaxGeometryOutputComponents = maxGeometryOutputComponents;
			MaxGeometryOutputVertices = maxGeometryOutputVertices;
			MaxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents;
			MaxFragmentInputComponents = maxFragmentInputComponents;
			MaxFragmentOutputAttachments = maxFragmentOutputAttachments;
			MaxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments;
			MaxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources;
			MaxComputeSharedMemorySize = maxComputeSharedMemorySize;
			if (maxComputeWorkGroupCount != default)
			{
				MaxComputeWorkGroupCount_0 = maxComputeWorkGroupCount[0];
				MaxComputeWorkGroupCount_1 = maxComputeWorkGroupCount[1];
				MaxComputeWorkGroupCount_2 = maxComputeWorkGroupCount[2];
			}
			MaxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
			if (maxComputeWorkGroupSize != default)
			{
				MaxComputeWorkGroupSize_0 = maxComputeWorkGroupSize[0];
				MaxComputeWorkGroupSize_1 = maxComputeWorkGroupSize[1];
				MaxComputeWorkGroupSize_2 = maxComputeWorkGroupSize[2];
			}
			SubPixelPrecisionBits = subPixelPrecisionBits;
			SubTexelPrecisionBits = subTexelPrecisionBits;
			MipmapPrecisionBits = mipmapPrecisionBits;
			MaxDrawIndexedIndexValue = maxDrawIndexedIndexValue;
			MaxDrawIndirectCount = maxDrawIndirectCount;
			MaxSamplerLodBias = maxSamplerLodBias;
			MaxSamplerAnisotropy = maxSamplerAnisotropy;
			MaxViewports = maxViewports;
			if (maxViewportDimensions != default)
			{
				MaxViewportDimensions_0 = maxViewportDimensions[0];
				MaxViewportDimensions_1 = maxViewportDimensions[1];
			}
			if (viewportBoundsRange != default)
			{
				ViewportBoundsRange_0 = viewportBoundsRange[0];
				ViewportBoundsRange_1 = viewportBoundsRange[1];
			}
			ViewportSubPixelBits = viewportSubPixelBits;
			MinMemoryMapAlignment = minMemoryMapAlignment;
			MinTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment;
			MinUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment;
			MinStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment;
			MinTexelOffset = minTexelOffset;
			MaxTexelOffset = maxTexelOffset;
			MinTexelGatherOffset = minTexelGatherOffset;
			MaxTexelGatherOffset = maxTexelGatherOffset;
			MinInterpolationOffset = minInterpolationOffset;
			MaxInterpolationOffset = maxInterpolationOffset;
			SubPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits;
			MaxFramebufferWidth = maxFramebufferWidth;
			MaxFramebufferHeight = maxFramebufferHeight;
			MaxFramebufferLayers = maxFramebufferLayers;
			FramebufferColorSampleCounts = framebufferColorSampleCounts;
			FramebufferDepthSampleCounts = framebufferDepthSampleCounts;
			FramebufferStencilSampleCounts = framebufferStencilSampleCounts;
			FramebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts;
			MaxColorAttachments = maxColorAttachments;
			SampledImageColorSampleCounts = sampledImageColorSampleCounts;
			SampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts;
			SampledImageDepthSampleCounts = sampledImageDepthSampleCounts;
			SampledImageStencilSampleCounts = sampledImageStencilSampleCounts;
			StorageImageSampleCounts = storageImageSampleCounts;
			MaxSampleMaskWords = maxSampleMaskWords;
			TimestampComputeAndGraphics = timestampComputeAndGraphics;
			TimestampPeriod = timestampPeriod;
			MaxClipDistances = maxClipDistances;
			MaxCullDistances = maxCullDistances;
			MaxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances;
			DiscreteQueuePriorities = discreteQueuePriorities;
			if (pointSizeRange != default)
			{
				PointSizeRange_0 = pointSizeRange[0];
				PointSizeRange_1 = pointSizeRange[1];
			}
			if (lineWidthRange != default)
			{
				LineWidthRange_0 = lineWidthRange[0];
				LineWidthRange_1 = lineWidthRange[1];
			}
			PointSizeGranularity = pointSizeGranularity;
			LineWidthGranularity = lineWidthGranularity;
			StrictLines = strictLines;
			StandardSampleLocations = standardSampleLocations;
			OptimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment;
			OptimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment;
			NonCoherentAtomSize = nonCoherentAtomSize;
		}


	}

	/// <summary>
	/// MUST BE ABI COMPATIBLE WITH VkPhysicalDeviceRayTracingPipelinePropertiesKHR!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "daxa_RayTracingPipelineProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaRayTracingPipelineProperties
	{
		[NativeName(NativeNameType.Field, "shader_group_handle_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderGroupHandleSize;
		[NativeName(NativeNameType.Field, "max_ray_recursion_depth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxRayRecursionDepth;
		[NativeName(NativeNameType.Field, "max_shader_group_stride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxShaderGroupStride;
		[NativeName(NativeNameType.Field, "shader_group_base_alignment")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderGroupBaseAlignment;
		[NativeName(NativeNameType.Field, "shader_group_handle_capture_replay_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderGroupHandleCaptureReplaySize;
		[NativeName(NativeNameType.Field, "max_ray_dispatch_invocation_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxRayDispatchInvocationCount;
		[NativeName(NativeNameType.Field, "shader_group_handle_alignment")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShaderGroupHandleAlignment;
		[NativeName(NativeNameType.Field, "max_ray_hit_attribute_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxRayHitAttributeSize;

		public unsafe DaxaRayTracingPipelineProperties(uint shaderGroupHandleSize = default, uint maxRayRecursionDepth = default, uint maxShaderGroupStride = default, uint shaderGroupBaseAlignment = default, uint shaderGroupHandleCaptureReplaySize = default, uint maxRayDispatchInvocationCount = default, uint shaderGroupHandleAlignment = default, uint maxRayHitAttributeSize = default)
		{
			ShaderGroupHandleSize = shaderGroupHandleSize;
			MaxRayRecursionDepth = maxRayRecursionDepth;
			MaxShaderGroupStride = maxShaderGroupStride;
			ShaderGroupBaseAlignment = shaderGroupBaseAlignment;
			ShaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize;
			MaxRayDispatchInvocationCount = maxRayDispatchInvocationCount;
			ShaderGroupHandleAlignment = shaderGroupHandleAlignment;
			MaxRayHitAttributeSize = maxRayHitAttributeSize;
		}


	}

	/// <summary>
	/// MUST BE ABI COMPATIBLE WITH VkPhysicalDeviceAccelerationStructurePropertiesKHR!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "daxa_AccelerationStructureProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaAccelerationStructureProperties
	{
		[NativeName(NativeNameType.Field, "max_geometry_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MaxGeometryCount;
		[NativeName(NativeNameType.Field, "max_instance_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MaxInstanceCount;
		[NativeName(NativeNameType.Field, "max_primitive_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong MaxPrimitiveCount;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_acceleration_structures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorAccelerationStructures;
		[NativeName(NativeNameType.Field, "max_per_stage_descriptor_update_after_bind_acceleration_structures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPerStageDescriptorUpdateAfterBindAccelerationStructures;
		[NativeName(NativeNameType.Field, "max_descriptor_set_acceleration_structures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetAccelerationStructures;
		[NativeName(NativeNameType.Field, "max_descriptor_set_update_after_bind_acceleration_structures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxDescriptorSetUpdateAfterBindAccelerationStructures;
		[NativeName(NativeNameType.Field, "min_acceleration_structure_scratch_offset_alignment")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinAccelerationStructureScratchOffsetAlignment;

		public unsafe DaxaAccelerationStructureProperties(ulong maxGeometryCount = default, ulong maxInstanceCount = default, ulong maxPrimitiveCount = default, uint maxPerStageDescriptorAccelerationStructures = default, uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures = default, uint maxDescriptorSetAccelerationStructures = default, uint maxDescriptorSetUpdateAfterBindAccelerationStructures = default, uint minAccelerationStructureScratchOffsetAlignment = default)
		{
			MaxGeometryCount = maxGeometryCount;
			MaxInstanceCount = maxInstanceCount;
			MaxPrimitiveCount = maxPrimitiveCount;
			MaxPerStageDescriptorAccelerationStructures = maxPerStageDescriptorAccelerationStructures;
			MaxPerStageDescriptorUpdateAfterBindAccelerationStructures = maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
			MaxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures;
			MaxDescriptorSetUpdateAfterBindAccelerationStructures = maxDescriptorSetUpdateAfterBindAccelerationStructures;
			MinAccelerationStructureScratchOffsetAlignment = minAccelerationStructureScratchOffsetAlignment;
		}


	}

	/// <summary>
	/// MUST BE ABI COMPATIBLE WITH VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "daxa_RayTracingInvocationReorderProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaRayTracingInvocationReorderProperties
	{
		[NativeName(NativeNameType.Field, "invocation_reorder_mode")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InvocationReorderMode;

		public unsafe DaxaRayTracingInvocationReorderProperties(uint invocationReorderMode = default)
		{
			InvocationReorderMode = invocationReorderMode;
		}


	}

	/// <summary>
	/// Is NOT ABI Compatible with VkPhysicalDeviceMeshShaderPropertiesEXT!<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "daxa_MeshShaderProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaMeshShaderProperties
	{
		[NativeName(NativeNameType.Field, "max_task_work_group_total_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTaskWorkGroupTotalCount;
		[NativeName(NativeNameType.Field, "max_task_work_group_count")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxTaskWorkGroupCount_0;
		public uint MaxTaskWorkGroupCount_1;
		public uint MaxTaskWorkGroupCount_2;
		[NativeName(NativeNameType.Field, "max_task_work_group_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTaskWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "max_task_work_group_size")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxTaskWorkGroupSize_0;
		public uint MaxTaskWorkGroupSize_1;
		public uint MaxTaskWorkGroupSize_2;
		[NativeName(NativeNameType.Field, "max_task_payload_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTaskPayloadSize;
		[NativeName(NativeNameType.Field, "max_task_shared_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTaskSharedMemorySize;
		[NativeName(NativeNameType.Field, "max_task_payload_and_shared_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTaskPayloadAndSharedMemorySize;
		[NativeName(NativeNameType.Field, "max_mesh_work_group_total_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshWorkGroupTotalCount;
		[NativeName(NativeNameType.Field, "max_mesh_work_group_count")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxMeshWorkGroupCount_0;
		public uint MaxMeshWorkGroupCount_1;
		public uint MaxMeshWorkGroupCount_2;
		[NativeName(NativeNameType.Field, "max_mesh_work_group_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "max_mesh_work_group_size")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint MaxMeshWorkGroupSize_0;
		public uint MaxMeshWorkGroupSize_1;
		public uint MaxMeshWorkGroupSize_2;
		[NativeName(NativeNameType.Field, "max_mesh_shared_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshSharedMemorySize;
		[NativeName(NativeNameType.Field, "max_mesh_payload_and_shared_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshPayloadAndSharedMemorySize;
		[NativeName(NativeNameType.Field, "max_mesh_output_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshOutputMemorySize;
		[NativeName(NativeNameType.Field, "max_mesh_payload_and_output_memory_size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshPayloadAndOutputMemorySize;
		[NativeName(NativeNameType.Field, "max_mesh_output_components")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshOutputComponents;
		[NativeName(NativeNameType.Field, "max_mesh_output_vertices")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshOutputVertices;
		[NativeName(NativeNameType.Field, "max_mesh_output_primitives")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshOutputPrimitives;
		[NativeName(NativeNameType.Field, "max_mesh_output_layers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshOutputLayers;
		[NativeName(NativeNameType.Field, "max_mesh_multiview_view_count")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMeshMultiviewViewCount;
		[NativeName(NativeNameType.Field, "mesh_output_per_vertex_granularity")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MeshOutputPerVertexGranularity;
		[NativeName(NativeNameType.Field, "mesh_output_per_primitive_granularity")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MeshOutputPerPrimitiveGranularity;
		[NativeName(NativeNameType.Field, "max_preferred_task_work_group_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPreferredTaskWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "max_preferred_mesh_work_group_invocations")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxPreferredMeshWorkGroupInvocations;
		[NativeName(NativeNameType.Field, "prefers_local_invocation_vertex_output")]
		[NativeName(NativeNameType.Type, "daxa_Bool8")]
		public byte PrefersLocalInvocationVertexOutput;
		[NativeName(NativeNameType.Field, "prefers_local_invocation_primitive_output")]
		[NativeName(NativeNameType.Type, "daxa_Bool8")]
		public byte PrefersLocalInvocationPrimitiveOutput;
		[NativeName(NativeNameType.Field, "prefers_compact_vertex_output")]
		[NativeName(NativeNameType.Type, "daxa_Bool8")]
		public byte PrefersCompactVertexOutput;
		[NativeName(NativeNameType.Field, "prefers_compact_primitive_output")]
		[NativeName(NativeNameType.Type, "daxa_Bool8")]
		public byte PrefersCompactPrimitiveOutput;

		public unsafe DaxaMeshShaderProperties(uint maxTaskWorkGroupTotalCount = default, uint* maxTaskWorkGroupCount = default, uint maxTaskWorkGroupInvocations = default, uint* maxTaskWorkGroupSize = default, uint maxTaskPayloadSize = default, uint maxTaskSharedMemorySize = default, uint maxTaskPayloadAndSharedMemorySize = default, uint maxMeshWorkGroupTotalCount = default, uint* maxMeshWorkGroupCount = default, uint maxMeshWorkGroupInvocations = default, uint* maxMeshWorkGroupSize = default, uint maxMeshSharedMemorySize = default, uint maxMeshPayloadAndSharedMemorySize = default, uint maxMeshOutputMemorySize = default, uint maxMeshPayloadAndOutputMemorySize = default, uint maxMeshOutputComponents = default, uint maxMeshOutputVertices = default, uint maxMeshOutputPrimitives = default, uint maxMeshOutputLayers = default, uint maxMeshMultiviewViewCount = default, uint meshOutputPerVertexGranularity = default, uint meshOutputPerPrimitiveGranularity = default, uint maxPreferredTaskWorkGroupInvocations = default, uint maxPreferredMeshWorkGroupInvocations = default, byte prefersLocalInvocationVertexOutput = default, byte prefersLocalInvocationPrimitiveOutput = default, byte prefersCompactVertexOutput = default, byte prefersCompactPrimitiveOutput = default)
		{
			MaxTaskWorkGroupTotalCount = maxTaskWorkGroupTotalCount;
			if (maxTaskWorkGroupCount != default)
			{
				MaxTaskWorkGroupCount_0 = maxTaskWorkGroupCount[0];
				MaxTaskWorkGroupCount_1 = maxTaskWorkGroupCount[1];
				MaxTaskWorkGroupCount_2 = maxTaskWorkGroupCount[2];
			}
			MaxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations;
			if (maxTaskWorkGroupSize != default)
			{
				MaxTaskWorkGroupSize_0 = maxTaskWorkGroupSize[0];
				MaxTaskWorkGroupSize_1 = maxTaskWorkGroupSize[1];
				MaxTaskWorkGroupSize_2 = maxTaskWorkGroupSize[2];
			}
			MaxTaskPayloadSize = maxTaskPayloadSize;
			MaxTaskSharedMemorySize = maxTaskSharedMemorySize;
			MaxTaskPayloadAndSharedMemorySize = maxTaskPayloadAndSharedMemorySize;
			MaxMeshWorkGroupTotalCount = maxMeshWorkGroupTotalCount;
			if (maxMeshWorkGroupCount != default)
			{
				MaxMeshWorkGroupCount_0 = maxMeshWorkGroupCount[0];
				MaxMeshWorkGroupCount_1 = maxMeshWorkGroupCount[1];
				MaxMeshWorkGroupCount_2 = maxMeshWorkGroupCount[2];
			}
			MaxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations;
			if (maxMeshWorkGroupSize != default)
			{
				MaxMeshWorkGroupSize_0 = maxMeshWorkGroupSize[0];
				MaxMeshWorkGroupSize_1 = maxMeshWorkGroupSize[1];
				MaxMeshWorkGroupSize_2 = maxMeshWorkGroupSize[2];
			}
			MaxMeshSharedMemorySize = maxMeshSharedMemorySize;
			MaxMeshPayloadAndSharedMemorySize = maxMeshPayloadAndSharedMemorySize;
			MaxMeshOutputMemorySize = maxMeshOutputMemorySize;
			MaxMeshPayloadAndOutputMemorySize = maxMeshPayloadAndOutputMemorySize;
			MaxMeshOutputComponents = maxMeshOutputComponents;
			MaxMeshOutputVertices = maxMeshOutputVertices;
			MaxMeshOutputPrimitives = maxMeshOutputPrimitives;
			MaxMeshOutputLayers = maxMeshOutputLayers;
			MaxMeshMultiviewViewCount = maxMeshMultiviewViewCount;
			MeshOutputPerVertexGranularity = meshOutputPerVertexGranularity;
			MeshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity;
			MaxPreferredTaskWorkGroupInvocations = maxPreferredTaskWorkGroupInvocations;
			MaxPreferredMeshWorkGroupInvocations = maxPreferredMeshWorkGroupInvocations;
			PrefersLocalInvocationVertexOutput = prefersLocalInvocationVertexOutput;
			PrefersLocalInvocationPrimitiveOutput = prefersLocalInvocationPrimitiveOutput;
			PrefersCompactVertexOutput = prefersCompactVertexOutput;
			PrefersCompactPrimitiveOutput = prefersCompactPrimitiveOutput;
		}

		public unsafe DaxaMeshShaderProperties(uint maxTaskWorkGroupTotalCount = default, Span<uint> maxTaskWorkGroupCount = default, uint maxTaskWorkGroupInvocations = default, Span<uint> maxTaskWorkGroupSize = default, uint maxTaskPayloadSize = default, uint maxTaskSharedMemorySize = default, uint maxTaskPayloadAndSharedMemorySize = default, uint maxMeshWorkGroupTotalCount = default, Span<uint> maxMeshWorkGroupCount = default, uint maxMeshWorkGroupInvocations = default, Span<uint> maxMeshWorkGroupSize = default, uint maxMeshSharedMemorySize = default, uint maxMeshPayloadAndSharedMemorySize = default, uint maxMeshOutputMemorySize = default, uint maxMeshPayloadAndOutputMemorySize = default, uint maxMeshOutputComponents = default, uint maxMeshOutputVertices = default, uint maxMeshOutputPrimitives = default, uint maxMeshOutputLayers = default, uint maxMeshMultiviewViewCount = default, uint meshOutputPerVertexGranularity = default, uint meshOutputPerPrimitiveGranularity = default, uint maxPreferredTaskWorkGroupInvocations = default, uint maxPreferredMeshWorkGroupInvocations = default, byte prefersLocalInvocationVertexOutput = default, byte prefersLocalInvocationPrimitiveOutput = default, byte prefersCompactVertexOutput = default, byte prefersCompactPrimitiveOutput = default)
		{
			MaxTaskWorkGroupTotalCount = maxTaskWorkGroupTotalCount;
			if (maxTaskWorkGroupCount != default)
			{
				MaxTaskWorkGroupCount_0 = maxTaskWorkGroupCount[0];
				MaxTaskWorkGroupCount_1 = maxTaskWorkGroupCount[1];
				MaxTaskWorkGroupCount_2 = maxTaskWorkGroupCount[2];
			}
			MaxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations;
			if (maxTaskWorkGroupSize != default)
			{
				MaxTaskWorkGroupSize_0 = maxTaskWorkGroupSize[0];
				MaxTaskWorkGroupSize_1 = maxTaskWorkGroupSize[1];
				MaxTaskWorkGroupSize_2 = maxTaskWorkGroupSize[2];
			}
			MaxTaskPayloadSize = maxTaskPayloadSize;
			MaxTaskSharedMemorySize = maxTaskSharedMemorySize;
			MaxTaskPayloadAndSharedMemorySize = maxTaskPayloadAndSharedMemorySize;
			MaxMeshWorkGroupTotalCount = maxMeshWorkGroupTotalCount;
			if (maxMeshWorkGroupCount != default)
			{
				MaxMeshWorkGroupCount_0 = maxMeshWorkGroupCount[0];
				MaxMeshWorkGroupCount_1 = maxMeshWorkGroupCount[1];
				MaxMeshWorkGroupCount_2 = maxMeshWorkGroupCount[2];
			}
			MaxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations;
			if (maxMeshWorkGroupSize != default)
			{
				MaxMeshWorkGroupSize_0 = maxMeshWorkGroupSize[0];
				MaxMeshWorkGroupSize_1 = maxMeshWorkGroupSize[1];
				MaxMeshWorkGroupSize_2 = maxMeshWorkGroupSize[2];
			}
			MaxMeshSharedMemorySize = maxMeshSharedMemorySize;
			MaxMeshPayloadAndSharedMemorySize = maxMeshPayloadAndSharedMemorySize;
			MaxMeshOutputMemorySize = maxMeshOutputMemorySize;
			MaxMeshPayloadAndOutputMemorySize = maxMeshPayloadAndOutputMemorySize;
			MaxMeshOutputComponents = maxMeshOutputComponents;
			MaxMeshOutputVertices = maxMeshOutputVertices;
			MaxMeshOutputPrimitives = maxMeshOutputPrimitives;
			MaxMeshOutputLayers = maxMeshOutputLayers;
			MaxMeshMultiviewViewCount = maxMeshMultiviewViewCount;
			MeshOutputPerVertexGranularity = meshOutputPerVertexGranularity;
			MeshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity;
			MaxPreferredTaskWorkGroupInvocations = maxPreferredTaskWorkGroupInvocations;
			MaxPreferredMeshWorkGroupInvocations = maxPreferredMeshWorkGroupInvocations;
			PrefersLocalInvocationVertexOutput = prefersLocalInvocationVertexOutput;
			PrefersLocalInvocationPrimitiveOutput = prefersLocalInvocationPrimitiveOutput;
			PrefersCompactVertexOutput = prefersCompactVertexOutput;
			PrefersCompactPrimitiveOutput = prefersCompactPrimitiveOutput;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_DeviceProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaDeviceProperties
	{
		[NativeName(NativeNameType.StructOrClass, "daxa_DeviceProperties::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct MeshShaderPropertiesUnion
		{
			[NativeName(NativeNameType.Field, "value")]
			[NativeName(NativeNameType.Type, "daxa_MeshShaderProperties")]
			public DaxaMeshShaderProperties Value;
			[NativeName(NativeNameType.Field, "has_value")]
			[NativeName(NativeNameType.Type, "daxa_Bool8")]
			public byte HasValue;

			public unsafe MeshShaderPropertiesUnion(DaxaMeshShaderProperties value = default, byte hasValue = default)
			{
				Value = value;
				HasValue = hasValue;
			}


		}

		[NativeName(NativeNameType.StructOrClass, "daxa_DeviceProperties::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct RayTracingPipelinePropertiesUnion
		{
			[NativeName(NativeNameType.Field, "value")]
			[NativeName(NativeNameType.Type, "daxa_RayTracingPipelineProperties")]
			public DaxaRayTracingPipelineProperties Value;
			[NativeName(NativeNameType.Field, "has_value")]
			[NativeName(NativeNameType.Type, "daxa_Bool8")]
			public byte HasValue;

			public unsafe RayTracingPipelinePropertiesUnion(DaxaRayTracingPipelineProperties value = default, byte hasValue = default)
			{
				Value = value;
				HasValue = hasValue;
			}


		}

		[NativeName(NativeNameType.StructOrClass, "daxa_DeviceProperties::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct AccelerationStructurePropertiesUnion
		{
			[NativeName(NativeNameType.Field, "value")]
			[NativeName(NativeNameType.Type, "daxa_AccelerationStructureProperties")]
			public DaxaAccelerationStructureProperties Value;
			[NativeName(NativeNameType.Field, "has_value")]
			[NativeName(NativeNameType.Type, "daxa_Bool8")]
			public byte HasValue;

			public unsafe AccelerationStructurePropertiesUnion(DaxaAccelerationStructureProperties value = default, byte hasValue = default)
			{
				Value = value;
				HasValue = hasValue;
			}


		}

		[NativeName(NativeNameType.StructOrClass, "daxa_DeviceProperties::")]
		[StructLayout(LayoutKind.Sequential)]
		public partial struct RayTracingInvocationReorderPropertiesUnion
		{
			[NativeName(NativeNameType.Field, "value")]
			[NativeName(NativeNameType.Type, "daxa_RayTracingInvocationReorderProperties")]
			public DaxaRayTracingInvocationReorderProperties Value;
			[NativeName(NativeNameType.Field, "has_value")]
			[NativeName(NativeNameType.Type, "daxa_Bool8")]
			public byte HasValue;

			public unsafe RayTracingInvocationReorderPropertiesUnion(DaxaRayTracingInvocationReorderProperties value = default, byte hasValue = default)
			{
				Value = value;
				HasValue = hasValue;
			}


		}

		[NativeName(NativeNameType.Field, "vulkan_api_version")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VulkanApiVersion;
		[NativeName(NativeNameType.Field, "driver_version")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DriverVersion;
		[NativeName(NativeNameType.Field, "vendor_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VendorId;
		[NativeName(NativeNameType.Field, "device_id")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceId;
		[NativeName(NativeNameType.Field, "device_type")]
		[NativeName(NativeNameType.Type, "daxa_DeviceType")]
		public DaxaDeviceType DeviceType;
		[NativeName(NativeNameType.Field, "device_name")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte DeviceName_0;
		public byte DeviceName_1;
		public byte DeviceName_2;
		public byte DeviceName_3;
		public byte DeviceName_4;
		public byte DeviceName_5;
		public byte DeviceName_6;
		public byte DeviceName_7;
		public byte DeviceName_8;
		public byte DeviceName_9;
		public byte DeviceName_10;
		public byte DeviceName_11;
		public byte DeviceName_12;
		public byte DeviceName_13;
		public byte DeviceName_14;
		public byte DeviceName_15;
		public byte DeviceName_16;
		public byte DeviceName_17;
		public byte DeviceName_18;
		public byte DeviceName_19;
		public byte DeviceName_20;
		public byte DeviceName_21;
		public byte DeviceName_22;
		public byte DeviceName_23;
		public byte DeviceName_24;
		public byte DeviceName_25;
		public byte DeviceName_26;
		public byte DeviceName_27;
		public byte DeviceName_28;
		public byte DeviceName_29;
		public byte DeviceName_30;
		public byte DeviceName_31;
		public byte DeviceName_32;
		public byte DeviceName_33;
		public byte DeviceName_34;
		public byte DeviceName_35;
		public byte DeviceName_36;
		public byte DeviceName_37;
		public byte DeviceName_38;
		public byte DeviceName_39;
		public byte DeviceName_40;
		public byte DeviceName_41;
		public byte DeviceName_42;
		public byte DeviceName_43;
		public byte DeviceName_44;
		public byte DeviceName_45;
		public byte DeviceName_46;
		public byte DeviceName_47;
		public byte DeviceName_48;
		public byte DeviceName_49;
		public byte DeviceName_50;
		public byte DeviceName_51;
		public byte DeviceName_52;
		public byte DeviceName_53;
		public byte DeviceName_54;
		public byte DeviceName_55;
		public byte DeviceName_56;
		public byte DeviceName_57;
		public byte DeviceName_58;
		public byte DeviceName_59;
		public byte DeviceName_60;
		public byte DeviceName_61;
		public byte DeviceName_62;
		public byte DeviceName_63;
		public byte DeviceName_64;
		public byte DeviceName_65;
		public byte DeviceName_66;
		public byte DeviceName_67;
		public byte DeviceName_68;
		public byte DeviceName_69;
		public byte DeviceName_70;
		public byte DeviceName_71;
		public byte DeviceName_72;
		public byte DeviceName_73;
		public byte DeviceName_74;
		public byte DeviceName_75;
		public byte DeviceName_76;
		public byte DeviceName_77;
		public byte DeviceName_78;
		public byte DeviceName_79;
		public byte DeviceName_80;
		public byte DeviceName_81;
		public byte DeviceName_82;
		public byte DeviceName_83;
		public byte DeviceName_84;
		public byte DeviceName_85;
		public byte DeviceName_86;
		public byte DeviceName_87;
		public byte DeviceName_88;
		public byte DeviceName_89;
		public byte DeviceName_90;
		public byte DeviceName_91;
		public byte DeviceName_92;
		public byte DeviceName_93;
		public byte DeviceName_94;
		public byte DeviceName_95;
		public byte DeviceName_96;
		public byte DeviceName_97;
		public byte DeviceName_98;
		public byte DeviceName_99;
		public byte DeviceName_100;
		public byte DeviceName_101;
		public byte DeviceName_102;
		public byte DeviceName_103;
		public byte DeviceName_104;
		public byte DeviceName_105;
		public byte DeviceName_106;
		public byte DeviceName_107;
		public byte DeviceName_108;
		public byte DeviceName_109;
		public byte DeviceName_110;
		public byte DeviceName_111;
		public byte DeviceName_112;
		public byte DeviceName_113;
		public byte DeviceName_114;
		public byte DeviceName_115;
		public byte DeviceName_116;
		public byte DeviceName_117;
		public byte DeviceName_118;
		public byte DeviceName_119;
		public byte DeviceName_120;
		public byte DeviceName_121;
		public byte DeviceName_122;
		public byte DeviceName_123;
		public byte DeviceName_124;
		public byte DeviceName_125;
		public byte DeviceName_126;
		public byte DeviceName_127;
		public byte DeviceName_128;
		public byte DeviceName_129;
		public byte DeviceName_130;
		public byte DeviceName_131;
		public byte DeviceName_132;
		public byte DeviceName_133;
		public byte DeviceName_134;
		public byte DeviceName_135;
		public byte DeviceName_136;
		public byte DeviceName_137;
		public byte DeviceName_138;
		public byte DeviceName_139;
		public byte DeviceName_140;
		public byte DeviceName_141;
		public byte DeviceName_142;
		public byte DeviceName_143;
		public byte DeviceName_144;
		public byte DeviceName_145;
		public byte DeviceName_146;
		public byte DeviceName_147;
		public byte DeviceName_148;
		public byte DeviceName_149;
		public byte DeviceName_150;
		public byte DeviceName_151;
		public byte DeviceName_152;
		public byte DeviceName_153;
		public byte DeviceName_154;
		public byte DeviceName_155;
		public byte DeviceName_156;
		public byte DeviceName_157;
		public byte DeviceName_158;
		public byte DeviceName_159;
		public byte DeviceName_160;
		public byte DeviceName_161;
		public byte DeviceName_162;
		public byte DeviceName_163;
		public byte DeviceName_164;
		public byte DeviceName_165;
		public byte DeviceName_166;
		public byte DeviceName_167;
		public byte DeviceName_168;
		public byte DeviceName_169;
		public byte DeviceName_170;
		public byte DeviceName_171;
		public byte DeviceName_172;
		public byte DeviceName_173;
		public byte DeviceName_174;
		public byte DeviceName_175;
		public byte DeviceName_176;
		public byte DeviceName_177;
		public byte DeviceName_178;
		public byte DeviceName_179;
		public byte DeviceName_180;
		public byte DeviceName_181;
		public byte DeviceName_182;
		public byte DeviceName_183;
		public byte DeviceName_184;
		public byte DeviceName_185;
		public byte DeviceName_186;
		public byte DeviceName_187;
		public byte DeviceName_188;
		public byte DeviceName_189;
		public byte DeviceName_190;
		public byte DeviceName_191;
		public byte DeviceName_192;
		public byte DeviceName_193;
		public byte DeviceName_194;
		public byte DeviceName_195;
		public byte DeviceName_196;
		public byte DeviceName_197;
		public byte DeviceName_198;
		public byte DeviceName_199;
		public byte DeviceName_200;
		public byte DeviceName_201;
		public byte DeviceName_202;
		public byte DeviceName_203;
		public byte DeviceName_204;
		public byte DeviceName_205;
		public byte DeviceName_206;
		public byte DeviceName_207;
		public byte DeviceName_208;
		public byte DeviceName_209;
		public byte DeviceName_210;
		public byte DeviceName_211;
		public byte DeviceName_212;
		public byte DeviceName_213;
		public byte DeviceName_214;
		public byte DeviceName_215;
		public byte DeviceName_216;
		public byte DeviceName_217;
		public byte DeviceName_218;
		public byte DeviceName_219;
		public byte DeviceName_220;
		public byte DeviceName_221;
		public byte DeviceName_222;
		public byte DeviceName_223;
		public byte DeviceName_224;
		public byte DeviceName_225;
		public byte DeviceName_226;
		public byte DeviceName_227;
		public byte DeviceName_228;
		public byte DeviceName_229;
		public byte DeviceName_230;
		public byte DeviceName_231;
		public byte DeviceName_232;
		public byte DeviceName_233;
		public byte DeviceName_234;
		public byte DeviceName_235;
		public byte DeviceName_236;
		public byte DeviceName_237;
		public byte DeviceName_238;
		public byte DeviceName_239;
		public byte DeviceName_240;
		public byte DeviceName_241;
		public byte DeviceName_242;
		public byte DeviceName_243;
		public byte DeviceName_244;
		public byte DeviceName_245;
		public byte DeviceName_246;
		public byte DeviceName_247;
		public byte DeviceName_248;
		public byte DeviceName_249;
		public byte DeviceName_250;
		public byte DeviceName_251;
		public byte DeviceName_252;
		public byte DeviceName_253;
		public byte DeviceName_254;
		public byte DeviceName_255;
		[NativeName(NativeNameType.Field, "pipeline_cache_uuid")]
		[NativeName(NativeNameType.Type, "char[16]")]
		public byte PipelineCacheUuid_0;
		public byte PipelineCacheUuid_1;
		public byte PipelineCacheUuid_2;
		public byte PipelineCacheUuid_3;
		public byte PipelineCacheUuid_4;
		public byte PipelineCacheUuid_5;
		public byte PipelineCacheUuid_6;
		public byte PipelineCacheUuid_7;
		public byte PipelineCacheUuid_8;
		public byte PipelineCacheUuid_9;
		public byte PipelineCacheUuid_10;
		public byte PipelineCacheUuid_11;
		public byte PipelineCacheUuid_12;
		public byte PipelineCacheUuid_13;
		public byte PipelineCacheUuid_14;
		public byte PipelineCacheUuid_15;
		[NativeName(NativeNameType.Field, "limits")]
		[NativeName(NativeNameType.Type, "daxa_DeviceLimits")]
		public DaxaDeviceLimits Limits;
		[NativeName(NativeNameType.Field, "mesh_shader_properties")]
		[NativeName(NativeNameType.Type, "")]
		public MeshShaderPropertiesUnion MeshShaderProperties;
		[NativeName(NativeNameType.Field, "ray_tracing_pipeline_properties")]
		[NativeName(NativeNameType.Type, "")]
		public RayTracingPipelinePropertiesUnion RayTracingPipelineProperties;
		[NativeName(NativeNameType.Field, "acceleration_structure_properties")]
		[NativeName(NativeNameType.Type, "")]
		public AccelerationStructurePropertiesUnion AccelerationStructureProperties;
		[NativeName(NativeNameType.Field, "ray_tracing_invocation_reorder_properties")]
		[NativeName(NativeNameType.Type, "")]
		public RayTracingInvocationReorderPropertiesUnion RayTracingInvocationReorderProperties;

		public unsafe DaxaDeviceProperties(uint vulkanApiVersion = default, uint driverVersion = default, uint vendorId = default, uint deviceId = default, DaxaDeviceType deviceType = default, byte* deviceName = default, byte* pipelineCacheUuid = default, DaxaDeviceLimits limits = default, MeshShaderPropertiesUnion meshShaderProperties = default, RayTracingPipelinePropertiesUnion rayTracingPipelineProperties = default, AccelerationStructurePropertiesUnion accelerationStructureProperties = default, RayTracingInvocationReorderPropertiesUnion rayTracingInvocationReorderProperties = default)
		{
			VulkanApiVersion = vulkanApiVersion;
			DriverVersion = driverVersion;
			VendorId = vendorId;
			DeviceId = deviceId;
			DeviceType = deviceType;
			if (deviceName != default)
			{
				DeviceName_0 = deviceName[0];
				DeviceName_1 = deviceName[1];
				DeviceName_2 = deviceName[2];
				DeviceName_3 = deviceName[3];
				DeviceName_4 = deviceName[4];
				DeviceName_5 = deviceName[5];
				DeviceName_6 = deviceName[6];
				DeviceName_7 = deviceName[7];
				DeviceName_8 = deviceName[8];
				DeviceName_9 = deviceName[9];
				DeviceName_10 = deviceName[10];
				DeviceName_11 = deviceName[11];
				DeviceName_12 = deviceName[12];
				DeviceName_13 = deviceName[13];
				DeviceName_14 = deviceName[14];
				DeviceName_15 = deviceName[15];
				DeviceName_16 = deviceName[16];
				DeviceName_17 = deviceName[17];
				DeviceName_18 = deviceName[18];
				DeviceName_19 = deviceName[19];
				DeviceName_20 = deviceName[20];
				DeviceName_21 = deviceName[21];
				DeviceName_22 = deviceName[22];
				DeviceName_23 = deviceName[23];
				DeviceName_24 = deviceName[24];
				DeviceName_25 = deviceName[25];
				DeviceName_26 = deviceName[26];
				DeviceName_27 = deviceName[27];
				DeviceName_28 = deviceName[28];
				DeviceName_29 = deviceName[29];
				DeviceName_30 = deviceName[30];
				DeviceName_31 = deviceName[31];
				DeviceName_32 = deviceName[32];
				DeviceName_33 = deviceName[33];
				DeviceName_34 = deviceName[34];
				DeviceName_35 = deviceName[35];
				DeviceName_36 = deviceName[36];
				DeviceName_37 = deviceName[37];
				DeviceName_38 = deviceName[38];
				DeviceName_39 = deviceName[39];
				DeviceName_40 = deviceName[40];
				DeviceName_41 = deviceName[41];
				DeviceName_42 = deviceName[42];
				DeviceName_43 = deviceName[43];
				DeviceName_44 = deviceName[44];
				DeviceName_45 = deviceName[45];
				DeviceName_46 = deviceName[46];
				DeviceName_47 = deviceName[47];
				DeviceName_48 = deviceName[48];
				DeviceName_49 = deviceName[49];
				DeviceName_50 = deviceName[50];
				DeviceName_51 = deviceName[51];
				DeviceName_52 = deviceName[52];
				DeviceName_53 = deviceName[53];
				DeviceName_54 = deviceName[54];
				DeviceName_55 = deviceName[55];
				DeviceName_56 = deviceName[56];
				DeviceName_57 = deviceName[57];
				DeviceName_58 = deviceName[58];
				DeviceName_59 = deviceName[59];
				DeviceName_60 = deviceName[60];
				DeviceName_61 = deviceName[61];
				DeviceName_62 = deviceName[62];
				DeviceName_63 = deviceName[63];
				DeviceName_64 = deviceName[64];
				DeviceName_65 = deviceName[65];
				DeviceName_66 = deviceName[66];
				DeviceName_67 = deviceName[67];
				DeviceName_68 = deviceName[68];
				DeviceName_69 = deviceName[69];
				DeviceName_70 = deviceName[70];
				DeviceName_71 = deviceName[71];
				DeviceName_72 = deviceName[72];
				DeviceName_73 = deviceName[73];
				DeviceName_74 = deviceName[74];
				DeviceName_75 = deviceName[75];
				DeviceName_76 = deviceName[76];
				DeviceName_77 = deviceName[77];
				DeviceName_78 = deviceName[78];
				DeviceName_79 = deviceName[79];
				DeviceName_80 = deviceName[80];
				DeviceName_81 = deviceName[81];
				DeviceName_82 = deviceName[82];
				DeviceName_83 = deviceName[83];
				DeviceName_84 = deviceName[84];
				DeviceName_85 = deviceName[85];
				DeviceName_86 = deviceName[86];
				DeviceName_87 = deviceName[87];
				DeviceName_88 = deviceName[88];
				DeviceName_89 = deviceName[89];
				DeviceName_90 = deviceName[90];
				DeviceName_91 = deviceName[91];
				DeviceName_92 = deviceName[92];
				DeviceName_93 = deviceName[93];
				DeviceName_94 = deviceName[94];
				DeviceName_95 = deviceName[95];
				DeviceName_96 = deviceName[96];
				DeviceName_97 = deviceName[97];
				DeviceName_98 = deviceName[98];
				DeviceName_99 = deviceName[99];
				DeviceName_100 = deviceName[100];
				DeviceName_101 = deviceName[101];
				DeviceName_102 = deviceName[102];
				DeviceName_103 = deviceName[103];
				DeviceName_104 = deviceName[104];
				DeviceName_105 = deviceName[105];
				DeviceName_106 = deviceName[106];
				DeviceName_107 = deviceName[107];
				DeviceName_108 = deviceName[108];
				DeviceName_109 = deviceName[109];
				DeviceName_110 = deviceName[110];
				DeviceName_111 = deviceName[111];
				DeviceName_112 = deviceName[112];
				DeviceName_113 = deviceName[113];
				DeviceName_114 = deviceName[114];
				DeviceName_115 = deviceName[115];
				DeviceName_116 = deviceName[116];
				DeviceName_117 = deviceName[117];
				DeviceName_118 = deviceName[118];
				DeviceName_119 = deviceName[119];
				DeviceName_120 = deviceName[120];
				DeviceName_121 = deviceName[121];
				DeviceName_122 = deviceName[122];
				DeviceName_123 = deviceName[123];
				DeviceName_124 = deviceName[124];
				DeviceName_125 = deviceName[125];
				DeviceName_126 = deviceName[126];
				DeviceName_127 = deviceName[127];
				DeviceName_128 = deviceName[128];
				DeviceName_129 = deviceName[129];
				DeviceName_130 = deviceName[130];
				DeviceName_131 = deviceName[131];
				DeviceName_132 = deviceName[132];
				DeviceName_133 = deviceName[133];
				DeviceName_134 = deviceName[134];
				DeviceName_135 = deviceName[135];
				DeviceName_136 = deviceName[136];
				DeviceName_137 = deviceName[137];
				DeviceName_138 = deviceName[138];
				DeviceName_139 = deviceName[139];
				DeviceName_140 = deviceName[140];
				DeviceName_141 = deviceName[141];
				DeviceName_142 = deviceName[142];
				DeviceName_143 = deviceName[143];
				DeviceName_144 = deviceName[144];
				DeviceName_145 = deviceName[145];
				DeviceName_146 = deviceName[146];
				DeviceName_147 = deviceName[147];
				DeviceName_148 = deviceName[148];
				DeviceName_149 = deviceName[149];
				DeviceName_150 = deviceName[150];
				DeviceName_151 = deviceName[151];
				DeviceName_152 = deviceName[152];
				DeviceName_153 = deviceName[153];
				DeviceName_154 = deviceName[154];
				DeviceName_155 = deviceName[155];
				DeviceName_156 = deviceName[156];
				DeviceName_157 = deviceName[157];
				DeviceName_158 = deviceName[158];
				DeviceName_159 = deviceName[159];
				DeviceName_160 = deviceName[160];
				DeviceName_161 = deviceName[161];
				DeviceName_162 = deviceName[162];
				DeviceName_163 = deviceName[163];
				DeviceName_164 = deviceName[164];
				DeviceName_165 = deviceName[165];
				DeviceName_166 = deviceName[166];
				DeviceName_167 = deviceName[167];
				DeviceName_168 = deviceName[168];
				DeviceName_169 = deviceName[169];
				DeviceName_170 = deviceName[170];
				DeviceName_171 = deviceName[171];
				DeviceName_172 = deviceName[172];
				DeviceName_173 = deviceName[173];
				DeviceName_174 = deviceName[174];
				DeviceName_175 = deviceName[175];
				DeviceName_176 = deviceName[176];
				DeviceName_177 = deviceName[177];
				DeviceName_178 = deviceName[178];
				DeviceName_179 = deviceName[179];
				DeviceName_180 = deviceName[180];
				DeviceName_181 = deviceName[181];
				DeviceName_182 = deviceName[182];
				DeviceName_183 = deviceName[183];
				DeviceName_184 = deviceName[184];
				DeviceName_185 = deviceName[185];
				DeviceName_186 = deviceName[186];
				DeviceName_187 = deviceName[187];
				DeviceName_188 = deviceName[188];
				DeviceName_189 = deviceName[189];
				DeviceName_190 = deviceName[190];
				DeviceName_191 = deviceName[191];
				DeviceName_192 = deviceName[192];
				DeviceName_193 = deviceName[193];
				DeviceName_194 = deviceName[194];
				DeviceName_195 = deviceName[195];
				DeviceName_196 = deviceName[196];
				DeviceName_197 = deviceName[197];
				DeviceName_198 = deviceName[198];
				DeviceName_199 = deviceName[199];
				DeviceName_200 = deviceName[200];
				DeviceName_201 = deviceName[201];
				DeviceName_202 = deviceName[202];
				DeviceName_203 = deviceName[203];
				DeviceName_204 = deviceName[204];
				DeviceName_205 = deviceName[205];
				DeviceName_206 = deviceName[206];
				DeviceName_207 = deviceName[207];
				DeviceName_208 = deviceName[208];
				DeviceName_209 = deviceName[209];
				DeviceName_210 = deviceName[210];
				DeviceName_211 = deviceName[211];
				DeviceName_212 = deviceName[212];
				DeviceName_213 = deviceName[213];
				DeviceName_214 = deviceName[214];
				DeviceName_215 = deviceName[215];
				DeviceName_216 = deviceName[216];
				DeviceName_217 = deviceName[217];
				DeviceName_218 = deviceName[218];
				DeviceName_219 = deviceName[219];
				DeviceName_220 = deviceName[220];
				DeviceName_221 = deviceName[221];
				DeviceName_222 = deviceName[222];
				DeviceName_223 = deviceName[223];
				DeviceName_224 = deviceName[224];
				DeviceName_225 = deviceName[225];
				DeviceName_226 = deviceName[226];
				DeviceName_227 = deviceName[227];
				DeviceName_228 = deviceName[228];
				DeviceName_229 = deviceName[229];
				DeviceName_230 = deviceName[230];
				DeviceName_231 = deviceName[231];
				DeviceName_232 = deviceName[232];
				DeviceName_233 = deviceName[233];
				DeviceName_234 = deviceName[234];
				DeviceName_235 = deviceName[235];
				DeviceName_236 = deviceName[236];
				DeviceName_237 = deviceName[237];
				DeviceName_238 = deviceName[238];
				DeviceName_239 = deviceName[239];
				DeviceName_240 = deviceName[240];
				DeviceName_241 = deviceName[241];
				DeviceName_242 = deviceName[242];
				DeviceName_243 = deviceName[243];
				DeviceName_244 = deviceName[244];
				DeviceName_245 = deviceName[245];
				DeviceName_246 = deviceName[246];
				DeviceName_247 = deviceName[247];
				DeviceName_248 = deviceName[248];
				DeviceName_249 = deviceName[249];
				DeviceName_250 = deviceName[250];
				DeviceName_251 = deviceName[251];
				DeviceName_252 = deviceName[252];
				DeviceName_253 = deviceName[253];
				DeviceName_254 = deviceName[254];
				DeviceName_255 = deviceName[255];
			}
			if (pipelineCacheUuid != default)
			{
				PipelineCacheUuid_0 = pipelineCacheUuid[0];
				PipelineCacheUuid_1 = pipelineCacheUuid[1];
				PipelineCacheUuid_2 = pipelineCacheUuid[2];
				PipelineCacheUuid_3 = pipelineCacheUuid[3];
				PipelineCacheUuid_4 = pipelineCacheUuid[4];
				PipelineCacheUuid_5 = pipelineCacheUuid[5];
				PipelineCacheUuid_6 = pipelineCacheUuid[6];
				PipelineCacheUuid_7 = pipelineCacheUuid[7];
				PipelineCacheUuid_8 = pipelineCacheUuid[8];
				PipelineCacheUuid_9 = pipelineCacheUuid[9];
				PipelineCacheUuid_10 = pipelineCacheUuid[10];
				PipelineCacheUuid_11 = pipelineCacheUuid[11];
				PipelineCacheUuid_12 = pipelineCacheUuid[12];
				PipelineCacheUuid_13 = pipelineCacheUuid[13];
				PipelineCacheUuid_14 = pipelineCacheUuid[14];
				PipelineCacheUuid_15 = pipelineCacheUuid[15];
			}
			Limits = limits;
			MeshShaderProperties = meshShaderProperties;
			RayTracingPipelineProperties = rayTracingPipelineProperties;
			AccelerationStructureProperties = accelerationStructureProperties;
			RayTracingInvocationReorderProperties = rayTracingInvocationReorderProperties;
		}

		public unsafe DaxaDeviceProperties(uint vulkanApiVersion = default, uint driverVersion = default, uint vendorId = default, uint deviceId = default, DaxaDeviceType deviceType = default, Span<byte> deviceName = default, Span<byte> pipelineCacheUuid = default, DaxaDeviceLimits limits = default, MeshShaderPropertiesUnion meshShaderProperties = default, RayTracingPipelinePropertiesUnion rayTracingPipelineProperties = default, AccelerationStructurePropertiesUnion accelerationStructureProperties = default, RayTracingInvocationReorderPropertiesUnion rayTracingInvocationReorderProperties = default)
		{
			VulkanApiVersion = vulkanApiVersion;
			DriverVersion = driverVersion;
			VendorId = vendorId;
			DeviceId = deviceId;
			DeviceType = deviceType;
			if (deviceName != default)
			{
				DeviceName_0 = deviceName[0];
				DeviceName_1 = deviceName[1];
				DeviceName_2 = deviceName[2];
				DeviceName_3 = deviceName[3];
				DeviceName_4 = deviceName[4];
				DeviceName_5 = deviceName[5];
				DeviceName_6 = deviceName[6];
				DeviceName_7 = deviceName[7];
				DeviceName_8 = deviceName[8];
				DeviceName_9 = deviceName[9];
				DeviceName_10 = deviceName[10];
				DeviceName_11 = deviceName[11];
				DeviceName_12 = deviceName[12];
				DeviceName_13 = deviceName[13];
				DeviceName_14 = deviceName[14];
				DeviceName_15 = deviceName[15];
				DeviceName_16 = deviceName[16];
				DeviceName_17 = deviceName[17];
				DeviceName_18 = deviceName[18];
				DeviceName_19 = deviceName[19];
				DeviceName_20 = deviceName[20];
				DeviceName_21 = deviceName[21];
				DeviceName_22 = deviceName[22];
				DeviceName_23 = deviceName[23];
				DeviceName_24 = deviceName[24];
				DeviceName_25 = deviceName[25];
				DeviceName_26 = deviceName[26];
				DeviceName_27 = deviceName[27];
				DeviceName_28 = deviceName[28];
				DeviceName_29 = deviceName[29];
				DeviceName_30 = deviceName[30];
				DeviceName_31 = deviceName[31];
				DeviceName_32 = deviceName[32];
				DeviceName_33 = deviceName[33];
				DeviceName_34 = deviceName[34];
				DeviceName_35 = deviceName[35];
				DeviceName_36 = deviceName[36];
				DeviceName_37 = deviceName[37];
				DeviceName_38 = deviceName[38];
				DeviceName_39 = deviceName[39];
				DeviceName_40 = deviceName[40];
				DeviceName_41 = deviceName[41];
				DeviceName_42 = deviceName[42];
				DeviceName_43 = deviceName[43];
				DeviceName_44 = deviceName[44];
				DeviceName_45 = deviceName[45];
				DeviceName_46 = deviceName[46];
				DeviceName_47 = deviceName[47];
				DeviceName_48 = deviceName[48];
				DeviceName_49 = deviceName[49];
				DeviceName_50 = deviceName[50];
				DeviceName_51 = deviceName[51];
				DeviceName_52 = deviceName[52];
				DeviceName_53 = deviceName[53];
				DeviceName_54 = deviceName[54];
				DeviceName_55 = deviceName[55];
				DeviceName_56 = deviceName[56];
				DeviceName_57 = deviceName[57];
				DeviceName_58 = deviceName[58];
				DeviceName_59 = deviceName[59];
				DeviceName_60 = deviceName[60];
				DeviceName_61 = deviceName[61];
				DeviceName_62 = deviceName[62];
				DeviceName_63 = deviceName[63];
				DeviceName_64 = deviceName[64];
				DeviceName_65 = deviceName[65];
				DeviceName_66 = deviceName[66];
				DeviceName_67 = deviceName[67];
				DeviceName_68 = deviceName[68];
				DeviceName_69 = deviceName[69];
				DeviceName_70 = deviceName[70];
				DeviceName_71 = deviceName[71];
				DeviceName_72 = deviceName[72];
				DeviceName_73 = deviceName[73];
				DeviceName_74 = deviceName[74];
				DeviceName_75 = deviceName[75];
				DeviceName_76 = deviceName[76];
				DeviceName_77 = deviceName[77];
				DeviceName_78 = deviceName[78];
				DeviceName_79 = deviceName[79];
				DeviceName_80 = deviceName[80];
				DeviceName_81 = deviceName[81];
				DeviceName_82 = deviceName[82];
				DeviceName_83 = deviceName[83];
				DeviceName_84 = deviceName[84];
				DeviceName_85 = deviceName[85];
				DeviceName_86 = deviceName[86];
				DeviceName_87 = deviceName[87];
				DeviceName_88 = deviceName[88];
				DeviceName_89 = deviceName[89];
				DeviceName_90 = deviceName[90];
				DeviceName_91 = deviceName[91];
				DeviceName_92 = deviceName[92];
				DeviceName_93 = deviceName[93];
				DeviceName_94 = deviceName[94];
				DeviceName_95 = deviceName[95];
				DeviceName_96 = deviceName[96];
				DeviceName_97 = deviceName[97];
				DeviceName_98 = deviceName[98];
				DeviceName_99 = deviceName[99];
				DeviceName_100 = deviceName[100];
				DeviceName_101 = deviceName[101];
				DeviceName_102 = deviceName[102];
				DeviceName_103 = deviceName[103];
				DeviceName_104 = deviceName[104];
				DeviceName_105 = deviceName[105];
				DeviceName_106 = deviceName[106];
				DeviceName_107 = deviceName[107];
				DeviceName_108 = deviceName[108];
				DeviceName_109 = deviceName[109];
				DeviceName_110 = deviceName[110];
				DeviceName_111 = deviceName[111];
				DeviceName_112 = deviceName[112];
				DeviceName_113 = deviceName[113];
				DeviceName_114 = deviceName[114];
				DeviceName_115 = deviceName[115];
				DeviceName_116 = deviceName[116];
				DeviceName_117 = deviceName[117];
				DeviceName_118 = deviceName[118];
				DeviceName_119 = deviceName[119];
				DeviceName_120 = deviceName[120];
				DeviceName_121 = deviceName[121];
				DeviceName_122 = deviceName[122];
				DeviceName_123 = deviceName[123];
				DeviceName_124 = deviceName[124];
				DeviceName_125 = deviceName[125];
				DeviceName_126 = deviceName[126];
				DeviceName_127 = deviceName[127];
				DeviceName_128 = deviceName[128];
				DeviceName_129 = deviceName[129];
				DeviceName_130 = deviceName[130];
				DeviceName_131 = deviceName[131];
				DeviceName_132 = deviceName[132];
				DeviceName_133 = deviceName[133];
				DeviceName_134 = deviceName[134];
				DeviceName_135 = deviceName[135];
				DeviceName_136 = deviceName[136];
				DeviceName_137 = deviceName[137];
				DeviceName_138 = deviceName[138];
				DeviceName_139 = deviceName[139];
				DeviceName_140 = deviceName[140];
				DeviceName_141 = deviceName[141];
				DeviceName_142 = deviceName[142];
				DeviceName_143 = deviceName[143];
				DeviceName_144 = deviceName[144];
				DeviceName_145 = deviceName[145];
				DeviceName_146 = deviceName[146];
				DeviceName_147 = deviceName[147];
				DeviceName_148 = deviceName[148];
				DeviceName_149 = deviceName[149];
				DeviceName_150 = deviceName[150];
				DeviceName_151 = deviceName[151];
				DeviceName_152 = deviceName[152];
				DeviceName_153 = deviceName[153];
				DeviceName_154 = deviceName[154];
				DeviceName_155 = deviceName[155];
				DeviceName_156 = deviceName[156];
				DeviceName_157 = deviceName[157];
				DeviceName_158 = deviceName[158];
				DeviceName_159 = deviceName[159];
				DeviceName_160 = deviceName[160];
				DeviceName_161 = deviceName[161];
				DeviceName_162 = deviceName[162];
				DeviceName_163 = deviceName[163];
				DeviceName_164 = deviceName[164];
				DeviceName_165 = deviceName[165];
				DeviceName_166 = deviceName[166];
				DeviceName_167 = deviceName[167];
				DeviceName_168 = deviceName[168];
				DeviceName_169 = deviceName[169];
				DeviceName_170 = deviceName[170];
				DeviceName_171 = deviceName[171];
				DeviceName_172 = deviceName[172];
				DeviceName_173 = deviceName[173];
				DeviceName_174 = deviceName[174];
				DeviceName_175 = deviceName[175];
				DeviceName_176 = deviceName[176];
				DeviceName_177 = deviceName[177];
				DeviceName_178 = deviceName[178];
				DeviceName_179 = deviceName[179];
				DeviceName_180 = deviceName[180];
				DeviceName_181 = deviceName[181];
				DeviceName_182 = deviceName[182];
				DeviceName_183 = deviceName[183];
				DeviceName_184 = deviceName[184];
				DeviceName_185 = deviceName[185];
				DeviceName_186 = deviceName[186];
				DeviceName_187 = deviceName[187];
				DeviceName_188 = deviceName[188];
				DeviceName_189 = deviceName[189];
				DeviceName_190 = deviceName[190];
				DeviceName_191 = deviceName[191];
				DeviceName_192 = deviceName[192];
				DeviceName_193 = deviceName[193];
				DeviceName_194 = deviceName[194];
				DeviceName_195 = deviceName[195];
				DeviceName_196 = deviceName[196];
				DeviceName_197 = deviceName[197];
				DeviceName_198 = deviceName[198];
				DeviceName_199 = deviceName[199];
				DeviceName_200 = deviceName[200];
				DeviceName_201 = deviceName[201];
				DeviceName_202 = deviceName[202];
				DeviceName_203 = deviceName[203];
				DeviceName_204 = deviceName[204];
				DeviceName_205 = deviceName[205];
				DeviceName_206 = deviceName[206];
				DeviceName_207 = deviceName[207];
				DeviceName_208 = deviceName[208];
				DeviceName_209 = deviceName[209];
				DeviceName_210 = deviceName[210];
				DeviceName_211 = deviceName[211];
				DeviceName_212 = deviceName[212];
				DeviceName_213 = deviceName[213];
				DeviceName_214 = deviceName[214];
				DeviceName_215 = deviceName[215];
				DeviceName_216 = deviceName[216];
				DeviceName_217 = deviceName[217];
				DeviceName_218 = deviceName[218];
				DeviceName_219 = deviceName[219];
				DeviceName_220 = deviceName[220];
				DeviceName_221 = deviceName[221];
				DeviceName_222 = deviceName[222];
				DeviceName_223 = deviceName[223];
				DeviceName_224 = deviceName[224];
				DeviceName_225 = deviceName[225];
				DeviceName_226 = deviceName[226];
				DeviceName_227 = deviceName[227];
				DeviceName_228 = deviceName[228];
				DeviceName_229 = deviceName[229];
				DeviceName_230 = deviceName[230];
				DeviceName_231 = deviceName[231];
				DeviceName_232 = deviceName[232];
				DeviceName_233 = deviceName[233];
				DeviceName_234 = deviceName[234];
				DeviceName_235 = deviceName[235];
				DeviceName_236 = deviceName[236];
				DeviceName_237 = deviceName[237];
				DeviceName_238 = deviceName[238];
				DeviceName_239 = deviceName[239];
				DeviceName_240 = deviceName[240];
				DeviceName_241 = deviceName[241];
				DeviceName_242 = deviceName[242];
				DeviceName_243 = deviceName[243];
				DeviceName_244 = deviceName[244];
				DeviceName_245 = deviceName[245];
				DeviceName_246 = deviceName[246];
				DeviceName_247 = deviceName[247];
				DeviceName_248 = deviceName[248];
				DeviceName_249 = deviceName[249];
				DeviceName_250 = deviceName[250];
				DeviceName_251 = deviceName[251];
				DeviceName_252 = deviceName[252];
				DeviceName_253 = deviceName[253];
				DeviceName_254 = deviceName[254];
				DeviceName_255 = deviceName[255];
			}
			if (pipelineCacheUuid != default)
			{
				PipelineCacheUuid_0 = pipelineCacheUuid[0];
				PipelineCacheUuid_1 = pipelineCacheUuid[1];
				PipelineCacheUuid_2 = pipelineCacheUuid[2];
				PipelineCacheUuid_3 = pipelineCacheUuid[3];
				PipelineCacheUuid_4 = pipelineCacheUuid[4];
				PipelineCacheUuid_5 = pipelineCacheUuid[5];
				PipelineCacheUuid_6 = pipelineCacheUuid[6];
				PipelineCacheUuid_7 = pipelineCacheUuid[7];
				PipelineCacheUuid_8 = pipelineCacheUuid[8];
				PipelineCacheUuid_9 = pipelineCacheUuid[9];
				PipelineCacheUuid_10 = pipelineCacheUuid[10];
				PipelineCacheUuid_11 = pipelineCacheUuid[11];
				PipelineCacheUuid_12 = pipelineCacheUuid[12];
				PipelineCacheUuid_13 = pipelineCacheUuid[13];
				PipelineCacheUuid_14 = pipelineCacheUuid[14];
				PipelineCacheUuid_15 = pipelineCacheUuid[15];
			}
			Limits = limits;
			MeshShaderProperties = meshShaderProperties;
			RayTracingPipelineProperties = rayTracingPipelineProperties;
			AccelerationStructureProperties = accelerationStructureProperties;
			RayTracingInvocationReorderProperties = rayTracingInvocationReorderProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_DeviceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaDeviceInfo
	{
		[NativeName(NativeNameType.Field, "selector")]
		[NativeName(NativeNameType.Type, "int32_t (*)(const daxa_DeviceProperties* properties)*")]
		public unsafe void* Selector;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "daxa_DeviceFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "max_allowed_images")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxAllowedImages;
		[NativeName(NativeNameType.Field, "max_allowed_buffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxAllowedBuffers;
		[NativeName(NativeNameType.Field, "max_allowed_samplers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxAllowedSamplers;
		[NativeName(NativeNameType.Field, "max_allowed_acceleration_structures")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxAllowedAccelerationStructures;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "daxa_SmallString")]
		public DaxaSmallString Name;

		public unsafe DaxaDeviceInfo(delegate*<DaxaDeviceProperties*, int> selector = default, uint flags = default, uint maxAllowedImages = default, uint maxAllowedBuffers = default, uint maxAllowedSamplers = default, uint maxAllowedAccelerationStructures = default, DaxaSmallString name = default)
		{
			Selector = (void*)selector;
			Flags = flags;
			MaxAllowedImages = maxAllowedImages;
			MaxAllowedBuffers = maxAllowedBuffers;
			MaxAllowedSamplers = maxAllowedSamplers;
			MaxAllowedAccelerationStructures = maxAllowedAccelerationStructures;
			Name = name;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_CommandSubmitInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaCommandSubmitInfo
	{
		[NativeName(NativeNameType.Field, "wait_stages")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags")]
		public uint WaitStages;
		[NativeName(NativeNameType.Field, "command_lists")]
		[NativeName(NativeNameType.Type, "const daxa_ExecutableCommandList*")]
		public unsafe DaxaExecutableCommandList* CommandLists;
		[NativeName(NativeNameType.Field, "command_list_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong CommandListCount;
		[NativeName(NativeNameType.Field, "wait_binary_semaphores")]
		[NativeName(NativeNameType.Type, "const daxa_BinarySemaphore*")]
		public unsafe DaxaBinarySemaphore* WaitBinarySemaphores;
		[NativeName(NativeNameType.Field, "wait_binary_semaphore_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong WaitBinarySemaphoreCount;
		[NativeName(NativeNameType.Field, "signal_binary_semaphores")]
		[NativeName(NativeNameType.Type, "const daxa_BinarySemaphore*")]
		public unsafe DaxaBinarySemaphore* SignalBinarySemaphores;
		[NativeName(NativeNameType.Field, "signal_binary_semaphore_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong SignalBinarySemaphoreCount;
		[NativeName(NativeNameType.Field, "wait_timeline_semaphores")]
		[NativeName(NativeNameType.Type, "const daxa_TimelinePair*")]
		public unsafe DaxaTimelinePair* WaitTimelineSemaphores;
		[NativeName(NativeNameType.Field, "wait_timeline_semaphore_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong WaitTimelineSemaphoreCount;
		[NativeName(NativeNameType.Field, "signal_timeline_semaphores")]
		[NativeName(NativeNameType.Type, "const daxa_TimelinePair*")]
		public unsafe DaxaTimelinePair* SignalTimelineSemaphores;
		[NativeName(NativeNameType.Field, "signal_timeline_semaphore_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong SignalTimelineSemaphoreCount;

		public unsafe DaxaCommandSubmitInfo(uint waitStages = default, DaxaExecutableCommandList* commandLists = default, ulong commandListCount = default, DaxaBinarySemaphore* waitBinarySemaphores = default, ulong waitBinarySemaphoreCount = default, DaxaBinarySemaphore* signalBinarySemaphores = default, ulong signalBinarySemaphoreCount = default, DaxaTimelinePair* waitTimelineSemaphores = default, ulong waitTimelineSemaphoreCount = default, DaxaTimelinePair* signalTimelineSemaphores = default, ulong signalTimelineSemaphoreCount = default)
		{
			WaitStages = waitStages;
			CommandLists = commandLists;
			CommandListCount = commandListCount;
			WaitBinarySemaphores = waitBinarySemaphores;
			WaitBinarySemaphoreCount = waitBinarySemaphoreCount;
			SignalBinarySemaphores = signalBinarySemaphores;
			SignalBinarySemaphoreCount = signalBinarySemaphoreCount;
			WaitTimelineSemaphores = waitTimelineSemaphores;
			WaitTimelineSemaphoreCount = waitTimelineSemaphoreCount;
			SignalTimelineSemaphores = signalTimelineSemaphores;
			SignalTimelineSemaphoreCount = signalTimelineSemaphoreCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_PresentInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaPresentInfo
	{
		[NativeName(NativeNameType.Field, "wait_binary_semaphores")]
		[NativeName(NativeNameType.Type, "const daxa_BinarySemaphore*")]
		public unsafe DaxaBinarySemaphore* WaitBinarySemaphores;
		[NativeName(NativeNameType.Field, "wait_binary_semaphore_count")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong WaitBinarySemaphoreCount;
		[NativeName(NativeNameType.Field, "swapchain")]
		[NativeName(NativeNameType.Type, "daxa_Swapchain")]
		public DaxaSwapchain Swapchain;

		public unsafe DaxaPresentInfo(DaxaBinarySemaphore* waitBinarySemaphores = default, ulong waitBinarySemaphoreCount = default, DaxaSwapchain swapchain = default)
		{
			WaitBinarySemaphores = waitBinarySemaphores;
			WaitBinarySemaphoreCount = waitBinarySemaphoreCount;
			Swapchain = swapchain;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_MemoryBlockBufferInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaMemoryBlockBufferInfo
	{
		[NativeName(NativeNameType.Field, "buffer_info")]
		[NativeName(NativeNameType.Type, "daxa_BufferInfo")]
		public DaxaBufferInfo BufferInfo;
		[NativeName(NativeNameType.Field, "memory_block")]
		[NativeName(NativeNameType.Type, "daxa_MemoryBlock*")]
		public unsafe DaxaMemoryBlock* MemoryBlock;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Offset;

		public unsafe DaxaMemoryBlockBufferInfo(DaxaBufferInfo bufferInfo = default, DaxaMemoryBlock* memoryBlock = default, ulong offset = default)
		{
			BufferInfo = bufferInfo;
			MemoryBlock = memoryBlock;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_MemoryBlockImageInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaMemoryBlockImageInfo
	{
		[NativeName(NativeNameType.Field, "image_info")]
		[NativeName(NativeNameType.Type, "daxa_ImageInfo")]
		public DaxaImageInfo ImageInfo;
		[NativeName(NativeNameType.Field, "memory_block")]
		[NativeName(NativeNameType.Type, "daxa_MemoryBlock*")]
		public unsafe DaxaMemoryBlock* MemoryBlock;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Offset;

		public unsafe DaxaMemoryBlockImageInfo(DaxaImageInfo imageInfo = default, DaxaMemoryBlock* memoryBlock = default, ulong offset = default)
		{
			ImageInfo = imageInfo;
			MemoryBlock = memoryBlock;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_BufferTlasInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaBufferTlasInfo
	{
		[NativeName(NativeNameType.Field, "tlas_info")]
		[NativeName(NativeNameType.Type, "daxa_TlasInfo")]
		public DaxaTlasInfo TlasInfo;
		[NativeName(NativeNameType.Field, "buffer_id")]
		[NativeName(NativeNameType.Type, "daxa_BufferId")]
		public DaxaBufferId BufferId;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Offset;

		public unsafe DaxaBufferTlasInfo(DaxaTlasInfo tlasInfo = default, DaxaBufferId bufferId = default, ulong offset = default)
		{
			TlasInfo = tlasInfo;
			BufferId = bufferId;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_BufferBlasInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaBufferBlasInfo
	{
		[NativeName(NativeNameType.Field, "blas_info")]
		[NativeName(NativeNameType.Type, "daxa_BlasInfo")]
		public DaxaBlasInfo BlasInfo;
		[NativeName(NativeNameType.Field, "buffer_id")]
		[NativeName(NativeNameType.Type, "daxa_BufferId")]
		public DaxaBufferId BufferId;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Offset;

		public unsafe DaxaBufferBlasInfo(DaxaBlasInfo blasInfo = default, DaxaBufferId bufferId = default, ulong offset = default)
		{
			BlasInfo = blasInfo;
			BufferId = bufferId;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_AccelerationStructureBuildSizesInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaAccelerationStructureBuildSizesInfo
	{
		[NativeName(NativeNameType.Field, "acceleration_structure_size")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong AccelerationStructureSize;
		[NativeName(NativeNameType.Field, "update_scratch_size")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong UpdateScratchSize;
		[NativeName(NativeNameType.Field, "build_scratch_size")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong BuildScratchSize;

		public unsafe DaxaAccelerationStructureBuildSizesInfo(ulong accelerationStructureSize = default, ulong updateScratchSize = default, ulong buildScratchSize = default)
		{
			AccelerationStructureSize = accelerationStructureSize;
			UpdateScratchSize = updateScratchSize;
			BuildScratchSize = buildScratchSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "daxa_InstanceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DaxaInstanceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "daxa_InstanceFlags")]
		public ulong Flags;
		[NativeName(NativeNameType.Field, "engine_name")]
		[NativeName(NativeNameType.Type, "daxa_SmallString")]
		public DaxaSmallString EngineName;
		[NativeName(NativeNameType.Field, "app_name")]
		[NativeName(NativeNameType.Type, "daxa_SmallString")]
		public DaxaSmallString AppName;

		public unsafe DaxaInstanceInfo(ulong flags = default, DaxaSmallString engineName = default, DaxaSmallString appName = default)
		{
			Flags = flags;
			EngineName = engineName;
			AppName = appName;
		}


	}

}
