// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{
	[NativeName(NativeNameType.Typedef, "VkBuffer")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkBuffer : IEquatable<VkBuffer>
	{
		public VkBuffer(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkBuffer Null => new VkBuffer(0);
		public static implicit operator VkBuffer(nint handle) => new VkBuffer(handle);
		public static bool operator ==(VkBuffer left, VkBuffer right) => left.Handle == right.Handle;
		public static bool operator !=(VkBuffer left, VkBuffer right) => left.Handle != right.Handle;
		public static bool operator ==(VkBuffer left, nint right) => left.Handle == right;
		public static bool operator !=(VkBuffer left, nint right) => left.Handle != right;
		public bool Equals(VkBuffer other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkBuffer handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkBuffer [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkImage")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkImage : IEquatable<VkImage>
	{
		public VkImage(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkImage Null => new VkImage(0);
		public static implicit operator VkImage(nint handle) => new VkImage(handle);
		public static bool operator ==(VkImage left, VkImage right) => left.Handle == right.Handle;
		public static bool operator !=(VkImage left, VkImage right) => left.Handle != right.Handle;
		public static bool operator ==(VkImage left, nint right) => left.Handle == right;
		public static bool operator !=(VkImage left, nint right) => left.Handle != right;
		public bool Equals(VkImage other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkImage handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkImage [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkInstance")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkInstance : IEquatable<VkInstance>
	{
		public VkInstance(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkInstance Null => new VkInstance(0);
		public static implicit operator VkInstance(nint handle) => new VkInstance(handle);
		public static bool operator ==(VkInstance left, VkInstance right) => left.Handle == right.Handle;
		public static bool operator !=(VkInstance left, VkInstance right) => left.Handle != right.Handle;
		public static bool operator ==(VkInstance left, nint right) => left.Handle == right;
		public static bool operator !=(VkInstance left, nint right) => left.Handle != right;
		public bool Equals(VkInstance other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkInstance handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkInstance [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPhysicalDevice")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPhysicalDevice : IEquatable<VkPhysicalDevice>
	{
		public VkPhysicalDevice(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPhysicalDevice Null => new VkPhysicalDevice(0);
		public static implicit operator VkPhysicalDevice(nint handle) => new VkPhysicalDevice(handle);
		public static bool operator ==(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle == right.Handle;
		public static bool operator !=(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle != right.Handle;
		public static bool operator ==(VkPhysicalDevice left, nint right) => left.Handle == right;
		public static bool operator !=(VkPhysicalDevice left, nint right) => left.Handle != right;
		public bool Equals(VkPhysicalDevice other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPhysicalDevice handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPhysicalDevice [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDevice")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDevice : IEquatable<VkDevice>
	{
		public VkDevice(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDevice Null => new VkDevice(0);
		public static implicit operator VkDevice(nint handle) => new VkDevice(handle);
		public static bool operator ==(VkDevice left, VkDevice right) => left.Handle == right.Handle;
		public static bool operator !=(VkDevice left, VkDevice right) => left.Handle != right.Handle;
		public static bool operator ==(VkDevice left, nint right) => left.Handle == right;
		public static bool operator !=(VkDevice left, nint right) => left.Handle != right;
		public bool Equals(VkDevice other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDevice handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDevice [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkQueue")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkQueue : IEquatable<VkQueue>
	{
		public VkQueue(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkQueue Null => new VkQueue(0);
		public static implicit operator VkQueue(nint handle) => new VkQueue(handle);
		public static bool operator ==(VkQueue left, VkQueue right) => left.Handle == right.Handle;
		public static bool operator !=(VkQueue left, VkQueue right) => left.Handle != right.Handle;
		public static bool operator ==(VkQueue left, nint right) => left.Handle == right;
		public static bool operator !=(VkQueue left, nint right) => left.Handle != right;
		public bool Equals(VkQueue other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkQueue handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkQueue [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkSemaphore")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkSemaphore : IEquatable<VkSemaphore>
	{
		public VkSemaphore(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkSemaphore Null => new VkSemaphore(0);
		public static implicit operator VkSemaphore(nint handle) => new VkSemaphore(handle);
		public static bool operator ==(VkSemaphore left, VkSemaphore right) => left.Handle == right.Handle;
		public static bool operator !=(VkSemaphore left, VkSemaphore right) => left.Handle != right.Handle;
		public static bool operator ==(VkSemaphore left, nint right) => left.Handle == right;
		public static bool operator !=(VkSemaphore left, nint right) => left.Handle != right;
		public bool Equals(VkSemaphore other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkSemaphore handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkSemaphore [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkCommandBuffer")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkCommandBuffer : IEquatable<VkCommandBuffer>
	{
		public VkCommandBuffer(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkCommandBuffer Null => new VkCommandBuffer(0);
		public static implicit operator VkCommandBuffer(nint handle) => new VkCommandBuffer(handle);
		public static bool operator ==(VkCommandBuffer left, VkCommandBuffer right) => left.Handle == right.Handle;
		public static bool operator !=(VkCommandBuffer left, VkCommandBuffer right) => left.Handle != right.Handle;
		public static bool operator ==(VkCommandBuffer left, nint right) => left.Handle == right;
		public static bool operator !=(VkCommandBuffer left, nint right) => left.Handle != right;
		public bool Equals(VkCommandBuffer other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkCommandBuffer handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkCommandBuffer [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkFence")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkFence : IEquatable<VkFence>
	{
		public VkFence(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkFence Null => new VkFence(0);
		public static implicit operator VkFence(nint handle) => new VkFence(handle);
		public static bool operator ==(VkFence left, VkFence right) => left.Handle == right.Handle;
		public static bool operator !=(VkFence left, VkFence right) => left.Handle != right.Handle;
		public static bool operator ==(VkFence left, nint right) => left.Handle == right;
		public static bool operator !=(VkFence left, nint right) => left.Handle != right;
		public bool Equals(VkFence other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkFence handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkFence [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDeviceMemory")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDeviceMemory : IEquatable<VkDeviceMemory>
	{
		public VkDeviceMemory(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDeviceMemory Null => new VkDeviceMemory(0);
		public static implicit operator VkDeviceMemory(nint handle) => new VkDeviceMemory(handle);
		public static bool operator ==(VkDeviceMemory left, VkDeviceMemory right) => left.Handle == right.Handle;
		public static bool operator !=(VkDeviceMemory left, VkDeviceMemory right) => left.Handle != right.Handle;
		public static bool operator ==(VkDeviceMemory left, nint right) => left.Handle == right;
		public static bool operator !=(VkDeviceMemory left, nint right) => left.Handle != right;
		public bool Equals(VkDeviceMemory other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDeviceMemory handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDeviceMemory [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkEvent")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkEvent : IEquatable<VkEvent>
	{
		public VkEvent(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkEvent Null => new VkEvent(0);
		public static implicit operator VkEvent(nint handle) => new VkEvent(handle);
		public static bool operator ==(VkEvent left, VkEvent right) => left.Handle == right.Handle;
		public static bool operator !=(VkEvent left, VkEvent right) => left.Handle != right.Handle;
		public static bool operator ==(VkEvent left, nint right) => left.Handle == right;
		public static bool operator !=(VkEvent left, nint right) => left.Handle != right;
		public bool Equals(VkEvent other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkEvent handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkEvent [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkQueryPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkQueryPool : IEquatable<VkQueryPool>
	{
		public VkQueryPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkQueryPool Null => new VkQueryPool(0);
		public static implicit operator VkQueryPool(nint handle) => new VkQueryPool(handle);
		public static bool operator ==(VkQueryPool left, VkQueryPool right) => left.Handle == right.Handle;
		public static bool operator !=(VkQueryPool left, VkQueryPool right) => left.Handle != right.Handle;
		public static bool operator ==(VkQueryPool left, nint right) => left.Handle == right;
		public static bool operator !=(VkQueryPool left, nint right) => left.Handle != right;
		public bool Equals(VkQueryPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkQueryPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkQueryPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkBufferView")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkBufferView : IEquatable<VkBufferView>
	{
		public VkBufferView(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkBufferView Null => new VkBufferView(0);
		public static implicit operator VkBufferView(nint handle) => new VkBufferView(handle);
		public static bool operator ==(VkBufferView left, VkBufferView right) => left.Handle == right.Handle;
		public static bool operator !=(VkBufferView left, VkBufferView right) => left.Handle != right.Handle;
		public static bool operator ==(VkBufferView left, nint right) => left.Handle == right;
		public static bool operator !=(VkBufferView left, nint right) => left.Handle != right;
		public bool Equals(VkBufferView other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkBufferView handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkBufferView [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkImageView")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkImageView : IEquatable<VkImageView>
	{
		public VkImageView(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkImageView Null => new VkImageView(0);
		public static implicit operator VkImageView(nint handle) => new VkImageView(handle);
		public static bool operator ==(VkImageView left, VkImageView right) => left.Handle == right.Handle;
		public static bool operator !=(VkImageView left, VkImageView right) => left.Handle != right.Handle;
		public static bool operator ==(VkImageView left, nint right) => left.Handle == right;
		public static bool operator !=(VkImageView left, nint right) => left.Handle != right;
		public bool Equals(VkImageView other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkImageView handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkImageView [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkShaderModule")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkShaderModule : IEquatable<VkShaderModule>
	{
		public VkShaderModule(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkShaderModule Null => new VkShaderModule(0);
		public static implicit operator VkShaderModule(nint handle) => new VkShaderModule(handle);
		public static bool operator ==(VkShaderModule left, VkShaderModule right) => left.Handle == right.Handle;
		public static bool operator !=(VkShaderModule left, VkShaderModule right) => left.Handle != right.Handle;
		public static bool operator ==(VkShaderModule left, nint right) => left.Handle == right;
		public static bool operator !=(VkShaderModule left, nint right) => left.Handle != right;
		public bool Equals(VkShaderModule other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkShaderModule handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkShaderModule [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPipelineCache")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPipelineCache : IEquatable<VkPipelineCache>
	{
		public VkPipelineCache(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPipelineCache Null => new VkPipelineCache(0);
		public static implicit operator VkPipelineCache(nint handle) => new VkPipelineCache(handle);
		public static bool operator ==(VkPipelineCache left, VkPipelineCache right) => left.Handle == right.Handle;
		public static bool operator !=(VkPipelineCache left, VkPipelineCache right) => left.Handle != right.Handle;
		public static bool operator ==(VkPipelineCache left, nint right) => left.Handle == right;
		public static bool operator !=(VkPipelineCache left, nint right) => left.Handle != right;
		public bool Equals(VkPipelineCache other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPipelineCache handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPipelineCache [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPipelineLayout")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPipelineLayout : IEquatable<VkPipelineLayout>
	{
		public VkPipelineLayout(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPipelineLayout Null => new VkPipelineLayout(0);
		public static implicit operator VkPipelineLayout(nint handle) => new VkPipelineLayout(handle);
		public static bool operator ==(VkPipelineLayout left, VkPipelineLayout right) => left.Handle == right.Handle;
		public static bool operator !=(VkPipelineLayout left, VkPipelineLayout right) => left.Handle != right.Handle;
		public static bool operator ==(VkPipelineLayout left, nint right) => left.Handle == right;
		public static bool operator !=(VkPipelineLayout left, nint right) => left.Handle != right;
		public bool Equals(VkPipelineLayout other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPipelineLayout handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPipelineLayout [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPipeline")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPipeline : IEquatable<VkPipeline>
	{
		public VkPipeline(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPipeline Null => new VkPipeline(0);
		public static implicit operator VkPipeline(nint handle) => new VkPipeline(handle);
		public static bool operator ==(VkPipeline left, VkPipeline right) => left.Handle == right.Handle;
		public static bool operator !=(VkPipeline left, VkPipeline right) => left.Handle != right.Handle;
		public static bool operator ==(VkPipeline left, nint right) => left.Handle == right;
		public static bool operator !=(VkPipeline left, nint right) => left.Handle != right;
		public bool Equals(VkPipeline other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPipeline handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPipeline [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkRenderPass")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkRenderPass : IEquatable<VkRenderPass>
	{
		public VkRenderPass(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkRenderPass Null => new VkRenderPass(0);
		public static implicit operator VkRenderPass(nint handle) => new VkRenderPass(handle);
		public static bool operator ==(VkRenderPass left, VkRenderPass right) => left.Handle == right.Handle;
		public static bool operator !=(VkRenderPass left, VkRenderPass right) => left.Handle != right.Handle;
		public static bool operator ==(VkRenderPass left, nint right) => left.Handle == right;
		public static bool operator !=(VkRenderPass left, nint right) => left.Handle != right;
		public bool Equals(VkRenderPass other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkRenderPass handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkRenderPass [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDescriptorSetLayout")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDescriptorSetLayout : IEquatable<VkDescriptorSetLayout>
	{
		public VkDescriptorSetLayout(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDescriptorSetLayout Null => new VkDescriptorSetLayout(0);
		public static implicit operator VkDescriptorSetLayout(nint handle) => new VkDescriptorSetLayout(handle);
		public static bool operator ==(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle == right.Handle;
		public static bool operator !=(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle != right.Handle;
		public static bool operator ==(VkDescriptorSetLayout left, nint right) => left.Handle == right;
		public static bool operator !=(VkDescriptorSetLayout left, nint right) => left.Handle != right;
		public bool Equals(VkDescriptorSetLayout other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDescriptorSetLayout handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDescriptorSetLayout [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkSampler")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkSampler : IEquatable<VkSampler>
	{
		public VkSampler(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkSampler Null => new VkSampler(0);
		public static implicit operator VkSampler(nint handle) => new VkSampler(handle);
		public static bool operator ==(VkSampler left, VkSampler right) => left.Handle == right.Handle;
		public static bool operator !=(VkSampler left, VkSampler right) => left.Handle != right.Handle;
		public static bool operator ==(VkSampler left, nint right) => left.Handle == right;
		public static bool operator !=(VkSampler left, nint right) => left.Handle != right;
		public bool Equals(VkSampler other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkSampler handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkSampler [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDescriptorSet")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDescriptorSet : IEquatable<VkDescriptorSet>
	{
		public VkDescriptorSet(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDescriptorSet Null => new VkDescriptorSet(0);
		public static implicit operator VkDescriptorSet(nint handle) => new VkDescriptorSet(handle);
		public static bool operator ==(VkDescriptorSet left, VkDescriptorSet right) => left.Handle == right.Handle;
		public static bool operator !=(VkDescriptorSet left, VkDescriptorSet right) => left.Handle != right.Handle;
		public static bool operator ==(VkDescriptorSet left, nint right) => left.Handle == right;
		public static bool operator !=(VkDescriptorSet left, nint right) => left.Handle != right;
		public bool Equals(VkDescriptorSet other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDescriptorSet handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDescriptorSet [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDescriptorPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDescriptorPool : IEquatable<VkDescriptorPool>
	{
		public VkDescriptorPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDescriptorPool Null => new VkDescriptorPool(0);
		public static implicit operator VkDescriptorPool(nint handle) => new VkDescriptorPool(handle);
		public static bool operator ==(VkDescriptorPool left, VkDescriptorPool right) => left.Handle == right.Handle;
		public static bool operator !=(VkDescriptorPool left, VkDescriptorPool right) => left.Handle != right.Handle;
		public static bool operator ==(VkDescriptorPool left, nint right) => left.Handle == right;
		public static bool operator !=(VkDescriptorPool left, nint right) => left.Handle != right;
		public bool Equals(VkDescriptorPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDescriptorPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDescriptorPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkFramebuffer")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkFramebuffer : IEquatable<VkFramebuffer>
	{
		public VkFramebuffer(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkFramebuffer Null => new VkFramebuffer(0);
		public static implicit operator VkFramebuffer(nint handle) => new VkFramebuffer(handle);
		public static bool operator ==(VkFramebuffer left, VkFramebuffer right) => left.Handle == right.Handle;
		public static bool operator !=(VkFramebuffer left, VkFramebuffer right) => left.Handle != right.Handle;
		public static bool operator ==(VkFramebuffer left, nint right) => left.Handle == right;
		public static bool operator !=(VkFramebuffer left, nint right) => left.Handle != right;
		public bool Equals(VkFramebuffer other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkFramebuffer handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkFramebuffer [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkCommandPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkCommandPool : IEquatable<VkCommandPool>
	{
		public VkCommandPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkCommandPool Null => new VkCommandPool(0);
		public static implicit operator VkCommandPool(nint handle) => new VkCommandPool(handle);
		public static bool operator ==(VkCommandPool left, VkCommandPool right) => left.Handle == right.Handle;
		public static bool operator !=(VkCommandPool left, VkCommandPool right) => left.Handle != right.Handle;
		public static bool operator ==(VkCommandPool left, nint right) => left.Handle == right;
		public static bool operator !=(VkCommandPool left, nint right) => left.Handle != right;
		public bool Equals(VkCommandPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkCommandPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkCommandPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkSamplerYcbcrConversion")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkSamplerYcbcrConversion : IEquatable<VkSamplerYcbcrConversion>
	{
		public VkSamplerYcbcrConversion(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkSamplerYcbcrConversion Null => new VkSamplerYcbcrConversion(0);
		public static implicit operator VkSamplerYcbcrConversion(nint handle) => new VkSamplerYcbcrConversion(handle);
		public static bool operator ==(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle == right.Handle;
		public static bool operator !=(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle != right.Handle;
		public static bool operator ==(VkSamplerYcbcrConversion left, nint right) => left.Handle == right;
		public static bool operator !=(VkSamplerYcbcrConversion left, nint right) => left.Handle != right;
		public bool Equals(VkSamplerYcbcrConversion other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkSamplerYcbcrConversion handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkSamplerYcbcrConversion [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDescriptorUpdateTemplate")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDescriptorUpdateTemplate : IEquatable<VkDescriptorUpdateTemplate>
	{
		public VkDescriptorUpdateTemplate(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDescriptorUpdateTemplate Null => new VkDescriptorUpdateTemplate(0);
		public static implicit operator VkDescriptorUpdateTemplate(nint handle) => new VkDescriptorUpdateTemplate(handle);
		public static bool operator ==(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle == right.Handle;
		public static bool operator !=(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle != right.Handle;
		public static bool operator ==(VkDescriptorUpdateTemplate left, nint right) => left.Handle == right;
		public static bool operator !=(VkDescriptorUpdateTemplate left, nint right) => left.Handle != right;
		public bool Equals(VkDescriptorUpdateTemplate other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplate handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDescriptorUpdateTemplate [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPrivateDataSlot")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPrivateDataSlot : IEquatable<VkPrivateDataSlot>
	{
		public VkPrivateDataSlot(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPrivateDataSlot Null => new VkPrivateDataSlot(0);
		public static implicit operator VkPrivateDataSlot(nint handle) => new VkPrivateDataSlot(handle);
		public static bool operator ==(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle == right.Handle;
		public static bool operator !=(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle != right.Handle;
		public static bool operator ==(VkPrivateDataSlot left, nint right) => left.Handle == right;
		public static bool operator !=(VkPrivateDataSlot left, nint right) => left.Handle != right;
		public bool Equals(VkPrivateDataSlot other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPrivateDataSlot handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPrivateDataSlot [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkSurfaceKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkSurfaceKHR : IEquatable<VkSurfaceKHR>
	{
		public VkSurfaceKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkSurfaceKHR Null => new VkSurfaceKHR(0);
		public static implicit operator VkSurfaceKHR(nint handle) => new VkSurfaceKHR(handle);
		public static bool operator ==(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkSurfaceKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkSurfaceKHR left, nint right) => left.Handle != right;
		public bool Equals(VkSurfaceKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkSurfaceKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkSurfaceKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkSwapchainKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkSwapchainKHR : IEquatable<VkSwapchainKHR>
	{
		public VkSwapchainKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkSwapchainKHR Null => new VkSwapchainKHR(0);
		public static implicit operator VkSwapchainKHR(nint handle) => new VkSwapchainKHR(handle);
		public static bool operator ==(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkSwapchainKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkSwapchainKHR left, nint right) => left.Handle != right;
		public bool Equals(VkSwapchainKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkSwapchainKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkSwapchainKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDisplayKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDisplayKHR : IEquatable<VkDisplayKHR>
	{
		public VkDisplayKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDisplayKHR Null => new VkDisplayKHR(0);
		public static implicit operator VkDisplayKHR(nint handle) => new VkDisplayKHR(handle);
		public static bool operator ==(VkDisplayKHR left, VkDisplayKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkDisplayKHR left, VkDisplayKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkDisplayKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkDisplayKHR left, nint right) => left.Handle != right;
		public bool Equals(VkDisplayKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDisplayKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDisplayKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDisplayModeKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDisplayModeKHR : IEquatable<VkDisplayModeKHR>
	{
		public VkDisplayModeKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDisplayModeKHR Null => new VkDisplayModeKHR(0);
		public static implicit operator VkDisplayModeKHR(nint handle) => new VkDisplayModeKHR(handle);
		public static bool operator ==(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkDisplayModeKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkDisplayModeKHR left, nint right) => left.Handle != right;
		public bool Equals(VkDisplayModeKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDisplayModeKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDisplayModeKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkVideoSessionKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkVideoSessionKHR : IEquatable<VkVideoSessionKHR>
	{
		public VkVideoSessionKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkVideoSessionKHR Null => new VkVideoSessionKHR(0);
		public static implicit operator VkVideoSessionKHR(nint handle) => new VkVideoSessionKHR(handle);
		public static bool operator ==(VkVideoSessionKHR left, VkVideoSessionKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkVideoSessionKHR left, VkVideoSessionKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkVideoSessionKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkVideoSessionKHR left, nint right) => left.Handle != right;
		public bool Equals(VkVideoSessionKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkVideoSessionKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkVideoSessionKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkVideoSessionParametersKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkVideoSessionParametersKHR : IEquatable<VkVideoSessionParametersKHR>
	{
		public VkVideoSessionParametersKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkVideoSessionParametersKHR Null => new VkVideoSessionParametersKHR(0);
		public static implicit operator VkVideoSessionParametersKHR(nint handle) => new VkVideoSessionParametersKHR(handle);
		public static bool operator ==(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkVideoSessionParametersKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkVideoSessionParametersKHR left, nint right) => left.Handle != right;
		public bool Equals(VkVideoSessionParametersKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkVideoSessionParametersKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkVideoSessionParametersKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDeferredOperationKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDeferredOperationKHR : IEquatable<VkDeferredOperationKHR>
	{
		public VkDeferredOperationKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDeferredOperationKHR Null => new VkDeferredOperationKHR(0);
		public static implicit operator VkDeferredOperationKHR(nint handle) => new VkDeferredOperationKHR(handle);
		public static bool operator ==(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkDeferredOperationKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkDeferredOperationKHR left, nint right) => left.Handle != right;
		public bool Equals(VkDeferredOperationKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDeferredOperationKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDeferredOperationKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDebugReportCallbackEXT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDebugReportCallbackEXT : IEquatable<VkDebugReportCallbackEXT>
	{
		public VkDebugReportCallbackEXT(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDebugReportCallbackEXT Null => new VkDebugReportCallbackEXT(0);
		public static implicit operator VkDebugReportCallbackEXT(nint handle) => new VkDebugReportCallbackEXT(handle);
		public static bool operator ==(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle == right.Handle;
		public static bool operator !=(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle != right.Handle;
		public static bool operator ==(VkDebugReportCallbackEXT left, nint right) => left.Handle == right;
		public static bool operator !=(VkDebugReportCallbackEXT left, nint right) => left.Handle != right;
		public bool Equals(VkDebugReportCallbackEXT other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDebugReportCallbackEXT handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDebugReportCallbackEXT [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkCuModuleNVX")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkCuModuleNVX : IEquatable<VkCuModuleNVX>
	{
		public VkCuModuleNVX(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkCuModuleNVX Null => new VkCuModuleNVX(0);
		public static implicit operator VkCuModuleNVX(nint handle) => new VkCuModuleNVX(handle);
		public static bool operator ==(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle == right.Handle;
		public static bool operator !=(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle != right.Handle;
		public static bool operator ==(VkCuModuleNVX left, nint right) => left.Handle == right;
		public static bool operator !=(VkCuModuleNVX left, nint right) => left.Handle != right;
		public bool Equals(VkCuModuleNVX other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkCuModuleNVX handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkCuModuleNVX [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkCuFunctionNVX")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkCuFunctionNVX : IEquatable<VkCuFunctionNVX>
	{
		public VkCuFunctionNVX(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkCuFunctionNVX Null => new VkCuFunctionNVX(0);
		public static implicit operator VkCuFunctionNVX(nint handle) => new VkCuFunctionNVX(handle);
		public static bool operator ==(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle == right.Handle;
		public static bool operator !=(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle != right.Handle;
		public static bool operator ==(VkCuFunctionNVX left, nint right) => left.Handle == right;
		public static bool operator !=(VkCuFunctionNVX left, nint right) => left.Handle != right;
		public bool Equals(VkCuFunctionNVX other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkCuFunctionNVX handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkCuFunctionNVX [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkDebugUtilsMessengerEXT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkDebugUtilsMessengerEXT : IEquatable<VkDebugUtilsMessengerEXT>
	{
		public VkDebugUtilsMessengerEXT(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkDebugUtilsMessengerEXT Null => new VkDebugUtilsMessengerEXT(0);
		public static implicit operator VkDebugUtilsMessengerEXT(nint handle) => new VkDebugUtilsMessengerEXT(handle);
		public static bool operator ==(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle == right.Handle;
		public static bool operator !=(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle != right.Handle;
		public static bool operator ==(VkDebugUtilsMessengerEXT left, nint right) => left.Handle == right;
		public static bool operator !=(VkDebugUtilsMessengerEXT left, nint right) => left.Handle != right;
		public bool Equals(VkDebugUtilsMessengerEXT other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkDebugUtilsMessengerEXT handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkDebugUtilsMessengerEXT [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkValidationCacheEXT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkValidationCacheEXT : IEquatable<VkValidationCacheEXT>
	{
		public VkValidationCacheEXT(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkValidationCacheEXT Null => new VkValidationCacheEXT(0);
		public static implicit operator VkValidationCacheEXT(nint handle) => new VkValidationCacheEXT(handle);
		public static bool operator ==(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle == right.Handle;
		public static bool operator !=(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle != right.Handle;
		public static bool operator ==(VkValidationCacheEXT left, nint right) => left.Handle == right;
		public static bool operator !=(VkValidationCacheEXT left, nint right) => left.Handle != right;
		public bool Equals(VkValidationCacheEXT other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkValidationCacheEXT handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkValidationCacheEXT [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkAccelerationStructureNV")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkAccelerationStructureNV : IEquatable<VkAccelerationStructureNV>
	{
		public VkAccelerationStructureNV(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkAccelerationStructureNV Null => new VkAccelerationStructureNV(0);
		public static implicit operator VkAccelerationStructureNV(nint handle) => new VkAccelerationStructureNV(handle);
		public static bool operator ==(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle == right.Handle;
		public static bool operator !=(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle != right.Handle;
		public static bool operator ==(VkAccelerationStructureNV left, nint right) => left.Handle == right;
		public static bool operator !=(VkAccelerationStructureNV left, nint right) => left.Handle != right;
		public bool Equals(VkAccelerationStructureNV other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkAccelerationStructureNV handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkAccelerationStructureNV [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkPerformanceConfigurationINTEL")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkPerformanceConfigurationINTEL : IEquatable<VkPerformanceConfigurationINTEL>
	{
		public VkPerformanceConfigurationINTEL(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkPerformanceConfigurationINTEL Null => new VkPerformanceConfigurationINTEL(0);
		public static implicit operator VkPerformanceConfigurationINTEL(nint handle) => new VkPerformanceConfigurationINTEL(handle);
		public static bool operator ==(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle == right.Handle;
		public static bool operator !=(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle != right.Handle;
		public static bool operator ==(VkPerformanceConfigurationINTEL left, nint right) => left.Handle == right;
		public static bool operator !=(VkPerformanceConfigurationINTEL left, nint right) => left.Handle != right;
		public bool Equals(VkPerformanceConfigurationINTEL other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkPerformanceConfigurationINTEL handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkPerformanceConfigurationINTEL [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkIndirectCommandsLayoutNV")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkIndirectCommandsLayoutNV : IEquatable<VkIndirectCommandsLayoutNV>
	{
		public VkIndirectCommandsLayoutNV(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkIndirectCommandsLayoutNV Null => new VkIndirectCommandsLayoutNV(0);
		public static implicit operator VkIndirectCommandsLayoutNV(nint handle) => new VkIndirectCommandsLayoutNV(handle);
		public static bool operator ==(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle == right.Handle;
		public static bool operator !=(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle != right.Handle;
		public static bool operator ==(VkIndirectCommandsLayoutNV left, nint right) => left.Handle == right;
		public static bool operator !=(VkIndirectCommandsLayoutNV left, nint right) => left.Handle != right;
		public bool Equals(VkIndirectCommandsLayoutNV other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutNV handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkIndirectCommandsLayoutNV [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkAccelerationStructureKHR")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkAccelerationStructureKHR : IEquatable<VkAccelerationStructureKHR>
	{
		public VkAccelerationStructureKHR(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkAccelerationStructureKHR Null => new VkAccelerationStructureKHR(0);
		public static implicit operator VkAccelerationStructureKHR(nint handle) => new VkAccelerationStructureKHR(handle);
		public static bool operator ==(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle == right.Handle;
		public static bool operator !=(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle != right.Handle;
		public static bool operator ==(VkAccelerationStructureKHR left, nint right) => left.Handle == right;
		public static bool operator !=(VkAccelerationStructureKHR left, nint right) => left.Handle != right;
		public bool Equals(VkAccelerationStructureKHR other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkAccelerationStructureKHR handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkAccelerationStructureKHR [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkRemoteAddressNV")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkRemoteAddressNV : IEquatable<VkRemoteAddressNV>
	{
		public VkRemoteAddressNV(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkRemoteAddressNV Null => new VkRemoteAddressNV(0);
		public static implicit operator VkRemoteAddressNV(nint handle) => new VkRemoteAddressNV(handle);
		public static bool operator ==(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle == right.Handle;
		public static bool operator !=(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle != right.Handle;
		public static bool operator ==(VkRemoteAddressNV left, nint right) => left.Handle == right;
		public static bool operator !=(VkRemoteAddressNV left, nint right) => left.Handle != right;
		public bool Equals(VkRemoteAddressNV other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkRemoteAddressNV handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkRemoteAddressNV [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkMicromapEXT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkMicromapEXT : IEquatable<VkMicromapEXT>
	{
		public VkMicromapEXT(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkMicromapEXT Null => new VkMicromapEXT(0);
		public static implicit operator VkMicromapEXT(nint handle) => new VkMicromapEXT(handle);
		public static bool operator ==(VkMicromapEXT left, VkMicromapEXT right) => left.Handle == right.Handle;
		public static bool operator !=(VkMicromapEXT left, VkMicromapEXT right) => left.Handle != right.Handle;
		public static bool operator ==(VkMicromapEXT left, nint right) => left.Handle == right;
		public static bool operator !=(VkMicromapEXT left, nint right) => left.Handle != right;
		public bool Equals(VkMicromapEXT other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkMicromapEXT handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkMicromapEXT [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkOpticalFlowSessionNV")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkOpticalFlowSessionNV : IEquatable<VkOpticalFlowSessionNV>
	{
		public VkOpticalFlowSessionNV(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkOpticalFlowSessionNV Null => new VkOpticalFlowSessionNV(0);
		public static implicit operator VkOpticalFlowSessionNV(nint handle) => new VkOpticalFlowSessionNV(handle);
		public static bool operator ==(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => left.Handle == right.Handle;
		public static bool operator !=(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => left.Handle != right.Handle;
		public static bool operator ==(VkOpticalFlowSessionNV left, nint right) => left.Handle == right;
		public static bool operator !=(VkOpticalFlowSessionNV left, nint right) => left.Handle != right;
		public bool Equals(VkOpticalFlowSessionNV other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkOpticalFlowSessionNV handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkOpticalFlowSessionNV [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VkShaderEXT")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VkShaderEXT : IEquatable<VkShaderEXT>
	{
		public VkShaderEXT(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VkShaderEXT Null => new VkShaderEXT(0);
		public static implicit operator VkShaderEXT(nint handle) => new VkShaderEXT(handle);
		public static bool operator ==(VkShaderEXT left, VkShaderEXT right) => left.Handle == right.Handle;
		public static bool operator !=(VkShaderEXT left, VkShaderEXT right) => left.Handle != right.Handle;
		public static bool operator ==(VkShaderEXT left, nint right) => left.Handle == right;
		public static bool operator !=(VkShaderEXT left, nint right) => left.Handle != right;
		public bool Equals(VkShaderEXT other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VkShaderEXT handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VkShaderEXT [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_Device")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaDevice : IEquatable<DaxaDevice>
	{
		public DaxaDevice(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaDevice Null => new DaxaDevice(0);
		public static implicit operator DaxaDevice(nint handle) => new DaxaDevice(handle);
		public static bool operator ==(DaxaDevice left, DaxaDevice right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaDevice left, DaxaDevice right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaDevice left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaDevice left, nint right) => left.Handle != right;
		public bool Equals(DaxaDevice other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaDevice handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaDevice [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_CommandRecorder")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaCommandRecorder : IEquatable<DaxaCommandRecorder>
	{
		public DaxaCommandRecorder(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaCommandRecorder Null => new DaxaCommandRecorder(0);
		public static implicit operator DaxaCommandRecorder(nint handle) => new DaxaCommandRecorder(handle);
		public static bool operator ==(DaxaCommandRecorder left, DaxaCommandRecorder right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaCommandRecorder left, DaxaCommandRecorder right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaCommandRecorder left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaCommandRecorder left, nint right) => left.Handle != right;
		public bool Equals(DaxaCommandRecorder other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaCommandRecorder handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaCommandRecorder [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_ExecutableCommandList")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaExecutableCommandList : IEquatable<DaxaExecutableCommandList>
	{
		public DaxaExecutableCommandList(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaExecutableCommandList Null => new DaxaExecutableCommandList(0);
		public static implicit operator DaxaExecutableCommandList(nint handle) => new DaxaExecutableCommandList(handle);
		public static bool operator ==(DaxaExecutableCommandList left, DaxaExecutableCommandList right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaExecutableCommandList left, DaxaExecutableCommandList right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaExecutableCommandList left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaExecutableCommandList left, nint right) => left.Handle != right;
		public bool Equals(DaxaExecutableCommandList other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaExecutableCommandList handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaExecutableCommandList [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_Instance")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaInstance : IEquatable<DaxaInstance>
	{
		public DaxaInstance(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaInstance Null => new DaxaInstance(0);
		public static implicit operator DaxaInstance(nint handle) => new DaxaInstance(handle);
		public static bool operator ==(DaxaInstance left, DaxaInstance right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaInstance left, DaxaInstance right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaInstance left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaInstance left, nint right) => left.Handle != right;
		public bool Equals(DaxaInstance other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaInstance handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaInstance [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_RayTracingPipeline")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaRayTracingPipeline : IEquatable<DaxaRayTracingPipeline>
	{
		public DaxaRayTracingPipeline(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaRayTracingPipeline Null => new DaxaRayTracingPipeline(0);
		public static implicit operator DaxaRayTracingPipeline(nint handle) => new DaxaRayTracingPipeline(handle);
		public static bool operator ==(DaxaRayTracingPipeline left, DaxaRayTracingPipeline right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaRayTracingPipeline left, DaxaRayTracingPipeline right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaRayTracingPipeline left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaRayTracingPipeline left, nint right) => left.Handle != right;
		public bool Equals(DaxaRayTracingPipeline other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaRayTracingPipeline handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaRayTracingPipeline [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_ComputePipeline")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaComputePipeline : IEquatable<DaxaComputePipeline>
	{
		public DaxaComputePipeline(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaComputePipeline Null => new DaxaComputePipeline(0);
		public static implicit operator DaxaComputePipeline(nint handle) => new DaxaComputePipeline(handle);
		public static bool operator ==(DaxaComputePipeline left, DaxaComputePipeline right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaComputePipeline left, DaxaComputePipeline right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaComputePipeline left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaComputePipeline left, nint right) => left.Handle != right;
		public bool Equals(DaxaComputePipeline other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaComputePipeline handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaComputePipeline [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_RasterPipeline")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaRasterPipeline : IEquatable<DaxaRasterPipeline>
	{
		public DaxaRasterPipeline(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaRasterPipeline Null => new DaxaRasterPipeline(0);
		public static implicit operator DaxaRasterPipeline(nint handle) => new DaxaRasterPipeline(handle);
		public static bool operator ==(DaxaRasterPipeline left, DaxaRasterPipeline right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaRasterPipeline left, DaxaRasterPipeline right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaRasterPipeline left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaRasterPipeline left, nint right) => left.Handle != right;
		public bool Equals(DaxaRasterPipeline other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaRasterPipeline handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaRasterPipeline [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_Swapchain")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaSwapchain : IEquatable<DaxaSwapchain>
	{
		public DaxaSwapchain(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaSwapchain Null => new DaxaSwapchain(0);
		public static implicit operator DaxaSwapchain(nint handle) => new DaxaSwapchain(handle);
		public static bool operator ==(DaxaSwapchain left, DaxaSwapchain right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaSwapchain left, DaxaSwapchain right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaSwapchain left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaSwapchain left, nint right) => left.Handle != right;
		public bool Equals(DaxaSwapchain other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaSwapchain handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaSwapchain [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_BinarySemaphore")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaBinarySemaphore : IEquatable<DaxaBinarySemaphore>
	{
		public DaxaBinarySemaphore(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaBinarySemaphore Null => new DaxaBinarySemaphore(0);
		public static implicit operator DaxaBinarySemaphore(nint handle) => new DaxaBinarySemaphore(handle);
		public static bool operator ==(DaxaBinarySemaphore left, DaxaBinarySemaphore right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaBinarySemaphore left, DaxaBinarySemaphore right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaBinarySemaphore left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaBinarySemaphore left, nint right) => left.Handle != right;
		public bool Equals(DaxaBinarySemaphore other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaBinarySemaphore handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaBinarySemaphore [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_TimelineSemaphore")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaTimelineSemaphore : IEquatable<DaxaTimelineSemaphore>
	{
		public DaxaTimelineSemaphore(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaTimelineSemaphore Null => new DaxaTimelineSemaphore(0);
		public static implicit operator DaxaTimelineSemaphore(nint handle) => new DaxaTimelineSemaphore(handle);
		public static bool operator ==(DaxaTimelineSemaphore left, DaxaTimelineSemaphore right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaTimelineSemaphore left, DaxaTimelineSemaphore right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaTimelineSemaphore left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaTimelineSemaphore left, nint right) => left.Handle != right;
		public bool Equals(DaxaTimelineSemaphore other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaTimelineSemaphore handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaTimelineSemaphore [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_Event")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaEvent : IEquatable<DaxaEvent>
	{
		public DaxaEvent(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaEvent Null => new DaxaEvent(0);
		public static implicit operator DaxaEvent(nint handle) => new DaxaEvent(handle);
		public static bool operator ==(DaxaEvent left, DaxaEvent right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaEvent left, DaxaEvent right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaEvent left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaEvent left, nint right) => left.Handle != right;
		public bool Equals(DaxaEvent other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaEvent handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaEvent [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_TimelineQueryPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaTimelineQueryPool : IEquatable<DaxaTimelineQueryPool>
	{
		public DaxaTimelineQueryPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaTimelineQueryPool Null => new DaxaTimelineQueryPool(0);
		public static implicit operator DaxaTimelineQueryPool(nint handle) => new DaxaTimelineQueryPool(handle);
		public static bool operator ==(DaxaTimelineQueryPool left, DaxaTimelineQueryPool right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaTimelineQueryPool left, DaxaTimelineQueryPool right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaTimelineQueryPool left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaTimelineQueryPool left, nint right) => left.Handle != right;
		public bool Equals(DaxaTimelineQueryPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaTimelineQueryPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaTimelineQueryPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "daxa_MemoryBlock")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaMemoryBlock : IEquatable<DaxaMemoryBlock>
	{
		public DaxaMemoryBlock(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaMemoryBlock Null => new DaxaMemoryBlock(0);
		public static implicit operator DaxaMemoryBlock(nint handle) => new DaxaMemoryBlock(handle);
		public static bool operator ==(DaxaMemoryBlock left, DaxaMemoryBlock right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaMemoryBlock left, DaxaMemoryBlock right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaMemoryBlock left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaMemoryBlock left, nint right) => left.Handle != right;
		public bool Equals(DaxaMemoryBlock other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaMemoryBlock handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaMemoryBlock [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaAllocator")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaAllocator : IEquatable<VmaAllocator>
	{
		public VmaAllocator(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaAllocator Null => new VmaAllocator(0);
		public static implicit operator VmaAllocator(nint handle) => new VmaAllocator(handle);
		public static bool operator ==(VmaAllocator left, VmaAllocator right) => left.Handle == right.Handle;
		public static bool operator !=(VmaAllocator left, VmaAllocator right) => left.Handle != right.Handle;
		public static bool operator ==(VmaAllocator left, nint right) => left.Handle == right;
		public static bool operator !=(VmaAllocator left, nint right) => left.Handle != right;
		public bool Equals(VmaAllocator other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaAllocator handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaAllocator [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaPool")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaPool : IEquatable<VmaPool>
	{
		public VmaPool(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaPool Null => new VmaPool(0);
		public static implicit operator VmaPool(nint handle) => new VmaPool(handle);
		public static bool operator ==(VmaPool left, VmaPool right) => left.Handle == right.Handle;
		public static bool operator !=(VmaPool left, VmaPool right) => left.Handle != right.Handle;
		public static bool operator ==(VmaPool left, nint right) => left.Handle == right;
		public static bool operator !=(VmaPool left, nint right) => left.Handle != right;
		public bool Equals(VmaPool other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaPool handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaPool [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaAllocation")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaAllocation : IEquatable<VmaAllocation>
	{
		public VmaAllocation(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaAllocation Null => new VmaAllocation(0);
		public static implicit operator VmaAllocation(nint handle) => new VmaAllocation(handle);
		public static bool operator ==(VmaAllocation left, VmaAllocation right) => left.Handle == right.Handle;
		public static bool operator !=(VmaAllocation left, VmaAllocation right) => left.Handle != right.Handle;
		public static bool operator ==(VmaAllocation left, nint right) => left.Handle == right;
		public static bool operator !=(VmaAllocation left, nint right) => left.Handle != right;
		public bool Equals(VmaAllocation other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaAllocation handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaAllocation [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaDefragmentationContext")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaDefragmentationContext : IEquatable<VmaDefragmentationContext>
	{
		public VmaDefragmentationContext(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaDefragmentationContext Null => new VmaDefragmentationContext(0);
		public static implicit operator VmaDefragmentationContext(nint handle) => new VmaDefragmentationContext(handle);
		public static bool operator ==(VmaDefragmentationContext left, VmaDefragmentationContext right) => left.Handle == right.Handle;
		public static bool operator !=(VmaDefragmentationContext left, VmaDefragmentationContext right) => left.Handle != right.Handle;
		public static bool operator ==(VmaDefragmentationContext left, nint right) => left.Handle == right;
		public static bool operator !=(VmaDefragmentationContext left, nint right) => left.Handle != right;
		public bool Equals(VmaDefragmentationContext other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaDefragmentationContext handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaDefragmentationContext [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaVirtualAllocation")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaVirtualAllocation : IEquatable<VmaVirtualAllocation>
	{
		public VmaVirtualAllocation(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaVirtualAllocation Null => new VmaVirtualAllocation(0);
		public static implicit operator VmaVirtualAllocation(nint handle) => new VmaVirtualAllocation(handle);
		public static bool operator ==(VmaVirtualAllocation left, VmaVirtualAllocation right) => left.Handle == right.Handle;
		public static bool operator !=(VmaVirtualAllocation left, VmaVirtualAllocation right) => left.Handle != right.Handle;
		public static bool operator ==(VmaVirtualAllocation left, nint right) => left.Handle == right;
		public static bool operator !=(VmaVirtualAllocation left, nint right) => left.Handle != right;
		public bool Equals(VmaVirtualAllocation other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaVirtualAllocation handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaVirtualAllocation [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "VmaVirtualBlock")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct VmaVirtualBlock : IEquatable<VmaVirtualBlock>
	{
		public VmaVirtualBlock(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static VmaVirtualBlock Null => new VmaVirtualBlock(0);
		public static implicit operator VmaVirtualBlock(nint handle) => new VmaVirtualBlock(handle);
		public static bool operator ==(VmaVirtualBlock left, VmaVirtualBlock right) => left.Handle == right.Handle;
		public static bool operator !=(VmaVirtualBlock left, VmaVirtualBlock right) => left.Handle != right.Handle;
		public static bool operator ==(VmaVirtualBlock left, nint right) => left.Handle == right;
		public static bool operator !=(VmaVirtualBlock left, nint right) => left.Handle != right;
		public bool Equals(VmaVirtualBlock other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is VmaVirtualBlock handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("VmaVirtualBlock [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Typedef, "daxa_NativeWindowHandle")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct DaxaNativeWindowHandle : IEquatable<DaxaNativeWindowHandle>
	{
		public DaxaNativeWindowHandle(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static DaxaNativeWindowHandle Null => new DaxaNativeWindowHandle(0);
		public static implicit operator DaxaNativeWindowHandle(nint handle) => new DaxaNativeWindowHandle(handle);
		public static bool operator ==(DaxaNativeWindowHandle left, DaxaNativeWindowHandle right) => left.Handle == right.Handle;
		public static bool operator !=(DaxaNativeWindowHandle left, DaxaNativeWindowHandle right) => left.Handle != right.Handle;
		public static bool operator ==(DaxaNativeWindowHandle left, nint right) => left.Handle == right;
		public static bool operator !=(DaxaNativeWindowHandle left, nint right) => left.Handle != right;
		public bool Equals(DaxaNativeWindowHandle other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is DaxaNativeWindowHandle handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("DaxaNativeWindowHandle [0x{0}]", Handle.ToString("X"));
	}

}
