// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{

	[NativeName(NativeNameType.StructOrClass, "VkSubmitInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubmitInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "waitSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WaitSemaphoreCount;
		[NativeName(NativeNameType.Field, "pWaitSemaphores")]
		[NativeName(NativeNameType.Type, "const VkSemaphore*")]
		public unsafe VkSemaphore* PWaitSemaphores;
		[NativeName(NativeNameType.Field, "pWaitDstStageMask")]
		[NativeName(NativeNameType.Type, "const VkPipelineStageFlags*")]
		public unsafe uint* PWaitDstStageMask;
		[NativeName(NativeNameType.Field, "commandBufferCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CommandBufferCount;
		[NativeName(NativeNameType.Field, "pCommandBuffers")]
		[NativeName(NativeNameType.Type, "const VkCommandBuffer*")]
		public unsafe VkCommandBuffer* PCommandBuffers;
		[NativeName(NativeNameType.Field, "signalSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SignalSemaphoreCount;
		[NativeName(NativeNameType.Field, "pSignalSemaphores")]
		[NativeName(NativeNameType.Type, "const VkSemaphore*")]
		public unsafe VkSemaphore* PSignalSemaphores;

		public unsafe VkSubmitInfo(VkStructureType sType = default, void* pNext = default, uint waitSemaphoreCount = default, VkSemaphore* pWaitSemaphores = default, uint* pWaitDstStageMask = default, uint commandBufferCount = default, VkCommandBuffer* pCommandBuffers = default, uint signalSemaphoreCount = default, VkSemaphore* pSignalSemaphores = default)
		{
			SType = sType;
			PNext = pNext;
			WaitSemaphoreCount = waitSemaphoreCount;
			PWaitSemaphores = pWaitSemaphores;
			PWaitDstStageMask = pWaitDstStageMask;
			CommandBufferCount = commandBufferCount;
			PCommandBuffers = pCommandBuffers;
			SignalSemaphoreCount = signalSemaphoreCount;
			PSignalSemaphores = pSignalSemaphores;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMappedMemoryRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMappedMemoryRange
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkMappedMemoryRange(VkStructureType sType = default, void* pNext = default, VkDeviceMemory memory = default, ulong offset = default, ulong size = default)
		{
			SType = sType;
			PNext = pNext;
			Memory = memory;
			Offset = offset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryAllocateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryAllocateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "allocationSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong AllocationSize;
		[NativeName(NativeNameType.Field, "memoryTypeIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryTypeIndex;

		public unsafe VkMemoryAllocateInfo(VkStructureType sType = default, void* pNext = default, ulong allocationSize = default, uint memoryTypeIndex = default)
		{
			SType = sType;
			PNext = pNext;
			AllocationSize = allocationSize;
			MemoryTypeIndex = memoryTypeIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryRequirements")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryRequirements
	{
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "alignment")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Alignment;
		[NativeName(NativeNameType.Field, "memoryTypeBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryTypeBits;

		public unsafe VkMemoryRequirements(ulong size = default, ulong alignment = default, uint memoryTypeBits = default)
		{
			Size = size;
			Alignment = alignment;
			MemoryTypeBits = memoryTypeBits;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseMemoryBind")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseMemoryBind
	{
		[NativeName(NativeNameType.Field, "resourceOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong ResourceOffset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "memoryOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemoryOffset;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSparseMemoryBindFlags")]
		public uint Flags;

		public unsafe VkSparseMemoryBind(ulong resourceOffset = default, ulong size = default, VkDeviceMemory memory = default, ulong memoryOffset = default, uint flags = default)
		{
			ResourceOffset = resourceOffset;
			Size = size;
			Memory = memory;
			MemoryOffset = memoryOffset;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseBufferMemoryBindInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseBufferMemoryBindInfo
	{
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "bindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BindCount;
		[NativeName(NativeNameType.Field, "pBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseMemoryBind*")]
		public unsafe VkSparseMemoryBind* PBinds;

		public unsafe VkSparseBufferMemoryBindInfo(VkBuffer buffer = default, uint bindCount = default, VkSparseMemoryBind* pBinds = default)
		{
			Buffer = buffer;
			BindCount = bindCount;
			PBinds = pBinds;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageOpaqueMemoryBindInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageOpaqueMemoryBindInfo
	{
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "bindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BindCount;
		[NativeName(NativeNameType.Field, "pBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseMemoryBind*")]
		public unsafe VkSparseMemoryBind* PBinds;

		public unsafe VkSparseImageOpaqueMemoryBindInfo(VkImage image = default, uint bindCount = default, VkSparseMemoryBind* pBinds = default)
		{
			Image = image;
			BindCount = bindCount;
			PBinds = pBinds;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageSubresource")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageSubresource
	{
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;
		[NativeName(NativeNameType.Field, "mipLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MipLevel;
		[NativeName(NativeNameType.Field, "arrayLayer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ArrayLayer;

		public unsafe VkImageSubresource(uint aspectMask = default, uint mipLevel = default, uint arrayLayer = default)
		{
			AspectMask = aspectMask;
			MipLevel = mipLevel;
			ArrayLayer = arrayLayer;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageMemoryBind")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageMemoryBind
	{
		[NativeName(NativeNameType.Field, "subresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresource")]
		public VkImageSubresource Subresource;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D Offset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D Extent;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "memoryOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemoryOffset;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSparseMemoryBindFlags")]
		public uint Flags;

		public unsafe VkSparseImageMemoryBind(VkImageSubresource subresource = default, VkOffset3D offset = default, VkExtent3D extent = default, VkDeviceMemory memory = default, ulong memoryOffset = default, uint flags = default)
		{
			Subresource = subresource;
			Offset = offset;
			Extent = extent;
			Memory = memory;
			MemoryOffset = memoryOffset;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageMemoryBindInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageMemoryBindInfo
	{
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "bindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BindCount;
		[NativeName(NativeNameType.Field, "pBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseImageMemoryBind*")]
		public unsafe VkSparseImageMemoryBind* PBinds;

		public unsafe VkSparseImageMemoryBindInfo(VkImage image = default, uint bindCount = default, VkSparseImageMemoryBind* pBinds = default)
		{
			Image = image;
			BindCount = bindCount;
			PBinds = pBinds;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindSparseInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindSparseInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "waitSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WaitSemaphoreCount;
		[NativeName(NativeNameType.Field, "pWaitSemaphores")]
		[NativeName(NativeNameType.Type, "const VkSemaphore*")]
		public unsafe VkSemaphore* PWaitSemaphores;
		[NativeName(NativeNameType.Field, "bufferBindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BufferBindCount;
		[NativeName(NativeNameType.Field, "pBufferBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseBufferMemoryBindInfo*")]
		public unsafe VkSparseBufferMemoryBindInfo* PBufferBinds;
		[NativeName(NativeNameType.Field, "imageOpaqueBindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImageOpaqueBindCount;
		[NativeName(NativeNameType.Field, "pImageOpaqueBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseImageOpaqueMemoryBindInfo*")]
		public unsafe VkSparseImageOpaqueMemoryBindInfo* PImageOpaqueBinds;
		[NativeName(NativeNameType.Field, "imageBindCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImageBindCount;
		[NativeName(NativeNameType.Field, "pImageBinds")]
		[NativeName(NativeNameType.Type, "const VkSparseImageMemoryBindInfo*")]
		public unsafe VkSparseImageMemoryBindInfo* PImageBinds;
		[NativeName(NativeNameType.Field, "signalSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SignalSemaphoreCount;
		[NativeName(NativeNameType.Field, "pSignalSemaphores")]
		[NativeName(NativeNameType.Type, "const VkSemaphore*")]
		public unsafe VkSemaphore* PSignalSemaphores;

		public unsafe VkBindSparseInfo(VkStructureType sType = default, void* pNext = default, uint waitSemaphoreCount = default, VkSemaphore* pWaitSemaphores = default, uint bufferBindCount = default, VkSparseBufferMemoryBindInfo* pBufferBinds = default, uint imageOpaqueBindCount = default, VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds = default, uint imageBindCount = default, VkSparseImageMemoryBindInfo* pImageBinds = default, uint signalSemaphoreCount = default, VkSemaphore* pSignalSemaphores = default)
		{
			SType = sType;
			PNext = pNext;
			WaitSemaphoreCount = waitSemaphoreCount;
			PWaitSemaphores = pWaitSemaphores;
			BufferBindCount = bufferBindCount;
			PBufferBinds = pBufferBinds;
			ImageOpaqueBindCount = imageOpaqueBindCount;
			PImageOpaqueBinds = pImageOpaqueBinds;
			ImageBindCount = imageBindCount;
			PImageBinds = pImageBinds;
			SignalSemaphoreCount = signalSemaphoreCount;
			PSignalSemaphores = pSignalSemaphores;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageFormatProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageFormatProperties
	{
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;
		[NativeName(NativeNameType.Field, "imageGranularity")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D ImageGranularity;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSparseImageFormatFlags")]
		public uint Flags;

		public unsafe VkSparseImageFormatProperties(uint aspectMask = default, VkExtent3D imageGranularity = default, uint flags = default)
		{
			AspectMask = aspectMask;
			ImageGranularity = imageGranularity;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageMemoryRequirements")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageMemoryRequirements
	{
		[NativeName(NativeNameType.Field, "formatProperties")]
		[NativeName(NativeNameType.Type, "VkSparseImageFormatProperties")]
		public VkSparseImageFormatProperties FormatProperties;
		[NativeName(NativeNameType.Field, "imageMipTailFirstLod")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImageMipTailFirstLod;
		[NativeName(NativeNameType.Field, "imageMipTailSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong ImageMipTailSize;
		[NativeName(NativeNameType.Field, "imageMipTailOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong ImageMipTailOffset;
		[NativeName(NativeNameType.Field, "imageMipTailStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong ImageMipTailStride;

		public unsafe VkSparseImageMemoryRequirements(VkSparseImageFormatProperties formatProperties = default, uint imageMipTailFirstLod = default, ulong imageMipTailSize = default, ulong imageMipTailOffset = default, ulong imageMipTailStride = default)
		{
			FormatProperties = formatProperties;
			ImageMipTailFirstLod = imageMipTailFirstLod;
			ImageMipTailSize = imageMipTailSize;
			ImageMipTailOffset = imageMipTailOffset;
			ImageMipTailStride = imageMipTailStride;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFenceCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFenceCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkFenceCreateFlags")]
		public uint Flags;

		public unsafe VkFenceCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSemaphoreCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSemaphoreCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSemaphoreCreateFlags")]
		public uint Flags;

		public unsafe VkSemaphoreCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkEventCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkEventCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkEventCreateFlags")]
		public uint Flags;

		public unsafe VkEventCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueryPoolCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueryPoolCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkQueryPoolCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "queryType")]
		[NativeName(NativeNameType.Type, "VkQueryType")]
		public VkQueryType QueryType;
		[NativeName(NativeNameType.Field, "queryCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueryCount;
		[NativeName(NativeNameType.Field, "pipelineStatistics")]
		[NativeName(NativeNameType.Type, "VkQueryPipelineStatisticFlags")]
		public uint PipelineStatistics;

		public unsafe VkQueryPoolCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkQueryType queryType = default, uint queryCount = default, uint pipelineStatistics = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			QueryType = queryType;
			QueryCount = queryCount;
			PipelineStatistics = pipelineStatistics;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkBufferCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkBufferUsageFlags")]
		public uint Usage;
		[NativeName(NativeNameType.Field, "sharingMode")]
		[NativeName(NativeNameType.Type, "VkSharingMode")]
		public VkSharingMode SharingMode;
		[NativeName(NativeNameType.Field, "queueFamilyIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndexCount;
		[NativeName(NativeNameType.Field, "pQueueFamilyIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PQueueFamilyIndices;

		public unsafe VkBufferCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong size = default, uint usage = default, VkSharingMode sharingMode = default, uint queueFamilyIndexCount = default, uint* pQueueFamilyIndices = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Size = size;
			Usage = usage;
			SharingMode = sharingMode;
			QueueFamilyIndexCount = queueFamilyIndexCount;
			PQueueFamilyIndices = pQueueFamilyIndices;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferViewCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferViewCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkBufferViewCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "range")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Range;

		public unsafe VkBufferViewCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkBuffer buffer = default, VkFormat format = default, ulong offset = default, ulong range = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Buffer = buffer;
			Format = format;
			Offset = offset;
			Range = range;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkImageCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "imageType")]
		[NativeName(NativeNameType.Type, "VkImageType")]
		public VkImageType ImageType;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D Extent;
		[NativeName(NativeNameType.Field, "mipLevels")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "arrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ArrayLayers;
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits Samples;
		[NativeName(NativeNameType.Field, "tiling")]
		[NativeName(NativeNameType.Type, "VkImageTiling")]
		public VkImageTiling Tiling;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint Usage;
		[NativeName(NativeNameType.Field, "sharingMode")]
		[NativeName(NativeNameType.Type, "VkSharingMode")]
		public VkSharingMode SharingMode;
		[NativeName(NativeNameType.Field, "queueFamilyIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndexCount;
		[NativeName(NativeNameType.Field, "pQueueFamilyIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PQueueFamilyIndices;
		[NativeName(NativeNameType.Field, "initialLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout InitialLayout;

		public unsafe VkImageCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkImageType imageType = default, VkFormat format = default, VkExtent3D extent = default, uint mipLevels = default, uint arrayLayers = default, VkSampleCountFlagBits samples = default, VkImageTiling tiling = default, uint usage = default, VkSharingMode sharingMode = default, uint queueFamilyIndexCount = default, uint* pQueueFamilyIndices = default, VkImageLayout initialLayout = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			ImageType = imageType;
			Format = format;
			Extent = extent;
			MipLevels = mipLevels;
			ArrayLayers = arrayLayers;
			Samples = samples;
			Tiling = tiling;
			Usage = usage;
			SharingMode = sharingMode;
			QueueFamilyIndexCount = queueFamilyIndexCount;
			PQueueFamilyIndices = pQueueFamilyIndices;
			InitialLayout = initialLayout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubresourceLayout")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubresourceLayout
	{
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;
		[NativeName(NativeNameType.Field, "rowPitch")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong RowPitch;
		[NativeName(NativeNameType.Field, "arrayPitch")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong ArrayPitch;
		[NativeName(NativeNameType.Field, "depthPitch")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong DepthPitch;

		public unsafe VkSubresourceLayout(ulong offset = default, ulong size = default, ulong rowPitch = default, ulong arrayPitch = default, ulong depthPitch = default)
		{
			Offset = offset;
			Size = size;
			RowPitch = rowPitch;
			ArrayPitch = arrayPitch;
			DepthPitch = depthPitch;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkComponentMapping")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkComponentMapping
	{
		[NativeName(NativeNameType.Field, "r")]
		[NativeName(NativeNameType.Type, "VkComponentSwizzle")]
		public VkComponentSwizzle R;
		[NativeName(NativeNameType.Field, "g")]
		[NativeName(NativeNameType.Type, "VkComponentSwizzle")]
		public VkComponentSwizzle G;
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "VkComponentSwizzle")]
		public VkComponentSwizzle B;
		[NativeName(NativeNameType.Field, "a")]
		[NativeName(NativeNameType.Type, "VkComponentSwizzle")]
		public VkComponentSwizzle A;

		public unsafe VkComponentMapping(VkComponentSwizzle r = default, VkComponentSwizzle g = default, VkComponentSwizzle b = default, VkComponentSwizzle a = default)
		{
			R = r;
			G = g;
			B = b;
			A = a;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkImageViewCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "viewType")]
		[NativeName(NativeNameType.Type, "VkImageViewType")]
		public VkImageViewType ViewType;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "components")]
		[NativeName(NativeNameType.Type, "VkComponentMapping")]
		public VkComponentMapping Components;
		[NativeName(NativeNameType.Field, "subresourceRange")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceRange")]
		public VkImageSubresourceRange SubresourceRange;

		public unsafe VkImageViewCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkImage image = default, VkImageViewType viewType = default, VkFormat format = default, VkComponentMapping components = default, VkImageSubresourceRange subresourceRange = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Image = image;
			ViewType = viewType;
			Format = format;
			Components = components;
			SubresourceRange = subresourceRange;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkShaderModuleCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkShaderModuleCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkShaderModuleCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "codeSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong CodeSize;
		[NativeName(NativeNameType.Field, "pCode")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PCode;

		public unsafe VkShaderModuleCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong codeSize = default, uint* pCode = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			CodeSize = codeSize;
			PCode = pCode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineCacheCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineCacheCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineCacheCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "initialDataSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong InitialDataSize;
		[NativeName(NativeNameType.Field, "pInitialData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PInitialData;

		public unsafe VkPipelineCacheCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong initialDataSize = default, void* pInitialData = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			InitialDataSize = initialDataSize;
			PInitialData = pInitialData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSpecializationMapEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSpecializationMapEntry
	{
		[NativeName(NativeNameType.Field, "constantID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstantID;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Size;

		public unsafe VkSpecializationMapEntry(uint constantID = default, uint offset = default, ulong size = default)
		{
			ConstantID = constantID;
			Offset = offset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSpecializationInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSpecializationInfo
	{
		[NativeName(NativeNameType.Field, "mapEntryCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MapEntryCount;
		[NativeName(NativeNameType.Field, "pMapEntries")]
		[NativeName(NativeNameType.Type, "const VkSpecializationMapEntry*")]
		public unsafe VkSpecializationMapEntry* PMapEntries;
		[NativeName(NativeNameType.Field, "dataSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong DataSize;
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PData;

		public unsafe VkSpecializationInfo(uint mapEntryCount = default, VkSpecializationMapEntry* pMapEntries = default, ulong dataSize = default, void* pData = default)
		{
			MapEntryCount = mapEntryCount;
			PMapEntries = pMapEntries;
			DataSize = dataSize;
			PData = pData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineShaderStageCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineShaderStageCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineShaderStageCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlagBits")]
		public VkShaderStageFlagBits Stage;
		[NativeName(NativeNameType.Field, "module")]
		[NativeName(NativeNameType.Type, "VkShaderModule")]
		public VkShaderModule Module;
		[NativeName(NativeNameType.Field, "pName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PName;
		[NativeName(NativeNameType.Field, "pSpecializationInfo")]
		[NativeName(NativeNameType.Type, "const VkSpecializationInfo*")]
		public unsafe VkSpecializationInfo* PSpecializationInfo;

		public unsafe VkPipelineShaderStageCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkShaderStageFlagBits stage = default, VkShaderModule module = default, byte* pName = default, VkSpecializationInfo* pSpecializationInfo = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Stage = stage;
			Module = module;
			PName = pName;
			PSpecializationInfo = pSpecializationInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkComputePipelineCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkComputePipelineCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "VkPipelineShaderStageCreateInfo")]
		public VkPipelineShaderStageCreateInfo Stage;
		[NativeName(NativeNameType.Field, "layout")]
		[NativeName(NativeNameType.Type, "VkPipelineLayout")]
		public VkPipelineLayout Layout;
		[NativeName(NativeNameType.Field, "basePipelineHandle")]
		[NativeName(NativeNameType.Type, "VkPipeline")]
		public VkPipeline BasePipelineHandle;
		[NativeName(NativeNameType.Field, "basePipelineIndex")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int BasePipelineIndex;

		public unsafe VkComputePipelineCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkPipelineShaderStageCreateInfo stage = default, VkPipelineLayout layout = default, VkPipeline basePipelineHandle = default, int basePipelineIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Stage = stage;
			Layout = layout;
			BasePipelineHandle = basePipelineHandle;
			BasePipelineIndex = basePipelineIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVertexInputBindingDescription")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVertexInputBindingDescription
	{
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "stride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Stride;
		[NativeName(NativeNameType.Field, "inputRate")]
		[NativeName(NativeNameType.Type, "VkVertexInputRate")]
		public VkVertexInputRate InputRate;

		public unsafe VkVertexInputBindingDescription(uint binding = default, uint stride = default, VkVertexInputRate inputRate = default)
		{
			Binding = binding;
			Stride = stride;
			InputRate = inputRate;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVertexInputAttributeDescription")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVertexInputAttributeDescription
	{
		[NativeName(NativeNameType.Field, "location")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Location;
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Offset;

		public unsafe VkVertexInputAttributeDescription(uint location = default, uint binding = default, VkFormat format = default, uint offset = default)
		{
			Location = location;
			Binding = binding;
			Format = format;
			Offset = offset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineVertexInputStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineVertexInputStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineVertexInputStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "vertexBindingDescriptionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VertexBindingDescriptionCount;
		[NativeName(NativeNameType.Field, "pVertexBindingDescriptions")]
		[NativeName(NativeNameType.Type, "const VkVertexInputBindingDescription*")]
		public unsafe VkVertexInputBindingDescription* PVertexBindingDescriptions;
		[NativeName(NativeNameType.Field, "vertexAttributeDescriptionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VertexAttributeDescriptionCount;
		[NativeName(NativeNameType.Field, "pVertexAttributeDescriptions")]
		[NativeName(NativeNameType.Type, "const VkVertexInputAttributeDescription*")]
		public unsafe VkVertexInputAttributeDescription* PVertexAttributeDescriptions;

		public unsafe VkPipelineVertexInputStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint vertexBindingDescriptionCount = default, VkVertexInputBindingDescription* pVertexBindingDescriptions = default, uint vertexAttributeDescriptionCount = default, VkVertexInputAttributeDescription* pVertexAttributeDescriptions = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			VertexBindingDescriptionCount = vertexBindingDescriptionCount;
			PVertexBindingDescriptions = pVertexBindingDescriptions;
			VertexAttributeDescriptionCount = vertexAttributeDescriptionCount;
			PVertexAttributeDescriptions = pVertexAttributeDescriptions;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineInputAssemblyStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineInputAssemblyStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineInputAssemblyStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "topology")]
		[NativeName(NativeNameType.Type, "VkPrimitiveTopology")]
		public VkPrimitiveTopology Topology;
		[NativeName(NativeNameType.Field, "primitiveRestartEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitiveRestartEnable;

		public unsafe VkPipelineInputAssemblyStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkPrimitiveTopology topology = default, uint primitiveRestartEnable = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Topology = topology;
			PrimitiveRestartEnable = primitiveRestartEnable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineTessellationStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineTessellationStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineTessellationStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "patchControlPoints")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PatchControlPoints;

		public unsafe VkPipelineTessellationStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint patchControlPoints = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			PatchControlPoints = patchControlPoints;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkViewport")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkViewport
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "float")]
		public float Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "float")]
		public float Height;
		[NativeName(NativeNameType.Field, "minDepth")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinDepth;
		[NativeName(NativeNameType.Field, "maxDepth")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxDepth;

		public unsafe VkViewport(float x = default, float y = default, float width = default, float height = default, float minDepth = default, float maxDepth = default)
		{
			X = x;
			Y = y;
			Width = width;
			Height = height;
			MinDepth = minDepth;
			MaxDepth = maxDepth;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineViewportStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineViewportStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineViewportStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "viewportCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewportCount;
		[NativeName(NativeNameType.Field, "pViewports")]
		[NativeName(NativeNameType.Type, "const VkViewport*")]
		public unsafe VkViewport* PViewports;
		[NativeName(NativeNameType.Field, "scissorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ScissorCount;
		[NativeName(NativeNameType.Field, "pScissors")]
		[NativeName(NativeNameType.Type, "const VkRect2D*")]
		public unsafe VkRect2D* PScissors;

		public unsafe VkPipelineViewportStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint viewportCount = default, VkViewport* pViewports = default, uint scissorCount = default, VkRect2D* pScissors = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			ViewportCount = viewportCount;
			PViewports = pViewports;
			ScissorCount = scissorCount;
			PScissors = pScissors;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineRasterizationStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineRasterizationStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineRasterizationStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "depthClampEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthClampEnable;
		[NativeName(NativeNameType.Field, "rasterizerDiscardEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RasterizerDiscardEnable;
		[NativeName(NativeNameType.Field, "polygonMode")]
		[NativeName(NativeNameType.Type, "VkPolygonMode")]
		public VkPolygonMode PolygonMode;
		[NativeName(NativeNameType.Field, "cullMode")]
		[NativeName(NativeNameType.Type, "VkCullModeFlags")]
		public uint CullMode;
		[NativeName(NativeNameType.Field, "frontFace")]
		[NativeName(NativeNameType.Type, "VkFrontFace")]
		public VkFrontFace FrontFace;
		[NativeName(NativeNameType.Field, "depthBiasEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthBiasEnable;
		[NativeName(NativeNameType.Field, "depthBiasConstantFactor")]
		[NativeName(NativeNameType.Type, "float")]
		public float DepthBiasConstantFactor;
		[NativeName(NativeNameType.Field, "depthBiasClamp")]
		[NativeName(NativeNameType.Type, "float")]
		public float DepthBiasClamp;
		[NativeName(NativeNameType.Field, "depthBiasSlopeFactor")]
		[NativeName(NativeNameType.Type, "float")]
		public float DepthBiasSlopeFactor;
		[NativeName(NativeNameType.Field, "lineWidth")]
		[NativeName(NativeNameType.Type, "float")]
		public float LineWidth;

		public unsafe VkPipelineRasterizationStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint depthClampEnable = default, uint rasterizerDiscardEnable = default, VkPolygonMode polygonMode = default, uint cullMode = default, VkFrontFace frontFace = default, uint depthBiasEnable = default, float depthBiasConstantFactor = default, float depthBiasClamp = default, float depthBiasSlopeFactor = default, float lineWidth = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DepthClampEnable = depthClampEnable;
			RasterizerDiscardEnable = rasterizerDiscardEnable;
			PolygonMode = polygonMode;
			CullMode = cullMode;
			FrontFace = frontFace;
			DepthBiasEnable = depthBiasEnable;
			DepthBiasConstantFactor = depthBiasConstantFactor;
			DepthBiasClamp = depthBiasClamp;
			DepthBiasSlopeFactor = depthBiasSlopeFactor;
			LineWidth = lineWidth;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineMultisampleStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineMultisampleStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineMultisampleStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "rasterizationSamples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits RasterizationSamples;
		[NativeName(NativeNameType.Field, "sampleShadingEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SampleShadingEnable;
		[NativeName(NativeNameType.Field, "minSampleShading")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinSampleShading;
		[NativeName(NativeNameType.Field, "pSampleMask")]
		[NativeName(NativeNameType.Type, "const VkSampleMask*")]
		public unsafe uint* PSampleMask;
		[NativeName(NativeNameType.Field, "alphaToCoverageEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AlphaToCoverageEnable;
		[NativeName(NativeNameType.Field, "alphaToOneEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AlphaToOneEnable;

		public unsafe VkPipelineMultisampleStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkSampleCountFlagBits rasterizationSamples = default, uint sampleShadingEnable = default, float minSampleShading = default, uint* pSampleMask = default, uint alphaToCoverageEnable = default, uint alphaToOneEnable = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			RasterizationSamples = rasterizationSamples;
			SampleShadingEnable = sampleShadingEnable;
			MinSampleShading = minSampleShading;
			PSampleMask = pSampleMask;
			AlphaToCoverageEnable = alphaToCoverageEnable;
			AlphaToOneEnable = alphaToOneEnable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkStencilOpState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkStencilOpState
	{
		[NativeName(NativeNameType.Field, "failOp")]
		[NativeName(NativeNameType.Type, "VkStencilOp")]
		public VkStencilOp FailOp;
		[NativeName(NativeNameType.Field, "passOp")]
		[NativeName(NativeNameType.Type, "VkStencilOp")]
		public VkStencilOp PassOp;
		[NativeName(NativeNameType.Field, "depthFailOp")]
		[NativeName(NativeNameType.Type, "VkStencilOp")]
		public VkStencilOp DepthFailOp;
		[NativeName(NativeNameType.Field, "compareOp")]
		[NativeName(NativeNameType.Type, "VkCompareOp")]
		public VkCompareOp CompareOp;
		[NativeName(NativeNameType.Field, "compareMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CompareMask;
		[NativeName(NativeNameType.Field, "writeMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WriteMask;
		[NativeName(NativeNameType.Field, "reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reference;

		public unsafe VkStencilOpState(VkStencilOp failOp = default, VkStencilOp passOp = default, VkStencilOp depthFailOp = default, VkCompareOp compareOp = default, uint compareMask = default, uint writeMask = default, uint reference = default)
		{
			FailOp = failOp;
			PassOp = passOp;
			DepthFailOp = depthFailOp;
			CompareOp = compareOp;
			CompareMask = compareMask;
			WriteMask = writeMask;
			Reference = reference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineDepthStencilStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineDepthStencilStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineDepthStencilStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "depthTestEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthTestEnable;
		[NativeName(NativeNameType.Field, "depthWriteEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthWriteEnable;
		[NativeName(NativeNameType.Field, "depthCompareOp")]
		[NativeName(NativeNameType.Type, "VkCompareOp")]
		public VkCompareOp DepthCompareOp;
		[NativeName(NativeNameType.Field, "depthBoundsTestEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DepthBoundsTestEnable;
		[NativeName(NativeNameType.Field, "stencilTestEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StencilTestEnable;
		[NativeName(NativeNameType.Field, "front")]
		[NativeName(NativeNameType.Type, "VkStencilOpState")]
		public VkStencilOpState Front;
		[NativeName(NativeNameType.Field, "back")]
		[NativeName(NativeNameType.Type, "VkStencilOpState")]
		public VkStencilOpState Back;
		[NativeName(NativeNameType.Field, "minDepthBounds")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinDepthBounds;
		[NativeName(NativeNameType.Field, "maxDepthBounds")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxDepthBounds;

		public unsafe VkPipelineDepthStencilStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint depthTestEnable = default, uint depthWriteEnable = default, VkCompareOp depthCompareOp = default, uint depthBoundsTestEnable = default, uint stencilTestEnable = default, VkStencilOpState front = default, VkStencilOpState back = default, float minDepthBounds = default, float maxDepthBounds = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DepthTestEnable = depthTestEnable;
			DepthWriteEnable = depthWriteEnable;
			DepthCompareOp = depthCompareOp;
			DepthBoundsTestEnable = depthBoundsTestEnable;
			StencilTestEnable = stencilTestEnable;
			Front = front;
			Back = back;
			MinDepthBounds = minDepthBounds;
			MaxDepthBounds = maxDepthBounds;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineColorBlendAttachmentState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineColorBlendAttachmentState
	{
		[NativeName(NativeNameType.Field, "blendEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint BlendEnable;
		[NativeName(NativeNameType.Field, "srcColorBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor SrcColorBlendFactor;
		[NativeName(NativeNameType.Field, "dstColorBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor DstColorBlendFactor;
		[NativeName(NativeNameType.Field, "colorBlendOp")]
		[NativeName(NativeNameType.Type, "VkBlendOp")]
		public VkBlendOp ColorBlendOp;
		[NativeName(NativeNameType.Field, "srcAlphaBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor SrcAlphaBlendFactor;
		[NativeName(NativeNameType.Field, "dstAlphaBlendFactor")]
		[NativeName(NativeNameType.Type, "VkBlendFactor")]
		public VkBlendFactor DstAlphaBlendFactor;
		[NativeName(NativeNameType.Field, "alphaBlendOp")]
		[NativeName(NativeNameType.Type, "VkBlendOp")]
		public VkBlendOp AlphaBlendOp;
		[NativeName(NativeNameType.Field, "colorWriteMask")]
		[NativeName(NativeNameType.Type, "VkColorComponentFlags")]
		public uint ColorWriteMask;

		public unsafe VkPipelineColorBlendAttachmentState(uint blendEnable = default, VkBlendFactor srcColorBlendFactor = default, VkBlendFactor dstColorBlendFactor = default, VkBlendOp colorBlendOp = default, VkBlendFactor srcAlphaBlendFactor = default, VkBlendFactor dstAlphaBlendFactor = default, VkBlendOp alphaBlendOp = default, uint colorWriteMask = default)
		{
			BlendEnable = blendEnable;
			SrcColorBlendFactor = srcColorBlendFactor;
			DstColorBlendFactor = dstColorBlendFactor;
			ColorBlendOp = colorBlendOp;
			SrcAlphaBlendFactor = srcAlphaBlendFactor;
			DstAlphaBlendFactor = dstAlphaBlendFactor;
			AlphaBlendOp = alphaBlendOp;
			ColorWriteMask = colorWriteMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineColorBlendStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineColorBlendStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineColorBlendStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "logicOpEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LogicOpEnable;
		[NativeName(NativeNameType.Field, "logicOp")]
		[NativeName(NativeNameType.Type, "VkLogicOp")]
		public VkLogicOp LogicOp;
		[NativeName(NativeNameType.Field, "attachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AttachmentCount;
		[NativeName(NativeNameType.Field, "pAttachments")]
		[NativeName(NativeNameType.Type, "const VkPipelineColorBlendAttachmentState*")]
		public unsafe VkPipelineColorBlendAttachmentState* PAttachments;
		[NativeName(NativeNameType.Field, "blendConstants")]
		[NativeName(NativeNameType.Type, "float[4]")]
		public float BlendConstants_0;
		public float BlendConstants_1;
		public float BlendConstants_2;
		public float BlendConstants_3;

		public unsafe VkPipelineColorBlendStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint logicOpEnable = default, VkLogicOp logicOp = default, uint attachmentCount = default, VkPipelineColorBlendAttachmentState* pAttachments = default, float* blendConstants = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			LogicOpEnable = logicOpEnable;
			LogicOp = logicOp;
			AttachmentCount = attachmentCount;
			PAttachments = pAttachments;
			if (blendConstants != default)
			{
				BlendConstants_0 = blendConstants[0];
				BlendConstants_1 = blendConstants[1];
				BlendConstants_2 = blendConstants[2];
				BlendConstants_3 = blendConstants[3];
			}
		}

		public unsafe VkPipelineColorBlendStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint logicOpEnable = default, VkLogicOp logicOp = default, uint attachmentCount = default, VkPipelineColorBlendAttachmentState* pAttachments = default, Span<float> blendConstants = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			LogicOpEnable = logicOpEnable;
			LogicOp = logicOp;
			AttachmentCount = attachmentCount;
			PAttachments = pAttachments;
			if (blendConstants != default)
			{
				BlendConstants_0 = blendConstants[0];
				BlendConstants_1 = blendConstants[1];
				BlendConstants_2 = blendConstants[2];
				BlendConstants_3 = blendConstants[3];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineDynamicStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineDynamicStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineDynamicStateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "dynamicStateCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DynamicStateCount;
		[NativeName(NativeNameType.Field, "pDynamicStates")]
		[NativeName(NativeNameType.Type, "const VkDynamicState*")]
		public unsafe VkDynamicState* PDynamicStates;

		public unsafe VkPipelineDynamicStateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint dynamicStateCount = default, VkDynamicState* pDynamicStates = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DynamicStateCount = dynamicStateCount;
			PDynamicStates = pDynamicStates;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkGraphicsPipelineCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkGraphicsPipelineCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "stageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StageCount;
		[NativeName(NativeNameType.Field, "pStages")]
		[NativeName(NativeNameType.Type, "const VkPipelineShaderStageCreateInfo*")]
		public unsafe VkPipelineShaderStageCreateInfo* PStages;
		[NativeName(NativeNameType.Field, "pVertexInputState")]
		[NativeName(NativeNameType.Type, "const VkPipelineVertexInputStateCreateInfo*")]
		public unsafe VkPipelineVertexInputStateCreateInfo* PVertexInputState;
		[NativeName(NativeNameType.Field, "pInputAssemblyState")]
		[NativeName(NativeNameType.Type, "const VkPipelineInputAssemblyStateCreateInfo*")]
		public unsafe VkPipelineInputAssemblyStateCreateInfo* PInputAssemblyState;
		[NativeName(NativeNameType.Field, "pTessellationState")]
		[NativeName(NativeNameType.Type, "const VkPipelineTessellationStateCreateInfo*")]
		public unsafe VkPipelineTessellationStateCreateInfo* PTessellationState;
		[NativeName(NativeNameType.Field, "pViewportState")]
		[NativeName(NativeNameType.Type, "const VkPipelineViewportStateCreateInfo*")]
		public unsafe VkPipelineViewportStateCreateInfo* PViewportState;
		[NativeName(NativeNameType.Field, "pRasterizationState")]
		[NativeName(NativeNameType.Type, "const VkPipelineRasterizationStateCreateInfo*")]
		public unsafe VkPipelineRasterizationStateCreateInfo* PRasterizationState;
		[NativeName(NativeNameType.Field, "pMultisampleState")]
		[NativeName(NativeNameType.Type, "const VkPipelineMultisampleStateCreateInfo*")]
		public unsafe VkPipelineMultisampleStateCreateInfo* PMultisampleState;
		[NativeName(NativeNameType.Field, "pDepthStencilState")]
		[NativeName(NativeNameType.Type, "const VkPipelineDepthStencilStateCreateInfo*")]
		public unsafe VkPipelineDepthStencilStateCreateInfo* PDepthStencilState;
		[NativeName(NativeNameType.Field, "pColorBlendState")]
		[NativeName(NativeNameType.Type, "const VkPipelineColorBlendStateCreateInfo*")]
		public unsafe VkPipelineColorBlendStateCreateInfo* PColorBlendState;
		[NativeName(NativeNameType.Field, "pDynamicState")]
		[NativeName(NativeNameType.Type, "const VkPipelineDynamicStateCreateInfo*")]
		public unsafe VkPipelineDynamicStateCreateInfo* PDynamicState;
		[NativeName(NativeNameType.Field, "layout")]
		[NativeName(NativeNameType.Type, "VkPipelineLayout")]
		public VkPipelineLayout Layout;
		[NativeName(NativeNameType.Field, "renderPass")]
		[NativeName(NativeNameType.Type, "VkRenderPass")]
		public VkRenderPass RenderPass;
		[NativeName(NativeNameType.Field, "subpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Subpass;
		[NativeName(NativeNameType.Field, "basePipelineHandle")]
		[NativeName(NativeNameType.Type, "VkPipeline")]
		public VkPipeline BasePipelineHandle;
		[NativeName(NativeNameType.Field, "basePipelineIndex")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int BasePipelineIndex;

		public unsafe VkGraphicsPipelineCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint stageCount = default, VkPipelineShaderStageCreateInfo* pStages = default, VkPipelineVertexInputStateCreateInfo* pVertexInputState = default, VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState = default, VkPipelineTessellationStateCreateInfo* pTessellationState = default, VkPipelineViewportStateCreateInfo* pViewportState = default, VkPipelineRasterizationStateCreateInfo* pRasterizationState = default, VkPipelineMultisampleStateCreateInfo* pMultisampleState = default, VkPipelineDepthStencilStateCreateInfo* pDepthStencilState = default, VkPipelineColorBlendStateCreateInfo* pColorBlendState = default, VkPipelineDynamicStateCreateInfo* pDynamicState = default, VkPipelineLayout layout = default, VkRenderPass renderPass = default, uint subpass = default, VkPipeline basePipelineHandle = default, int basePipelineIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			StageCount = stageCount;
			PStages = pStages;
			PVertexInputState = pVertexInputState;
			PInputAssemblyState = pInputAssemblyState;
			PTessellationState = pTessellationState;
			PViewportState = pViewportState;
			PRasterizationState = pRasterizationState;
			PMultisampleState = pMultisampleState;
			PDepthStencilState = pDepthStencilState;
			PColorBlendState = pColorBlendState;
			PDynamicState = pDynamicState;
			Layout = layout;
			RenderPass = renderPass;
			Subpass = subpass;
			BasePipelineHandle = basePipelineHandle;
			BasePipelineIndex = basePipelineIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPushConstantRange")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPushConstantRange
	{
		[NativeName(NativeNameType.Field, "stageFlags")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint StageFlags;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Size;

		public unsafe VkPushConstantRange(uint stageFlags = default, uint offset = default, uint size = default)
		{
			StageFlags = stageFlags;
			Offset = offset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineLayoutCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineLayoutCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineLayoutCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "setLayoutCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SetLayoutCount;
		[NativeName(NativeNameType.Field, "pSetLayouts")]
		[NativeName(NativeNameType.Type, "const VkDescriptorSetLayout*")]
		public unsafe VkDescriptorSetLayout* PSetLayouts;
		[NativeName(NativeNameType.Field, "pushConstantRangeCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PushConstantRangeCount;
		[NativeName(NativeNameType.Field, "pPushConstantRanges")]
		[NativeName(NativeNameType.Type, "const VkPushConstantRange*")]
		public unsafe VkPushConstantRange* PPushConstantRanges;

		public unsafe VkPipelineLayoutCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint setLayoutCount = default, VkDescriptorSetLayout* pSetLayouts = default, uint pushConstantRangeCount = default, VkPushConstantRange* pPushConstantRanges = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			SetLayoutCount = setLayoutCount;
			PSetLayouts = pSetLayouts;
			PushConstantRangeCount = pushConstantRangeCount;
			PPushConstantRanges = pPushConstantRanges;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSamplerCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSamplerCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSamplerCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "magFilter")]
		[NativeName(NativeNameType.Type, "VkFilter")]
		public VkFilter MagFilter;
		[NativeName(NativeNameType.Field, "minFilter")]
		[NativeName(NativeNameType.Type, "VkFilter")]
		public VkFilter MinFilter;
		[NativeName(NativeNameType.Field, "mipmapMode")]
		[NativeName(NativeNameType.Type, "VkSamplerMipmapMode")]
		public VkSamplerMipmapMode MipmapMode;
		[NativeName(NativeNameType.Field, "addressModeU")]
		[NativeName(NativeNameType.Type, "VkSamplerAddressMode")]
		public VkSamplerAddressMode AddressModeU;
		[NativeName(NativeNameType.Field, "addressModeV")]
		[NativeName(NativeNameType.Type, "VkSamplerAddressMode")]
		public VkSamplerAddressMode AddressModeV;
		[NativeName(NativeNameType.Field, "addressModeW")]
		[NativeName(NativeNameType.Type, "VkSamplerAddressMode")]
		public VkSamplerAddressMode AddressModeW;
		[NativeName(NativeNameType.Field, "mipLodBias")]
		[NativeName(NativeNameType.Type, "float")]
		public float MipLodBias;
		[NativeName(NativeNameType.Field, "anisotropyEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AnisotropyEnable;
		[NativeName(NativeNameType.Field, "maxAnisotropy")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxAnisotropy;
		[NativeName(NativeNameType.Field, "compareEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint CompareEnable;
		[NativeName(NativeNameType.Field, "compareOp")]
		[NativeName(NativeNameType.Type, "VkCompareOp")]
		public VkCompareOp CompareOp;
		[NativeName(NativeNameType.Field, "minLod")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinLod;
		[NativeName(NativeNameType.Field, "maxLod")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxLod;
		[NativeName(NativeNameType.Field, "borderColor")]
		[NativeName(NativeNameType.Type, "VkBorderColor")]
		public VkBorderColor BorderColor;
		[NativeName(NativeNameType.Field, "unnormalizedCoordinates")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint UnnormalizedCoordinates;

		public unsafe VkSamplerCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkFilter magFilter = default, VkFilter minFilter = default, VkSamplerMipmapMode mipmapMode = default, VkSamplerAddressMode addressModeU = default, VkSamplerAddressMode addressModeV = default, VkSamplerAddressMode addressModeW = default, float mipLodBias = default, uint anisotropyEnable = default, float maxAnisotropy = default, uint compareEnable = default, VkCompareOp compareOp = default, float minLod = default, float maxLod = default, VkBorderColor borderColor = default, uint unnormalizedCoordinates = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			MagFilter = magFilter;
			MinFilter = minFilter;
			MipmapMode = mipmapMode;
			AddressModeU = addressModeU;
			AddressModeV = addressModeV;
			AddressModeW = addressModeW;
			MipLodBias = mipLodBias;
			AnisotropyEnable = anisotropyEnable;
			MaxAnisotropy = maxAnisotropy;
			CompareEnable = compareEnable;
			CompareOp = compareOp;
			MinLod = minLod;
			MaxLod = maxLod;
			BorderColor = borderColor;
			UnnormalizedCoordinates = unnormalizedCoordinates;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCopyDescriptorSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCopyDescriptorSet
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "srcSet")]
		[NativeName(NativeNameType.Type, "VkDescriptorSet")]
		public VkDescriptorSet SrcSet;
		[NativeName(NativeNameType.Field, "srcBinding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SrcBinding;
		[NativeName(NativeNameType.Field, "srcArrayElement")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SrcArrayElement;
		[NativeName(NativeNameType.Field, "dstSet")]
		[NativeName(NativeNameType.Type, "VkDescriptorSet")]
		public VkDescriptorSet DstSet;
		[NativeName(NativeNameType.Field, "dstBinding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstBinding;
		[NativeName(NativeNameType.Field, "dstArrayElement")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstArrayElement;
		[NativeName(NativeNameType.Field, "descriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorCount;

		public unsafe VkCopyDescriptorSet(VkStructureType sType = default, void* pNext = default, VkDescriptorSet srcSet = default, uint srcBinding = default, uint srcArrayElement = default, VkDescriptorSet dstSet = default, uint dstBinding = default, uint dstArrayElement = default, uint descriptorCount = default)
		{
			SType = sType;
			PNext = pNext;
			SrcSet = srcSet;
			SrcBinding = srcBinding;
			SrcArrayElement = srcArrayElement;
			DstSet = dstSet;
			DstBinding = dstBinding;
			DstArrayElement = dstArrayElement;
			DescriptorCount = descriptorCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorBufferInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorBufferInfo
	{
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "range")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Range;

		public unsafe VkDescriptorBufferInfo(VkBuffer buffer = default, ulong offset = default, ulong range = default)
		{
			Buffer = buffer;
			Offset = offset;
			Range = range;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorImageInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorImageInfo
	{
		[NativeName(NativeNameType.Field, "sampler")]
		[NativeName(NativeNameType.Type, "VkSampler")]
		public VkSampler Sampler;
		[NativeName(NativeNameType.Field, "imageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageView;
		[NativeName(NativeNameType.Field, "imageLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout ImageLayout;

		public unsafe VkDescriptorImageInfo(VkSampler sampler = default, VkImageView imageView = default, VkImageLayout imageLayout = default)
		{
			Sampler = sampler;
			ImageView = imageView;
			ImageLayout = imageLayout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorPoolSize")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorPoolSize
	{
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkDescriptorType")]
		public VkDescriptorType Type;
		[NativeName(NativeNameType.Field, "descriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorCount;

		public unsafe VkDescriptorPoolSize(VkDescriptorType type = default, uint descriptorCount = default)
		{
			Type = type;
			DescriptorCount = descriptorCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorPoolCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorPoolCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDescriptorPoolCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "maxSets")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxSets;
		[NativeName(NativeNameType.Field, "poolSizeCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PoolSizeCount;
		[NativeName(NativeNameType.Field, "pPoolSizes")]
		[NativeName(NativeNameType.Type, "const VkDescriptorPoolSize*")]
		public unsafe VkDescriptorPoolSize* PPoolSizes;

		public unsafe VkDescriptorPoolCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint maxSets = default, uint poolSizeCount = default, VkDescriptorPoolSize* pPoolSizes = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			MaxSets = maxSets;
			PoolSizeCount = poolSizeCount;
			PPoolSizes = pPoolSizes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorSetAllocateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorSetAllocateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "descriptorPool")]
		[NativeName(NativeNameType.Type, "VkDescriptorPool")]
		public VkDescriptorPool DescriptorPool;
		[NativeName(NativeNameType.Field, "descriptorSetCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorSetCount;
		[NativeName(NativeNameType.Field, "pSetLayouts")]
		[NativeName(NativeNameType.Type, "const VkDescriptorSetLayout*")]
		public unsafe VkDescriptorSetLayout* PSetLayouts;

		public unsafe VkDescriptorSetAllocateInfo(VkStructureType sType = default, void* pNext = default, VkDescriptorPool descriptorPool = default, uint descriptorSetCount = default, VkDescriptorSetLayout* pSetLayouts = default)
		{
			SType = sType;
			PNext = pNext;
			DescriptorPool = descriptorPool;
			DescriptorSetCount = descriptorSetCount;
			PSetLayouts = pSetLayouts;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorSetLayoutBinding")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorSetLayoutBinding
	{
		[NativeName(NativeNameType.Field, "binding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Binding;
		[NativeName(NativeNameType.Field, "descriptorType")]
		[NativeName(NativeNameType.Type, "VkDescriptorType")]
		public VkDescriptorType DescriptorType;
		[NativeName(NativeNameType.Field, "descriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorCount;
		[NativeName(NativeNameType.Field, "stageFlags")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint StageFlags;
		[NativeName(NativeNameType.Field, "pImmutableSamplers")]
		[NativeName(NativeNameType.Type, "const VkSampler*")]
		public unsafe VkSampler* PImmutableSamplers;

		public unsafe VkDescriptorSetLayoutBinding(uint binding = default, VkDescriptorType descriptorType = default, uint descriptorCount = default, uint stageFlags = default, VkSampler* pImmutableSamplers = default)
		{
			Binding = binding;
			DescriptorType = descriptorType;
			DescriptorCount = descriptorCount;
			StageFlags = stageFlags;
			PImmutableSamplers = pImmutableSamplers;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorSetLayoutCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorSetLayoutCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDescriptorSetLayoutCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "bindingCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BindingCount;
		[NativeName(NativeNameType.Field, "pBindings")]
		[NativeName(NativeNameType.Type, "const VkDescriptorSetLayoutBinding*")]
		public unsafe VkDescriptorSetLayoutBinding* PBindings;

		public unsafe VkDescriptorSetLayoutCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint bindingCount = default, VkDescriptorSetLayoutBinding* pBindings = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			BindingCount = bindingCount;
			PBindings = pBindings;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkWriteDescriptorSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkWriteDescriptorSet
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dstSet")]
		[NativeName(NativeNameType.Type, "VkDescriptorSet")]
		public VkDescriptorSet DstSet;
		[NativeName(NativeNameType.Field, "dstBinding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstBinding;
		[NativeName(NativeNameType.Field, "dstArrayElement")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstArrayElement;
		[NativeName(NativeNameType.Field, "descriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorCount;
		[NativeName(NativeNameType.Field, "descriptorType")]
		[NativeName(NativeNameType.Type, "VkDescriptorType")]
		public VkDescriptorType DescriptorType;
		[NativeName(NativeNameType.Field, "pImageInfo")]
		[NativeName(NativeNameType.Type, "const VkDescriptorImageInfo*")]
		public unsafe VkDescriptorImageInfo* PImageInfo;
		[NativeName(NativeNameType.Field, "pBufferInfo")]
		[NativeName(NativeNameType.Type, "const VkDescriptorBufferInfo*")]
		public unsafe VkDescriptorBufferInfo* PBufferInfo;
		[NativeName(NativeNameType.Field, "pTexelBufferView")]
		[NativeName(NativeNameType.Type, "const VkBufferView*")]
		public unsafe VkBufferView* PTexelBufferView;

		public unsafe VkWriteDescriptorSet(VkStructureType sType = default, void* pNext = default, VkDescriptorSet dstSet = default, uint dstBinding = default, uint dstArrayElement = default, uint descriptorCount = default, VkDescriptorType descriptorType = default, VkDescriptorImageInfo* pImageInfo = default, VkDescriptorBufferInfo* pBufferInfo = default, VkBufferView* pTexelBufferView = default)
		{
			SType = sType;
			PNext = pNext;
			DstSet = dstSet;
			DstBinding = dstBinding;
			DstArrayElement = dstArrayElement;
			DescriptorCount = descriptorCount;
			DescriptorType = descriptorType;
			PImageInfo = pImageInfo;
			PBufferInfo = pBufferInfo;
			PTexelBufferView = pTexelBufferView;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAttachmentDescription")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAttachmentDescription
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkAttachmentDescriptionFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits Samples;
		[NativeName(NativeNameType.Field, "loadOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentLoadOp")]
		public VkAttachmentLoadOp LoadOp;
		[NativeName(NativeNameType.Field, "storeOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentStoreOp")]
		public VkAttachmentStoreOp StoreOp;
		[NativeName(NativeNameType.Field, "stencilLoadOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentLoadOp")]
		public VkAttachmentLoadOp StencilLoadOp;
		[NativeName(NativeNameType.Field, "stencilStoreOp")]
		[NativeName(NativeNameType.Type, "VkAttachmentStoreOp")]
		public VkAttachmentStoreOp StencilStoreOp;
		[NativeName(NativeNameType.Field, "initialLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout InitialLayout;
		[NativeName(NativeNameType.Field, "finalLayout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout FinalLayout;

		public unsafe VkAttachmentDescription(uint flags = default, VkFormat format = default, VkSampleCountFlagBits samples = default, VkAttachmentLoadOp loadOp = default, VkAttachmentStoreOp storeOp = default, VkAttachmentLoadOp stencilLoadOp = default, VkAttachmentStoreOp stencilStoreOp = default, VkImageLayout initialLayout = default, VkImageLayout finalLayout = default)
		{
			Flags = flags;
			Format = format;
			Samples = samples;
			LoadOp = loadOp;
			StoreOp = storeOp;
			StencilLoadOp = stencilLoadOp;
			StencilStoreOp = stencilStoreOp;
			InitialLayout = initialLayout;
			FinalLayout = finalLayout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAttachmentReference")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAttachmentReference
	{
		[NativeName(NativeNameType.Field, "attachment")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Attachment;
		[NativeName(NativeNameType.Field, "layout")]
		[NativeName(NativeNameType.Type, "VkImageLayout")]
		public VkImageLayout Layout;

		public unsafe VkAttachmentReference(uint attachment = default, VkImageLayout layout = default)
		{
			Attachment = attachment;
			Layout = layout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFramebufferCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFramebufferCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkFramebufferCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "renderPass")]
		[NativeName(NativeNameType.Type, "VkRenderPass")]
		public VkRenderPass RenderPass;
		[NativeName(NativeNameType.Field, "attachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AttachmentCount;
		[NativeName(NativeNameType.Field, "pAttachments")]
		[NativeName(NativeNameType.Type, "const VkImageView*")]
		public unsafe VkImageView* PAttachments;
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Height;
		[NativeName(NativeNameType.Field, "layers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Layers;

		public unsafe VkFramebufferCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkRenderPass renderPass = default, uint attachmentCount = default, VkImageView* pAttachments = default, uint width = default, uint height = default, uint layers = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			RenderPass = renderPass;
			AttachmentCount = attachmentCount;
			PAttachments = pAttachments;
			Width = width;
			Height = height;
			Layers = layers;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubpassDescription")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubpassDescription
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkSubpassDescriptionFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pipelineBindPoint")]
		[NativeName(NativeNameType.Type, "VkPipelineBindPoint")]
		public VkPipelineBindPoint PipelineBindPoint;
		[NativeName(NativeNameType.Field, "inputAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputAttachmentCount;
		[NativeName(NativeNameType.Field, "pInputAttachments")]
		[NativeName(NativeNameType.Type, "const VkAttachmentReference*")]
		public unsafe VkAttachmentReference* PInputAttachments;
		[NativeName(NativeNameType.Field, "colorAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachmentCount;
		[NativeName(NativeNameType.Field, "pColorAttachments")]
		[NativeName(NativeNameType.Type, "const VkAttachmentReference*")]
		public unsafe VkAttachmentReference* PColorAttachments;
		[NativeName(NativeNameType.Field, "pResolveAttachments")]
		[NativeName(NativeNameType.Type, "const VkAttachmentReference*")]
		public unsafe VkAttachmentReference* PResolveAttachments;
		[NativeName(NativeNameType.Field, "pDepthStencilAttachment")]
		[NativeName(NativeNameType.Type, "const VkAttachmentReference*")]
		public unsafe VkAttachmentReference* PDepthStencilAttachment;
		[NativeName(NativeNameType.Field, "preserveAttachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PreserveAttachmentCount;
		[NativeName(NativeNameType.Field, "pPreserveAttachments")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PPreserveAttachments;

		public unsafe VkSubpassDescription(uint flags = default, VkPipelineBindPoint pipelineBindPoint = default, uint inputAttachmentCount = default, VkAttachmentReference* pInputAttachments = default, uint colorAttachmentCount = default, VkAttachmentReference* pColorAttachments = default, VkAttachmentReference* pResolveAttachments = default, VkAttachmentReference* pDepthStencilAttachment = default, uint preserveAttachmentCount = default, uint* pPreserveAttachments = default)
		{
			Flags = flags;
			PipelineBindPoint = pipelineBindPoint;
			InputAttachmentCount = inputAttachmentCount;
			PInputAttachments = pInputAttachments;
			ColorAttachmentCount = colorAttachmentCount;
			PColorAttachments = pColorAttachments;
			PResolveAttachments = pResolveAttachments;
			PDepthStencilAttachment = pDepthStencilAttachment;
			PreserveAttachmentCount = preserveAttachmentCount;
			PPreserveAttachments = pPreserveAttachments;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSubpassDependency")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSubpassDependency
	{
		[NativeName(NativeNameType.Field, "srcSubpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SrcSubpass;
		[NativeName(NativeNameType.Field, "dstSubpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstSubpass;
		[NativeName(NativeNameType.Field, "srcStageMask")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags")]
		public uint SrcStageMask;
		[NativeName(NativeNameType.Field, "dstStageMask")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags")]
		public uint DstStageMask;
		[NativeName(NativeNameType.Field, "srcAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint SrcAccessMask;
		[NativeName(NativeNameType.Field, "dstAccessMask")]
		[NativeName(NativeNameType.Type, "VkAccessFlags")]
		public uint DstAccessMask;
		[NativeName(NativeNameType.Field, "dependencyFlags")]
		[NativeName(NativeNameType.Type, "VkDependencyFlags")]
		public uint DependencyFlags;

		public unsafe VkSubpassDependency(uint srcSubpass = default, uint dstSubpass = default, uint srcStageMask = default, uint dstStageMask = default, uint srcAccessMask = default, uint dstAccessMask = default, uint dependencyFlags = default)
		{
			SrcSubpass = srcSubpass;
			DstSubpass = dstSubpass;
			SrcStageMask = srcStageMask;
			DstStageMask = dstStageMask;
			SrcAccessMask = srcAccessMask;
			DstAccessMask = dstAccessMask;
			DependencyFlags = dependencyFlags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkRenderPassCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "attachmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AttachmentCount;
		[NativeName(NativeNameType.Field, "pAttachments")]
		[NativeName(NativeNameType.Type, "const VkAttachmentDescription*")]
		public unsafe VkAttachmentDescription* PAttachments;
		[NativeName(NativeNameType.Field, "subpassCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubpassCount;
		[NativeName(NativeNameType.Field, "pSubpasses")]
		[NativeName(NativeNameType.Type, "const VkSubpassDescription*")]
		public unsafe VkSubpassDescription* PSubpasses;
		[NativeName(NativeNameType.Field, "dependencyCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DependencyCount;
		[NativeName(NativeNameType.Field, "pDependencies")]
		[NativeName(NativeNameType.Type, "const VkSubpassDependency*")]
		public unsafe VkSubpassDependency* PDependencies;

		public unsafe VkRenderPassCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint attachmentCount = default, VkAttachmentDescription* pAttachments = default, uint subpassCount = default, VkSubpassDescription* pSubpasses = default, uint dependencyCount = default, VkSubpassDependency* pDependencies = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			AttachmentCount = attachmentCount;
			PAttachments = pAttachments;
			SubpassCount = subpassCount;
			PSubpasses = pSubpasses;
			DependencyCount = dependencyCount;
			PDependencies = pDependencies;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandPoolCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandPoolCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkCommandPoolCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "queueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndex;

		public unsafe VkCommandPoolCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint queueFamilyIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			QueueFamilyIndex = queueFamilyIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandBufferAllocateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandBufferAllocateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "commandPool")]
		[NativeName(NativeNameType.Type, "VkCommandPool")]
		public VkCommandPool CommandPool;
		[NativeName(NativeNameType.Field, "level")]
		[NativeName(NativeNameType.Type, "VkCommandBufferLevel")]
		public VkCommandBufferLevel Level;
		[NativeName(NativeNameType.Field, "commandBufferCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CommandBufferCount;

		public unsafe VkCommandBufferAllocateInfo(VkStructureType sType = default, void* pNext = default, VkCommandPool commandPool = default, VkCommandBufferLevel level = default, uint commandBufferCount = default)
		{
			SType = sType;
			PNext = pNext;
			CommandPool = commandPool;
			Level = level;
			CommandBufferCount = commandBufferCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandBufferInheritanceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandBufferInheritanceInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "renderPass")]
		[NativeName(NativeNameType.Type, "VkRenderPass")]
		public VkRenderPass RenderPass;
		[NativeName(NativeNameType.Field, "subpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Subpass;
		[NativeName(NativeNameType.Field, "framebuffer")]
		[NativeName(NativeNameType.Type, "VkFramebuffer")]
		public VkFramebuffer Framebuffer;
		[NativeName(NativeNameType.Field, "occlusionQueryEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint OcclusionQueryEnable;
		[NativeName(NativeNameType.Field, "queryFlags")]
		[NativeName(NativeNameType.Type, "VkQueryControlFlags")]
		public uint QueryFlags;
		[NativeName(NativeNameType.Field, "pipelineStatistics")]
		[NativeName(NativeNameType.Type, "VkQueryPipelineStatisticFlags")]
		public uint PipelineStatistics;

		public unsafe VkCommandBufferInheritanceInfo(VkStructureType sType = default, void* pNext = default, VkRenderPass renderPass = default, uint subpass = default, VkFramebuffer framebuffer = default, uint occlusionQueryEnable = default, uint queryFlags = default, uint pipelineStatistics = default)
		{
			SType = sType;
			PNext = pNext;
			RenderPass = renderPass;
			Subpass = subpass;
			Framebuffer = framebuffer;
			OcclusionQueryEnable = occlusionQueryEnable;
			QueryFlags = queryFlags;
			PipelineStatistics = pipelineStatistics;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandBufferBeginInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandBufferBeginInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkCommandBufferUsageFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pInheritanceInfo")]
		[NativeName(NativeNameType.Type, "const VkCommandBufferInheritanceInfo*")]
		public unsafe VkCommandBufferInheritanceInfo* PInheritanceInfo;

		public unsafe VkCommandBufferBeginInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, VkCommandBufferInheritanceInfo* pInheritanceInfo = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			PInheritanceInfo = pInheritanceInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferCopy")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferCopy
	{
		[NativeName(NativeNameType.Field, "srcOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong SrcOffset;
		[NativeName(NativeNameType.Field, "dstOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong DstOffset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkBufferCopy(ulong srcOffset = default, ulong dstOffset = default, ulong size = default)
		{
			SrcOffset = srcOffset;
			DstOffset = dstOffset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageSubresourceLayers")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageSubresourceLayers
	{
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;
		[NativeName(NativeNameType.Field, "mipLevel")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MipLevel;
		[NativeName(NativeNameType.Field, "baseArrayLayer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseArrayLayer;
		[NativeName(NativeNameType.Field, "layerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LayerCount;

		public unsafe VkImageSubresourceLayers(uint aspectMask = default, uint mipLevel = default, uint baseArrayLayer = default, uint layerCount = default)
		{
			AspectMask = aspectMask;
			MipLevel = mipLevel;
			BaseArrayLayer = baseArrayLayer;
			LayerCount = layerCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferImageCopy")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferImageCopy
	{
		[NativeName(NativeNameType.Field, "bufferOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong BufferOffset;
		[NativeName(NativeNameType.Field, "bufferRowLength")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BufferRowLength;
		[NativeName(NativeNameType.Field, "bufferImageHeight")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BufferImageHeight;
		[NativeName(NativeNameType.Field, "imageSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers ImageSubresource;
		[NativeName(NativeNameType.Field, "imageOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D ImageOffset;
		[NativeName(NativeNameType.Field, "imageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D ImageExtent;

		public unsafe VkBufferImageCopy(ulong bufferOffset = default, uint bufferRowLength = default, uint bufferImageHeight = default, VkImageSubresourceLayers imageSubresource = default, VkOffset3D imageOffset = default, VkExtent3D imageExtent = default)
		{
			BufferOffset = bufferOffset;
			BufferRowLength = bufferRowLength;
			BufferImageHeight = bufferImageHeight;
			ImageSubresource = imageSubresource;
			ImageOffset = imageOffset;
			ImageExtent = imageExtent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkClearColorValue")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkClearColorValue
	{
		[NativeName(NativeNameType.Field, "float32")]
		[NativeName(NativeNameType.Type, "float[4]")]
		[FieldOffset(0)]
		public float Float32_0;
		[FieldOffset(16)]
		public float Float32_1;
		[FieldOffset(32)]
		public float Float32_2;
		[FieldOffset(48)]
		public float Float32_3;
		[NativeName(NativeNameType.Field, "int32")]
		[NativeName(NativeNameType.Type, "int32_t[4]")]
		[FieldOffset(0)]
		public int Int32_0;
		[FieldOffset(16)]
		public int Int32_1;
		[FieldOffset(32)]
		public int Int32_2;
		[FieldOffset(48)]
		public int Int32_3;
		[NativeName(NativeNameType.Field, "uint32")]
		[NativeName(NativeNameType.Type, "uint32_t[4]")]
		[FieldOffset(0)]
		public uint Uint32_0;
		[FieldOffset(16)]
		public uint Uint32_1;
		[FieldOffset(32)]
		public uint Uint32_2;
		[FieldOffset(48)]
		public uint Uint32_3;

		public unsafe VkClearColorValue(float* float32 = default, int* int32 = default, uint* uint32 = default)
		{
			if (float32 != default)
			{
				Float32_0 = float32[0];
				Float32_1 = float32[1];
				Float32_2 = float32[2];
				Float32_3 = float32[3];
			}
			if (int32 != default)
			{
				Int32_0 = int32[0];
				Int32_1 = int32[1];
				Int32_2 = int32[2];
				Int32_3 = int32[3];
			}
			if (uint32 != default)
			{
				Uint32_0 = uint32[0];
				Uint32_1 = uint32[1];
				Uint32_2 = uint32[2];
				Uint32_3 = uint32[3];
			}
		}

		public unsafe VkClearColorValue(Span<float> float32 = default, Span<int> int32 = default, Span<uint> uint32 = default)
		{
			if (float32 != default)
			{
				Float32_0 = float32[0];
				Float32_1 = float32[1];
				Float32_2 = float32[2];
				Float32_3 = float32[3];
			}
			if (int32 != default)
			{
				Int32_0 = int32[0];
				Int32_1 = int32[1];
				Int32_2 = int32[2];
				Int32_3 = int32[3];
			}
			if (uint32 != default)
			{
				Uint32_0 = uint32[0];
				Uint32_1 = uint32[1];
				Uint32_2 = uint32[2];
				Uint32_3 = uint32[3];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkClearDepthStencilValue")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkClearDepthStencilValue
	{
		[NativeName(NativeNameType.Field, "depth")]
		[NativeName(NativeNameType.Type, "float")]
		public float Depth;
		[NativeName(NativeNameType.Field, "stencil")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Stencil;

		public unsafe VkClearDepthStencilValue(float depth = default, uint stencil = default)
		{
			Depth = depth;
			Stencil = stencil;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkClearValue")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkClearValue
	{
		[NativeName(NativeNameType.Field, "color")]
		[NativeName(NativeNameType.Type, "VkClearColorValue")]
		[FieldOffset(0)]
		public VkClearColorValue Color;
		[NativeName(NativeNameType.Field, "depthStencil")]
		[NativeName(NativeNameType.Type, "VkClearDepthStencilValue")]
		[FieldOffset(0)]
		public VkClearDepthStencilValue DepthStencil;

		public unsafe VkClearValue(VkClearColorValue color = default, VkClearDepthStencilValue depthStencil = default)
		{
			Color = color;
			DepthStencil = depthStencil;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkClearAttachment")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkClearAttachment
	{
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;
		[NativeName(NativeNameType.Field, "colorAttachment")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColorAttachment;
		[NativeName(NativeNameType.Field, "clearValue")]
		[NativeName(NativeNameType.Type, "VkClearValue")]
		public VkClearValue ClearValue;

		public unsafe VkClearAttachment(uint aspectMask = default, uint colorAttachment = default, VkClearValue clearvalue = default)
		{
			AspectMask = aspectMask;
			ColorAttachment = colorAttachment;
			ClearValue = clearvalue;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkClearRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkClearRect
	{
		[NativeName(NativeNameType.Field, "rect")]
		[NativeName(NativeNameType.Type, "VkRect2D")]
		public VkRect2D Rect;
		[NativeName(NativeNameType.Field, "baseArrayLayer")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BaseArrayLayer;
		[NativeName(NativeNameType.Field, "layerCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LayerCount;

		public unsafe VkClearRect(VkRect2D rect = default, uint baseArrayLayer = default, uint layerCount = default)
		{
			Rect = rect;
			BaseArrayLayer = baseArrayLayer;
			LayerCount = layerCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageBlit")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageBlit
	{
		[NativeName(NativeNameType.Field, "srcSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers SrcSubresource;
		[NativeName(NativeNameType.Field, "srcOffsets")]
		[NativeName(NativeNameType.Type, "VkOffset3D[2]")]
		public VkOffset3D SrcOffsets_0;
		public VkOffset3D SrcOffsets_1;
		[NativeName(NativeNameType.Field, "dstSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers DstSubresource;
		[NativeName(NativeNameType.Field, "dstOffsets")]
		[NativeName(NativeNameType.Type, "VkOffset3D[2]")]
		public VkOffset3D DstOffsets_0;
		public VkOffset3D DstOffsets_1;

		public unsafe VkImageBlit(VkImageSubresourceLayers srcSubresource = default, VkOffset3D* srcOffsets = default, VkImageSubresourceLayers dstSubresource = default, VkOffset3D* dstOffsets = default)
		{
			SrcSubresource = srcSubresource;
			if (srcOffsets != default)
			{
				SrcOffsets_0 = srcOffsets[0];
				SrcOffsets_1 = srcOffsets[1];
			}
			DstSubresource = dstSubresource;
			if (dstOffsets != default)
			{
				DstOffsets_0 = dstOffsets[0];
				DstOffsets_1 = dstOffsets[1];
			}
		}

		public unsafe VkImageBlit(VkImageSubresourceLayers srcSubresource = default, Span<VkOffset3D> srcOffsets = default, VkImageSubresourceLayers dstSubresource = default, Span<VkOffset3D> dstOffsets = default)
		{
			SrcSubresource = srcSubresource;
			if (srcOffsets != default)
			{
				SrcOffsets_0 = srcOffsets[0];
				SrcOffsets_1 = srcOffsets[1];
			}
			DstSubresource = dstSubresource;
			if (dstOffsets != default)
			{
				DstOffsets_0 = dstOffsets[0];
				DstOffsets_1 = dstOffsets[1];
			}
		}


		public unsafe Span<VkOffset3D> SrcOffsets
		
		{
			get
			{
				fixed (VkOffset3D* p = &this.SrcOffsets_0)
				{
					return new Span<VkOffset3D>(p, 2);
				}
			}
		}
		public unsafe Span<VkOffset3D> DstOffsets
		
		{
			get
			{
				fixed (VkOffset3D* p = &this.DstOffsets_0)
				{
					return new Span<VkOffset3D>(p, 2);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "VkImageCopy")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageCopy
	{
		[NativeName(NativeNameType.Field, "srcSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers SrcSubresource;
		[NativeName(NativeNameType.Field, "srcOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D SrcOffset;
		[NativeName(NativeNameType.Field, "dstSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers DstSubresource;
		[NativeName(NativeNameType.Field, "dstOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D DstOffset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D Extent;

		public unsafe VkImageCopy(VkImageSubresourceLayers srcSubresource = default, VkOffset3D srcOffset = default, VkImageSubresourceLayers dstSubresource = default, VkOffset3D dstOffset = default, VkExtent3D extent = default)
		{
			SrcSubresource = srcSubresource;
			SrcOffset = srcOffset;
			DstSubresource = dstSubresource;
			DstOffset = dstOffset;
			Extent = extent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageResolve")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageResolve
	{
		[NativeName(NativeNameType.Field, "srcSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers SrcSubresource;
		[NativeName(NativeNameType.Field, "srcOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D SrcOffset;
		[NativeName(NativeNameType.Field, "dstSubresource")]
		[NativeName(NativeNameType.Type, "VkImageSubresourceLayers")]
		public VkImageSubresourceLayers DstSubresource;
		[NativeName(NativeNameType.Field, "dstOffset")]
		[NativeName(NativeNameType.Type, "VkOffset3D")]
		public VkOffset3D DstOffset;
		[NativeName(NativeNameType.Field, "extent")]
		[NativeName(NativeNameType.Type, "VkExtent3D")]
		public VkExtent3D Extent;

		public unsafe VkImageResolve(VkImageSubresourceLayers srcSubresource = default, VkOffset3D srcOffset = default, VkImageSubresourceLayers dstSubresource = default, VkOffset3D dstOffset = default, VkExtent3D extent = default)
		{
			SrcSubresource = srcSubresource;
			SrcOffset = srcOffset;
			DstSubresource = dstSubresource;
			DstOffset = dstOffset;
			Extent = extent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassBeginInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassBeginInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "renderPass")]
		[NativeName(NativeNameType.Type, "VkRenderPass")]
		public VkRenderPass RenderPass;
		[NativeName(NativeNameType.Field, "framebuffer")]
		[NativeName(NativeNameType.Type, "VkFramebuffer")]
		public VkFramebuffer Framebuffer;
		[NativeName(NativeNameType.Field, "renderArea")]
		[NativeName(NativeNameType.Type, "VkRect2D")]
		public VkRect2D RenderArea;
		[NativeName(NativeNameType.Field, "clearValueCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ClearValueCount;
		[NativeName(NativeNameType.Field, "pClearValues")]
		[NativeName(NativeNameType.Type, "const VkClearValue*")]
		public unsafe VkClearValue* PClearValues;

		public unsafe VkRenderPassBeginInfo(VkStructureType sType = default, void* pNext = default, VkRenderPass renderPass = default, VkFramebuffer framebuffer = default, VkRect2D renderArea = default, uint clearValueCount = default, VkClearValue* pClearValues = default)
		{
			SType = sType;
			PNext = pNext;
			RenderPass = renderPass;
			Framebuffer = framebuffer;
			RenderArea = renderArea;
			ClearValueCount = clearValueCount;
			PClearValues = pClearValues;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSubgroupProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSubgroupProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "subgroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubgroupSize;
		[NativeName(NativeNameType.Field, "supportedStages")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint SupportedStages;
		[NativeName(NativeNameType.Field, "supportedOperations")]
		[NativeName(NativeNameType.Type, "VkSubgroupFeatureFlags")]
		public uint SupportedOperations;
		[NativeName(NativeNameType.Field, "quadOperationsInAllStages")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint QuadOperationsInAllStages;

		public unsafe VkPhysicalDeviceSubgroupProperties(VkStructureType sType = default, void* pNext = default, uint subgroupSize = default, uint supportedStages = default, uint supportedOperations = default, uint quadOperationsInAllStages = default)
		{
			SType = sType;
			PNext = pNext;
			SubgroupSize = subgroupSize;
			SupportedStages = supportedStages;
			SupportedOperations = supportedOperations;
			QuadOperationsInAllStages = quadOperationsInAllStages;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindBufferMemoryInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindBufferMemoryInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "memoryOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemoryOffset;

		public unsafe VkBindBufferMemoryInfo(VkStructureType sType = default, void* pNext = default, VkBuffer buffer = default, VkDeviceMemory memory = default, ulong memoryOffset = default)
		{
			SType = sType;
			PNext = pNext;
			Buffer = buffer;
			Memory = memory;
			MemoryOffset = memoryOffset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindImageMemoryInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindImageMemoryInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "memoryOffset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MemoryOffset;

		public unsafe VkBindImageMemoryInfo(VkStructureType sType = default, void* pNext = default, VkImage image = default, VkDeviceMemory memory = default, ulong memoryOffset = default)
		{
			SType = sType;
			PNext = pNext;
			Image = image;
			Memory = memory;
			MemoryOffset = memoryOffset;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevice16BitStorageFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevice16BitStorageFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "storageBuffer16BitAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StorageBuffer16BitAccess;
		[NativeName(NativeNameType.Field, "uniformAndStorageBuffer16BitAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint UniformAndStorageBuffer16BitAccess;
		[NativeName(NativeNameType.Field, "storagePushConstant16")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StoragePushConstant16;
		[NativeName(NativeNameType.Field, "storageInputOutput16")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint StorageInputOutput16;

		public unsafe VkPhysicalDevice16BitStorageFeatures(VkStructureType sType = default, void* pNext = default, uint storageBuffer16BitAccess = default, uint uniformAndStorageBuffer16BitAccess = default, uint storagePushConstant16 = default, uint storageInputOutput16 = default)
		{
			SType = sType;
			PNext = pNext;
			StorageBuffer16BitAccess = storageBuffer16BitAccess;
			UniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess;
			StoragePushConstant16 = storagePushConstant16;
			StorageInputOutput16 = storageInputOutput16;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryDedicatedRequirements")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryDedicatedRequirements
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "prefersDedicatedAllocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrefersDedicatedAllocation;
		[NativeName(NativeNameType.Field, "requiresDedicatedAllocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RequiresDedicatedAllocation;

		public unsafe VkMemoryDedicatedRequirements(VkStructureType sType = default, void* pNext = default, uint prefersDedicatedAllocation = default, uint requiresDedicatedAllocation = default)
		{
			SType = sType;
			PNext = pNext;
			PrefersDedicatedAllocation = prefersDedicatedAllocation;
			RequiresDedicatedAllocation = requiresDedicatedAllocation;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryDedicatedAllocateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryDedicatedAllocateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;

		public unsafe VkMemoryDedicatedAllocateInfo(VkStructureType sType = default, void* pNext = default, VkImage image = default, VkBuffer buffer = default)
		{
			SType = sType;
			PNext = pNext;
			Image = image;
			Buffer = buffer;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryAllocateFlagsInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryAllocateFlagsInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkMemoryAllocateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "deviceMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceMask;

		public unsafe VkMemoryAllocateFlagsInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint deviceMask = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DeviceMask = deviceMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupRenderPassBeginInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupRenderPassBeginInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceMask;
		[NativeName(NativeNameType.Field, "deviceRenderAreaCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceRenderAreaCount;
		[NativeName(NativeNameType.Field, "pDeviceRenderAreas")]
		[NativeName(NativeNameType.Type, "const VkRect2D*")]
		public unsafe VkRect2D* PDeviceRenderAreas;

		public unsafe VkDeviceGroupRenderPassBeginInfo(VkStructureType sType = default, void* pNext = default, uint deviceMask = default, uint deviceRenderAreaCount = default, VkRect2D* pDeviceRenderAreas = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceMask = deviceMask;
			DeviceRenderAreaCount = deviceRenderAreaCount;
			PDeviceRenderAreas = pDeviceRenderAreas;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupCommandBufferBeginInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupCommandBufferBeginInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceMask;

		public unsafe VkDeviceGroupCommandBufferBeginInfo(VkStructureType sType = default, void* pNext = default, uint deviceMask = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceMask = deviceMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupSubmitInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupSubmitInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "waitSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WaitSemaphoreCount;
		[NativeName(NativeNameType.Field, "pWaitSemaphoreDeviceIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PWaitSemaphoreDeviceIndices;
		[NativeName(NativeNameType.Field, "commandBufferCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CommandBufferCount;
		[NativeName(NativeNameType.Field, "pCommandBufferDeviceMasks")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PCommandBufferDeviceMasks;
		[NativeName(NativeNameType.Field, "signalSemaphoreCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SignalSemaphoreCount;
		[NativeName(NativeNameType.Field, "pSignalSemaphoreDeviceIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PSignalSemaphoreDeviceIndices;

		public unsafe VkDeviceGroupSubmitInfo(VkStructureType sType = default, void* pNext = default, uint waitSemaphoreCount = default, uint* pWaitSemaphoreDeviceIndices = default, uint commandBufferCount = default, uint* pCommandBufferDeviceMasks = default, uint signalSemaphoreCount = default, uint* pSignalSemaphoreDeviceIndices = default)
		{
			SType = sType;
			PNext = pNext;
			WaitSemaphoreCount = waitSemaphoreCount;
			PWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices;
			CommandBufferCount = commandBufferCount;
			PCommandBufferDeviceMasks = pCommandBufferDeviceMasks;
			SignalSemaphoreCount = signalSemaphoreCount;
			PSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupBindSparseInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupBindSparseInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "resourceDeviceIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ResourceDeviceIndex;
		[NativeName(NativeNameType.Field, "memoryDeviceIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MemoryDeviceIndex;

		public unsafe VkDeviceGroupBindSparseInfo(VkStructureType sType = default, void* pNext = default, uint resourceDeviceIndex = default, uint memoryDeviceIndex = default)
		{
			SType = sType;
			PNext = pNext;
			ResourceDeviceIndex = resourceDeviceIndex;
			MemoryDeviceIndex = memoryDeviceIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindBufferMemoryDeviceGroupInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindBufferMemoryDeviceGroupInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceIndexCount;
		[NativeName(NativeNameType.Field, "pDeviceIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PDeviceIndices;

		public unsafe VkBindBufferMemoryDeviceGroupInfo(VkStructureType sType = default, void* pNext = default, uint deviceIndexCount = default, uint* pDeviceIndices = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceIndexCount = deviceIndexCount;
			PDeviceIndices = pDeviceIndices;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindImageMemoryDeviceGroupInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindImageMemoryDeviceGroupInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceIndexCount;
		[NativeName(NativeNameType.Field, "pDeviceIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PDeviceIndices;
		[NativeName(NativeNameType.Field, "splitInstanceBindRegionCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SplitInstanceBindRegionCount;
		[NativeName(NativeNameType.Field, "pSplitInstanceBindRegions")]
		[NativeName(NativeNameType.Type, "const VkRect2D*")]
		public unsafe VkRect2D* PSplitInstanceBindRegions;

		public unsafe VkBindImageMemoryDeviceGroupInfo(VkStructureType sType = default, void* pNext = default, uint deviceIndexCount = default, uint* pDeviceIndices = default, uint splitInstanceBindRegionCount = default, VkRect2D* pSplitInstanceBindRegions = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceIndexCount = deviceIndexCount;
			PDeviceIndices = pDeviceIndices;
			SplitInstanceBindRegionCount = splitInstanceBindRegionCount;
			PSplitInstanceBindRegions = pSplitInstanceBindRegions;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceGroupProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceGroupProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "physicalDeviceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PhysicalDeviceCount;
		[NativeName(NativeNameType.Field, "physicalDevices")]
		[NativeName(NativeNameType.Type, "VkPhysicalDevice[32]")]
		public VkPhysicalDevice PhysicalDevices_0;
		public VkPhysicalDevice PhysicalDevices_1;
		public VkPhysicalDevice PhysicalDevices_2;
		public VkPhysicalDevice PhysicalDevices_3;
		public VkPhysicalDevice PhysicalDevices_4;
		public VkPhysicalDevice PhysicalDevices_5;
		public VkPhysicalDevice PhysicalDevices_6;
		public VkPhysicalDevice PhysicalDevices_7;
		public VkPhysicalDevice PhysicalDevices_8;
		public VkPhysicalDevice PhysicalDevices_9;
		public VkPhysicalDevice PhysicalDevices_10;
		public VkPhysicalDevice PhysicalDevices_11;
		public VkPhysicalDevice PhysicalDevices_12;
		public VkPhysicalDevice PhysicalDevices_13;
		public VkPhysicalDevice PhysicalDevices_14;
		public VkPhysicalDevice PhysicalDevices_15;
		public VkPhysicalDevice PhysicalDevices_16;
		public VkPhysicalDevice PhysicalDevices_17;
		public VkPhysicalDevice PhysicalDevices_18;
		public VkPhysicalDevice PhysicalDevices_19;
		public VkPhysicalDevice PhysicalDevices_20;
		public VkPhysicalDevice PhysicalDevices_21;
		public VkPhysicalDevice PhysicalDevices_22;
		public VkPhysicalDevice PhysicalDevices_23;
		public VkPhysicalDevice PhysicalDevices_24;
		public VkPhysicalDevice PhysicalDevices_25;
		public VkPhysicalDevice PhysicalDevices_26;
		public VkPhysicalDevice PhysicalDevices_27;
		public VkPhysicalDevice PhysicalDevices_28;
		public VkPhysicalDevice PhysicalDevices_29;
		public VkPhysicalDevice PhysicalDevices_30;
		public VkPhysicalDevice PhysicalDevices_31;
		[NativeName(NativeNameType.Field, "subsetAllocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SubsetAllocation;

		public unsafe VkPhysicalDeviceGroupProperties(VkStructureType sType = default, void* pNext = default, uint physicalDeviceCount = default, VkPhysicalDevice* physicalDevices = default, uint subsetAllocation = default)
		{
			SType = sType;
			PNext = pNext;
			PhysicalDeviceCount = physicalDeviceCount;
			if (physicalDevices != default)
			{
				PhysicalDevices_0 = physicalDevices[0];
				PhysicalDevices_1 = physicalDevices[1];
				PhysicalDevices_2 = physicalDevices[2];
				PhysicalDevices_3 = physicalDevices[3];
				PhysicalDevices_4 = physicalDevices[4];
				PhysicalDevices_5 = physicalDevices[5];
				PhysicalDevices_6 = physicalDevices[6];
				PhysicalDevices_7 = physicalDevices[7];
				PhysicalDevices_8 = physicalDevices[8];
				PhysicalDevices_9 = physicalDevices[9];
				PhysicalDevices_10 = physicalDevices[10];
				PhysicalDevices_11 = physicalDevices[11];
				PhysicalDevices_12 = physicalDevices[12];
				PhysicalDevices_13 = physicalDevices[13];
				PhysicalDevices_14 = physicalDevices[14];
				PhysicalDevices_15 = physicalDevices[15];
				PhysicalDevices_16 = physicalDevices[16];
				PhysicalDevices_17 = physicalDevices[17];
				PhysicalDevices_18 = physicalDevices[18];
				PhysicalDevices_19 = physicalDevices[19];
				PhysicalDevices_20 = physicalDevices[20];
				PhysicalDevices_21 = physicalDevices[21];
				PhysicalDevices_22 = physicalDevices[22];
				PhysicalDevices_23 = physicalDevices[23];
				PhysicalDevices_24 = physicalDevices[24];
				PhysicalDevices_25 = physicalDevices[25];
				PhysicalDevices_26 = physicalDevices[26];
				PhysicalDevices_27 = physicalDevices[27];
				PhysicalDevices_28 = physicalDevices[28];
				PhysicalDevices_29 = physicalDevices[29];
				PhysicalDevices_30 = physicalDevices[30];
				PhysicalDevices_31 = physicalDevices[31];
			}
			SubsetAllocation = subsetAllocation;
		}

		public unsafe VkPhysicalDeviceGroupProperties(VkStructureType sType = default, void* pNext = default, uint physicalDeviceCount = default, Span<VkPhysicalDevice> physicalDevices = default, uint subsetAllocation = default)
		{
			SType = sType;
			PNext = pNext;
			PhysicalDeviceCount = physicalDeviceCount;
			if (physicalDevices != default)
			{
				PhysicalDevices_0 = physicalDevices[0];
				PhysicalDevices_1 = physicalDevices[1];
				PhysicalDevices_2 = physicalDevices[2];
				PhysicalDevices_3 = physicalDevices[3];
				PhysicalDevices_4 = physicalDevices[4];
				PhysicalDevices_5 = physicalDevices[5];
				PhysicalDevices_6 = physicalDevices[6];
				PhysicalDevices_7 = physicalDevices[7];
				PhysicalDevices_8 = physicalDevices[8];
				PhysicalDevices_9 = physicalDevices[9];
				PhysicalDevices_10 = physicalDevices[10];
				PhysicalDevices_11 = physicalDevices[11];
				PhysicalDevices_12 = physicalDevices[12];
				PhysicalDevices_13 = physicalDevices[13];
				PhysicalDevices_14 = physicalDevices[14];
				PhysicalDevices_15 = physicalDevices[15];
				PhysicalDevices_16 = physicalDevices[16];
				PhysicalDevices_17 = physicalDevices[17];
				PhysicalDevices_18 = physicalDevices[18];
				PhysicalDevices_19 = physicalDevices[19];
				PhysicalDevices_20 = physicalDevices[20];
				PhysicalDevices_21 = physicalDevices[21];
				PhysicalDevices_22 = physicalDevices[22];
				PhysicalDevices_23 = physicalDevices[23];
				PhysicalDevices_24 = physicalDevices[24];
				PhysicalDevices_25 = physicalDevices[25];
				PhysicalDevices_26 = physicalDevices[26];
				PhysicalDevices_27 = physicalDevices[27];
				PhysicalDevices_28 = physicalDevices[28];
				PhysicalDevices_29 = physicalDevices[29];
				PhysicalDevices_30 = physicalDevices[30];
				PhysicalDevices_31 = physicalDevices[31];
			}
			SubsetAllocation = subsetAllocation;
		}


		public unsafe Span<VkPhysicalDevice> PhysicalDevices
		
		{
			get
			{
				fixed (VkPhysicalDevice* p = &this.PhysicalDevices_0)
				{
					return new Span<VkPhysicalDevice>(p, 32);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceGroupDeviceCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceGroupDeviceCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "physicalDeviceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PhysicalDeviceCount;
		[NativeName(NativeNameType.Field, "pPhysicalDevices")]
		[NativeName(NativeNameType.Type, "const VkPhysicalDevice*")]
		public unsafe VkPhysicalDevice* PPhysicalDevices;

		public unsafe VkDeviceGroupDeviceCreateInfo(VkStructureType sType = default, void* pNext = default, uint physicalDeviceCount = default, VkPhysicalDevice* pPhysicalDevices = default)
		{
			SType = sType;
			PNext = pNext;
			PhysicalDeviceCount = physicalDeviceCount;
			PPhysicalDevices = pPhysicalDevices;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBufferMemoryRequirementsInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBufferMemoryRequirementsInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;

		public unsafe VkBufferMemoryRequirementsInfo2(VkStructureType sType = default, void* pNext = default, VkBuffer buffer = default)
		{
			SType = sType;
			PNext = pNext;
			Buffer = buffer;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageMemoryRequirementsInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageMemoryRequirementsInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;

		public unsafe VkImageMemoryRequirementsInfo2(VkStructureType sType = default, void* pNext = default, VkImage image = default)
		{
			SType = sType;
			PNext = pNext;
			Image = image;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageSparseMemoryRequirementsInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageSparseMemoryRequirementsInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;

		public unsafe VkImageSparseMemoryRequirementsInfo2(VkStructureType sType = default, void* pNext = default, VkImage image = default)
		{
			SType = sType;
			PNext = pNext;
			Image = image;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryRequirements2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryRequirements2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryRequirements")]
		[NativeName(NativeNameType.Type, "VkMemoryRequirements")]
		public VkMemoryRequirements MemoryRequirements;

		public unsafe VkMemoryRequirements2(VkStructureType sType = default, void* pNext = default, VkMemoryRequirements memoryRequirements = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryRequirements = memoryRequirements;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageMemoryRequirements2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageMemoryRequirements2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryRequirements")]
		[NativeName(NativeNameType.Type, "VkSparseImageMemoryRequirements")]
		public VkSparseImageMemoryRequirements MemoryRequirements;

		public unsafe VkSparseImageMemoryRequirements2(VkStructureType sType = default, void* pNext = default, VkSparseImageMemoryRequirements memoryRequirements = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryRequirements = memoryRequirements;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFeatures2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFeatures2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "features")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceFeatures")]
		public VkPhysicalDeviceFeatures Features;

		public unsafe VkPhysicalDeviceFeatures2(VkStructureType sType = default, void* pNext = default, VkPhysicalDeviceFeatures features = default)
		{
			SType = sType;
			PNext = pNext;
			Features = features;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "properties")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceProperties")]
		public VkPhysicalDeviceProperties Properties;

		public unsafe VkPhysicalDeviceProperties2(VkStructureType sType = default, void* pNext = default, VkPhysicalDeviceProperties properties = default)
		{
			SType = sType;
			PNext = pNext;
			Properties = properties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkFormatProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFormatProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "formatProperties")]
		[NativeName(NativeNameType.Type, "VkFormatProperties")]
		public VkFormatProperties FormatProperties;

		public unsafe VkFormatProperties2(VkStructureType sType = default, void* pNext = default, VkFormatProperties formatProperties = default)
		{
			SType = sType;
			PNext = pNext;
			FormatProperties = formatProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageFormatProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageFormatProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageFormatProperties")]
		[NativeName(NativeNameType.Type, "VkImageFormatProperties")]
		public VkImageFormatProperties ImageFormatProperties;

		public unsafe VkImageFormatProperties2(VkStructureType sType = default, void* pNext = default, VkImageFormatProperties imageFormatProperties = default)
		{
			SType = sType;
			PNext = pNext;
			ImageFormatProperties = imageFormatProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceImageFormatInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceImageFormatInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkImageType")]
		public VkImageType Type;
		[NativeName(NativeNameType.Field, "tiling")]
		[NativeName(NativeNameType.Type, "VkImageTiling")]
		public VkImageTiling Tiling;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint Usage;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkImageCreateFlags")]
		public uint Flags;

		public unsafe VkPhysicalDeviceImageFormatInfo2(VkStructureType sType = default, void* pNext = default, VkFormat format = default, VkImageType type = default, VkImageTiling tiling = default, uint usage = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Format = format;
			Type = type;
			Tiling = tiling;
			Usage = usage;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "queueFamilyProperties")]
		[NativeName(NativeNameType.Type, "VkQueueFamilyProperties")]
		public VkQueueFamilyProperties QueueFamilyProperties;

		public unsafe VkQueueFamilyProperties2(VkStructureType sType = default, void* pNext = default, VkQueueFamilyProperties queueFamilyProperties = default)
		{
			SType = sType;
			PNext = pNext;
			QueueFamilyProperties = queueFamilyProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMemoryProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMemoryProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "memoryProperties")]
		[NativeName(NativeNameType.Type, "VkPhysicalDeviceMemoryProperties")]
		public VkPhysicalDeviceMemoryProperties MemoryProperties;

		public unsafe VkPhysicalDeviceMemoryProperties2(VkStructureType sType = default, void* pNext = default, VkPhysicalDeviceMemoryProperties memoryProperties = default)
		{
			SType = sType;
			PNext = pNext;
			MemoryProperties = memoryProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSparseImageFormatProperties2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSparseImageFormatProperties2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "properties")]
		[NativeName(NativeNameType.Type, "VkSparseImageFormatProperties")]
		public VkSparseImageFormatProperties Properties;

		public unsafe VkSparseImageFormatProperties2(VkStructureType sType = default, void* pNext = default, VkSparseImageFormatProperties properties = default)
		{
			SType = sType;
			PNext = pNext;
			Properties = properties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSparseImageFormatInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSparseImageFormatInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "VkImageType")]
		public VkImageType Type;
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits Samples;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint Usage;
		[NativeName(NativeNameType.Field, "tiling")]
		[NativeName(NativeNameType.Type, "VkImageTiling")]
		public VkImageTiling Tiling;

		public unsafe VkPhysicalDeviceSparseImageFormatInfo2(VkStructureType sType = default, void* pNext = default, VkFormat format = default, VkImageType type = default, VkSampleCountFlagBits samples = default, uint usage = default, VkImageTiling tiling = default)
		{
			SType = sType;
			PNext = pNext;
			Format = format;
			Type = type;
			Samples = samples;
			Usage = usage;
			Tiling = tiling;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePointClippingProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePointClippingProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pointClippingBehavior")]
		[NativeName(NativeNameType.Type, "VkPointClippingBehavior")]
		public VkPointClippingBehavior PointClippingBehavior;

		public unsafe VkPhysicalDevicePointClippingProperties(VkStructureType sType = default, void* pNext = default, VkPointClippingBehavior pointClippingBehavior = default)
		{
			SType = sType;
			PNext = pNext;
			PointClippingBehavior = pointClippingBehavior;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkInputAttachmentAspectReference")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkInputAttachmentAspectReference
	{
		[NativeName(NativeNameType.Field, "subpass")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Subpass;
		[NativeName(NativeNameType.Field, "inputAttachmentIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InputAttachmentIndex;
		[NativeName(NativeNameType.Field, "aspectMask")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlags")]
		public uint AspectMask;

		public unsafe VkInputAttachmentAspectReference(uint subpass = default, uint inputAttachmentIndex = default, uint aspectMask = default)
		{
			Subpass = subpass;
			InputAttachmentIndex = inputAttachmentIndex;
			AspectMask = aspectMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassInputAttachmentAspectCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassInputAttachmentAspectCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "aspectReferenceCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AspectReferenceCount;
		[NativeName(NativeNameType.Field, "pAspectReferences")]
		[NativeName(NativeNameType.Type, "const VkInputAttachmentAspectReference*")]
		public unsafe VkInputAttachmentAspectReference* PAspectReferences;

		public unsafe VkRenderPassInputAttachmentAspectCreateInfo(VkStructureType sType = default, void* pNext = default, uint aspectReferenceCount = default, VkInputAttachmentAspectReference* pAspectReferences = default)
		{
			SType = sType;
			PNext = pNext;
			AspectReferenceCount = aspectReferenceCount;
			PAspectReferences = pAspectReferences;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewUsageCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewUsageCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint Usage;

		public unsafe VkImageViewUsageCreateInfo(VkStructureType sType = default, void* pNext = default, uint usage = default)
		{
			SType = sType;
			PNext = pNext;
			Usage = usage;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineTessellationDomainOriginStateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineTessellationDomainOriginStateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "domainOrigin")]
		[NativeName(NativeNameType.Type, "VkTessellationDomainOrigin")]
		public VkTessellationDomainOrigin DomainOrigin;

		public unsafe VkPipelineTessellationDomainOriginStateCreateInfo(VkStructureType sType = default, void* pNext = default, VkTessellationDomainOrigin domainOrigin = default)
		{
			SType = sType;
			PNext = pNext;
			DomainOrigin = domainOrigin;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRenderPassMultiviewCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRenderPassMultiviewCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "subpassCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubpassCount;
		[NativeName(NativeNameType.Field, "pViewMasks")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PViewMasks;
		[NativeName(NativeNameType.Field, "dependencyCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DependencyCount;
		[NativeName(NativeNameType.Field, "pViewOffsets")]
		[NativeName(NativeNameType.Type, "const int32_t*")]
		public unsafe int* PViewOffsets;
		[NativeName(NativeNameType.Field, "correlationMaskCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CorrelationMaskCount;
		[NativeName(NativeNameType.Field, "pCorrelationMasks")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PCorrelationMasks;

		public unsafe VkRenderPassMultiviewCreateInfo(VkStructureType sType = default, void* pNext = default, uint subpassCount = default, uint* pViewMasks = default, uint dependencyCount = default, int* pViewOffsets = default, uint correlationMaskCount = default, uint* pCorrelationMasks = default)
		{
			SType = sType;
			PNext = pNext;
			SubpassCount = subpassCount;
			PViewMasks = pViewMasks;
			DependencyCount = dependencyCount;
			PViewOffsets = pViewOffsets;
			CorrelationMaskCount = correlationMaskCount;
			PCorrelationMasks = pCorrelationMasks;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiviewFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiviewFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "multiview")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint Multiview;
		[NativeName(NativeNameType.Field, "multiviewGeometryShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiviewGeometryShader;
		[NativeName(NativeNameType.Field, "multiviewTessellationShader")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint MultiviewTessellationShader;

		public unsafe VkPhysicalDeviceMultiviewFeatures(VkStructureType sType = default, void* pNext = default, uint multiview = default, uint multiviewGeometryShader = default, uint multiviewTessellationShader = default)
		{
			SType = sType;
			PNext = pNext;
			Multiview = multiview;
			MultiviewGeometryShader = multiviewGeometryShader;
			MultiviewTessellationShader = multiviewTessellationShader;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceMultiviewProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceMultiviewProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxMultiviewViewCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMultiviewViewCount;
		[NativeName(NativeNameType.Field, "maxMultiviewInstanceIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxMultiviewInstanceIndex;

		public unsafe VkPhysicalDeviceMultiviewProperties(VkStructureType sType = default, void* pNext = default, uint maxMultiviewViewCount = default, uint maxMultiviewInstanceIndex = default)
		{
			SType = sType;
			PNext = pNext;
			MaxMultiviewViewCount = maxMultiviewViewCount;
			MaxMultiviewInstanceIndex = maxMultiviewInstanceIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceVariablePointersFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceVariablePointersFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "variablePointersStorageBuffer")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint VariablePointersStorageBuffer;
		[NativeName(NativeNameType.Field, "variablePointers")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint VariablePointers;

		public unsafe VkPhysicalDeviceVariablePointersFeatures(VkStructureType sType = default, void* pNext = default, uint variablePointersStorageBuffer = default, uint variablePointers = default)
		{
			SType = sType;
			PNext = pNext;
			VariablePointersStorageBuffer = variablePointersStorageBuffer;
			VariablePointers = variablePointers;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceProtectedMemoryFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceProtectedMemoryFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "protectedMemory")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ProtectedMemory;

		public unsafe VkPhysicalDeviceProtectedMemoryFeatures(VkStructureType sType = default, void* pNext = default, uint protectedMemory = default)
		{
			SType = sType;
			PNext = pNext;
			ProtectedMemory = protectedMemory;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceProtectedMemoryProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceProtectedMemoryProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "protectedNoFault")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ProtectedNoFault;

		public unsafe VkPhysicalDeviceProtectedMemoryProperties(VkStructureType sType = default, void* pNext = default, uint protectedNoFault = default)
		{
			SType = sType;
			PNext = pNext;
			ProtectedNoFault = protectedNoFault;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceQueueInfo2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceQueueInfo2
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDeviceQueueCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "queueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndex;
		[NativeName(NativeNameType.Field, "queueIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueIndex;

		public unsafe VkDeviceQueueInfo2(VkStructureType sType = default, void* pNext = default, uint flags = default, uint queueFamilyIndex = default, uint queueIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			QueueFamilyIndex = queueFamilyIndex;
			QueueIndex = queueIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkProtectedSubmitInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkProtectedSubmitInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "protectedSubmit")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ProtectedSubmit;

		public unsafe VkProtectedSubmitInfo(VkStructureType sType = default, void* pNext = default, uint protectedSubmit = default)
		{
			SType = sType;
			PNext = pNext;
			ProtectedSubmit = protectedSubmit;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSamplerYcbcrConversionCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSamplerYcbcrConversionCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat Format;
		[NativeName(NativeNameType.Field, "ycbcrModel")]
		[NativeName(NativeNameType.Type, "VkSamplerYcbcrModelConversion")]
		public VkSamplerYcbcrModelConversion YcbcrModel;
		[NativeName(NativeNameType.Field, "ycbcrRange")]
		[NativeName(NativeNameType.Type, "VkSamplerYcbcrRange")]
		public VkSamplerYcbcrRange YcbcrRange;
		[NativeName(NativeNameType.Field, "components")]
		[NativeName(NativeNameType.Type, "VkComponentMapping")]
		public VkComponentMapping Components;
		[NativeName(NativeNameType.Field, "xChromaOffset")]
		[NativeName(NativeNameType.Type, "VkChromaLocation")]
		public VkChromaLocation XChromaOffset;
		[NativeName(NativeNameType.Field, "yChromaOffset")]
		[NativeName(NativeNameType.Type, "VkChromaLocation")]
		public VkChromaLocation YChromaOffset;
		[NativeName(NativeNameType.Field, "chromaFilter")]
		[NativeName(NativeNameType.Type, "VkFilter")]
		public VkFilter ChromaFilter;
		[NativeName(NativeNameType.Field, "forceExplicitReconstruction")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ForceExplicitReconstruction;

		public unsafe VkSamplerYcbcrConversionCreateInfo(VkStructureType sType = default, void* pNext = default, VkFormat format = default, VkSamplerYcbcrModelConversion ycbcrModel = default, VkSamplerYcbcrRange ycbcrRange = default, VkComponentMapping components = default, VkChromaLocation xChromaOffset = default, VkChromaLocation yChromaOffset = default, VkFilter chromaFilter = default, uint forceExplicitReconstruction = default)
		{
			SType = sType;
			PNext = pNext;
			Format = format;
			YcbcrModel = ycbcrModel;
			YcbcrRange = ycbcrRange;
			Components = components;
			XChromaOffset = xChromaOffset;
			YChromaOffset = yChromaOffset;
			ChromaFilter = chromaFilter;
			ForceExplicitReconstruction = forceExplicitReconstruction;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSamplerYcbcrConversionInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSamplerYcbcrConversionInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "conversion")]
		[NativeName(NativeNameType.Type, "VkSamplerYcbcrConversion")]
		public VkSamplerYcbcrConversion Conversion;

		public unsafe VkSamplerYcbcrConversionInfo(VkStructureType sType = default, void* pNext = default, VkSamplerYcbcrConversion conversion = default)
		{
			SType = sType;
			PNext = pNext;
			Conversion = conversion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkBindImagePlaneMemoryInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkBindImagePlaneMemoryInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "planeAspect")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlagBits")]
		public VkImageAspectFlagBits PlaneAspect;

		public unsafe VkBindImagePlaneMemoryInfo(VkStructureType sType = default, void* pNext = default, VkImageAspectFlagBits planeAspect = default)
		{
			SType = sType;
			PNext = pNext;
			PlaneAspect = planeAspect;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImagePlaneMemoryRequirementsInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImagePlaneMemoryRequirementsInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "planeAspect")]
		[NativeName(NativeNameType.Type, "VkImageAspectFlagBits")]
		public VkImageAspectFlagBits PlaneAspect;

		public unsafe VkImagePlaneMemoryRequirementsInfo(VkStructureType sType = default, void* pNext = default, VkImageAspectFlagBits planeAspect = default)
		{
			SType = sType;
			PNext = pNext;
			PlaneAspect = planeAspect;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSamplerYcbcrConversionFeatures")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "samplerYcbcrConversion")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SamplerYcbcrConversion;

		public unsafe VkPhysicalDeviceSamplerYcbcrConversionFeatures(VkStructureType sType = default, void* pNext = default, uint samplerYcbcrConversion = default)
		{
			SType = sType;
			PNext = pNext;
			SamplerYcbcrConversion = samplerYcbcrConversion;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSamplerYcbcrConversionImageFormatProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSamplerYcbcrConversionImageFormatProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "combinedImageSamplerDescriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CombinedImageSamplerDescriptorCount;

		public unsafe VkSamplerYcbcrConversionImageFormatProperties(VkStructureType sType = default, void* pNext = default, uint combinedImageSamplerDescriptorCount = default)
		{
			SType = sType;
			PNext = pNext;
			CombinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorUpdateTemplateEntry")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorUpdateTemplateEntry
	{
		[NativeName(NativeNameType.Field, "dstBinding")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstBinding;
		[NativeName(NativeNameType.Field, "dstArrayElement")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DstArrayElement;
		[NativeName(NativeNameType.Field, "descriptorCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorCount;
		[NativeName(NativeNameType.Field, "descriptorType")]
		[NativeName(NativeNameType.Type, "VkDescriptorType")]
		public VkDescriptorType DescriptorType;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "stride")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong Stride;

		public unsafe VkDescriptorUpdateTemplateEntry(uint dstBinding = default, uint dstArrayElement = default, uint descriptorCount = default, VkDescriptorType descriptorType = default, ulong offset = default, ulong stride = default)
		{
			DstBinding = dstBinding;
			DstArrayElement = dstArrayElement;
			DescriptorCount = descriptorCount;
			DescriptorType = descriptorType;
			Offset = offset;
			Stride = stride;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDescriptorUpdateTemplateCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDescriptorUpdateTemplateCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDescriptorUpdateTemplateCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "descriptorUpdateEntryCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DescriptorUpdateEntryCount;
		[NativeName(NativeNameType.Field, "pDescriptorUpdateEntries")]
		[NativeName(NativeNameType.Type, "const VkDescriptorUpdateTemplateEntry*")]
		public unsafe VkDescriptorUpdateTemplateEntry* PDescriptorUpdateEntries;
		[NativeName(NativeNameType.Field, "templateType")]
		[NativeName(NativeNameType.Type, "VkDescriptorUpdateTemplateType")]
		public VkDescriptorUpdateTemplateType TemplateType;
		[NativeName(NativeNameType.Field, "descriptorSetLayout")]
		[NativeName(NativeNameType.Type, "VkDescriptorSetLayout")]
		public VkDescriptorSetLayout DescriptorSetLayout;
		[NativeName(NativeNameType.Field, "pipelineBindPoint")]
		[NativeName(NativeNameType.Type, "VkPipelineBindPoint")]
		public VkPipelineBindPoint PipelineBindPoint;
		[NativeName(NativeNameType.Field, "pipelineLayout")]
		[NativeName(NativeNameType.Type, "VkPipelineLayout")]
		public VkPipelineLayout PipelineLayout;
		[NativeName(NativeNameType.Field, "set")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Set;

		public unsafe VkDescriptorUpdateTemplateCreateInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint descriptorUpdateEntryCount = default, VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries = default, VkDescriptorUpdateTemplateType templateType = default, VkDescriptorSetLayout descriptorSetLayout = default, VkPipelineBindPoint pipelineBindPoint = default, VkPipelineLayout pipelineLayout = default, uint set = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			DescriptorUpdateEntryCount = descriptorUpdateEntryCount;
			PDescriptorUpdateEntries = pDescriptorUpdateEntries;
			TemplateType = templateType;
			DescriptorSetLayout = descriptorSetLayout;
			PipelineBindPoint = pipelineBindPoint;
			PipelineLayout = pipelineLayout;
			Set = set;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalMemoryProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalMemoryProperties
	{
		[NativeName(NativeNameType.Field, "externalMemoryFeatures")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryFeatureFlags")]
		public uint ExternalMemoryFeatures;
		[NativeName(NativeNameType.Field, "exportFromImportedHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlags")]
		public uint ExportFromImportedHandleTypes;
		[NativeName(NativeNameType.Field, "compatibleHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlags")]
		public uint CompatibleHandleTypes;

		public unsafe VkExternalMemoryProperties(uint externalMemoryFeatures = default, uint exportFromImportedHandleTypes = default, uint compatibleHandleTypes = default)
		{
			ExternalMemoryFeatures = externalMemoryFeatures;
			ExportFromImportedHandleTypes = exportFromImportedHandleTypes;
			CompatibleHandleTypes = compatibleHandleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExternalImageFormatInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExternalImageFormatInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagBits")]
		public VkExternalMemoryHandleTypeFlagBits HandleType;

		public unsafe VkPhysicalDeviceExternalImageFormatInfo(VkStructureType sType = default, void* pNext = default, VkExternalMemoryHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalImageFormatProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalImageFormatProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "externalMemoryProperties")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryProperties")]
		public VkExternalMemoryProperties ExternalMemoryProperties;

		public unsafe VkExternalImageFormatProperties(VkStructureType sType = default, void* pNext = default, VkExternalMemoryProperties externalMemoryProperties = default)
		{
			SType = sType;
			PNext = pNext;
			ExternalMemoryProperties = externalMemoryProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExternalBufferInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExternalBufferInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkBufferCreateFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "VkBufferUsageFlags")]
		public uint Usage;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagBits")]
		public VkExternalMemoryHandleTypeFlagBits HandleType;

		public unsafe VkPhysicalDeviceExternalBufferInfo(VkStructureType sType = default, void* pNext = default, uint flags = default, uint usage = default, VkExternalMemoryHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Usage = usage;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalBufferProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalBufferProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "externalMemoryProperties")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryProperties")]
		public VkExternalMemoryProperties ExternalMemoryProperties;

		public unsafe VkExternalBufferProperties(VkStructureType sType = default, void* pNext = default, VkExternalMemoryProperties externalMemoryProperties = default)
		{
			SType = sType;
			PNext = pNext;
			ExternalMemoryProperties = externalMemoryProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceIDProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceIDProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte DeviceUUID_0;
		public byte DeviceUUID_1;
		public byte DeviceUUID_2;
		public byte DeviceUUID_3;
		public byte DeviceUUID_4;
		public byte DeviceUUID_5;
		public byte DeviceUUID_6;
		public byte DeviceUUID_7;
		public byte DeviceUUID_8;
		public byte DeviceUUID_9;
		public byte DeviceUUID_10;
		public byte DeviceUUID_11;
		public byte DeviceUUID_12;
		public byte DeviceUUID_13;
		public byte DeviceUUID_14;
		public byte DeviceUUID_15;
		[NativeName(NativeNameType.Field, "driverUUID")]
		[NativeName(NativeNameType.Type, "uint8_t[16]")]
		public byte DriverUUID_0;
		public byte DriverUUID_1;
		public byte DriverUUID_2;
		public byte DriverUUID_3;
		public byte DriverUUID_4;
		public byte DriverUUID_5;
		public byte DriverUUID_6;
		public byte DriverUUID_7;
		public byte DriverUUID_8;
		public byte DriverUUID_9;
		public byte DriverUUID_10;
		public byte DriverUUID_11;
		public byte DriverUUID_12;
		public byte DriverUUID_13;
		public byte DriverUUID_14;
		public byte DriverUUID_15;
		[NativeName(NativeNameType.Field, "deviceLUID")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte DeviceLUID_0;
		public byte DeviceLUID_1;
		public byte DeviceLUID_2;
		public byte DeviceLUID_3;
		public byte DeviceLUID_4;
		public byte DeviceLUID_5;
		public byte DeviceLUID_6;
		public byte DeviceLUID_7;
		[NativeName(NativeNameType.Field, "deviceNodeMask")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeviceNodeMask;
		[NativeName(NativeNameType.Field, "deviceLUIDValid")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DeviceLUIDValid;

		public unsafe VkPhysicalDeviceIDProperties(VkStructureType sType = default, void* pNext = default, byte* deviceUUID = default, byte* driverUUID = default, byte* deviceLUID = default, uint deviceNodeMask = default, uint deviceLUIDValid = default)
		{
			SType = sType;
			PNext = pNext;
			if (deviceUUID != default)
			{
				DeviceUUID_0 = deviceUUID[0];
				DeviceUUID_1 = deviceUUID[1];
				DeviceUUID_2 = deviceUUID[2];
				DeviceUUID_3 = deviceUUID[3];
				DeviceUUID_4 = deviceUUID[4];
				DeviceUUID_5 = deviceUUID[5];
				DeviceUUID_6 = deviceUUID[6];
				DeviceUUID_7 = deviceUUID[7];
				DeviceUUID_8 = deviceUUID[8];
				DeviceUUID_9 = deviceUUID[9];
				DeviceUUID_10 = deviceUUID[10];
				DeviceUUID_11 = deviceUUID[11];
				DeviceUUID_12 = deviceUUID[12];
				DeviceUUID_13 = deviceUUID[13];
				DeviceUUID_14 = deviceUUID[14];
				DeviceUUID_15 = deviceUUID[15];
			}
			if (driverUUID != default)
			{
				DriverUUID_0 = driverUUID[0];
				DriverUUID_1 = driverUUID[1];
				DriverUUID_2 = driverUUID[2];
				DriverUUID_3 = driverUUID[3];
				DriverUUID_4 = driverUUID[4];
				DriverUUID_5 = driverUUID[5];
				DriverUUID_6 = driverUUID[6];
				DriverUUID_7 = driverUUID[7];
				DriverUUID_8 = driverUUID[8];
				DriverUUID_9 = driverUUID[9];
				DriverUUID_10 = driverUUID[10];
				DriverUUID_11 = driverUUID[11];
				DriverUUID_12 = driverUUID[12];
				DriverUUID_13 = driverUUID[13];
				DriverUUID_14 = driverUUID[14];
				DriverUUID_15 = driverUUID[15];
			}
			if (deviceLUID != default)
			{
				DeviceLUID_0 = deviceLUID[0];
				DeviceLUID_1 = deviceLUID[1];
				DeviceLUID_2 = deviceLUID[2];
				DeviceLUID_3 = deviceLUID[3];
				DeviceLUID_4 = deviceLUID[4];
				DeviceLUID_5 = deviceLUID[5];
				DeviceLUID_6 = deviceLUID[6];
				DeviceLUID_7 = deviceLUID[7];
			}
			DeviceNodeMask = deviceNodeMask;
			DeviceLUIDValid = deviceLUIDValid;
		}

		public unsafe VkPhysicalDeviceIDProperties(VkStructureType sType = default, void* pNext = default, Span<byte> deviceUUID = default, Span<byte> driverUUID = default, Span<byte> deviceLUID = default, uint deviceNodeMask = default, uint deviceLUIDValid = default)
		{
			SType = sType;
			PNext = pNext;
			if (deviceUUID != default)
			{
				DeviceUUID_0 = deviceUUID[0];
				DeviceUUID_1 = deviceUUID[1];
				DeviceUUID_2 = deviceUUID[2];
				DeviceUUID_3 = deviceUUID[3];
				DeviceUUID_4 = deviceUUID[4];
				DeviceUUID_5 = deviceUUID[5];
				DeviceUUID_6 = deviceUUID[6];
				DeviceUUID_7 = deviceUUID[7];
				DeviceUUID_8 = deviceUUID[8];
				DeviceUUID_9 = deviceUUID[9];
				DeviceUUID_10 = deviceUUID[10];
				DeviceUUID_11 = deviceUUID[11];
				DeviceUUID_12 = deviceUUID[12];
				DeviceUUID_13 = deviceUUID[13];
				DeviceUUID_14 = deviceUUID[14];
				DeviceUUID_15 = deviceUUID[15];
			}
			if (driverUUID != default)
			{
				DriverUUID_0 = driverUUID[0];
				DriverUUID_1 = driverUUID[1];
				DriverUUID_2 = driverUUID[2];
				DriverUUID_3 = driverUUID[3];
				DriverUUID_4 = driverUUID[4];
				DriverUUID_5 = driverUUID[5];
				DriverUUID_6 = driverUUID[6];
				DriverUUID_7 = driverUUID[7];
				DriverUUID_8 = driverUUID[8];
				DriverUUID_9 = driverUUID[9];
				DriverUUID_10 = driverUUID[10];
				DriverUUID_11 = driverUUID[11];
				DriverUUID_12 = driverUUID[12];
				DriverUUID_13 = driverUUID[13];
				DriverUUID_14 = driverUUID[14];
				DriverUUID_15 = driverUUID[15];
			}
			if (deviceLUID != default)
			{
				DeviceLUID_0 = deviceLUID[0];
				DeviceLUID_1 = deviceLUID[1];
				DeviceLUID_2 = deviceLUID[2];
				DeviceLUID_3 = deviceLUID[3];
				DeviceLUID_4 = deviceLUID[4];
				DeviceLUID_5 = deviceLUID[5];
				DeviceLUID_6 = deviceLUID[6];
				DeviceLUID_7 = deviceLUID[7];
			}
			DeviceNodeMask = deviceNodeMask;
			DeviceLUIDValid = deviceLUIDValid;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalMemoryImageCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalMemoryImageCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlags")]
		public uint HandleTypes;

		public unsafe VkExternalMemoryImageCreateInfo(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalMemoryBufferCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalMemoryBufferCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlags")]
		public uint HandleTypes;

		public unsafe VkExternalMemoryBufferCreateInfo(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExportMemoryAllocateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExportMemoryAllocateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlags")]
		public uint HandleTypes;

		public unsafe VkExportMemoryAllocateInfo(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExternalFenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExternalFenceInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlagBits")]
		public VkExternalFenceHandleTypeFlagBits HandleType;

		public unsafe VkPhysicalDeviceExternalFenceInfo(VkStructureType sType = default, void* pNext = default, VkExternalFenceHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			HandleType = handleType;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalFenceProperties")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalFenceProperties
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "exportFromImportedHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlags")]
		public uint ExportFromImportedHandleTypes;
		[NativeName(NativeNameType.Field, "compatibleHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlags")]
		public uint CompatibleHandleTypes;
		[NativeName(NativeNameType.Field, "externalFenceFeatures")]
		[NativeName(NativeNameType.Type, "VkExternalFenceFeatureFlags")]
		public uint ExternalFenceFeatures;

		public unsafe VkExternalFenceProperties(VkStructureType sType = default, void* pNext = default, uint exportFromImportedHandleTypes = default, uint compatibleHandleTypes = default, uint externalFenceFeatures = default)
		{
			SType = sType;
			PNext = pNext;
			ExportFromImportedHandleTypes = exportFromImportedHandleTypes;
			CompatibleHandleTypes = compatibleHandleTypes;
			ExternalFenceFeatures = externalFenceFeatures;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExportFenceCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExportFenceCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalFenceHandleTypeFlags")]
		public uint HandleTypes;

		public unsafe VkExportFenceCreateInfo(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExportSemaphoreCreateInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExportSemaphoreCreateInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalSemaphoreHandleTypeFlags")]
		public uint HandleTypes;

		public unsafe VkExportSemaphoreCreateInfo(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceExternalSemaphoreInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceExternalSemaphoreInfo
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleType")]
		[NativeName(NativeNameType.Type, "VkExternalSemaphoreHandleTypeFlagBits")]
		public VkExternalSemaphoreHandleTypeFlagBits HandleType;

		public unsafe VkPhysicalDeviceExternalSemaphoreInfo(VkStructureType sType = default, void* pNext = default, VkExternalSemaphoreHandleTypeFlagBits handleType = default)
		{
			SType = sType;
			PNext = pNext;
			HandleType = handleType;
		}


	}
}
