// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{

	[NativeName(NativeNameType.StructOrClass, "VkPipelineExecutableInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineExecutableInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipeline")]
		[NativeName(NativeNameType.Type, "VkPipeline")]
		public VkPipeline Pipeline;
		[NativeName(NativeNameType.Field, "executableIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExecutableIndex;

		public unsafe VkPipelineExecutableInfoKHR(VkStructureType sType = default, void* pNext = default, VkPipeline pipeline = default, uint executableIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Pipeline = pipeline;
			ExecutableIndex = executableIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineExecutableStatisticValueKHR")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkPipelineExecutableStatisticValueKHR
	{
		[NativeName(NativeNameType.Field, "b32")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		[FieldOffset(0)]
		public uint B32;
		[NativeName(NativeNameType.Field, "i64")]
		[NativeName(NativeNameType.Type, "int64_t")]
		[FieldOffset(0)]
		public long I64;
		[NativeName(NativeNameType.Field, "u64")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		[FieldOffset(0)]
		public ulong U64;
		[NativeName(NativeNameType.Field, "f64")]
		[NativeName(NativeNameType.Type, "double")]
		[FieldOffset(0)]
		public double F64;

		public unsafe VkPipelineExecutableStatisticValueKHR(uint b32 = default, long i64 = default, ulong u64 = default, double f64 = default)
		{
			B32 = b32;
			I64 = i64;
			U64 = u64;
			F64 = f64;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineExecutableStatisticKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineExecutableStatisticKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;
		public byte Name_40;
		public byte Name_41;
		public byte Name_42;
		public byte Name_43;
		public byte Name_44;
		public byte Name_45;
		public byte Name_46;
		public byte Name_47;
		public byte Name_48;
		public byte Name_49;
		public byte Name_50;
		public byte Name_51;
		public byte Name_52;
		public byte Name_53;
		public byte Name_54;
		public byte Name_55;
		public byte Name_56;
		public byte Name_57;
		public byte Name_58;
		public byte Name_59;
		public byte Name_60;
		public byte Name_61;
		public byte Name_62;
		public byte Name_63;
		public byte Name_64;
		public byte Name_65;
		public byte Name_66;
		public byte Name_67;
		public byte Name_68;
		public byte Name_69;
		public byte Name_70;
		public byte Name_71;
		public byte Name_72;
		public byte Name_73;
		public byte Name_74;
		public byte Name_75;
		public byte Name_76;
		public byte Name_77;
		public byte Name_78;
		public byte Name_79;
		public byte Name_80;
		public byte Name_81;
		public byte Name_82;
		public byte Name_83;
		public byte Name_84;
		public byte Name_85;
		public byte Name_86;
		public byte Name_87;
		public byte Name_88;
		public byte Name_89;
		public byte Name_90;
		public byte Name_91;
		public byte Name_92;
		public byte Name_93;
		public byte Name_94;
		public byte Name_95;
		public byte Name_96;
		public byte Name_97;
		public byte Name_98;
		public byte Name_99;
		public byte Name_100;
		public byte Name_101;
		public byte Name_102;
		public byte Name_103;
		public byte Name_104;
		public byte Name_105;
		public byte Name_106;
		public byte Name_107;
		public byte Name_108;
		public byte Name_109;
		public byte Name_110;
		public byte Name_111;
		public byte Name_112;
		public byte Name_113;
		public byte Name_114;
		public byte Name_115;
		public byte Name_116;
		public byte Name_117;
		public byte Name_118;
		public byte Name_119;
		public byte Name_120;
		public byte Name_121;
		public byte Name_122;
		public byte Name_123;
		public byte Name_124;
		public byte Name_125;
		public byte Name_126;
		public byte Name_127;
		public byte Name_128;
		public byte Name_129;
		public byte Name_130;
		public byte Name_131;
		public byte Name_132;
		public byte Name_133;
		public byte Name_134;
		public byte Name_135;
		public byte Name_136;
		public byte Name_137;
		public byte Name_138;
		public byte Name_139;
		public byte Name_140;
		public byte Name_141;
		public byte Name_142;
		public byte Name_143;
		public byte Name_144;
		public byte Name_145;
		public byte Name_146;
		public byte Name_147;
		public byte Name_148;
		public byte Name_149;
		public byte Name_150;
		public byte Name_151;
		public byte Name_152;
		public byte Name_153;
		public byte Name_154;
		public byte Name_155;
		public byte Name_156;
		public byte Name_157;
		public byte Name_158;
		public byte Name_159;
		public byte Name_160;
		public byte Name_161;
		public byte Name_162;
		public byte Name_163;
		public byte Name_164;
		public byte Name_165;
		public byte Name_166;
		public byte Name_167;
		public byte Name_168;
		public byte Name_169;
		public byte Name_170;
		public byte Name_171;
		public byte Name_172;
		public byte Name_173;
		public byte Name_174;
		public byte Name_175;
		public byte Name_176;
		public byte Name_177;
		public byte Name_178;
		public byte Name_179;
		public byte Name_180;
		public byte Name_181;
		public byte Name_182;
		public byte Name_183;
		public byte Name_184;
		public byte Name_185;
		public byte Name_186;
		public byte Name_187;
		public byte Name_188;
		public byte Name_189;
		public byte Name_190;
		public byte Name_191;
		public byte Name_192;
		public byte Name_193;
		public byte Name_194;
		public byte Name_195;
		public byte Name_196;
		public byte Name_197;
		public byte Name_198;
		public byte Name_199;
		public byte Name_200;
		public byte Name_201;
		public byte Name_202;
		public byte Name_203;
		public byte Name_204;
		public byte Name_205;
		public byte Name_206;
		public byte Name_207;
		public byte Name_208;
		public byte Name_209;
		public byte Name_210;
		public byte Name_211;
		public byte Name_212;
		public byte Name_213;
		public byte Name_214;
		public byte Name_215;
		public byte Name_216;
		public byte Name_217;
		public byte Name_218;
		public byte Name_219;
		public byte Name_220;
		public byte Name_221;
		public byte Name_222;
		public byte Name_223;
		public byte Name_224;
		public byte Name_225;
		public byte Name_226;
		public byte Name_227;
		public byte Name_228;
		public byte Name_229;
		public byte Name_230;
		public byte Name_231;
		public byte Name_232;
		public byte Name_233;
		public byte Name_234;
		public byte Name_235;
		public byte Name_236;
		public byte Name_237;
		public byte Name_238;
		public byte Name_239;
		public byte Name_240;
		public byte Name_241;
		public byte Name_242;
		public byte Name_243;
		public byte Name_244;
		public byte Name_245;
		public byte Name_246;
		public byte Name_247;
		public byte Name_248;
		public byte Name_249;
		public byte Name_250;
		public byte Name_251;
		public byte Name_252;
		public byte Name_253;
		public byte Name_254;
		public byte Name_255;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "VkPipelineExecutableStatisticFormatKHR")]
		public VkPipelineExecutableStatisticFormatKHR Format;
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "VkPipelineExecutableStatisticValueKHR")]
		public VkPipelineExecutableStatisticValueKHR Value;

		public unsafe VkPipelineExecutableStatisticKHR(VkStructureType sType = default, void* pNext = default, byte* name = default, byte* description = default, VkPipelineExecutableStatisticFormatKHR format = default, VkPipelineExecutableStatisticValueKHR value = default)
		{
			SType = sType;
			PNext = pNext;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			Format = format;
			Value = value;
		}

		public unsafe VkPipelineExecutableStatisticKHR(VkStructureType sType = default, void* pNext = default, Span<byte> name = default, Span<byte> description = default, VkPipelineExecutableStatisticFormatKHR format = default, VkPipelineExecutableStatisticValueKHR value = default)
		{
			SType = sType;
			PNext = pNext;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			Format = format;
			Value = value;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineExecutableInternalRepresentationKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineExecutableInternalRepresentationKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;
		public byte Name_40;
		public byte Name_41;
		public byte Name_42;
		public byte Name_43;
		public byte Name_44;
		public byte Name_45;
		public byte Name_46;
		public byte Name_47;
		public byte Name_48;
		public byte Name_49;
		public byte Name_50;
		public byte Name_51;
		public byte Name_52;
		public byte Name_53;
		public byte Name_54;
		public byte Name_55;
		public byte Name_56;
		public byte Name_57;
		public byte Name_58;
		public byte Name_59;
		public byte Name_60;
		public byte Name_61;
		public byte Name_62;
		public byte Name_63;
		public byte Name_64;
		public byte Name_65;
		public byte Name_66;
		public byte Name_67;
		public byte Name_68;
		public byte Name_69;
		public byte Name_70;
		public byte Name_71;
		public byte Name_72;
		public byte Name_73;
		public byte Name_74;
		public byte Name_75;
		public byte Name_76;
		public byte Name_77;
		public byte Name_78;
		public byte Name_79;
		public byte Name_80;
		public byte Name_81;
		public byte Name_82;
		public byte Name_83;
		public byte Name_84;
		public byte Name_85;
		public byte Name_86;
		public byte Name_87;
		public byte Name_88;
		public byte Name_89;
		public byte Name_90;
		public byte Name_91;
		public byte Name_92;
		public byte Name_93;
		public byte Name_94;
		public byte Name_95;
		public byte Name_96;
		public byte Name_97;
		public byte Name_98;
		public byte Name_99;
		public byte Name_100;
		public byte Name_101;
		public byte Name_102;
		public byte Name_103;
		public byte Name_104;
		public byte Name_105;
		public byte Name_106;
		public byte Name_107;
		public byte Name_108;
		public byte Name_109;
		public byte Name_110;
		public byte Name_111;
		public byte Name_112;
		public byte Name_113;
		public byte Name_114;
		public byte Name_115;
		public byte Name_116;
		public byte Name_117;
		public byte Name_118;
		public byte Name_119;
		public byte Name_120;
		public byte Name_121;
		public byte Name_122;
		public byte Name_123;
		public byte Name_124;
		public byte Name_125;
		public byte Name_126;
		public byte Name_127;
		public byte Name_128;
		public byte Name_129;
		public byte Name_130;
		public byte Name_131;
		public byte Name_132;
		public byte Name_133;
		public byte Name_134;
		public byte Name_135;
		public byte Name_136;
		public byte Name_137;
		public byte Name_138;
		public byte Name_139;
		public byte Name_140;
		public byte Name_141;
		public byte Name_142;
		public byte Name_143;
		public byte Name_144;
		public byte Name_145;
		public byte Name_146;
		public byte Name_147;
		public byte Name_148;
		public byte Name_149;
		public byte Name_150;
		public byte Name_151;
		public byte Name_152;
		public byte Name_153;
		public byte Name_154;
		public byte Name_155;
		public byte Name_156;
		public byte Name_157;
		public byte Name_158;
		public byte Name_159;
		public byte Name_160;
		public byte Name_161;
		public byte Name_162;
		public byte Name_163;
		public byte Name_164;
		public byte Name_165;
		public byte Name_166;
		public byte Name_167;
		public byte Name_168;
		public byte Name_169;
		public byte Name_170;
		public byte Name_171;
		public byte Name_172;
		public byte Name_173;
		public byte Name_174;
		public byte Name_175;
		public byte Name_176;
		public byte Name_177;
		public byte Name_178;
		public byte Name_179;
		public byte Name_180;
		public byte Name_181;
		public byte Name_182;
		public byte Name_183;
		public byte Name_184;
		public byte Name_185;
		public byte Name_186;
		public byte Name_187;
		public byte Name_188;
		public byte Name_189;
		public byte Name_190;
		public byte Name_191;
		public byte Name_192;
		public byte Name_193;
		public byte Name_194;
		public byte Name_195;
		public byte Name_196;
		public byte Name_197;
		public byte Name_198;
		public byte Name_199;
		public byte Name_200;
		public byte Name_201;
		public byte Name_202;
		public byte Name_203;
		public byte Name_204;
		public byte Name_205;
		public byte Name_206;
		public byte Name_207;
		public byte Name_208;
		public byte Name_209;
		public byte Name_210;
		public byte Name_211;
		public byte Name_212;
		public byte Name_213;
		public byte Name_214;
		public byte Name_215;
		public byte Name_216;
		public byte Name_217;
		public byte Name_218;
		public byte Name_219;
		public byte Name_220;
		public byte Name_221;
		public byte Name_222;
		public byte Name_223;
		public byte Name_224;
		public byte Name_225;
		public byte Name_226;
		public byte Name_227;
		public byte Name_228;
		public byte Name_229;
		public byte Name_230;
		public byte Name_231;
		public byte Name_232;
		public byte Name_233;
		public byte Name_234;
		public byte Name_235;
		public byte Name_236;
		public byte Name_237;
		public byte Name_238;
		public byte Name_239;
		public byte Name_240;
		public byte Name_241;
		public byte Name_242;
		public byte Name_243;
		public byte Name_244;
		public byte Name_245;
		public byte Name_246;
		public byte Name_247;
		public byte Name_248;
		public byte Name_249;
		public byte Name_250;
		public byte Name_251;
		public byte Name_252;
		public byte Name_253;
		public byte Name_254;
		public byte Name_255;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;
		[NativeName(NativeNameType.Field, "isText")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint IsText;
		[NativeName(NativeNameType.Field, "dataSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong DataSize;
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PData;

		public unsafe VkPipelineExecutableInternalRepresentationKHR(VkStructureType sType = default, void* pNext = default, byte* name = default, byte* description = default, uint isText = default, ulong dataSize = default, void* pData = default)
		{
			SType = sType;
			PNext = pNext;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			IsText = isText;
			DataSize = dataSize;
			PData = pData;
		}

		public unsafe VkPipelineExecutableInternalRepresentationKHR(VkStructureType sType = default, void* pNext = default, Span<byte> name = default, Span<byte> description = default, uint isText = default, ulong dataSize = default, void* pData = default)
		{
			SType = sType;
			PNext = pNext;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			IsText = isText;
			DataSize = dataSize;
			PData = pData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryMapInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryMapInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkMemoryMapFlags")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkMemoryMapInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkDeviceMemory memory = default, ulong offset = default, ulong size = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Memory = memory;
			Offset = offset;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkMemoryUnmapInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkMemoryUnmapInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkMemoryUnmapFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "memory")]
		[NativeName(NativeNameType.Type, "VkDeviceMemory")]
		public VkDeviceMemory Memory;

		public unsafe VkMemoryUnmapInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, VkDeviceMemory memory = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Memory = memory;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineLibraryCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineLibraryCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "libraryCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LibraryCount;
		[NativeName(NativeNameType.Field, "pLibraries")]
		[NativeName(NativeNameType.Type, "const VkPipeline*")]
		public unsafe VkPipeline* PLibraries;

		public unsafe VkPipelineLibraryCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint libraryCount = default, VkPipeline* pLibraries = default)
		{
			SType = sType;
			PNext = pNext;
			LibraryCount = libraryCount;
			PLibraries = pLibraries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentIdKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentIdKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchainCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SwapchainCount;
		[NativeName(NativeNameType.Field, "pPresentIds")]
		[NativeName(NativeNameType.Type, "const uint64_t*")]
		public unsafe ulong* PPresentIds;

		public unsafe VkPresentIdKHR(VkStructureType sType = default, void* pNext = default, uint swapchainCount = default, ulong* pPresentIds = default)
		{
			SType = sType;
			PNext = pNext;
			SwapchainCount = swapchainCount;
			PPresentIds = pPresentIds;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePresentIdFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePresentIdFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "presentId")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PresentId;

		public unsafe VkPhysicalDevicePresentIdFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint presentId = default)
		{
			SType = sType;
			PNext = pNext;
			PresentId = presentId;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyCheckpointProperties2NV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyCheckpointProperties2NV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "checkpointExecutionStageMask")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags2")]
		public uint CheckpointExecutionStageMask;

		public unsafe VkQueueFamilyCheckpointProperties2NV(VkStructureType sType = default, void* pNext = default, uint checkpointExecutionStageMask = default)
		{
			SType = sType;
			PNext = pNext;
			CheckpointExecutionStageMask = checkpointExecutionStageMask;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCheckpointData2NV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCheckpointData2NV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stage")]
		[NativeName(NativeNameType.Type, "VkPipelineStageFlags2")]
		public uint Stage;
		[NativeName(NativeNameType.Field, "pCheckpointMarker")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PCheckpointMarker;

		public unsafe VkCheckpointData2NV(VkStructureType sType = default, void* pNext = default, uint stage = default, void* pCheckpointMarker = default)
		{
			SType = sType;
			PNext = pNext;
			Stage = stage;
			PCheckpointMarker = pCheckpointMarker;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fragmentShaderBarycentric")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShaderBarycentric;

		public unsafe VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint fragmentShaderBarycentric = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentShaderBarycentric = fragmentShaderBarycentric;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "triStripVertexOrderIndependentOfProvokingVertex")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TriStripVertexOrderIndependentOfProvokingVertex;

		public unsafe VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint triStripVertexOrderIndependentOfProvokingVertex = default)
		{
			SType = sType;
			PNext = pNext;
			TriStripVertexOrderIndependentOfProvokingVertex = triStripVertexOrderIndependentOfProvokingVertex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderSubgroupUniformControlFlow")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderSubgroupUniformControlFlow;

		public unsafe VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint shaderSubgroupUniformControlFlow = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderSubgroupUniformControlFlow = shaderSubgroupUniformControlFlow;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "workgroupMemoryExplicitLayout")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint WorkgroupMemoryExplicitLayout;
		[NativeName(NativeNameType.Field, "workgroupMemoryExplicitLayoutScalarBlockLayout")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint WorkgroupMemoryExplicitLayoutScalarBlockLayout;
		[NativeName(NativeNameType.Field, "workgroupMemoryExplicitLayout8BitAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint WorkgroupMemoryExplicitLayout8BitAccess;
		[NativeName(NativeNameType.Field, "workgroupMemoryExplicitLayout16BitAccess")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint WorkgroupMemoryExplicitLayout16BitAccess;

		public unsafe VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint workgroupMemoryExplicitLayout = default, uint workgroupMemoryExplicitLayoutScalarBlockLayout = default, uint workgroupMemoryExplicitLayout8BitAccess = default, uint workgroupMemoryExplicitLayout16BitAccess = default)
		{
			SType = sType;
			PNext = pNext;
			WorkgroupMemoryExplicitLayout = workgroupMemoryExplicitLayout;
			WorkgroupMemoryExplicitLayoutScalarBlockLayout = workgroupMemoryExplicitLayoutScalarBlockLayout;
			WorkgroupMemoryExplicitLayout8BitAccess = workgroupMemoryExplicitLayout8BitAccess;
			WorkgroupMemoryExplicitLayout16BitAccess = workgroupMemoryExplicitLayout16BitAccess;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rayTracingMaintenance1")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RayTracingMaintenance1;
		[NativeName(NativeNameType.Field, "rayTracingPipelineTraceRaysIndirect2")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RayTracingPipelineTraceRaysIndirect2;

		public unsafe VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(VkStructureType sType = default, void* pNext = default, uint rayTracingMaintenance1 = default, uint rayTracingPipelineTraceRaysIndirect2 = default)
		{
			SType = sType;
			PNext = pNext;
			RayTracingMaintenance1 = rayTracingMaintenance1;
			RayTracingPipelineTraceRaysIndirect2 = rayTracingPipelineTraceRaysIndirect2;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkTraceRaysIndirectCommand2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkTraceRaysIndirectCommand2KHR
	{
		[NativeName(NativeNameType.Field, "raygenShaderRecordAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong RaygenShaderRecordAddress;
		[NativeName(NativeNameType.Field, "raygenShaderRecordSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong RaygenShaderRecordSize;
		[NativeName(NativeNameType.Field, "missShaderBindingTableAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong MissShaderBindingTableAddress;
		[NativeName(NativeNameType.Field, "missShaderBindingTableSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MissShaderBindingTableSize;
		[NativeName(NativeNameType.Field, "missShaderBindingTableStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MissShaderBindingTableStride;
		[NativeName(NativeNameType.Field, "hitShaderBindingTableAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong HitShaderBindingTableAddress;
		[NativeName(NativeNameType.Field, "hitShaderBindingTableSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong HitShaderBindingTableSize;
		[NativeName(NativeNameType.Field, "hitShaderBindingTableStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong HitShaderBindingTableStride;
		[NativeName(NativeNameType.Field, "callableShaderBindingTableAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong CallableShaderBindingTableAddress;
		[NativeName(NativeNameType.Field, "callableShaderBindingTableSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong CallableShaderBindingTableSize;
		[NativeName(NativeNameType.Field, "callableShaderBindingTableStride")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong CallableShaderBindingTableStride;
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Height;
		[NativeName(NativeNameType.Field, "depth")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Depth;

		public unsafe VkTraceRaysIndirectCommand2KHR(ulong raygenShaderRecordAddress = default, ulong raygenShaderRecordSize = default, ulong missShaderBindingTableAddress = default, ulong missShaderBindingTableSize = default, ulong missShaderBindingTableStride = default, ulong hitShaderBindingTableAddress = default, ulong hitShaderBindingTableSize = default, ulong hitShaderBindingTableStride = default, ulong callableShaderBindingTableAddress = default, ulong callableShaderBindingTableSize = default, ulong callableShaderBindingTableStride = default, uint width = default, uint height = default, uint depth = default)
		{
			RaygenShaderRecordAddress = raygenShaderRecordAddress;
			RaygenShaderRecordSize = raygenShaderRecordSize;
			MissShaderBindingTableAddress = missShaderBindingTableAddress;
			MissShaderBindingTableSize = missShaderBindingTableSize;
			MissShaderBindingTableStride = missShaderBindingTableStride;
			HitShaderBindingTableAddress = hitShaderBindingTableAddress;
			HitShaderBindingTableSize = hitShaderBindingTableSize;
			HitShaderBindingTableStride = hitShaderBindingTableStride;
			CallableShaderBindingTableAddress = callableShaderBindingTableAddress;
			CallableShaderBindingTableSize = callableShaderBindingTableSize;
			CallableShaderBindingTableStride = callableShaderBindingTableStride;
			Width = width;
			Height = height;
			Depth = depth;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rayTracingPositionFetch")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint RayTracingPositionFetch;

		public unsafe VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint rayTracingPositionFetch = default)
		{
			SType = sType;
			PNext = pNext;
			RayTracingPositionFetch = rayTracingPositionFetch;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDebugReportCallbackCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDebugReportCallbackCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkDebugReportFlagsEXT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "pfnCallback")]
		[NativeName(NativeNameType.Type, "PFN_vkDebugReportCallbackEXT")]
		public unsafe void* PfnCallback;
		[NativeName(NativeNameType.Field, "pUserData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PUserData;

		public unsafe VkDebugReportCallbackCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint flags = default, PFNVkDebugReportCallbackEXT pfnCallback = default, void* pUserData = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			PfnCallback = (void*)Marshal.GetFunctionPointerForDelegate(pfnCallback);
			PUserData = pUserData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineRasterizationStateRasterizationOrderAMD")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineRasterizationStateRasterizationOrderAMD
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "rasterizationOrder")]
		[NativeName(NativeNameType.Type, "VkRasterizationOrderAMD")]
		public VkRasterizationOrderAMD RasterizationOrder;

		public unsafe VkPipelineRasterizationStateRasterizationOrderAMD(VkStructureType sType = default, void* pNext = default, VkRasterizationOrderAMD rasterizationOrder = default)
		{
			SType = sType;
			PNext = pNext;
			RasterizationOrder = rasterizationOrder;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDebugMarkerObjectNameInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDebugMarkerObjectNameInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "objectType")]
		[NativeName(NativeNameType.Type, "VkDebugReportObjectTypeEXT")]
		public VkDebugReportObjectTypeEXT ObjectType;
		[NativeName(NativeNameType.Field, "object")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Object;
		[NativeName(NativeNameType.Field, "pObjectName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PObjectName;

		public unsafe VkDebugMarkerObjectNameInfoEXT(VkStructureType sType = default, void* pNext = default, VkDebugReportObjectTypeEXT objectType = default, ulong @object = default, byte* pObjectName = default)
		{
			SType = sType;
			PNext = pNext;
			ObjectType = objectType;
			Object = @object;
			PObjectName = pObjectName;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDebugMarkerObjectTagInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDebugMarkerObjectTagInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "objectType")]
		[NativeName(NativeNameType.Type, "VkDebugReportObjectTypeEXT")]
		public VkDebugReportObjectTypeEXT ObjectType;
		[NativeName(NativeNameType.Field, "object")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Object;
		[NativeName(NativeNameType.Field, "tagName")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong TagName;
		[NativeName(NativeNameType.Field, "tagSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong TagSize;
		[NativeName(NativeNameType.Field, "pTag")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PTag;

		public unsafe VkDebugMarkerObjectTagInfoEXT(VkStructureType sType = default, void* pNext = default, VkDebugReportObjectTypeEXT objectType = default, ulong @object = default, ulong tagName = default, ulong tagSize = default, void* pTag = default)
		{
			SType = sType;
			PNext = pNext;
			ObjectType = objectType;
			Object = @object;
			TagName = tagName;
			TagSize = tagSize;
			PTag = pTag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDebugMarkerMarkerInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDebugMarkerMarkerInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pMarkerName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PMarkerName;
		[NativeName(NativeNameType.Field, "color")]
		[NativeName(NativeNameType.Type, "float[4]")]
		public float Color_0;
		public float Color_1;
		public float Color_2;
		public float Color_3;

		public unsafe VkDebugMarkerMarkerInfoEXT(VkStructureType sType = default, void* pNext = default, byte* pMarkerName = default, float* color = default)
		{
			SType = sType;
			PNext = pNext;
			PMarkerName = pMarkerName;
			if (color != default)
			{
				Color_0 = color[0];
				Color_1 = color[1];
				Color_2 = color[2];
				Color_3 = color[3];
			}
		}

		public unsafe VkDebugMarkerMarkerInfoEXT(VkStructureType sType = default, void* pNext = default, byte* pMarkerName = default, Span<float> color = default)
		{
			SType = sType;
			PNext = pNext;
			PMarkerName = pMarkerName;
			if (color != default)
			{
				Color_0 = color[0];
				Color_1 = color[1];
				Color_2 = color[2];
				Color_3 = color[3];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDedicatedAllocationImageCreateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDedicatedAllocationImageCreateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dedicatedAllocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DedicatedAllocation;

		public unsafe VkDedicatedAllocationImageCreateInfoNV(VkStructureType sType = default, void* pNext = default, uint dedicatedAllocation = default)
		{
			SType = sType;
			PNext = pNext;
			DedicatedAllocation = dedicatedAllocation;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDedicatedAllocationBufferCreateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDedicatedAllocationBufferCreateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dedicatedAllocation")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DedicatedAllocation;

		public unsafe VkDedicatedAllocationBufferCreateInfoNV(VkStructureType sType = default, void* pNext = default, uint dedicatedAllocation = default)
		{
			SType = sType;
			PNext = pNext;
			DedicatedAllocation = dedicatedAllocation;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDedicatedAllocationMemoryAllocateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDedicatedAllocationMemoryAllocateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "image")]
		[NativeName(NativeNameType.Type, "VkImage")]
		public VkImage Image;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;

		public unsafe VkDedicatedAllocationMemoryAllocateInfoNV(VkStructureType sType = default, void* pNext = default, VkImage image = default, VkBuffer buffer = default)
		{
			SType = sType;
			PNext = pNext;
			Image = image;
			Buffer = buffer;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceTransformFeedbackFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "transformFeedback")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TransformFeedback;
		[NativeName(NativeNameType.Field, "geometryStreams")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint GeometryStreams;

		public unsafe VkPhysicalDeviceTransformFeedbackFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint transformFeedback = default, uint geometryStreams = default)
		{
			SType = sType;
			PNext = pNext;
			TransformFeedback = transformFeedback;
			GeometryStreams = geometryStreams;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceTransformFeedbackPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackStreams")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTransformFeedbackStreams;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackBuffers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTransformFeedbackBuffers;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackBufferSize")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong MaxTransformFeedbackBufferSize;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackStreamDataSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTransformFeedbackStreamDataSize;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackBufferDataSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTransformFeedbackBufferDataSize;
		[NativeName(NativeNameType.Field, "maxTransformFeedbackBufferDataStride")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxTransformFeedbackBufferDataStride;
		[NativeName(NativeNameType.Field, "transformFeedbackQueries")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TransformFeedbackQueries;
		[NativeName(NativeNameType.Field, "transformFeedbackStreamsLinesTriangles")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TransformFeedbackStreamsLinesTriangles;
		[NativeName(NativeNameType.Field, "transformFeedbackRasterizationStreamSelect")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TransformFeedbackRasterizationStreamSelect;
		[NativeName(NativeNameType.Field, "transformFeedbackDraw")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint TransformFeedbackDraw;

		public unsafe VkPhysicalDeviceTransformFeedbackPropertiesEXT(VkStructureType sType = default, void* pNext = default, uint maxTransformFeedbackStreams = default, uint maxTransformFeedbackBuffers = default, ulong maxTransformFeedbackBufferSize = default, uint maxTransformFeedbackStreamDataSize = default, uint maxTransformFeedbackBufferDataSize = default, uint maxTransformFeedbackBufferDataStride = default, uint transformFeedbackQueries = default, uint transformFeedbackStreamsLinesTriangles = default, uint transformFeedbackRasterizationStreamSelect = default, uint transformFeedbackDraw = default)
		{
			SType = sType;
			PNext = pNext;
			MaxTransformFeedbackStreams = maxTransformFeedbackStreams;
			MaxTransformFeedbackBuffers = maxTransformFeedbackBuffers;
			MaxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize;
			MaxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize;
			MaxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize;
			MaxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride;
			TransformFeedbackQueries = transformFeedbackQueries;
			TransformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles;
			TransformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect;
			TransformFeedbackDraw = transformFeedbackDraw;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineRasterizationStateStreamCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkPipelineRasterizationStateStreamCreateFlagsEXT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "rasterizationStream")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RasterizationStream;

		public unsafe VkPipelineRasterizationStateStreamCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint flags = default, uint rasterizationStream = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			RasterizationStream = rasterizationStream;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCuModuleCreateInfoNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCuModuleCreateInfoNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "dataSize")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong DataSize;
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PData;

		public unsafe VkCuModuleCreateInfoNVX(VkStructureType sType = default, void* pNext = default, ulong dataSize = default, void* pData = default)
		{
			SType = sType;
			PNext = pNext;
			DataSize = dataSize;
			PData = pData;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCuFunctionCreateInfoNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCuFunctionCreateInfoNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "module")]
		[NativeName(NativeNameType.Type, "VkCuModuleNVX")]
		public VkCuModuleNVX Module;
		[NativeName(NativeNameType.Field, "pName")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PName;

		public unsafe VkCuFunctionCreateInfoNVX(VkStructureType sType = default, void* pNext = default, VkCuModuleNVX module = default, byte* pName = default)
		{
			SType = sType;
			PNext = pNext;
			Module = module;
			PName = pName;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCuLaunchInfoNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCuLaunchInfoNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "function")]
		[NativeName(NativeNameType.Type, "VkCuFunctionNVX")]
		public VkCuFunctionNVX Function;
		[NativeName(NativeNameType.Field, "gridDimX")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GridDimX;
		[NativeName(NativeNameType.Field, "gridDimY")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GridDimY;
		[NativeName(NativeNameType.Field, "gridDimZ")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GridDimZ;
		[NativeName(NativeNameType.Field, "blockDimX")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BlockDimX;
		[NativeName(NativeNameType.Field, "blockDimY")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BlockDimY;
		[NativeName(NativeNameType.Field, "blockDimZ")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BlockDimZ;
		[NativeName(NativeNameType.Field, "sharedMemBytes")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SharedMemBytes;
		[NativeName(NativeNameType.Field, "paramCount")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong ParamCount;
		[NativeName(NativeNameType.Field, "pParams")]
		[NativeName(NativeNameType.Type, "const const void**")]
		public unsafe void** PParams;
		[NativeName(NativeNameType.Field, "extraCount")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong ExtraCount;
		[NativeName(NativeNameType.Field, "pExtras")]
		[NativeName(NativeNameType.Type, "const const void**")]
		public unsafe void** PExtras;

		public unsafe VkCuLaunchInfoNVX(VkStructureType sType = default, void* pNext = default, VkCuFunctionNVX function = default, uint gridDimX = default, uint gridDimY = default, uint gridDimZ = default, uint blockDimX = default, uint blockDimY = default, uint blockDimZ = default, uint sharedMemBytes = default, ulong paramCount = default, void** pParams = default, ulong extraCount = default, void** pExtras = default)
		{
			SType = sType;
			PNext = pNext;
			Function = function;
			GridDimX = gridDimX;
			GridDimY = gridDimY;
			GridDimZ = gridDimZ;
			BlockDimX = blockDimX;
			BlockDimY = blockDimY;
			BlockDimZ = blockDimZ;
			SharedMemBytes = sharedMemBytes;
			ParamCount = paramCount;
			PParams = pParams;
			ExtraCount = extraCount;
			PExtras = pExtras;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewHandleInfoNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewHandleInfoNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "imageView")]
		[NativeName(NativeNameType.Type, "VkImageView")]
		public VkImageView ImageView;
		[NativeName(NativeNameType.Field, "descriptorType")]
		[NativeName(NativeNameType.Type, "VkDescriptorType")]
		public VkDescriptorType DescriptorType;
		[NativeName(NativeNameType.Field, "sampler")]
		[NativeName(NativeNameType.Type, "VkSampler")]
		public VkSampler Sampler;

		public unsafe VkImageViewHandleInfoNVX(VkStructureType sType = default, void* pNext = default, VkImageView imageView = default, VkDescriptorType descriptorType = default, VkSampler sampler = default)
		{
			SType = sType;
			PNext = pNext;
			ImageView = imageView;
			DescriptorType = descriptorType;
			Sampler = sampler;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewAddressPropertiesNVX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewAddressPropertiesNVX
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceAddress")]
		[NativeName(NativeNameType.Type, "VkDeviceAddress")]
		public ulong DeviceAddress;
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Size;

		public unsafe VkImageViewAddressPropertiesNVX(VkStructureType sType = default, void* pNext = default, ulong deviceAddress = default, ulong size = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceAddress = deviceAddress;
			Size = size;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkTextureLODGatherFormatPropertiesAMD")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkTextureLODGatherFormatPropertiesAMD
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "supportsTextureGatherLODBiasAMD")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SupportsTextureGatherLODBiasAMD;

		public unsafe VkTextureLODGatherFormatPropertiesAMD(VkStructureType sType = default, void* pNext = default, uint supportsTextureGatherLODBiasAMD = default)
		{
			SType = sType;
			PNext = pNext;
			SupportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkShaderResourceUsageAMD")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkShaderResourceUsageAMD
	{
		[NativeName(NativeNameType.Field, "numUsedVgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumUsedVgprs;
		[NativeName(NativeNameType.Field, "numUsedSgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumUsedSgprs;
		[NativeName(NativeNameType.Field, "ldsSizePerLocalWorkGroup")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LdsSizePerLocalWorkGroup;
		[NativeName(NativeNameType.Field, "ldsUsageSizeInBytes")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong LdsUsageSizeInBytes;
		[NativeName(NativeNameType.Field, "scratchMemUsageInBytes")]
		[NativeName(NativeNameType.Type, "size_t")]
		public ulong ScratchMemUsageInBytes;

		public unsafe VkShaderResourceUsageAMD(uint numUsedVgprs = default, uint numUsedSgprs = default, uint ldsSizePerLocalWorkGroup = default, ulong ldsUsageSizeInBytes = default, ulong scratchMemUsageInBytes = default)
		{
			NumUsedVgprs = numUsedVgprs;
			NumUsedSgprs = numUsedSgprs;
			LdsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup;
			LdsUsageSizeInBytes = ldsUsageSizeInBytes;
			ScratchMemUsageInBytes = scratchMemUsageInBytes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkShaderStatisticsInfoAMD")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkShaderStatisticsInfoAMD
	{
		[NativeName(NativeNameType.Field, "shaderStageMask")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint ShaderStageMask;
		[NativeName(NativeNameType.Field, "resourceUsage")]
		[NativeName(NativeNameType.Type, "VkShaderResourceUsageAMD")]
		public VkShaderResourceUsageAMD ResourceUsage;
		[NativeName(NativeNameType.Field, "numPhysicalVgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumPhysicalVgprs;
		[NativeName(NativeNameType.Field, "numPhysicalSgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumPhysicalSgprs;
		[NativeName(NativeNameType.Field, "numAvailableVgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumAvailableVgprs;
		[NativeName(NativeNameType.Field, "numAvailableSgprs")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NumAvailableSgprs;
		[NativeName(NativeNameType.Field, "computeWorkGroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t[3]")]
		public uint ComputeWorkGroupSize_0;
		public uint ComputeWorkGroupSize_1;
		public uint ComputeWorkGroupSize_2;

		public unsafe VkShaderStatisticsInfoAMD(uint shaderStageMask = default, VkShaderResourceUsageAMD resourceUsage = default, uint numPhysicalVgprs = default, uint numPhysicalSgprs = default, uint numAvailableVgprs = default, uint numAvailableSgprs = default, uint* computeWorkGroupSize = default)
		{
			ShaderStageMask = shaderStageMask;
			ResourceUsage = resourceUsage;
			NumPhysicalVgprs = numPhysicalVgprs;
			NumPhysicalSgprs = numPhysicalSgprs;
			NumAvailableVgprs = numAvailableVgprs;
			NumAvailableSgprs = numAvailableSgprs;
			if (computeWorkGroupSize != default)
			{
				ComputeWorkGroupSize_0 = computeWorkGroupSize[0];
				ComputeWorkGroupSize_1 = computeWorkGroupSize[1];
				ComputeWorkGroupSize_2 = computeWorkGroupSize[2];
			}
		}

		public unsafe VkShaderStatisticsInfoAMD(uint shaderStageMask = default, VkShaderResourceUsageAMD resourceUsage = default, uint numPhysicalVgprs = default, uint numPhysicalSgprs = default, uint numAvailableVgprs = default, uint numAvailableSgprs = default, Span<uint> computeWorkGroupSize = default)
		{
			ShaderStageMask = shaderStageMask;
			ResourceUsage = resourceUsage;
			NumPhysicalVgprs = numPhysicalVgprs;
			NumPhysicalSgprs = numPhysicalSgprs;
			NumAvailableVgprs = numAvailableVgprs;
			NumAvailableSgprs = numAvailableSgprs;
			if (computeWorkGroupSize != default)
			{
				ComputeWorkGroupSize_0 = computeWorkGroupSize[0];
				ComputeWorkGroupSize_1 = computeWorkGroupSize[1];
				ComputeWorkGroupSize_2 = computeWorkGroupSize[2];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceCornerSampledImageFeaturesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "cornerSampledImage")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint CornerSampledImage;

		public unsafe VkPhysicalDeviceCornerSampledImageFeaturesNV(VkStructureType sType = default, void* pNext = default, uint cornerSampledImage = default)
		{
			SType = sType;
			PNext = pNext;
			CornerSampledImage = cornerSampledImage;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalImageFormatPropertiesNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalImageFormatPropertiesNV
	{
		[NativeName(NativeNameType.Field, "imageFormatProperties")]
		[NativeName(NativeNameType.Type, "VkImageFormatProperties")]
		public VkImageFormatProperties ImageFormatProperties;
		[NativeName(NativeNameType.Field, "externalMemoryFeatures")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryFeatureFlagsNV")]
		public uint ExternalMemoryFeatures;
		[NativeName(NativeNameType.Field, "exportFromImportedHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagsNV")]
		public uint ExportFromImportedHandleTypes;
		[NativeName(NativeNameType.Field, "compatibleHandleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagsNV")]
		public uint CompatibleHandleTypes;

		public unsafe VkExternalImageFormatPropertiesNV(VkImageFormatProperties imageFormatProperties = default, uint externalMemoryFeatures = default, uint exportFromImportedHandleTypes = default, uint compatibleHandleTypes = default)
		{
			ImageFormatProperties = imageFormatProperties;
			ExternalMemoryFeatures = externalMemoryFeatures;
			ExportFromImportedHandleTypes = exportFromImportedHandleTypes;
			CompatibleHandleTypes = compatibleHandleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExternalMemoryImageCreateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExternalMemoryImageCreateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagsNV")]
		public uint HandleTypes;

		public unsafe VkExternalMemoryImageCreateInfoNV(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkExportMemoryAllocateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkExportMemoryAllocateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "handleTypes")]
		[NativeName(NativeNameType.Type, "VkExternalMemoryHandleTypeFlagsNV")]
		public uint HandleTypes;

		public unsafe VkExportMemoryAllocateInfoNV(VkStructureType sType = default, void* pNext = default, uint handleTypes = default)
		{
			SType = sType;
			PNext = pNext;
			HandleTypes = handleTypes;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkValidationFlagsEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkValidationFlagsEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "disabledValidationCheckCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DisabledValidationCheckCount;
		[NativeName(NativeNameType.Field, "pDisabledValidationChecks")]
		[NativeName(NativeNameType.Type, "const VkValidationCheckEXT*")]
		public unsafe VkValidationCheckEXT* PDisabledValidationChecks;

		public unsafe VkValidationFlagsEXT(VkStructureType sType = default, void* pNext = default, uint disabledValidationCheckCount = default, VkValidationCheckEXT* pDisabledValidationChecks = default)
		{
			SType = sType;
			PNext = pNext;
			DisabledValidationCheckCount = disabledValidationCheckCount;
			PDisabledValidationChecks = pDisabledValidationChecks;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkImageViewASTCDecodeModeEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkImageViewASTCDecodeModeEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "decodeMode")]
		[NativeName(NativeNameType.Type, "VkFormat")]
		public VkFormat DecodeMode;

		public unsafe VkImageViewASTCDecodeModeEXT(VkStructureType sType = default, void* pNext = default, VkFormat decodeMode = default)
		{
			SType = sType;
			PNext = pNext;
			DecodeMode = decodeMode;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceASTCDecodeFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "decodeModeSharedExponent")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint DecodeModeSharedExponent;

		public unsafe VkPhysicalDeviceASTCDecodeFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint decodeModeSharedExponent = default)
		{
			SType = sType;
			PNext = pNext;
			DecodeModeSharedExponent = decodeModeSharedExponent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelineRobustnessFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelineRobustnessFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineRobustness")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineRobustness;

		public unsafe VkPhysicalDevicePipelineRobustnessFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint pipelineRobustness = default)
		{
			SType = sType;
			PNext = pNext;
			PipelineRobustness = pipelineRobustness;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelineRobustnessPropertiesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelineRobustnessPropertiesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "defaultRobustnessStorageBuffers")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT DefaultRobustnessStorageBuffers;
		[NativeName(NativeNameType.Field, "defaultRobustnessUniformBuffers")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT DefaultRobustnessUniformBuffers;
		[NativeName(NativeNameType.Field, "defaultRobustnessVertexInputs")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT DefaultRobustnessVertexInputs;
		[NativeName(NativeNameType.Field, "defaultRobustnessImages")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessImageBehaviorEXT")]
		public VkPipelineRobustnessImageBehaviorEXT DefaultRobustnessImages;

		public unsafe VkPhysicalDevicePipelineRobustnessPropertiesEXT(VkStructureType sType = default, void* pNext = default, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers = default, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers = default, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs = default, VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages = default)
		{
			SType = sType;
			PNext = pNext;
			DefaultRobustnessStorageBuffers = defaultRobustnessStorageBuffers;
			DefaultRobustnessUniformBuffers = defaultRobustnessUniformBuffers;
			DefaultRobustnessVertexInputs = defaultRobustnessVertexInputs;
			DefaultRobustnessImages = defaultRobustnessImages;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineRobustnessCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineRobustnessCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "storageBuffers")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT StorageBuffers;
		[NativeName(NativeNameType.Field, "uniformBuffers")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT UniformBuffers;
		[NativeName(NativeNameType.Field, "vertexInputs")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessBufferBehaviorEXT")]
		public VkPipelineRobustnessBufferBehaviorEXT VertexInputs;
		[NativeName(NativeNameType.Field, "images")]
		[NativeName(NativeNameType.Type, "VkPipelineRobustnessImageBehaviorEXT")]
		public VkPipelineRobustnessImageBehaviorEXT Images;

		public unsafe VkPipelineRobustnessCreateInfoEXT(VkStructureType sType = default, void* pNext = default, VkPipelineRobustnessBufferBehaviorEXT storageBuffers = default, VkPipelineRobustnessBufferBehaviorEXT uniformBuffers = default, VkPipelineRobustnessBufferBehaviorEXT vertexInputs = default, VkPipelineRobustnessImageBehaviorEXT images = default)
		{
			SType = sType;
			PNext = pNext;
			StorageBuffers = storageBuffers;
			UniformBuffers = uniformBuffers;
			VertexInputs = vertexInputs;
			Images = images;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkConditionalRenderingBeginInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkConditionalRenderingBeginInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "buffer")]
		[NativeName(NativeNameType.Type, "VkBuffer")]
		public VkBuffer Buffer;
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "VkDeviceSize")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkConditionalRenderingFlagsEXT")]
		public uint Flags;

		public unsafe VkConditionalRenderingBeginInfoEXT(VkStructureType sType = default, void* pNext = default, VkBuffer buffer = default, ulong offset = default, uint flags = default)
		{
			SType = sType;
			PNext = pNext;
			Buffer = buffer;
			Offset = offset;
			Flags = flags;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceConditionalRenderingFeaturesEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "conditionalRendering")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ConditionalRendering;
		[NativeName(NativeNameType.Field, "inheritedConditionalRendering")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint InheritedConditionalRendering;

		public unsafe VkPhysicalDeviceConditionalRenderingFeaturesEXT(VkStructureType sType = default, void* pNext = default, uint conditionalRendering = default, uint inheritedConditionalRendering = default)
		{
			SType = sType;
			PNext = pNext;
			ConditionalRendering = conditionalRendering;
			InheritedConditionalRendering = inheritedConditionalRendering;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkCommandBufferInheritanceConditionalRenderingInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "conditionalRenderingEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ConditionalRenderingEnable;

		public unsafe VkCommandBufferInheritanceConditionalRenderingInfoEXT(VkStructureType sType = default, void* pNext = default, uint conditionalRenderingEnable = default)
		{
			SType = sType;
			PNext = pNext;
			ConditionalRenderingEnable = conditionalRenderingEnable;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkViewportWScalingNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkViewportWScalingNV
	{
		[NativeName(NativeNameType.Field, "xcoeff")]
		[NativeName(NativeNameType.Type, "float")]
		public float Xcoeff;
		[NativeName(NativeNameType.Field, "ycoeff")]
		[NativeName(NativeNameType.Type, "float")]
		public float Ycoeff;

		public unsafe VkViewportWScalingNV(float xcoeff = default, float ycoeff = default)
		{
			Xcoeff = xcoeff;
			Ycoeff = ycoeff;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineViewportWScalingStateCreateInfoNV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineViewportWScalingStateCreateInfoNV
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "viewportWScalingEnable")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ViewportWScalingEnable;
		[NativeName(NativeNameType.Field, "viewportCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ViewportCount;
		[NativeName(NativeNameType.Field, "pViewportWScalings")]
		[NativeName(NativeNameType.Type, "const VkViewportWScalingNV*")]
		public unsafe VkViewportWScalingNV* PViewportWScalings;

		public unsafe VkPipelineViewportWScalingStateCreateInfoNV(VkStructureType sType = default, void* pNext = default, uint viewportWScalingEnable = default, uint viewportCount = default, VkViewportWScalingNV* pViewportWScalings = default)
		{
			SType = sType;
			PNext = pNext;
			ViewportWScalingEnable = viewportWScalingEnable;
			ViewportCount = viewportCount;
			PViewportWScalings = pViewportWScalings;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceCapabilities2EXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceCapabilities2EXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "minImageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MinImageCount;
		[NativeName(NativeNameType.Field, "maxImageCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageCount;
		[NativeName(NativeNameType.Field, "currentExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D CurrentExtent;
		[NativeName(NativeNameType.Field, "minImageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinImageExtent;
		[NativeName(NativeNameType.Field, "maxImageExtent")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxImageExtent;
		[NativeName(NativeNameType.Field, "maxImageArrayLayers")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxImageArrayLayers;
		[NativeName(NativeNameType.Field, "supportedTransforms")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagsKHR")]
		public uint SupportedTransforms;
		[NativeName(NativeNameType.Field, "currentTransform")]
		[NativeName(NativeNameType.Type, "VkSurfaceTransformFlagBitsKHR")]
		public VkSurfaceTransformFlagBitsKHR CurrentTransform;
		[NativeName(NativeNameType.Field, "supportedCompositeAlpha")]
		[NativeName(NativeNameType.Type, "VkCompositeAlphaFlagsKHR")]
		public uint SupportedCompositeAlpha;
		[NativeName(NativeNameType.Field, "supportedUsageFlags")]
		[NativeName(NativeNameType.Type, "VkImageUsageFlags")]
		public uint SupportedUsageFlags;
		[NativeName(NativeNameType.Field, "supportedSurfaceCounters")]
		[NativeName(NativeNameType.Type, "VkSurfaceCounterFlagsEXT")]
		public uint SupportedSurfaceCounters;

		public unsafe VkSurfaceCapabilities2EXT(VkStructureType sType = default, void* pNext = default, uint minImageCount = default, uint maxImageCount = default, VkExtent2D currentExtent = default, VkExtent2D minImageExtent = default, VkExtent2D maxImageExtent = default, uint maxImageArrayLayers = default, uint supportedTransforms = default, VkSurfaceTransformFlagBitsKHR currentTransform = default, uint supportedCompositeAlpha = default, uint supportedUsageFlags = default, uint supportedSurfaceCounters = default)
		{
			SType = sType;
			PNext = pNext;
			MinImageCount = minImageCount;
			MaxImageCount = maxImageCount;
			CurrentExtent = currentExtent;
			MinImageExtent = minImageExtent;
			MaxImageExtent = maxImageExtent;
			MaxImageArrayLayers = maxImageArrayLayers;
			SupportedTransforms = supportedTransforms;
			CurrentTransform = currentTransform;
			SupportedCompositeAlpha = supportedCompositeAlpha;
			SupportedUsageFlags = supportedUsageFlags;
			SupportedSurfaceCounters = supportedSurfaceCounters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPowerInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPowerInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "powerState")]
		[NativeName(NativeNameType.Type, "VkDisplayPowerStateEXT")]
		public VkDisplayPowerStateEXT PowerState;

		public unsafe VkDisplayPowerInfoEXT(VkStructureType sType = default, void* pNext = default, VkDisplayPowerStateEXT powerState = default)
		{
			SType = sType;
			PNext = pNext;
			PowerState = powerState;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceEventInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceEventInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "deviceEvent")]
		[NativeName(NativeNameType.Type, "VkDeviceEventTypeEXT")]
		public VkDeviceEventTypeEXT DeviceEvent;

		public unsafe VkDeviceEventInfoEXT(VkStructureType sType = default, void* pNext = default, VkDeviceEventTypeEXT deviceEvent = default)
		{
			SType = sType;
			PNext = pNext;
			DeviceEvent = deviceEvent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayEventInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayEventInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "displayEvent")]
		[NativeName(NativeNameType.Type, "VkDisplayEventTypeEXT")]
		public VkDisplayEventTypeEXT DisplayEvent;

		public unsafe VkDisplayEventInfoEXT(VkStructureType sType = default, void* pNext = default, VkDisplayEventTypeEXT displayEvent = default)
		{
			SType = sType;
			PNext = pNext;
			DisplayEvent = displayEvent;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSwapchainCounterCreateInfoEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSwapchainCounterCreateInfoEXT
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "surfaceCounters")]
		[NativeName(NativeNameType.Type, "VkSurfaceCounterFlagsEXT")]
		public uint SurfaceCounters;

		public unsafe VkSwapchainCounterCreateInfoEXT(VkStructureType sType = default, void* pNext = default, uint surfaceCounters = default)
		{
			SType = sType;
			PNext = pNext;
			SurfaceCounters = surfaceCounters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkRefreshCycleDurationGOOGLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkRefreshCycleDurationGOOGLE
	{
		[NativeName(NativeNameType.Field, "refreshDuration")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong RefreshDuration;

		public unsafe VkRefreshCycleDurationGOOGLE(ulong refreshDuration = default)
		{
			RefreshDuration = refreshDuration;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPastPresentationTimingGOOGLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPastPresentationTimingGOOGLE
	{
		[NativeName(NativeNameType.Field, "presentID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PresentID;
		[NativeName(NativeNameType.Field, "desiredPresentTime")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong DesiredPresentTime;
		[NativeName(NativeNameType.Field, "actualPresentTime")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong ActualPresentTime;
		[NativeName(NativeNameType.Field, "earliestPresentTime")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong EarliestPresentTime;
		[NativeName(NativeNameType.Field, "presentMargin")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong PresentMargin;

		public unsafe VkPastPresentationTimingGOOGLE(uint presentID = default, ulong desiredPresentTime = default, ulong actualPresentTime = default, ulong earliestPresentTime = default, ulong presentMargin = default)
		{
			PresentID = presentID;
			DesiredPresentTime = desiredPresentTime;
			ActualPresentTime = actualPresentTime;
			EarliestPresentTime = earliestPresentTime;
			PresentMargin = presentMargin;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentTimeGOOGLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentTimeGOOGLE
	{
		[NativeName(NativeNameType.Field, "presentID")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PresentID;
		[NativeName(NativeNameType.Field, "desiredPresentTime")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong DesiredPresentTime;

		public unsafe VkPresentTimeGOOGLE(uint presentID = default, ulong desiredPresentTime = default)
		{
			PresentID = presentID;
			DesiredPresentTime = desiredPresentTime;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPresentTimesInfoGOOGLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPresentTimesInfoGOOGLE
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "swapchainCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SwapchainCount;
		[NativeName(NativeNameType.Field, "pTimes")]
		[NativeName(NativeNameType.Type, "const VkPresentTimeGOOGLE*")]
		public unsafe VkPresentTimeGOOGLE* PTimes;

		public unsafe VkPresentTimesInfoGOOGLE(VkStructureType sType = default, void* pNext = default, uint swapchainCount = default, VkPresentTimeGOOGLE* pTimes = default)
		{
			SType = sType;
			PNext = pNext;
			SwapchainCount = swapchainCount;
			PTimes = pTimes;
		}


	}
}
