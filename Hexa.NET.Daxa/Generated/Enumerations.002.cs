// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{

	[NativeName(NativeNameType.Enum, "VkIndirectCommandsTokenTypeNV")]
	public enum VkIndirectCommandsTokenTypeNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV")]
		[NativeName(NativeNameType.Value, "0")]
		ShaderGroupNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV")]
		[NativeName(NativeNameType.Value, "1")]
		StateFlagsNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV")]
		[NativeName(NativeNameType.Value, "2")]
		IndexBufferNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV")]
		[NativeName(NativeNameType.Value, "3")]
		VertexBufferNv = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		PushConstantNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV")]
		[NativeName(NativeNameType.Value, "5")]
		DrawIndexedNv = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV")]
		[NativeName(NativeNameType.Value, "6")]
		DrawNv = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV")]
		[NativeName(NativeNameType.Value, "7")]
		DrawTasksNv = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV")]
		[NativeName(NativeNameType.Value, "1000328000")]
		DrawMeshTasksNv = unchecked(1000328000),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkIndirectStateFlagBitsNV")]
	public enum VkIndirectStateFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		FrontfaceBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkIndirectCommandsLayoutUsageFlagBitsNV")]
	public enum VkIndirectCommandsLayoutUsageFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		ExplicitPreprocessBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV")]
		[NativeName(NativeNameType.Value, "2")]
		IndexedSequencesBitNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		UnorderedSequencesBitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceMemoryReportEventTypeEXT")]
	public enum VkDeviceMemoryReportEventTypeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		AllocateExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		FreeExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		ImportExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT")]
		[NativeName(NativeNameType.Value, "3")]
		UnimportExt = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		AllocationFailedExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceDiagnosticsConfigFlagBitsNV")]
	public enum VkDeviceDiagnosticsConfigFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		EnableShaderDebugInfoBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV")]
		[NativeName(NativeNameType.Value, "2")]
		EnableResourceTrackingBitNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		EnableAutomaticCheckpointsBitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV")]
		[NativeName(NativeNameType.Value, "8")]
		EnableShaderErrorReportingBitNv = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkGraphicsPipelineLibraryFlagBitsEXT")]
	public enum VkGraphicsPipelineLibraryFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		VertexInputInterfaceBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		PreRasterizationShadersBitExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		FragmentShaderBitExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8")]
		FragmentOutputInterfaceBitExt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkFragmentShadingRateTypeNV")]
	public enum VkFragmentShadingRateTypeNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV")]
		[NativeName(NativeNameType.Value, "0")]
		SizeNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV")]
		[NativeName(NativeNameType.Value, "1")]
		EnumsNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkFragmentShadingRateNV")]
	public enum VkFragmentShadingRateNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV")]
		[NativeName(NativeNameType.Value, "0")]
		Rate1InvocationPerPixelNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "1")]
		Rate1InvocationPer1X2PixelsNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "4")]
		Rate1InvocationPer2X1PixelsNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "5")]
		Rate1InvocationPer2X2PixelsNv = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "6")]
		Rate1InvocationPer2X4PixelsNv = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "9")]
		Rate1InvocationPer4X2PixelsNv = unchecked(9),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV")]
		[NativeName(NativeNameType.Value, "10")]
		Rate1InvocationPer4X4PixelsNv = unchecked(10),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV")]
		[NativeName(NativeNameType.Value, "11")]
		Rate2InvocationsPerPixelNv = unchecked(11),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV")]
		[NativeName(NativeNameType.Value, "12")]
		Rate4InvocationsPerPixelNv = unchecked(12),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV")]
		[NativeName(NativeNameType.Value, "13")]
		Rate8InvocationsPerPixelNv = unchecked(13),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV")]
		[NativeName(NativeNameType.Value, "14")]
		Rate16InvocationsPerPixelNv = unchecked(14),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV")]
		[NativeName(NativeNameType.Value, "15")]
		NoInvocationsNv = unchecked(15),
		[NativeName(NativeNameType.EnumItem, "VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkAccelerationStructureMotionInstanceTypeNV")]
	public enum VkAccelerationStructureMotionInstanceTypeNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV")]
		[NativeName(NativeNameType.Value, "0")]
		StaticNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV")]
		[NativeName(NativeNameType.Value, "1")]
		MatrixMotionNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV")]
		[NativeName(NativeNameType.Value, "2")]
		SrtMotionNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkImageCompressionFlagBitsEXT")]
	public enum VkImageCompressionFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_DEFAULT_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		DefaultExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		FixedRateDefaultExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		FixedRateExplicitExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_DISABLED_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		DisabledExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkImageCompressionFixedRateFlagBitsEXT")]
	public enum VkImageCompressionFixedRateFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		NoneExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		Rate1BpcBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		Rate2BpcBitExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		Rate3BpcBitExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8")]
		Rate4BpcBitExt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "16")]
		Rate5BpcBitExt = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "32")]
		Rate6BpcBitExt = unchecked(32),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "64")]
		Rate7BpcBitExt = unchecked(64),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "128")]
		Rate8BpcBitExt = unchecked(128),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "256")]
		Rate9BpcBitExt = unchecked(256),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "512")]
		Rate10BpcBitExt = unchecked(512),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1024")]
		Rate11BpcBitExt = unchecked(1024),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2048")]
		Rate12BpcBitExt = unchecked(2048),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4096")]
		Rate13BpcBitExt = unchecked(4096),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8192")]
		Rate14BpcBitExt = unchecked(8192),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "16384")]
		Rate15BpcBitExt = unchecked(16384),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "32768")]
		Rate16BpcBitExt = unchecked(32768),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "65536")]
		Rate17BpcBitExt = unchecked(65536),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "131072")]
		Rate18BpcBitExt = unchecked(131072),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "262144")]
		Rate19BpcBitExt = unchecked(262144),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "524288")]
		Rate20BpcBitExt = unchecked(524288),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1048576")]
		Rate21BpcBitExt = unchecked(1048576),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2097152")]
		Rate22BpcBitExt = unchecked(2097152),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4194304")]
		Rate23BpcBitExt = unchecked(4194304),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8388608")]
		Rate24BpcBitExt = unchecked(8388608),
		[NativeName(NativeNameType.EnumItem, "VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceFaultAddressTypeEXT")]
	public enum VkDeviceFaultAddressTypeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		NoneExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		ReadInvalidExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		WriteInvalidExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT")]
		[NativeName(NativeNameType.Value, "3")]
		ExecuteInvalidExt = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		InstructionPointerUnknownExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT")]
		[NativeName(NativeNameType.Value, "5")]
		InstructionPointerInvalidExt = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT")]
		[NativeName(NativeNameType.Value, "6")]
		InstructionPointerFaultExt = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceFaultVendorBinaryHeaderVersionEXT")]
	public enum VkDeviceFaultVendorBinaryHeaderVersionEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		OneExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceAddressBindingTypeEXT")]
	public enum VkDeviceAddressBindingTypeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		BindExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		UnbindExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDeviceAddressBindingFlagBitsEXT")]
	public enum VkDeviceAddressBindingFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		InternalObjectBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkMicromapTypeEXT")]
	public enum VkMicromapTypeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		OpacityMicromapExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_MICROMAP_TYPE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkBuildMicromapModeEXT")]
	public enum VkBuildMicromapModeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_MODE_BUILD_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		Ext = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkCopyMicromapModeEXT")]
	public enum VkCopyMicromapModeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_COPY_MICROMAP_MODE_CLONE_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		CloneExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		SerializeExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		DeserializeExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_COPY_MICROMAP_MODE_COMPACT_EXT")]
		[NativeName(NativeNameType.Value, "3")]
		CompactExt = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpacityMicromapFormatEXT")]
	public enum VkOpacityMicromapFormatEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		Format2StateExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		Format4StateExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpacityMicromapSpecialIndexEXT")]
	public enum VkOpacityMicromapSpecialIndexEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT")]
		[NativeName(NativeNameType.Value, "-1")]
		FullyTransparentExt = unchecked(-1),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT")]
		[NativeName(NativeNameType.Value, "-2")]
		FullyOpaqueExt = unchecked(-2),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT")]
		[NativeName(NativeNameType.Value, "-3")]
		FullyUnknownTransparentExt = unchecked(-3),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT")]
		[NativeName(NativeNameType.Value, "-4")]
		FullyUnknownOpaqueExt = unchecked(-4),
		[NativeName(NativeNameType.EnumItem, "VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkAccelerationStructureCompatibilityKHR")]
	public enum VkAccelerationStructureCompatibilityKHR : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR")]
		[NativeName(NativeNameType.Value, "0")]
		CompatibleKhr = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR")]
		[NativeName(NativeNameType.Value, "1")]
		IncompatibleKhr = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumKhr = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkAccelerationStructureBuildTypeKHR")]
	public enum VkAccelerationStructureBuildTypeKHR : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR")]
		[NativeName(NativeNameType.Value, "0")]
		HostKhr = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR")]
		[NativeName(NativeNameType.Value, "1")]
		DeviceKhr = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR")]
		[NativeName(NativeNameType.Value, "2")]
		HostOrDeviceKhr = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumKhr = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkBuildMicromapFlagBitsEXT")]
	public enum VkBuildMicromapFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		PreferFastTraceBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		PreferFastBuildBitExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		AllowCompactionBitExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkMicromapCreateFlagBitsEXT")]
	public enum VkMicromapCreateFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		DeviceAddressCaptureReplayBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkSubpassMergeStatusEXT")]
	public enum VkSubpassMergeStatusEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_MERGED_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		MergedExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		DisallowedExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		NotMergedSideEffectsExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT")]
		[NativeName(NativeNameType.Value, "3")]
		NotMergedSamplesMismatchExt = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		NotMergedViewsMismatchExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT")]
		[NativeName(NativeNameType.Value, "5")]
		NotMergedAliasingExt = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT")]
		[NativeName(NativeNameType.Value, "6")]
		NotMergedDependenciesExt = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT")]
		[NativeName(NativeNameType.Value, "7")]
		NotMergedIncompatibleInputAttachmentExt = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT")]
		[NativeName(NativeNameType.Value, "8")]
		NotMergedTooManyAttachmentsExt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT")]
		[NativeName(NativeNameType.Value, "9")]
		NotMergedInsufficientStorageExt = unchecked(9),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT")]
		[NativeName(NativeNameType.Value, "10")]
		NotMergedDepthStencilCountExt = unchecked(10),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT")]
		[NativeName(NativeNameType.Value, "11")]
		NotMergedResolveAttachmentReuseExt = unchecked(11),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT")]
		[NativeName(NativeNameType.Value, "12")]
		NotMergedSingleSubpassExt = unchecked(12),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT")]
		[NativeName(NativeNameType.Value, "13")]
		NotMergedUnspecifiedExt = unchecked(13),
		[NativeName(NativeNameType.EnumItem, "VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkDirectDriverLoadingModeLUNARG")]
	public enum VkDirectDriverLoadingModeLUNARG : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG")]
		[NativeName(NativeNameType.Value, "0")]
		ExclusiveLunarg = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG")]
		[NativeName(NativeNameType.Value, "1")]
		InclusiveLunarg = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumLunarg = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowPerformanceLevelNV")]
	public enum VkOpticalFlowPerformanceLevelNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV")]
		[NativeName(NativeNameType.Value, "0")]
		UnknownNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV")]
		[NativeName(NativeNameType.Value, "1")]
		SlowNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV")]
		[NativeName(NativeNameType.Value, "2")]
		MediumNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV")]
		[NativeName(NativeNameType.Value, "3")]
		FastNv = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowSessionBindingPointNV")]
	public enum VkOpticalFlowSessionBindingPointNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV")]
		[NativeName(NativeNameType.Value, "0")]
		UnknownNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		InputNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV")]
		[NativeName(NativeNameType.Value, "2")]
		ReferenceNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV")]
		[NativeName(NativeNameType.Value, "3")]
		HintNv = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV")]
		[NativeName(NativeNameType.Value, "4")]
		VectorNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV")]
		[NativeName(NativeNameType.Value, "5")]
		BackwardFlowVectorNv = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV")]
		[NativeName(NativeNameType.Value, "6")]
		CostNv = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV")]
		[NativeName(NativeNameType.Value, "7")]
		BackwardCostNv = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV")]
		[NativeName(NativeNameType.Value, "8")]
		GlobalFlowNv = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowGridSizeFlagBitsNV")]
	public enum VkOpticalFlowGridSizeFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV")]
		[NativeName(NativeNameType.Value, "0")]
		UnknownNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		Size1X1BitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV")]
		[NativeName(NativeNameType.Value, "2")]
		Size2X2BitNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		Size4X4BitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV")]
		[NativeName(NativeNameType.Value, "8")]
		Size8X8BitNv = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowUsageFlagBitsNV")]
	public enum VkOpticalFlowUsageFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV")]
		[NativeName(NativeNameType.Value, "0")]
		UnknownNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		InputBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV")]
		[NativeName(NativeNameType.Value, "2")]
		OutputBitNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		HintBitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_COST_BIT_NV")]
		[NativeName(NativeNameType.Value, "8")]
		CostBitNv = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV")]
		[NativeName(NativeNameType.Value, "16")]
		GlobalFlowBitNv = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowSessionCreateFlagBitsNV")]
	public enum VkOpticalFlowSessionCreateFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		EnableHintBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV")]
		[NativeName(NativeNameType.Value, "2")]
		EnableCostBitNv = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		EnableGlobalFlowBitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV")]
		[NativeName(NativeNameType.Value, "8")]
		AllowRegionsBitNv = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV")]
		[NativeName(NativeNameType.Value, "16")]
		BothDirectionsBitNv = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkOpticalFlowExecuteFlagBitsNV")]
	public enum VkOpticalFlowExecuteFlagBitsNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV")]
		[NativeName(NativeNameType.Value, "1")]
		DisableTemporalHintsBitNv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkShaderCodeTypeEXT")]
	public enum VkShaderCodeTypeEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CODE_TYPE_BINARY_EXT")]
		[NativeName(NativeNameType.Value, "0")]
		BinaryExt = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CODE_TYPE_SPIRV_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		SpirvExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CODE_TYPE_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkShaderCreateFlagBitsEXT")]
	public enum VkShaderCreateFlagBitsEXT : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_LINK_STAGE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "1")]
		LinkStageBitExt = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "2")]
		AllowVaryingSubgroupSizeBitExt = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT")]
		[NativeName(NativeNameType.Value, "4")]
		RequireFullSubgroupsBitExt = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8")]
		NoTaskShaderBitExt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT")]
		[NativeName(NativeNameType.Value, "16")]
		DispatchBaseBitExt = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT")]
		[NativeName(NativeNameType.Value, "32")]
		FragmentShadingRateAttachmentBitExt = unchecked(32),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT")]
		[NativeName(NativeNameType.Value, "64")]
		FragmentDensityMapAttachmentBitExt = unchecked(64),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumExt = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkRayTracingInvocationReorderModeNV")]
	public enum VkRayTracingInvocationReorderModeNV : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV")]
		[NativeName(NativeNameType.Value, "0")]
		NoneNv = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV")]
		[NativeName(NativeNameType.Value, "1")]
		Nv = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumNv = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkBuildAccelerationStructureModeKHR")]
	public enum VkBuildAccelerationStructureModeKHR : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR")]
		[NativeName(NativeNameType.Value, "0")]
		Khr = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR")]
		[NativeName(NativeNameType.Value, "1")]
		UpdateKhr = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumKhr = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkAccelerationStructureCreateFlagBitsKHR")]
	public enum VkAccelerationStructureCreateFlagBitsKHR : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR")]
		[NativeName(NativeNameType.Value, "1")]
		DeviceAddressCaptureReplayBitKhr = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT")]
		[NativeName(NativeNameType.Value, "8")]
		DescriptorBufferCaptureReplayBitExt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV")]
		[NativeName(NativeNameType.Value, "4")]
		MotionBitNv = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumKhr = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "VkShaderGroupShaderKHR")]
	public enum VkShaderGroupShaderKHR : int
	{
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_GROUP_SHADER_GENERAL_KHR")]
		[NativeName(NativeNameType.Value, "0")]
		GeneralKhr = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR")]
		[NativeName(NativeNameType.Value, "1")]
		ClosestHitKhr = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR")]
		[NativeName(NativeNameType.Value, "2")]
		AnyHitKhr = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR")]
		[NativeName(NativeNameType.Value, "3")]
		IntersectionKhr = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnumKhr = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "daxa_Result")]
	public enum DaxaResult : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_SUCCESS")]
		[NativeName(NativeNameType.Value, "0")]
		Success = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NOT_READY")]
		[NativeName(NativeNameType.Value, "1")]
		NotReady = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_TIMEOUT")]
		[NativeName(NativeNameType.Value, "2")]
		Timeout = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EVENT_SET")]
		[NativeName(NativeNameType.Value, "3")]
		EventSet = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EVENT_RESET")]
		[NativeName(NativeNameType.Value, "4")]
		EventReset = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INCOMPLETE")]
		[NativeName(NativeNameType.Value, "5")]
		Incomplete = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_OUT_OF_HOST_MEMORY")]
		[NativeName(NativeNameType.Value, "-1")]
		ErrorOutOfHostMemory = unchecked(-1),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_OUT_OF_DEVICE_MEMORY")]
		[NativeName(NativeNameType.Value, "-2")]
		ErrorOutOfDeviceMemory = unchecked(-2),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INITIALIZATION_FAILED")]
		[NativeName(NativeNameType.Value, "-3")]
		ErrorInitializationFailed = unchecked(-3),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_DEVICE_LOST")]
		[NativeName(NativeNameType.Value, "-4")]
		ErrorDeviceLost = unchecked(-4),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_MEMORY_MAP_FAILED")]
		[NativeName(NativeNameType.Value, "-5")]
		ErrorMemoryMapFailed = unchecked(-5),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_LAYER_NOT_PRESENT")]
		[NativeName(NativeNameType.Value, "-6")]
		ErrorLayerNotPresent = unchecked(-6),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_EXTENSION_NOT_PRESENT")]
		[NativeName(NativeNameType.Value, "-7")]
		ErrorExtensionNotPresent = unchecked(-7),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_FEATURE_NOT_PRESENT")]
		[NativeName(NativeNameType.Value, "-8")]
		ErrorFeatureNotPresent = unchecked(-8),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INCOMPATIBLE_DRIVER")]
		[NativeName(NativeNameType.Value, "-9")]
		ErrorIncompatibleDriver = unchecked(-9),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_TOO_MANY_OBJECTS")]
		[NativeName(NativeNameType.Value, "-10")]
		ErrorTooManyObjects = unchecked(-10),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_FORMAT_NOT_SUPPORTED")]
		[NativeName(NativeNameType.Value, "-11")]
		ErrorFormatNotSupported = unchecked(-11),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_FRAGMENTED_POOL")]
		[NativeName(NativeNameType.Value, "-12")]
		ErrorFragmentedPool = unchecked(-12),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_UNKNOWN")]
		[NativeName(NativeNameType.Value, "-13")]
		ErrorUnknown = unchecked(-13),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_OUT_OF_POOL_MEMORY")]
		[NativeName(NativeNameType.Value, "-1000069000")]
		ErrorOutOfPoolMemory = unchecked(-1000069000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INVALID_EXTERNAL_HANDLE")]
		[NativeName(NativeNameType.Value, "-1000072003")]
		ErrorInvalidExternalHandle = unchecked(-1000072003),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_FRAGMENTATION")]
		[NativeName(NativeNameType.Value, "-1000161000")]
		ErrorFragmentation = unchecked(-1000161000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS")]
		[NativeName(NativeNameType.Value, "-1000257000")]
		ErrorInvalidOpaqueCaptureAddress = unchecked(-1000257000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_PIPELINE_COMPILE_REQUIRED")]
		[NativeName(NativeNameType.Value, "1000297000")]
		PipelineCompileRequired = unchecked(1000297000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_SURFACE_LOST_KHR")]
		[NativeName(NativeNameType.Value, "-1000000000")]
		ErrorSurfaceLostKhr = unchecked(-1000000000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_NATIVE_WINDOW_IN_USE_KHR")]
		[NativeName(NativeNameType.Value, "-1000000001")]
		ErrorNativeWindowInUseKhr = unchecked(-1000000001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_SUBOPTIMAL_KHR")]
		[NativeName(NativeNameType.Value, "1000001003")]
		SuboptimalKhr = unchecked(1000001003),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_OUT_OF_DATE_KHR")]
		[NativeName(NativeNameType.Value, "-1000001004")]
		ErrorOutOfDateKhr = unchecked(-1000001004),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INCOMPATIBLE_DISPLAY_KHR")]
		[NativeName(NativeNameType.Value, "-1000003001")]
		ErrorIncompatibleDisplayKhr = unchecked(-1000003001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VALIDATION_FAILED_EXT")]
		[NativeName(NativeNameType.Value, "-1000011001")]
		ErrorValidationFailedExt = unchecked(-1000011001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INVALID_SHADER_NV")]
		[NativeName(NativeNameType.Value, "-1000012000")]
		ErrorInvalidShaderNv = unchecked(-1000012000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023000")]
		ErrorImageUsageNotSupportedKhr = unchecked(-1000023000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023001")]
		ErrorVideoPictureLayoutNotSupportedKhr = unchecked(-1000023001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023002")]
		ErrorVideoProfileOperationNotSupportedKhr = unchecked(-1000023002),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023003")]
		ErrorVideoProfileFormatNotSupportedKhr = unchecked(-1000023003),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023004")]
		ErrorVideoProfileCodecNotSupportedKhr = unchecked(-1000023004),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000023005")]
		ErrorVideoStdVersionNotSupportedKhr = unchecked(-1000023005),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT")]
		[NativeName(NativeNameType.Value, "-1000158000")]
		ErrorInvalidDrmFormatModifierPlaneLayoutExt = unchecked(-1000158000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_NOT_PERMITTED_KHR")]
		[NativeName(NativeNameType.Value, "-1000174001")]
		ErrorNotPermittedKhr = unchecked(-1000174001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT")]
		[NativeName(NativeNameType.Value, "-1000255000")]
		ErrorFullScreenExclusiveModeLostExt = unchecked(-1000255000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_THREAD_IDLE_KHR")]
		[NativeName(NativeNameType.Value, "1000268000")]
		ThreadIdleKhr = unchecked(1000268000),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_THREAD_DONE_KHR")]
		[NativeName(NativeNameType.Value, "1000268001")]
		ThreadDoneKhr = unchecked(1000268001),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_OPERATION_DEFERRED_KHR")]
		[NativeName(NativeNameType.Value, "1000268002")]
		OperationDeferredKhr = unchecked(1000268002),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_OPERATION_NOT_DEFERRED_KHR")]
		[NativeName(NativeNameType.Value, "1000268003")]
		OperationNotDeferredKhr = unchecked(1000268003),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_MISSING_EXTENSION")]
		[NativeName(NativeNameType.Value, "1073741824")]
		MissingExtension = unchecked(1073741824),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_BUFFER_ID")]
		[NativeName(NativeNameType.Value, "1073741825")]
		InvalidBufferId = unchecked(1073741825),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_IMAGE_ID")]
		[NativeName(NativeNameType.Value, "1073741826")]
		InvalidImageId = unchecked(1073741826),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_IMAGE_VIEW_ID")]
		[NativeName(NativeNameType.Value, "1073741827")]
		InvalidImageViewId = unchecked(1073741827),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_SAMPLER_ID")]
		[NativeName(NativeNameType.Value, "1073741828")]
		InvalidSamplerId = unchecked(1073741828),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_BUFFER_DOUBLE_FREE")]
		[NativeName(NativeNameType.Value, "1073741829")]
		BufferDoubleFree = unchecked(1073741829),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_IMAGE_DOUBLE_FREE")]
		[NativeName(NativeNameType.Value, "1073741830")]
		ImageDoubleFree = unchecked(1073741830),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_IMAGE_VIEW_DOUBLE_FREE")]
		[NativeName(NativeNameType.Value, "1073741831")]
		ImageViewDoubleFree = unchecked(1073741831),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_SAMPLER_DOUBLE_FREE")]
		[NativeName(NativeNameType.Value, "1073741832")]
		SamplerDoubleFree = unchecked(1073741832),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_BUFFER_INFO")]
		[NativeName(NativeNameType.Value, "1073741833")]
		InvalidBufferInfo = unchecked(1073741833),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_IMAGE_INFO")]
		[NativeName(NativeNameType.Value, "1073741834")]
		InvalidImageInfo = unchecked(1073741834),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_IMAGE_VIEW_INFO")]
		[NativeName(NativeNameType.Value, "1073741835")]
		InvalidImageViewInfo = unchecked(1073741835),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_SAMPLER_INFO")]
		[NativeName(NativeNameType.Value, "1073741836")]
		InvalidSamplerInfo = unchecked(1073741836),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_LIST_COMPLETED")]
		[NativeName(NativeNameType.Value, "1073741837")]
		CommandListCompleted = unchecked(1073741837),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_LIST_NOT_COMPLETED")]
		[NativeName(NativeNameType.Value, "1073741838")]
		CommandListNotCompleted = unchecked(1073741838),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_CLEAR_VALUE")]
		[NativeName(NativeNameType.Value, "1073741839")]
		InvalidClearValue = unchecked(1073741839),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_BUFFER_NOT_HOST_VISIBLE")]
		[NativeName(NativeNameType.Value, "1073741840")]
		BufferNotHostVisible = unchecked(1073741840),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_BUFFER_NOT_DEVICE_VISIBLE")]
		[NativeName(NativeNameType.Value, "1073741841")]
		BufferNotDeviceVisible = unchecked(1073741841),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INCOMPLETE_COMMAND_LIST")]
		[NativeName(NativeNameType.Value, "1073741842")]
		IncompleteCommandList = unchecked(1073741842),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_DOES_NOT_SUPPORT_BUFFER_COUNT")]
		[NativeName(NativeNameType.Value, "1073741843")]
		DeviceDoesNotSupportBufferCount = unchecked(1073741843),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_DOES_NOT_SUPPORT_IMAGE_COUNT")]
		[NativeName(NativeNameType.Value, "1073741844")]
		DeviceDoesNotSupportImageCount = unchecked(1073741844),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_DOES_NOT_SUPPORT_SAMPLER_COUNT")]
		[NativeName(NativeNameType.Value, "1073741845")]
		DeviceDoesNotSupportSamplerCount = unchecked(1073741845),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_NULL_BUFFER")]
		[NativeName(NativeNameType.Value, "1073741846")]
		FailedToCreateNullBuffer = unchecked(1073741846),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_NULL_IMAGE")]
		[NativeName(NativeNameType.Value, "1073741847")]
		FailedToCreateNullImage = unchecked(1073741847),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_NULL_IMAGE_VIEW")]
		[NativeName(NativeNameType.Value, "1073741848")]
		FailedToCreateNullImageView = unchecked(1073741848),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_NULL_SAMPLER")]
		[NativeName(NativeNameType.Value, "1073741849")]
		FailedToCreateNullSampler = unchecked(1073741849),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_BUFFER")]
		[NativeName(NativeNameType.Value, "1073741850")]
		FailedToCreateBuffer = unchecked(1073741850),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_IMAGE")]
		[NativeName(NativeNameType.Value, "1073741851")]
		FailedToCreateImage = unchecked(1073741851),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_IMAGE_VIEW")]
		[NativeName(NativeNameType.Value, "1073741852")]
		FailedToCreateImageView = unchecked(1073741852),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_DEFAULT_IMAGE_VIEW")]
		[NativeName(NativeNameType.Value, "1073741853")]
		FailedToCreateDefaultImageView = unchecked(1073741853),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_SAMPLER")]
		[NativeName(NativeNameType.Value, "1073741854")]
		FailedToCreateSampler = unchecked(1073741854),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_CREATE_BDA_BUFFER")]
		[NativeName(NativeNameType.Value, "1073741855")]
		FailedToCreateBdaBuffer = unchecked(1073741855),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_FAILED_TO_SUBMIT_DEVICE_INIT_COMMANDS")]
		[NativeName(NativeNameType.Value, "1073741856")]
		FailedToSubmitDeviceInitCommands = unchecked(1073741856),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_BUFFER_RANGE")]
		[NativeName(NativeNameType.Value, "1073741857")]
		InvalidBufferRange = unchecked(1073741857),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_BUFFER_OFFSET")]
		[NativeName(NativeNameType.Value, "1073741858")]
		InvalidBufferOffset = unchecked(1073741858),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_SUITABLE_FORMAT_FOUND")]
		[NativeName(NativeNameType.Value, "1073741860")]
		NoSuitableFormatFound = unchecked(1073741860),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_RANGE_OUT_OF_BOUNDS")]
		[NativeName(NativeNameType.Value, "1073741861")]
		RangeOutOfBounds = unchecked(1073741861),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_SUITABLE_DEVICE_FOUND")]
		[NativeName(NativeNameType.Value, "1073741862")]
		NoSuitableDeviceFound = unchecked(1073741862),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EXCEEDED_MAX_BUFFERS")]
		[NativeName(NativeNameType.Value, "1073741863")]
		ExceededMaxBuffers = unchecked(1073741863),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EXCEEDED_MAX_IMAGES")]
		[NativeName(NativeNameType.Value, "1073741864")]
		ExceededMaxImages = unchecked(1073741864),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EXCEEDED_MAX_IMAGE_VIEWS")]
		[NativeName(NativeNameType.Value, "1073741865")]
		ExceededMaxImageViews = unchecked(1073741865),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EXCEEDED_MAX_SAMPLERS")]
		[NativeName(NativeNameType.Value, "1073741866")]
		ExceededMaxSamplers = unchecked(1073741866),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_SURFACE_UNSUPPORTED_PRESENT_MODE")]
		[NativeName(NativeNameType.Value, "1073741867")]
		DeviceSurfaceUnsupportedPresentMode = unchecked(1073741867),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_REFERENCES_INVALID_BUFFER_ID")]
		[NativeName(NativeNameType.Value, "1073741868")]
		CommandReferencesInvalidBufferId = unchecked(1073741868),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_REFERENCES_INVALID_IMAGE_ID")]
		[NativeName(NativeNameType.Value, "1073741869")]
		CommandReferencesInvalidImageId = unchecked(1073741869),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_REFERENCES_INVALID_IMAGE_VIEW_ID")]
		[NativeName(NativeNameType.Value, "1073741870")]
		CommandReferencesInvalidImageViewId = unchecked(1073741870),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_COMMAND_REFERENCES_INVALID_SAMPLER_ID")]
		[NativeName(NativeNameType.Value, "1073741871")]
		CommandReferencesInvalidSamplerId = unchecked(1073741871),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_ACCELERATION_STRUCTURE_ID")]
		[NativeName(NativeNameType.Value, "1073741872")]
		InvalidAccelerationStructureId = unchecked(1073741872),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_EXCEEDED_MAX_ACCELERATION_STRUCTURES")]
		[NativeName(NativeNameType.Value, "1073741873")]
		ExceededMaxAccelerationStructures = unchecked(1073741873),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_DOES_NOT_SUPPORT_RAYTRACING")]
		[NativeName(NativeNameType.Value, "1073741874")]
		DeviceDoesNotSupportRaytracing = unchecked(1073741874),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_DEVICE_DOES_NOT_SUPPORT_MESH_SHADER")]
		[NativeName(NativeNameType.Value, "1073741875")]
		DeviceDoesNotSupportMeshShader = unchecked(1073741875),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_TLAS_ID")]
		[NativeName(NativeNameType.Value, "1073741876")]
		InvalidTlasId = unchecked(1073741876),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_BLAS_ID")]
		[NativeName(NativeNameType.Value, "1073741877")]
		InvalidBlasId = unchecked(1073741877),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_INVALID_WITHOUT_ENABLING_RAY_TRACING")]
		[NativeName(NativeNameType.Value, "1073741878")]
		InvalidWithoutEnablingRayTracing = unchecked(1073741878),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_COMPUTE_PIPELINE_BOUND")]
		[NativeName(NativeNameType.Value, "1073741879")]
		NoComputePipelineBound = unchecked(1073741879),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_RASTER_PIPELINE_BOUND")]
		[NativeName(NativeNameType.Value, "1073741880")]
		NoRasterPipelineBound = unchecked(1073741880),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_RAYTRACING_PIPELINE_BOUND")]
		[NativeName(NativeNameType.Value, "1073741881")]
		NoRaytracingPipelineBound = unchecked(1073741881),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_NO_PIPELINE_BOUND")]
		[NativeName(NativeNameType.Value, "1073741882")]
		NoPipelineBound = unchecked(1073741882),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_PUSHCONSTANT_RANGE_EXCEEDED")]
		[NativeName(NativeNameType.Value, "1073741883")]
		PushconstantRangeExceeded = unchecked(1073741883),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_MESH_SHADER_NOT_DEVICE_ENABLED")]
		[NativeName(NativeNameType.Value, "1073741884")]
		MeshShaderNotDeviceEnabled = unchecked(1073741884),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_ERROR_COPY_OUT_OF_BOUNDS")]
		[NativeName(NativeNameType.Value, "1073741885")]
		ErrorCopyOutOfBounds = unchecked(1073741885),
		[NativeName(NativeNameType.EnumItem, "DAXA_RESULT_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),
	}

	/// <summary>/// ImageLayout matches vulkan's image layouts<br/>/// </summary>	[NativeName(NativeNameType.Enum, "daxa_ImageLayout")]
	public enum DaxaImageLayout : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_UNDEFINED")]
		[NativeName(NativeNameType.Value, "0")]
		Undefined = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_GENERAL")]
		[NativeName(NativeNameType.Value, "1")]
		General = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL")]
		[NativeName(NativeNameType.Value, "6")]
		TransferSrcOptimal = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL")]
		[NativeName(NativeNameType.Value, "7")]
		TransferDstOptimal = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_READ_ONLY_OPTIMAL")]
		[NativeName(NativeNameType.Value, "1000314000")]
		ReadOnlyOptimal = unchecked(1000314000),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL")]
		[NativeName(NativeNameType.Value, "1000314001")]
		AttachmentOptimal = unchecked(1000314001),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_PRESENT_SRC")]
		[NativeName(NativeNameType.Value, "1000001002")]
		PresentSrc = unchecked(1000001002),
		[NativeName(NativeNameType.EnumItem, "DAXA_IMAGE_LAYOUT_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),
	}

	/// <summary>/// Flags for created #VmaAllocator.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaAllocatorCreateFlagBits")]
	public enum VmaAllocatorCreateFlagBits : int
	{
		/// <summary>/// <br/>/// Using this flag may increase performance because internal mutexes are not used.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT")]
		[NativeName(NativeNameType.Value, "1")]
		ExternallySynchronizedBit = unchecked(1),

		/// <summary>/// <br/>/// The flag works only if VmaAllocatorCreateInfo::vulkanApiVersion `== VK_API_VERSION_1_0`.<br/>/// When it is `VK_API_VERSION_1_1`, the flag is ignored because the extension has been promoted to Vulkan 1.1.<br/>/// Using this extension will automatically allocate dedicated blocks of memory for<br/>/// some buffers and images instead of suballocating place for them out of bigger<br/>/// memory blocks (as if you explicitly used #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT<br/>/// flag) when it is recommended by the driver. It may improve performance on some<br/>/// GPUs.<br/>/// You may set this flag only if you found out that following device extensions are<br/>/// supported, you enabled them while creating Vulkan device passed as<br/>/// VmaAllocatorCreateInfo::device, and you want them to be used internally by this<br/>/// library:<br/>/// - VK_KHR_get_memory_requirements2 (device extension)<br/>/// - VK_KHR_dedicated_allocation (device extension)<br/>/// When this flag is set, you can experience following warnings reported by Vulkan<br/>/// validation layer. You can ignore them.<br/>/// > vkBindBufferMemory(): Binding memory to buffer 0x2d but vkGetBufferMemoryRequirements() has not been called on that buffer.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT")]
		[NativeName(NativeNameType.Value, "2")]
		KhrDedicatedAllocationBit = unchecked(2),

		/// <summary>/// Enables usage of VK_KHR_bind_memory2 extension.<br/>/// The flag works only if VmaAllocatorCreateInfo::vulkanApiVersion `== VK_API_VERSION_1_0`.<br/>/// When it is `VK_API_VERSION_1_1`, the flag is ignored because the extension has been promoted to Vulkan 1.1.<br/>/// You may set this flag only if you found out that this device extension is supported,<br/>/// you enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,<br/>/// and you want it to be used internally by this library.<br/>/// The extension provides functions `vkBindBufferMemory2KHR` and `vkBindImageMemory2KHR`,<br/>/// which allow to pass a chain of `pNext` structures while binding.<br/>/// This flag is required if you use `pNext` parameter in vmaBindBufferMemory2() or vmaBindImageMemory2().<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT")]
		[NativeName(NativeNameType.Value, "4")]
		KhrBindMemory2Bit = unchecked(4),

		/// <summary>/// Enables usage of VK_EXT_memory_budget extension.<br/>/// You may set this flag only if you found out that this device extension is supported,<br/>/// you enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,<br/>/// and you want it to be used internally by this library, along with another instance extension<br/>/// VK_KHR_get_physical_device_properties2, which is required by it (or Vulkan 1.1, where this extension is promoted).<br/>/// The extension provides query for current memory usage and budget, which will probably<br/>/// be more accurate than an estimation used by the library otherwise.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT")]
		[NativeName(NativeNameType.Value, "8")]
		ExtMemoryBudgetBit = unchecked(8),

		/// <summary>/// Enables usage of VK_AMD_device_coherent_memory extension.<br/>/// You may set this flag only if you:<br/>/// - found out that this device extension is supported and enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,<br/>/// - checked that `VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory` is true and set it while creating the Vulkan device,<br/>/// - want it to be used internally by this library.<br/>/// The extension and accompanying device feature provide access to memory types with<br/>/// `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` and `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` flags.<br/>/// They are useful mostly for writing breadcrumb markers - a common method for debugging GPU crash/hang/TDR.<br/>/// When the extension is not enabled, such memory types are still enumerated, but their usage is illegal.<br/>/// To protect from this error, if you don't create the allocator with this flag, it will refuse to allocate any memory or create a custom pool in such memory type,<br/>/// returning `VK_ERROR_FEATURE_NOT_PRESENT`.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT")]
		[NativeName(NativeNameType.Value, "16")]
		AmdDeviceCoherentMemoryBit = unchecked(16),

		/// <summary>/// Enables usage of "buffer device address" feature, which allows you to use function<br/>/// `vkGetBufferDeviceAddress*` to get raw GPU pointer to a buffer and pass it for usage inside a shader.<br/>/// You may set this flag only if you:<br/>/// 1. (For Vulkan version <br/>/// <<br/>/// 1.2) Found as available and enabled device extension<br/>/// VK_KHR_buffer_device_address.<br/>/// This extension is promoted to core Vulkan 1.2.<br/>/// 2. Found as available and enabled device feature `VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress`.<br/>/// When this flag is set, you can create buffers with `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT` using VMA.<br/>/// The library automatically adds `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT` to<br/>/// allocated memory blocks wherever it might be needed.<br/>/// For more information, see documentation chapter <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT")]
		[NativeName(NativeNameType.Value, "32")]
		BufferDeviceAddressBit = unchecked(32),

		/// <summary>/// Enables usage of VK_EXT_memory_priority extension in the library.<br/>/// You may set this flag only if you found available and enabled this device extension,<br/>/// along with `VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority == VK_TRUE`,<br/>/// while creating Vulkan device passed as VmaAllocatorCreateInfo::device.<br/>/// When this flag is used, VmaAllocationCreateInfo::priority and VmaPoolCreateInfo::priority<br/>/// are used to set priorities of allocated Vulkan memory. Without it, these variables are ignored.<br/>/// A priority must be a floating-point value between 0 and 1, indicating the priority of the allocation relative to other memory allocations.<br/>/// Larger values are higher priority. The granularity of the priorities is implementation-dependent.<br/>/// It is automatically passed to every call to `vkAllocateMemory` done by the library using structure `VkMemoryPriorityAllocateInfoEXT`.<br/>/// The value to be used for default priority is 0.5.<br/>/// For more details, see the documentation of the VK_EXT_memory_priority extension.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT")]
		[NativeName(NativeNameType.Value, "64")]
		ExtMemoryPriorityBit = unchecked(64),

		/// <summary>/// Enables usage of VK_KHR_maintenance4 extension in the library.<br/>/// You may set this flag only if you found available and enabled this device extension,<br/>/// while creating Vulkan device passed as VmaAllocatorCreateInfo::device.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_KHR_MAINTENANCE4_BIT")]
		[NativeName(NativeNameType.Value, "128")]
		KhrMaintenance4Bit = unchecked(128),

		/// <summary>/// Enables usage of VK_KHR_maintenance5 extension in the library.<br/>/// You should set this flag if you found available and enabled this device extension,<br/>/// while creating Vulkan device passed as VmaAllocatorCreateInfo::device.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_KHR_MAINTENANCE5_BIT")]
		[NativeName(NativeNameType.Value, "256")]
		KhrMaintenance5Bit = unchecked(256),

		/// <summary>/// Enables usage of VK_KHR_maintenance5 extension in the library.<br/>/// You should set this flag if you found available and enabled this device extension,<br/>/// while creating Vulkan device passed as VmaAllocatorCreateInfo::device.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	/// <summary>/// <br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaMemoryUsage")]
	public enum VmaMemoryUsage : int
	{
		/// <summary>/// No intended memory usage specified.<br/>/// Use other members of VmaAllocationCreateInfo to specify your requirements.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_UNKNOWN")]
		[NativeName(NativeNameType.Value, "0")]
		Unknown = unchecked(0),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_GPU_ONLY")]
		[NativeName(NativeNameType.Value, "1")]
		GpuOnly = unchecked(1),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_CPU_ONLY")]
		[NativeName(NativeNameType.Value, "2")]
		CpuOnly = unchecked(2),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_CPU_TO_GPU")]
		[NativeName(NativeNameType.Value, "3")]
		CpuToGpu = unchecked(3),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_GPU_TO_CPU")]
		[NativeName(NativeNameType.Value, "4")]
		GpuToCpu = unchecked(4),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_CPU_COPY")]
		[NativeName(NativeNameType.Value, "5")]
		CpuCopy = unchecked(5),

		/// <summary>/// Lazily allocated GPU memory having `VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT`.<br/>/// Exists mostly on mobile platforms. Using it on desktop PC or other GPUs with no such memory type present will fail the allocation.<br/>/// Usage: Memory for transient attachment images (color attachments, depth attachments etc.), created with `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`.<br/>/// Allocations with this usage are always created as dedicated - it implies #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED")]
		[NativeName(NativeNameType.Value, "6")]
		GpuLazilyAllocated = unchecked(6),

		/// <summary>/// Selects best memory type automatically.<br/>/// This flag is recommended for most common use cases.<br/>/// When using this flag, if you want to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT),<br/>/// you must pass one of the flags: #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT<br/>/// in VmaAllocationCreateInfo::flags.<br/>/// It can be used only with functions that let the library know `VkBufferCreateInfo` or `VkImageCreateInfo`, e.g.<br/>/// vmaCreateBuffer(), vmaCreateImage(), vmaFindMemoryTypeIndexForBufferInfo(), vmaFindMemoryTypeIndexForImageInfo()<br/>/// and not with generic memory allocation functions.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_AUTO")]
		[NativeName(NativeNameType.Value, "7")]
		Auto = unchecked(7),

		/// <summary>/// Selects best memory type automatically with preference for GPU (device) memory.<br/>/// When using this flag, if you want to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT),<br/>/// you must pass one of the flags: #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT<br/>/// in VmaAllocationCreateInfo::flags.<br/>/// It can be used only with functions that let the library know `VkBufferCreateInfo` or `VkImageCreateInfo`, e.g.<br/>/// vmaCreateBuffer(), vmaCreateImage(), vmaFindMemoryTypeIndexForBufferInfo(), vmaFindMemoryTypeIndexForImageInfo()<br/>/// and not with generic memory allocation functions.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_AUTO_PREFER_DEVICE")]
		[NativeName(NativeNameType.Value, "8")]
		AutoPreferDevice = unchecked(8),

		/// <summary>/// Selects best memory type automatically with preference for CPU (host) memory.<br/>/// When using this flag, if you want to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT),<br/>/// you must pass one of the flags: #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT<br/>/// in VmaAllocationCreateInfo::flags.<br/>/// It can be used only with functions that let the library know `VkBufferCreateInfo` or `VkImageCreateInfo`, e.g.<br/>/// vmaCreateBuffer(), vmaCreateImage(), vmaFindMemoryTypeIndexForBufferInfo(), vmaFindMemoryTypeIndexForImageInfo()<br/>/// and not with generic memory allocation functions.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_AUTO_PREFER_HOST")]
		[NativeName(NativeNameType.Value, "9")]
		AutoPreferHost = unchecked(9),

		/// <summary>/// Selects best memory type automatically with preference for CPU (host) memory.<br/>/// When using this flag, if you want to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT),<br/>/// you must pass one of the flags: #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT<br/>/// in VmaAllocationCreateInfo::flags.<br/>/// It can be used only with functions that let the library know `VkBufferCreateInfo` or `VkImageCreateInfo`, e.g.<br/>/// vmaCreateBuffer(), vmaCreateImage(), vmaFindMemoryTypeIndexForBufferInfo(), vmaFindMemoryTypeIndexForImageInfo()<br/>/// and not with generic memory allocation functions.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_MEMORY_USAGE_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	/// <summary>/// Flags to be passed as VmaAllocationCreateInfo::flags.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaAllocationCreateFlagBits")]
	public enum VmaAllocationCreateFlagBits : int
	{
		/// <summary>/// <br/>/// Use it for special, big resources, like fullscreen images used as attachments.<br/>/// If you use this flag while creating a buffer or an image, `VkMemoryDedicatedAllocateInfo`<br/>/// structure is applied if possible.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT")]
		[NativeName(NativeNameType.Value, "1")]
		DedicatedMemoryBit = unchecked(1),

		/// <summary>/// <br/>/// If new allocation cannot be placed in any of the existing blocks, allocation<br/>/// fails with `VK_ERROR_OUT_OF_DEVICE_MEMORY` error.<br/>/// You should not use #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT and<br/>/// #VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT at the same time. It makes no sense.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT")]
		[NativeName(NativeNameType.Value, "2")]
		NeverAllocateBit = unchecked(2),

		/// <summary>/// <br/>/// Pointer to mapped memory will be returned through VmaAllocationInfo::pMappedData.<br/>/// It is valid to use this flag for allocation made from memory type that is not<br/>/// `HOST_VISIBLE`. This flag is then ignored and memory is not mapped. This is<br/>/// useful if you need an allocation that is efficient to use on GPU<br/>/// (`DEVICE_LOCAL`) and still want to map it directly if possible on platforms that<br/>/// support it (e.g. Intel GPU).<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_MAPPED_BIT")]
		[NativeName(NativeNameType.Value, "4")]
		MappedBit = unchecked(4),

		/// <summary>/// <br/>/// Set this flag to treat VmaAllocationCreateInfo::pUserData as pointer to a<br/>/// null-terminated string. Instead of copying pointer value, a local copy of the<br/>/// string is made and stored in allocation's `pName`. The string is automatically<br/>/// freed together with the allocation. It is also used in vmaBuildStatsString().<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT")]
		[NativeName(NativeNameType.Value, "32")]
		UserDataCopyStringBit = unchecked(32),

		/// <summary>/// Allocation will be created from upper stack in a double stack pool.<br/>/// This flag is only allowed for custom pools created with #VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT flag.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT")]
		[NativeName(NativeNameType.Value, "64")]
		UpperAddressBit = unchecked(64),

		/// <summary>/// Create both buffer/image and allocation, but don't bind them together.<br/>/// It is useful when you want to bind yourself to do some more advanced binding, e.g. using some extensions.<br/>/// The flag is meaningful only with functions that bind by default: vmaCreateBuffer(), vmaCreateImage().<br/>/// Otherwise it is ignored.<br/>/// If you want to make sure the new buffer/image is not tied to the new memory allocation<br/>/// through `VkMemoryDedicatedAllocateInfoKHR` structure in case the allocation ends up in its own memory block,<br/>/// use also flag #VMA_ALLOCATION_CREATE_CAN_ALIAS_BIT.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_DONT_BIND_BIT")]
		[NativeName(NativeNameType.Value, "128")]
		DontBindBit = unchecked(128),

		/// <summary>/// Create allocation only if additional device memory required for it, if any, won't exceed<br/>/// memory budget. Otherwise return `VK_ERROR_OUT_OF_DEVICE_MEMORY`.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT")]
		[NativeName(NativeNameType.Value, "256")]
		WithinBudgetBit = unchecked(256),

		/// <summary>/// <br/>/// Usage of this flag prevents supplying `VkMemoryDedicatedAllocateInfoKHR` when #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT is specified.<br/>/// Otherwise created dedicated memory will not be suitable for aliasing resources, resulting in Vulkan Validation Layer errors.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_CAN_ALIAS_BIT")]
		[NativeName(NativeNameType.Value, "512")]
		CanAliasBit = unchecked(512),

		/// <summary>/// Requests possibility to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT).<br/>/// - If you use #VMA_MEMORY_USAGE_AUTO or other `VMA_MEMORY_USAGE_AUTO*` value,<br/>/// you must use this flag to be able to map the allocation. Otherwise, mapping is incorrect.<br/>/// - If you use other value of #VmaMemoryUsage, this flag is ignored and mapping is always possible in memory types that are `HOST_VISIBLE`.<br/>/// This includes allocations created in <br/>/// Declares that mapped memory will only be written sequentially, e.g. using `memcpy()` or a loop writing number-by-number,<br/>/// never read or accessed randomly, so a memory type can be selected that is uncached and write-combined.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT")]
		[NativeName(NativeNameType.Value, "1024")]
		HostAccessSequentialWriteBit = unchecked(1024),

		/// <summary>/// Requests possibility to map the allocation (using vmaMapMemory() or #VMA_ALLOCATION_CREATE_MAPPED_BIT).<br/>/// - If you use #VMA_MEMORY_USAGE_AUTO or other `VMA_MEMORY_USAGE_AUTO*` value,<br/>/// you must use this flag to be able to map the allocation. Otherwise, mapping is incorrect.<br/>/// - If you use other value of #VmaMemoryUsage, this flag is ignored and mapping is always possible in memory types that are `HOST_VISIBLE`.<br/>/// This includes allocations created in <br/>/// Declares that mapped memory can be read, written, and accessed in random order,<br/>/// so a `HOST_CACHED` memory type is preferred.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT")]
		[NativeName(NativeNameType.Value, "2048")]
		HostAccessRandomBit = unchecked(2048),

		/// <summary>/// Together with #VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT or #VMA_ALLOCATION_CREATE_HOST_ACCESS_RANDOM_BIT,<br/>/// it says that despite request for host access, a not-`HOST_VISIBLE` memory type can be selected<br/>/// if it may improve performance.<br/>/// By using this flag, you declare that you will check if the allocation ended up in a `HOST_VISIBLE` memory type<br/>/// (e.g. using vmaGetAllocationMemoryProperties()) and if not, you will create some "staging" buffer and<br/>/// issue an explicit transfer to write/read your data.<br/>/// To prepare for this possibility, don't forget to add appropriate flags like<br/>/// `VK_BUFFER_USAGE_TRANSFER_DST_BIT`, `VK_BUFFER_USAGE_TRANSFER_SRC_BIT` to the parameters of created buffer or image.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_HOST_ACCESS_ALLOW_TRANSFER_INSTEAD_BIT")]
		[NativeName(NativeNameType.Value, "4096")]
		HostAccessAllowTransferInsteadBit = unchecked(4096),

		/// <summary>/// Allocation strategy that chooses smallest possible free range for the allocation<br/>/// to minimize memory usage and fragmentation, possibly at the expense of allocation time.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT")]
		[NativeName(NativeNameType.Value, "65536")]
		StrategyMinMemoryBit = unchecked(65536),

		/// <summary>/// Allocation strategy that chooses first suitable free range for the allocation -<br/>/// not necessarily in terms of the smallest offset but the one that is easiest and fastest to find<br/>/// to minimize allocation time, possibly at the expense of allocation quality.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT")]
		[NativeName(NativeNameType.Value, "131072")]
		StrategyMinTimeBit = unchecked(131072),

		/// <summary>/// Allocation strategy that chooses always the lowest offset in available space.<br/>/// This is not the most efficient strategy but achieves highly packed data.<br/>/// Used internally by defragmentation, not recommended in typical usage.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_MIN_OFFSET_BIT")]
		[NativeName(NativeNameType.Value, "262144")]
		StrategyMinOffsetBit = unchecked(262144),

		/// <summary>/// Alias to #VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT")]
		[NativeName(NativeNameType.Value, "VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT")]
		StrategyBestFitBit = StrategyMinMemoryBit,

		/// <summary>/// Alias to #VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT")]
		[NativeName(NativeNameType.Value, "VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT")]
		StrategyFirstFitBit = StrategyMinTimeBit,

		/// <summary>/// A bit mask to extract only `STRATEGY` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_STRATEGY_MASK")]
		[NativeName(NativeNameType.Value, "458752")]
		StrategyMask = unchecked(458752),

		/// <summary>/// A bit mask to extract only `STRATEGY` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	/// <summary>/// Flags to be passed as VmaPoolCreateInfo::flags.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaPoolCreateFlagBits")]
	public enum VmaPoolCreateFlagBits : int
	{
		/// <summary>/// <br/>/// This is an optional optimization flag.<br/>/// If you always allocate using vmaCreateBuffer(), vmaCreateImage(),<br/>/// vmaAllocateMemoryForBuffer(), then you don't need to use it because allocator<br/>/// knows exact type of your allocations so it can handle Buffer-Image Granularity<br/>/// in the optimal way.<br/>/// If you also allocate using vmaAllocateMemoryForImage() or vmaAllocateMemory(),<br/>/// exact type of such allocations is not known, so allocator must be conservative<br/>/// in handling Buffer-Image Granularity, which can lead to suboptimal allocation<br/>/// (wasted memory). In that case, if you can make sure you always allocate only<br/>/// buffers and linear images or only optimal images out of this pool, use this flag<br/>/// to make allocator disregard Buffer-Image Granularity and so make allocations<br/>/// faster and more optimal.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT")]
		[NativeName(NativeNameType.Value, "2")]
		IgnoreBufferImageGranularityBit = unchecked(2),

		/// <summary>/// <br/>/// Specify this flag to enable linear allocation algorithm, which always creates<br/>/// new allocations after last one and doesn't reuse space from allocations freed in<br/>/// between. It trades memory consumption for simplified algorithm and data<br/>/// structure, which has better performance and uses less memory for metadata.<br/>/// By using this flag, you can achieve behavior of free-at-once, stack,<br/>/// ring buffer, and double stack.<br/>/// For details, see documentation chapter <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT")]
		[NativeName(NativeNameType.Value, "4")]
		LinearAlgorithmBit = unchecked(4),

		/// <summary>/// Bit mask to extract only `ALGORITHM` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_POOL_CREATE_ALGORITHM_MASK")]
		[NativeName(NativeNameType.Value, "VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT")]
		AlgorithmMask = LinearAlgorithmBit,

		/// <summary>/// Bit mask to extract only `ALGORITHM` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_POOL_CREATE_FLAG_BITS_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	/// <summary>/// Flags to be passed as VmaDefragmentationInfo::flags.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaDefragmentationFlagBits")]
	public enum VmaDefragmentationFlagBits : int
	{
		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_ALGORITHM_FAST_BIT")]
		[NativeName(NativeNameType.Value, "1")]
		AlgorithmFastBit = unchecked(1),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_ALGORITHM_BALANCED_BIT")]
		[NativeName(NativeNameType.Value, "2")]
		AlgorithmBalancedBit = unchecked(2),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_ALGORITHM_FULL_BIT")]
		[NativeName(NativeNameType.Value, "4")]
		AlgorithmFullBit = unchecked(4),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_ALGORITHM_EXTENSIVE_BIT")]
		[NativeName(NativeNameType.Value, "8")]
		AlgorithmExtensiveBit = unchecked(8),

		/// <summary>/// A bit mask to extract only `ALGORITHM` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_ALGORITHM_MASK")]
		[NativeName(NativeNameType.Value, "15")]
		AlgorithmMask = unchecked(15),

		/// <summary>/// A bit mask to extract only `ALGORITHM` bits from entire set of flags.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_FLAG_BITS_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	/// <summary>/// Operation performed on single defragmentation move. See structure #VmaDefragmentationMove.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaDefragmentationMoveOperation")]
	public enum VmaDefragmentationMoveOperation : int
	{
		/// <summary>/// Buffer/image has been recreated at `dstTmpAllocation`, data has been copied, old buffer/image has been destroyed. `srcAllocation` should be changed to point to the new place. This is the default value set by vmaBeginDefragmentationPass().<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_MOVE_OPERATION_COPY")]
		[NativeName(NativeNameType.Value, "0")]
		Copy = unchecked(0),

		/// <summary>/// Set this value if you cannot move the allocation. New place reserved at `dstTmpAllocation` will be freed. `srcAllocation` will remain unchanged.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_MOVE_OPERATION_IGNORE")]
		[NativeName(NativeNameType.Value, "1")]
		Ignore = unchecked(1),

		/// <summary>/// Set this value if you decide to abandon the allocation and you destroyed the buffer/image. New place reserved at `dstTmpAllocation` will be freed, along with `srcAllocation`, which will be destroyed.<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_DEFRAGMENTATION_MOVE_OPERATION_DESTROY")]
		[NativeName(NativeNameType.Value, "2")]
		Destroy = unchecked(2),

	}

	/// <summary>/// Flags to be passed as VmaVirtualBlockCreateInfo::flags.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "VmaVirtualBlockCreateFlagBits")]
	public enum VmaVirtualBlockCreateFlagBits : int
	{
		/// <summary>/// <br/>/// Specify this flag to enable linear allocation algorithm, which always creates<br/>/// new allocations after last one and doesn't reuse space from allocations freed in<br/>/// between. It trades memory consumption for simplified algorithm and data<br/>/// structure, which has better performance and uses less memory for metadata.<br/>/// By using this flag, you can achieve behavior of free-at-once, stack,<br/>/// ring buffer, and double stack.<br/>/// For details, see documentation chapter <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT")]
		[NativeName(NativeNameType.Value, "1")]
		LinearAlgorithmBit = unchecked(1),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_VIRTUAL_BLOCK_CREATE_ALGORITHM_MASK")]
		[NativeName(NativeNameType.Value, "VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT")]
		AlgorithmMask = LinearAlgorithmBit,

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "VMA_VIRTUAL_BLOCK_CREATE_FLAG_BITS_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),

	}

	[NativeName(NativeNameType.Enum, "daxa_GeometryFlagBits")]
	public enum DaxaGeometryFlagBits : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_GEOMETRY_OPAQUE")]
		[NativeName(NativeNameType.Value, "1")]
		Opaque = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION")]
		[NativeName(NativeNameType.Value, "2")]
		NoDuplicateAnyHitInvocation = unchecked(2),
	}

	[NativeName(NativeNameType.Enum, "daxa_BuildAccelerationStructureFlagBits")]
	public enum DaxaBuildAccelerationStructureFlagBits : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE")]
		[NativeName(NativeNameType.Value, "1")]
		AllowUpdate = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION")]
		[NativeName(NativeNameType.Value, "2")]
		AllowCompaction = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "DAXA_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE")]
		[NativeName(NativeNameType.Value, "4")]
		PreferFastTrace = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "DAXA_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD")]
		[NativeName(NativeNameType.Value, "8")]
		PreferFastBuild = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "DAXA_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY")]
		[NativeName(NativeNameType.Value, "16")]
		LowMemory = unchecked(16),
	}

	[NativeName(NativeNameType.Enum, "daxa_NativeWindowPlatform")]
	public enum DaxaNativeWindowPlatform : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_NATIVE_WINDOW_PLATFORM_UNKNOWN")]
		[NativeName(NativeNameType.Value, "0")]
		Unknown = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "DAXA_NATIVE_WINDOW_PLATFORM_WIN32_API")]
		[NativeName(NativeNameType.Value, "1")]
		Win32Api = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_NATIVE_WINDOW_PLATFORM_XLIB_API")]
		[NativeName(NativeNameType.Value, "2")]
		XlibApi = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "DAXA_NATIVE_WINDOW_PLATFORM_WAYLAND_API")]
		[NativeName(NativeNameType.Value, "3")]
		WaylandApi = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "DAXA_NATIVE_WINDOW_PLATFORM_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "daxa_DeviceType")]
	public enum DaxaDeviceType : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_OTHER")]
		[NativeName(NativeNameType.Value, "0")]
		Other = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_INTEGRATED_GPU")]
		[NativeName(NativeNameType.Value, "1")]
		IntegratedGpu = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_DISCRETE_GPU")]
		[NativeName(NativeNameType.Value, "2")]
		DiscreteGpu = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_VIRTUAL_GPU")]
		[NativeName(NativeNameType.Value, "3")]
		VirtualGpu = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_CPU")]
		[NativeName(NativeNameType.Value, "4")]
		Cpu = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_TYPE_MAX_ENUM")]
		[NativeName(NativeNameType.Value, "2147483647")]
		MaxEnum = unchecked(2147483647),
	}

	[NativeName(NativeNameType.Enum, "daxa_DeviceFlagBits")]
	public enum DaxaDeviceFlagBits : int
	{
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_BUFFER_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT")]
		[NativeName(NativeNameType.Value, "1")]
		BufferDeviceAddressCaptureReplayBit = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_CONSERVATIVE_RASTERIZATION")]
		[NativeName(NativeNameType.Value, "2")]
		ConservativeRasterization = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_MESH_SHADER_BIT")]
		[NativeName(NativeNameType.Value, "4")]
		MeshShaderBit = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_SHADER_ATOMIC64")]
		[NativeName(NativeNameType.Value, "8")]
		ShaderAtomic64 = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_IMAGE_ATOMIC64")]
		[NativeName(NativeNameType.Value, "16")]
		ImageAtomic64 = unchecked(16),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_VK_MEMORY_MODEL")]
		[NativeName(NativeNameType.Value, "32")]
		VkMemoryModel = unchecked(32),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_RAY_TRACING")]
		[NativeName(NativeNameType.Value, "64")]
		RayTracing = unchecked(64),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_SHADER_FLOAT16")]
		[NativeName(NativeNameType.Value, "128")]
		ShaderFloat16 = unchecked(128),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_SHADER_INT8")]
		[NativeName(NativeNameType.Value, "256")]
		ShaderInt8 = unchecked(256),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_ROBUST_BUFFER_ACCESS")]
		[NativeName(NativeNameType.Value, "512")]
		RobustBufferAccess = unchecked(512),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_ROBUST_IMAGE_ACCESS")]
		[NativeName(NativeNameType.Value, "1024")]
		RobustImageAccess = unchecked(1024),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_DYNAMIC_STATE_3")]
		[NativeName(NativeNameType.Value, "2048")]
		DynamicState3 = unchecked(2048),
		[NativeName(NativeNameType.EnumItem, "DAXA_DEVICE_FLAG_SHADER_ATOMIC_FLOAT")]
		[NativeName(NativeNameType.Value, "4096")]
		ShaderAtomicFloat = unchecked(4096),
	}

}
