// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Daxa
{

	[NativeName(NativeNameType.StructOrClass, "VkQueryPoolPerformanceCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueryPoolPerformanceCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "queueFamilyIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint QueueFamilyIndex;
		[NativeName(NativeNameType.Field, "counterIndexCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CounterIndexCount;
		[NativeName(NativeNameType.Field, "pCounterIndices")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PCounterIndices;

		public unsafe VkQueryPoolPerformanceCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint queueFamilyIndex = default, uint counterIndexCount = default, uint* pCounterIndices = default)
		{
			SType = sType;
			PNext = pNext;
			QueueFamilyIndex = queueFamilyIndex;
			CounterIndexCount = counterIndexCount;
			PCounterIndices = pCounterIndices;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPerformanceCounterResultKHR")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct VkPerformanceCounterResultKHR
	{
		[NativeName(NativeNameType.Field, "int32")]
		[NativeName(NativeNameType.Type, "int32_t")]
		[FieldOffset(0)]
		public int Int32;
		[NativeName(NativeNameType.Field, "int64")]
		[NativeName(NativeNameType.Type, "int64_t")]
		[FieldOffset(0)]
		public long Int64;
		[NativeName(NativeNameType.Field, "uint32")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		[FieldOffset(0)]
		public uint Uint32;
		[NativeName(NativeNameType.Field, "uint64")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		[FieldOffset(0)]
		public ulong Uint64;
		[NativeName(NativeNameType.Field, "float32")]
		[NativeName(NativeNameType.Type, "float")]
		[FieldOffset(0)]
		public float Float32;
		[NativeName(NativeNameType.Field, "float64")]
		[NativeName(NativeNameType.Type, "double")]
		[FieldOffset(0)]
		public double Float64;

		public unsafe VkPerformanceCounterResultKHR(int int32 = default, long int64 = default, uint uint32 = default, ulong uint64 = default, float float32 = default, double float64 = default)
		{
			Int32 = int32;
			Int64 = int64;
			Uint32 = uint32;
			Uint64 = uint64;
			Float32 = float32;
			Float64 = float64;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkAcquireProfilingLockInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkAcquireProfilingLockInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "VkAcquireProfilingLockFlagsKHR")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "timeout")]
		[NativeName(NativeNameType.Type, "uint64_t")]
		public ulong Timeout;

		public unsafe VkAcquireProfilingLockInfoKHR(VkStructureType sType = default, void* pNext = default, uint flags = default, ulong timeout = default)
		{
			SType = sType;
			PNext = pNext;
			Flags = flags;
			Timeout = timeout;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPerformanceQuerySubmitInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPerformanceQuerySubmitInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "counterPassIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CounterPassIndex;

		public unsafe VkPerformanceQuerySubmitInfoKHR(VkStructureType sType = default, void* pNext = default, uint counterPassIndex = default)
		{
			SType = sType;
			PNext = pNext;
			CounterPassIndex = counterPassIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceSurfaceInfo2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceSurfaceInfo2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "surface")]
		[NativeName(NativeNameType.Type, "VkSurfaceKHR")]
		public VkSurfaceKHR Surface;

		public unsafe VkPhysicalDeviceSurfaceInfo2KHR(VkStructureType sType = default, void* pNext = default, VkSurfaceKHR surface = default)
		{
			SType = sType;
			PNext = pNext;
			Surface = surface;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceCapabilities2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceCapabilities2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "surfaceCapabilities")]
		[NativeName(NativeNameType.Type, "VkSurfaceCapabilitiesKHR")]
		public VkSurfaceCapabilitiesKHR SurfaceCapabilities;

		public unsafe VkSurfaceCapabilities2KHR(VkStructureType sType = default, void* pNext = default, VkSurfaceCapabilitiesKHR surfaceCapabilities = default)
		{
			SType = sType;
			PNext = pNext;
			SurfaceCapabilities = surfaceCapabilities;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceFormat2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceFormat2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "surfaceFormat")]
		[NativeName(NativeNameType.Type, "VkSurfaceFormatKHR")]
		public VkSurfaceFormatKHR SurfaceFormat;

		public unsafe VkSurfaceFormat2KHR(VkStructureType sType = default, void* pNext = default, VkSurfaceFormatKHR surfaceFormat = default)
		{
			SType = sType;
			PNext = pNext;
			SurfaceFormat = surfaceFormat;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayProperties2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayProperties2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "displayProperties")]
		[NativeName(NativeNameType.Type, "VkDisplayPropertiesKHR")]
		public VkDisplayPropertiesKHR DisplayProperties;

		public unsafe VkDisplayProperties2KHR(VkStructureType sType = default, void* pNext = default, VkDisplayPropertiesKHR displayProperties = default)
		{
			SType = sType;
			PNext = pNext;
			DisplayProperties = displayProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPlaneProperties2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPlaneProperties2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "displayPlaneProperties")]
		[NativeName(NativeNameType.Type, "VkDisplayPlanePropertiesKHR")]
		public VkDisplayPlanePropertiesKHR DisplayPlaneProperties;

		public unsafe VkDisplayPlaneProperties2KHR(VkStructureType sType = default, void* pNext = default, VkDisplayPlanePropertiesKHR displayPlaneProperties = default)
		{
			SType = sType;
			PNext = pNext;
			DisplayPlaneProperties = displayPlaneProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayModeProperties2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayModeProperties2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "displayModeProperties")]
		[NativeName(NativeNameType.Type, "VkDisplayModePropertiesKHR")]
		public VkDisplayModePropertiesKHR DisplayModeProperties;

		public unsafe VkDisplayModeProperties2KHR(VkStructureType sType = default, void* pNext = default, VkDisplayModePropertiesKHR displayModeProperties = default)
		{
			SType = sType;
			PNext = pNext;
			DisplayModeProperties = displayModeProperties;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPlaneInfo2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPlaneInfo2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "VkDisplayModeKHR")]
		public VkDisplayModeKHR Mode;
		[NativeName(NativeNameType.Field, "planeIndex")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PlaneIndex;

		public unsafe VkDisplayPlaneInfo2KHR(VkStructureType sType = default, void* pNext = default, VkDisplayModeKHR mode = default, uint planeIndex = default)
		{
			SType = sType;
			PNext = pNext;
			Mode = mode;
			PlaneIndex = planeIndex;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDisplayPlaneCapabilities2KHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDisplayPlaneCapabilities2KHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "capabilities")]
		[NativeName(NativeNameType.Type, "VkDisplayPlaneCapabilitiesKHR")]
		public VkDisplayPlaneCapabilitiesKHR Capabilities;

		public unsafe VkDisplayPlaneCapabilities2KHR(VkStructureType sType = default, void* pNext = default, VkDisplayPlaneCapabilitiesKHR capabilities = default)
		{
			SType = sType;
			PNext = pNext;
			Capabilities = capabilities;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceShaderClockFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceShaderClockFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "shaderSubgroupClock")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderSubgroupClock;
		[NativeName(NativeNameType.Field, "shaderDeviceClock")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint ShaderDeviceClock;

		public unsafe VkPhysicalDeviceShaderClockFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint shaderSubgroupClock = default, uint shaderDeviceClock = default)
		{
			SType = sType;
			PNext = pNext;
			ShaderSubgroupClock = shaderSubgroupClock;
			ShaderDeviceClock = shaderDeviceClock;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265DecPicBufMgr")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265DecPicBufMgr
	{
		[NativeName(NativeNameType.Field, "max_latency_increase_plus1")]
		[NativeName(NativeNameType.Type, "uint32_t[7]")]
		public uint MaxLatencyIncreasePlus1_0;
		public uint MaxLatencyIncreasePlus1_1;
		public uint MaxLatencyIncreasePlus1_2;
		public uint MaxLatencyIncreasePlus1_3;
		public uint MaxLatencyIncreasePlus1_4;
		public uint MaxLatencyIncreasePlus1_5;
		public uint MaxLatencyIncreasePlus1_6;
		[NativeName(NativeNameType.Field, "max_dec_pic_buffering_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte MaxDecPicBufferingMinus1_0;
		public byte MaxDecPicBufferingMinus1_1;
		public byte MaxDecPicBufferingMinus1_2;
		public byte MaxDecPicBufferingMinus1_3;
		public byte MaxDecPicBufferingMinus1_4;
		public byte MaxDecPicBufferingMinus1_5;
		public byte MaxDecPicBufferingMinus1_6;
		[NativeName(NativeNameType.Field, "max_num_reorder_pics")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte MaxNumReorderPics_0;
		public byte MaxNumReorderPics_1;
		public byte MaxNumReorderPics_2;
		public byte MaxNumReorderPics_3;
		public byte MaxNumReorderPics_4;
		public byte MaxNumReorderPics_5;
		public byte MaxNumReorderPics_6;

		public unsafe StdVideoH265DecPicBufMgr(uint* maxLatencyIncreaseplus1 = default, byte* maxDecPicBufferingminus1 = default, byte* maxNumReorderPics = default)
		{
			if (maxLatencyIncreaseplus1 != default)
			{
				MaxLatencyIncreasePlus1_0 = maxLatencyIncreaseplus1[0];
				MaxLatencyIncreasePlus1_1 = maxLatencyIncreaseplus1[1];
				MaxLatencyIncreasePlus1_2 = maxLatencyIncreaseplus1[2];
				MaxLatencyIncreasePlus1_3 = maxLatencyIncreaseplus1[3];
				MaxLatencyIncreasePlus1_4 = maxLatencyIncreaseplus1[4];
				MaxLatencyIncreasePlus1_5 = maxLatencyIncreaseplus1[5];
				MaxLatencyIncreasePlus1_6 = maxLatencyIncreaseplus1[6];
			}
			if (maxDecPicBufferingminus1 != default)
			{
				MaxDecPicBufferingMinus1_0 = maxDecPicBufferingminus1[0];
				MaxDecPicBufferingMinus1_1 = maxDecPicBufferingminus1[1];
				MaxDecPicBufferingMinus1_2 = maxDecPicBufferingminus1[2];
				MaxDecPicBufferingMinus1_3 = maxDecPicBufferingminus1[3];
				MaxDecPicBufferingMinus1_4 = maxDecPicBufferingminus1[4];
				MaxDecPicBufferingMinus1_5 = maxDecPicBufferingminus1[5];
				MaxDecPicBufferingMinus1_6 = maxDecPicBufferingminus1[6];
			}
			if (maxNumReorderPics != default)
			{
				MaxNumReorderPics_0 = maxNumReorderPics[0];
				MaxNumReorderPics_1 = maxNumReorderPics[1];
				MaxNumReorderPics_2 = maxNumReorderPics[2];
				MaxNumReorderPics_3 = maxNumReorderPics[3];
				MaxNumReorderPics_4 = maxNumReorderPics[4];
				MaxNumReorderPics_5 = maxNumReorderPics[5];
				MaxNumReorderPics_6 = maxNumReorderPics[6];
			}
		}

		public unsafe StdVideoH265DecPicBufMgr(Span<uint> maxLatencyIncreaseplus1 = default, Span<byte> maxDecPicBufferingminus1 = default, Span<byte> maxNumReorderPics = default)
		{
			if (maxLatencyIncreaseplus1 != default)
			{
				MaxLatencyIncreasePlus1_0 = maxLatencyIncreaseplus1[0];
				MaxLatencyIncreasePlus1_1 = maxLatencyIncreaseplus1[1];
				MaxLatencyIncreasePlus1_2 = maxLatencyIncreaseplus1[2];
				MaxLatencyIncreasePlus1_3 = maxLatencyIncreaseplus1[3];
				MaxLatencyIncreasePlus1_4 = maxLatencyIncreaseplus1[4];
				MaxLatencyIncreasePlus1_5 = maxLatencyIncreaseplus1[5];
				MaxLatencyIncreasePlus1_6 = maxLatencyIncreaseplus1[6];
			}
			if (maxDecPicBufferingminus1 != default)
			{
				MaxDecPicBufferingMinus1_0 = maxDecPicBufferingminus1[0];
				MaxDecPicBufferingMinus1_1 = maxDecPicBufferingminus1[1];
				MaxDecPicBufferingMinus1_2 = maxDecPicBufferingminus1[2];
				MaxDecPicBufferingMinus1_3 = maxDecPicBufferingminus1[3];
				MaxDecPicBufferingMinus1_4 = maxDecPicBufferingminus1[4];
				MaxDecPicBufferingMinus1_5 = maxDecPicBufferingminus1[5];
				MaxDecPicBufferingMinus1_6 = maxDecPicBufferingminus1[6];
			}
			if (maxNumReorderPics != default)
			{
				MaxNumReorderPics_0 = maxNumReorderPics[0];
				MaxNumReorderPics_1 = maxNumReorderPics[1];
				MaxNumReorderPics_2 = maxNumReorderPics[2];
				MaxNumReorderPics_3 = maxNumReorderPics[3];
				MaxNumReorderPics_4 = maxNumReorderPics[4];
				MaxNumReorderPics_5 = maxNumReorderPics[5];
				MaxNumReorderPics_6 = maxNumReorderPics[6];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SubLayerHrdParameters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SubLayerHrdParameters
	{
		[NativeName(NativeNameType.Field, "bit_rate_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint BitRateValueMinus1_0;
		public uint BitRateValueMinus1_1;
		public uint BitRateValueMinus1_2;
		public uint BitRateValueMinus1_3;
		public uint BitRateValueMinus1_4;
		public uint BitRateValueMinus1_5;
		public uint BitRateValueMinus1_6;
		public uint BitRateValueMinus1_7;
		public uint BitRateValueMinus1_8;
		public uint BitRateValueMinus1_9;
		public uint BitRateValueMinus1_10;
		public uint BitRateValueMinus1_11;
		public uint BitRateValueMinus1_12;
		public uint BitRateValueMinus1_13;
		public uint BitRateValueMinus1_14;
		public uint BitRateValueMinus1_15;
		public uint BitRateValueMinus1_16;
		public uint BitRateValueMinus1_17;
		public uint BitRateValueMinus1_18;
		public uint BitRateValueMinus1_19;
		public uint BitRateValueMinus1_20;
		public uint BitRateValueMinus1_21;
		public uint BitRateValueMinus1_22;
		public uint BitRateValueMinus1_23;
		public uint BitRateValueMinus1_24;
		public uint BitRateValueMinus1_25;
		public uint BitRateValueMinus1_26;
		public uint BitRateValueMinus1_27;
		public uint BitRateValueMinus1_28;
		public uint BitRateValueMinus1_29;
		public uint BitRateValueMinus1_30;
		public uint BitRateValueMinus1_31;
		[NativeName(NativeNameType.Field, "cpb_size_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint CpbSizeValueMinus1_0;
		public uint CpbSizeValueMinus1_1;
		public uint CpbSizeValueMinus1_2;
		public uint CpbSizeValueMinus1_3;
		public uint CpbSizeValueMinus1_4;
		public uint CpbSizeValueMinus1_5;
		public uint CpbSizeValueMinus1_6;
		public uint CpbSizeValueMinus1_7;
		public uint CpbSizeValueMinus1_8;
		public uint CpbSizeValueMinus1_9;
		public uint CpbSizeValueMinus1_10;
		public uint CpbSizeValueMinus1_11;
		public uint CpbSizeValueMinus1_12;
		public uint CpbSizeValueMinus1_13;
		public uint CpbSizeValueMinus1_14;
		public uint CpbSizeValueMinus1_15;
		public uint CpbSizeValueMinus1_16;
		public uint CpbSizeValueMinus1_17;
		public uint CpbSizeValueMinus1_18;
		public uint CpbSizeValueMinus1_19;
		public uint CpbSizeValueMinus1_20;
		public uint CpbSizeValueMinus1_21;
		public uint CpbSizeValueMinus1_22;
		public uint CpbSizeValueMinus1_23;
		public uint CpbSizeValueMinus1_24;
		public uint CpbSizeValueMinus1_25;
		public uint CpbSizeValueMinus1_26;
		public uint CpbSizeValueMinus1_27;
		public uint CpbSizeValueMinus1_28;
		public uint CpbSizeValueMinus1_29;
		public uint CpbSizeValueMinus1_30;
		public uint CpbSizeValueMinus1_31;
		[NativeName(NativeNameType.Field, "cpb_size_du_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint CpbSizeDuValueMinus1_0;
		public uint CpbSizeDuValueMinus1_1;
		public uint CpbSizeDuValueMinus1_2;
		public uint CpbSizeDuValueMinus1_3;
		public uint CpbSizeDuValueMinus1_4;
		public uint CpbSizeDuValueMinus1_5;
		public uint CpbSizeDuValueMinus1_6;
		public uint CpbSizeDuValueMinus1_7;
		public uint CpbSizeDuValueMinus1_8;
		public uint CpbSizeDuValueMinus1_9;
		public uint CpbSizeDuValueMinus1_10;
		public uint CpbSizeDuValueMinus1_11;
		public uint CpbSizeDuValueMinus1_12;
		public uint CpbSizeDuValueMinus1_13;
		public uint CpbSizeDuValueMinus1_14;
		public uint CpbSizeDuValueMinus1_15;
		public uint CpbSizeDuValueMinus1_16;
		public uint CpbSizeDuValueMinus1_17;
		public uint CpbSizeDuValueMinus1_18;
		public uint CpbSizeDuValueMinus1_19;
		public uint CpbSizeDuValueMinus1_20;
		public uint CpbSizeDuValueMinus1_21;
		public uint CpbSizeDuValueMinus1_22;
		public uint CpbSizeDuValueMinus1_23;
		public uint CpbSizeDuValueMinus1_24;
		public uint CpbSizeDuValueMinus1_25;
		public uint CpbSizeDuValueMinus1_26;
		public uint CpbSizeDuValueMinus1_27;
		public uint CpbSizeDuValueMinus1_28;
		public uint CpbSizeDuValueMinus1_29;
		public uint CpbSizeDuValueMinus1_30;
		public uint CpbSizeDuValueMinus1_31;
		[NativeName(NativeNameType.Field, "bit_rate_du_value_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint BitRateDuValueMinus1_0;
		public uint BitRateDuValueMinus1_1;
		public uint BitRateDuValueMinus1_2;
		public uint BitRateDuValueMinus1_3;
		public uint BitRateDuValueMinus1_4;
		public uint BitRateDuValueMinus1_5;
		public uint BitRateDuValueMinus1_6;
		public uint BitRateDuValueMinus1_7;
		public uint BitRateDuValueMinus1_8;
		public uint BitRateDuValueMinus1_9;
		public uint BitRateDuValueMinus1_10;
		public uint BitRateDuValueMinus1_11;
		public uint BitRateDuValueMinus1_12;
		public uint BitRateDuValueMinus1_13;
		public uint BitRateDuValueMinus1_14;
		public uint BitRateDuValueMinus1_15;
		public uint BitRateDuValueMinus1_16;
		public uint BitRateDuValueMinus1_17;
		public uint BitRateDuValueMinus1_18;
		public uint BitRateDuValueMinus1_19;
		public uint BitRateDuValueMinus1_20;
		public uint BitRateDuValueMinus1_21;
		public uint BitRateDuValueMinus1_22;
		public uint BitRateDuValueMinus1_23;
		public uint BitRateDuValueMinus1_24;
		public uint BitRateDuValueMinus1_25;
		public uint BitRateDuValueMinus1_26;
		public uint BitRateDuValueMinus1_27;
		public uint BitRateDuValueMinus1_28;
		public uint BitRateDuValueMinus1_29;
		public uint BitRateDuValueMinus1_30;
		public uint BitRateDuValueMinus1_31;
		[NativeName(NativeNameType.Field, "cbr_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CbrFlag;

		public unsafe StdVideoH265SubLayerHrdParameters(uint* bitRateValueminus1 = default, uint* cpbSizeValueminus1 = default, uint* cpbSizeDuValueminus1 = default, uint* bitRateDuValueminus1 = default, uint cbrFlag = default)
		{
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cpbSizeDuValueminus1 != default)
			{
				CpbSizeDuValueMinus1_0 = cpbSizeDuValueminus1[0];
				CpbSizeDuValueMinus1_1 = cpbSizeDuValueminus1[1];
				CpbSizeDuValueMinus1_2 = cpbSizeDuValueminus1[2];
				CpbSizeDuValueMinus1_3 = cpbSizeDuValueminus1[3];
				CpbSizeDuValueMinus1_4 = cpbSizeDuValueminus1[4];
				CpbSizeDuValueMinus1_5 = cpbSizeDuValueminus1[5];
				CpbSizeDuValueMinus1_6 = cpbSizeDuValueminus1[6];
				CpbSizeDuValueMinus1_7 = cpbSizeDuValueminus1[7];
				CpbSizeDuValueMinus1_8 = cpbSizeDuValueminus1[8];
				CpbSizeDuValueMinus1_9 = cpbSizeDuValueminus1[9];
				CpbSizeDuValueMinus1_10 = cpbSizeDuValueminus1[10];
				CpbSizeDuValueMinus1_11 = cpbSizeDuValueminus1[11];
				CpbSizeDuValueMinus1_12 = cpbSizeDuValueminus1[12];
				CpbSizeDuValueMinus1_13 = cpbSizeDuValueminus1[13];
				CpbSizeDuValueMinus1_14 = cpbSizeDuValueminus1[14];
				CpbSizeDuValueMinus1_15 = cpbSizeDuValueminus1[15];
				CpbSizeDuValueMinus1_16 = cpbSizeDuValueminus1[16];
				CpbSizeDuValueMinus1_17 = cpbSizeDuValueminus1[17];
				CpbSizeDuValueMinus1_18 = cpbSizeDuValueminus1[18];
				CpbSizeDuValueMinus1_19 = cpbSizeDuValueminus1[19];
				CpbSizeDuValueMinus1_20 = cpbSizeDuValueminus1[20];
				CpbSizeDuValueMinus1_21 = cpbSizeDuValueminus1[21];
				CpbSizeDuValueMinus1_22 = cpbSizeDuValueminus1[22];
				CpbSizeDuValueMinus1_23 = cpbSizeDuValueminus1[23];
				CpbSizeDuValueMinus1_24 = cpbSizeDuValueminus1[24];
				CpbSizeDuValueMinus1_25 = cpbSizeDuValueminus1[25];
				CpbSizeDuValueMinus1_26 = cpbSizeDuValueminus1[26];
				CpbSizeDuValueMinus1_27 = cpbSizeDuValueminus1[27];
				CpbSizeDuValueMinus1_28 = cpbSizeDuValueminus1[28];
				CpbSizeDuValueMinus1_29 = cpbSizeDuValueminus1[29];
				CpbSizeDuValueMinus1_30 = cpbSizeDuValueminus1[30];
				CpbSizeDuValueMinus1_31 = cpbSizeDuValueminus1[31];
			}
			if (bitRateDuValueminus1 != default)
			{
				BitRateDuValueMinus1_0 = bitRateDuValueminus1[0];
				BitRateDuValueMinus1_1 = bitRateDuValueminus1[1];
				BitRateDuValueMinus1_2 = bitRateDuValueminus1[2];
				BitRateDuValueMinus1_3 = bitRateDuValueminus1[3];
				BitRateDuValueMinus1_4 = bitRateDuValueminus1[4];
				BitRateDuValueMinus1_5 = bitRateDuValueminus1[5];
				BitRateDuValueMinus1_6 = bitRateDuValueminus1[6];
				BitRateDuValueMinus1_7 = bitRateDuValueminus1[7];
				BitRateDuValueMinus1_8 = bitRateDuValueminus1[8];
				BitRateDuValueMinus1_9 = bitRateDuValueminus1[9];
				BitRateDuValueMinus1_10 = bitRateDuValueminus1[10];
				BitRateDuValueMinus1_11 = bitRateDuValueminus1[11];
				BitRateDuValueMinus1_12 = bitRateDuValueminus1[12];
				BitRateDuValueMinus1_13 = bitRateDuValueminus1[13];
				BitRateDuValueMinus1_14 = bitRateDuValueminus1[14];
				BitRateDuValueMinus1_15 = bitRateDuValueminus1[15];
				BitRateDuValueMinus1_16 = bitRateDuValueminus1[16];
				BitRateDuValueMinus1_17 = bitRateDuValueminus1[17];
				BitRateDuValueMinus1_18 = bitRateDuValueminus1[18];
				BitRateDuValueMinus1_19 = bitRateDuValueminus1[19];
				BitRateDuValueMinus1_20 = bitRateDuValueminus1[20];
				BitRateDuValueMinus1_21 = bitRateDuValueminus1[21];
				BitRateDuValueMinus1_22 = bitRateDuValueminus1[22];
				BitRateDuValueMinus1_23 = bitRateDuValueminus1[23];
				BitRateDuValueMinus1_24 = bitRateDuValueminus1[24];
				BitRateDuValueMinus1_25 = bitRateDuValueminus1[25];
				BitRateDuValueMinus1_26 = bitRateDuValueminus1[26];
				BitRateDuValueMinus1_27 = bitRateDuValueminus1[27];
				BitRateDuValueMinus1_28 = bitRateDuValueminus1[28];
				BitRateDuValueMinus1_29 = bitRateDuValueminus1[29];
				BitRateDuValueMinus1_30 = bitRateDuValueminus1[30];
				BitRateDuValueMinus1_31 = bitRateDuValueminus1[31];
			}
			CbrFlag = cbrFlag;
		}

		public unsafe StdVideoH265SubLayerHrdParameters(Span<uint> bitRateValueminus1 = default, Span<uint> cpbSizeValueminus1 = default, Span<uint> cpbSizeDuValueminus1 = default, Span<uint> bitRateDuValueminus1 = default, uint cbrFlag = default)
		{
			if (bitRateValueminus1 != default)
			{
				BitRateValueMinus1_0 = bitRateValueminus1[0];
				BitRateValueMinus1_1 = bitRateValueminus1[1];
				BitRateValueMinus1_2 = bitRateValueminus1[2];
				BitRateValueMinus1_3 = bitRateValueminus1[3];
				BitRateValueMinus1_4 = bitRateValueminus1[4];
				BitRateValueMinus1_5 = bitRateValueminus1[5];
				BitRateValueMinus1_6 = bitRateValueminus1[6];
				BitRateValueMinus1_7 = bitRateValueminus1[7];
				BitRateValueMinus1_8 = bitRateValueminus1[8];
				BitRateValueMinus1_9 = bitRateValueminus1[9];
				BitRateValueMinus1_10 = bitRateValueminus1[10];
				BitRateValueMinus1_11 = bitRateValueminus1[11];
				BitRateValueMinus1_12 = bitRateValueminus1[12];
				BitRateValueMinus1_13 = bitRateValueminus1[13];
				BitRateValueMinus1_14 = bitRateValueminus1[14];
				BitRateValueMinus1_15 = bitRateValueminus1[15];
				BitRateValueMinus1_16 = bitRateValueminus1[16];
				BitRateValueMinus1_17 = bitRateValueminus1[17];
				BitRateValueMinus1_18 = bitRateValueminus1[18];
				BitRateValueMinus1_19 = bitRateValueminus1[19];
				BitRateValueMinus1_20 = bitRateValueminus1[20];
				BitRateValueMinus1_21 = bitRateValueminus1[21];
				BitRateValueMinus1_22 = bitRateValueminus1[22];
				BitRateValueMinus1_23 = bitRateValueminus1[23];
				BitRateValueMinus1_24 = bitRateValueminus1[24];
				BitRateValueMinus1_25 = bitRateValueminus1[25];
				BitRateValueMinus1_26 = bitRateValueminus1[26];
				BitRateValueMinus1_27 = bitRateValueminus1[27];
				BitRateValueMinus1_28 = bitRateValueminus1[28];
				BitRateValueMinus1_29 = bitRateValueminus1[29];
				BitRateValueMinus1_30 = bitRateValueminus1[30];
				BitRateValueMinus1_31 = bitRateValueminus1[31];
			}
			if (cpbSizeValueminus1 != default)
			{
				CpbSizeValueMinus1_0 = cpbSizeValueminus1[0];
				CpbSizeValueMinus1_1 = cpbSizeValueminus1[1];
				CpbSizeValueMinus1_2 = cpbSizeValueminus1[2];
				CpbSizeValueMinus1_3 = cpbSizeValueminus1[3];
				CpbSizeValueMinus1_4 = cpbSizeValueminus1[4];
				CpbSizeValueMinus1_5 = cpbSizeValueminus1[5];
				CpbSizeValueMinus1_6 = cpbSizeValueminus1[6];
				CpbSizeValueMinus1_7 = cpbSizeValueminus1[7];
				CpbSizeValueMinus1_8 = cpbSizeValueminus1[8];
				CpbSizeValueMinus1_9 = cpbSizeValueminus1[9];
				CpbSizeValueMinus1_10 = cpbSizeValueminus1[10];
				CpbSizeValueMinus1_11 = cpbSizeValueminus1[11];
				CpbSizeValueMinus1_12 = cpbSizeValueminus1[12];
				CpbSizeValueMinus1_13 = cpbSizeValueminus1[13];
				CpbSizeValueMinus1_14 = cpbSizeValueminus1[14];
				CpbSizeValueMinus1_15 = cpbSizeValueminus1[15];
				CpbSizeValueMinus1_16 = cpbSizeValueminus1[16];
				CpbSizeValueMinus1_17 = cpbSizeValueminus1[17];
				CpbSizeValueMinus1_18 = cpbSizeValueminus1[18];
				CpbSizeValueMinus1_19 = cpbSizeValueminus1[19];
				CpbSizeValueMinus1_20 = cpbSizeValueminus1[20];
				CpbSizeValueMinus1_21 = cpbSizeValueminus1[21];
				CpbSizeValueMinus1_22 = cpbSizeValueminus1[22];
				CpbSizeValueMinus1_23 = cpbSizeValueminus1[23];
				CpbSizeValueMinus1_24 = cpbSizeValueminus1[24];
				CpbSizeValueMinus1_25 = cpbSizeValueminus1[25];
				CpbSizeValueMinus1_26 = cpbSizeValueminus1[26];
				CpbSizeValueMinus1_27 = cpbSizeValueminus1[27];
				CpbSizeValueMinus1_28 = cpbSizeValueminus1[28];
				CpbSizeValueMinus1_29 = cpbSizeValueminus1[29];
				CpbSizeValueMinus1_30 = cpbSizeValueminus1[30];
				CpbSizeValueMinus1_31 = cpbSizeValueminus1[31];
			}
			if (cpbSizeDuValueminus1 != default)
			{
				CpbSizeDuValueMinus1_0 = cpbSizeDuValueminus1[0];
				CpbSizeDuValueMinus1_1 = cpbSizeDuValueminus1[1];
				CpbSizeDuValueMinus1_2 = cpbSizeDuValueminus1[2];
				CpbSizeDuValueMinus1_3 = cpbSizeDuValueminus1[3];
				CpbSizeDuValueMinus1_4 = cpbSizeDuValueminus1[4];
				CpbSizeDuValueMinus1_5 = cpbSizeDuValueminus1[5];
				CpbSizeDuValueMinus1_6 = cpbSizeDuValueminus1[6];
				CpbSizeDuValueMinus1_7 = cpbSizeDuValueminus1[7];
				CpbSizeDuValueMinus1_8 = cpbSizeDuValueminus1[8];
				CpbSizeDuValueMinus1_9 = cpbSizeDuValueminus1[9];
				CpbSizeDuValueMinus1_10 = cpbSizeDuValueminus1[10];
				CpbSizeDuValueMinus1_11 = cpbSizeDuValueminus1[11];
				CpbSizeDuValueMinus1_12 = cpbSizeDuValueminus1[12];
				CpbSizeDuValueMinus1_13 = cpbSizeDuValueminus1[13];
				CpbSizeDuValueMinus1_14 = cpbSizeDuValueminus1[14];
				CpbSizeDuValueMinus1_15 = cpbSizeDuValueminus1[15];
				CpbSizeDuValueMinus1_16 = cpbSizeDuValueminus1[16];
				CpbSizeDuValueMinus1_17 = cpbSizeDuValueminus1[17];
				CpbSizeDuValueMinus1_18 = cpbSizeDuValueminus1[18];
				CpbSizeDuValueMinus1_19 = cpbSizeDuValueminus1[19];
				CpbSizeDuValueMinus1_20 = cpbSizeDuValueminus1[20];
				CpbSizeDuValueMinus1_21 = cpbSizeDuValueminus1[21];
				CpbSizeDuValueMinus1_22 = cpbSizeDuValueminus1[22];
				CpbSizeDuValueMinus1_23 = cpbSizeDuValueminus1[23];
				CpbSizeDuValueMinus1_24 = cpbSizeDuValueminus1[24];
				CpbSizeDuValueMinus1_25 = cpbSizeDuValueminus1[25];
				CpbSizeDuValueMinus1_26 = cpbSizeDuValueminus1[26];
				CpbSizeDuValueMinus1_27 = cpbSizeDuValueminus1[27];
				CpbSizeDuValueMinus1_28 = cpbSizeDuValueminus1[28];
				CpbSizeDuValueMinus1_29 = cpbSizeDuValueminus1[29];
				CpbSizeDuValueMinus1_30 = cpbSizeDuValueminus1[30];
				CpbSizeDuValueMinus1_31 = cpbSizeDuValueminus1[31];
			}
			if (bitRateDuValueminus1 != default)
			{
				BitRateDuValueMinus1_0 = bitRateDuValueminus1[0];
				BitRateDuValueMinus1_1 = bitRateDuValueminus1[1];
				BitRateDuValueMinus1_2 = bitRateDuValueminus1[2];
				BitRateDuValueMinus1_3 = bitRateDuValueminus1[3];
				BitRateDuValueMinus1_4 = bitRateDuValueminus1[4];
				BitRateDuValueMinus1_5 = bitRateDuValueminus1[5];
				BitRateDuValueMinus1_6 = bitRateDuValueminus1[6];
				BitRateDuValueMinus1_7 = bitRateDuValueminus1[7];
				BitRateDuValueMinus1_8 = bitRateDuValueminus1[8];
				BitRateDuValueMinus1_9 = bitRateDuValueminus1[9];
				BitRateDuValueMinus1_10 = bitRateDuValueminus1[10];
				BitRateDuValueMinus1_11 = bitRateDuValueminus1[11];
				BitRateDuValueMinus1_12 = bitRateDuValueminus1[12];
				BitRateDuValueMinus1_13 = bitRateDuValueminus1[13];
				BitRateDuValueMinus1_14 = bitRateDuValueminus1[14];
				BitRateDuValueMinus1_15 = bitRateDuValueminus1[15];
				BitRateDuValueMinus1_16 = bitRateDuValueminus1[16];
				BitRateDuValueMinus1_17 = bitRateDuValueminus1[17];
				BitRateDuValueMinus1_18 = bitRateDuValueminus1[18];
				BitRateDuValueMinus1_19 = bitRateDuValueminus1[19];
				BitRateDuValueMinus1_20 = bitRateDuValueminus1[20];
				BitRateDuValueMinus1_21 = bitRateDuValueminus1[21];
				BitRateDuValueMinus1_22 = bitRateDuValueminus1[22];
				BitRateDuValueMinus1_23 = bitRateDuValueminus1[23];
				BitRateDuValueMinus1_24 = bitRateDuValueminus1[24];
				BitRateDuValueMinus1_25 = bitRateDuValueminus1[25];
				BitRateDuValueMinus1_26 = bitRateDuValueminus1[26];
				BitRateDuValueMinus1_27 = bitRateDuValueminus1[27];
				BitRateDuValueMinus1_28 = bitRateDuValueminus1[28];
				BitRateDuValueMinus1_29 = bitRateDuValueminus1[29];
				BitRateDuValueMinus1_30 = bitRateDuValueminus1[30];
				BitRateDuValueMinus1_31 = bitRateDuValueminus1[31];
			}
			CbrFlag = cbrFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265HrdFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265HrdFlags
	{
		[NativeName(NativeNameType.Field, "nal_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NalHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "vcl_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VclHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "sub_pic_hrd_params_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPicHrdParamsPresentFlag;
		[NativeName(NativeNameType.Field, "sub_pic_cpb_params_in_pic_timing_sei_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubPicCpbParamsInPicTimingSeiFlag;
		[NativeName(NativeNameType.Field, "fixed_pic_rate_general_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FixedPicRateGeneralFlag;
		[NativeName(NativeNameType.Field, "fixed_pic_rate_within_cvs_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FixedPicRateWithinCvsFlag;
		[NativeName(NativeNameType.Field, "low_delay_hrd_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LowDelayHrdFlag;

		public unsafe StdVideoH265HrdFlags(uint nalHrdParametersPresentFlag = default, uint vclHrdParametersPresentFlag = default, uint subPicHrdParamsPresentFlag = default, uint subPicCpbParamsInPicTimingSeiFlag = default, uint fixedPicRateGeneralFlag = default, uint fixedPicRateWithinCvsFlag = default, uint lowDelayHrdFlag = default)
		{
			NalHrdParametersPresentFlag = nalHrdParametersPresentFlag;
			VclHrdParametersPresentFlag = vclHrdParametersPresentFlag;
			SubPicHrdParamsPresentFlag = subPicHrdParamsPresentFlag;
			SubPicCpbParamsInPicTimingSeiFlag = subPicCpbParamsInPicTimingSeiFlag;
			FixedPicRateGeneralFlag = fixedPicRateGeneralFlag;
			FixedPicRateWithinCvsFlag = fixedPicRateWithinCvsFlag;
			LowDelayHrdFlag = lowDelayHrdFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265HrdParameters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265HrdParameters
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265HrdFlags")]
		public StdVideoH265HrdFlags Flags;
		[NativeName(NativeNameType.Field, "tick_divisor_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TickDivisorMinus2;
		[NativeName(NativeNameType.Field, "du_cpb_removal_delay_increment_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DuCpbRemovalDelayIncrementLengthMinus1;
		[NativeName(NativeNameType.Field, "dpb_output_delay_du_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DpbOutputDelayDuLengthMinus1;
		[NativeName(NativeNameType.Field, "bit_rate_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitRateScale;
		[NativeName(NativeNameType.Field, "cpb_size_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbSizeScale;
		[NativeName(NativeNameType.Field, "cpb_size_du_scale")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte CpbSizeDuScale;
		[NativeName(NativeNameType.Field, "initial_cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte InitialCpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "au_cpb_removal_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte AuCpbRemovalDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "dpb_output_delay_length_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DpbOutputDelayLengthMinus1;
		[NativeName(NativeNameType.Field, "cpb_cnt_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t[7]")]
		public byte CpbCntMinus1_0;
		public byte CpbCntMinus1_1;
		public byte CpbCntMinus1_2;
		public byte CpbCntMinus1_3;
		public byte CpbCntMinus1_4;
		public byte CpbCntMinus1_5;
		public byte CpbCntMinus1_6;
		[NativeName(NativeNameType.Field, "elemental_duration_in_tc_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[7]")]
		public ushort ElementalDurationInTcMinus1_0;
		public ushort ElementalDurationInTcMinus1_1;
		public ushort ElementalDurationInTcMinus1_2;
		public ushort ElementalDurationInTcMinus1_3;
		public ushort ElementalDurationInTcMinus1_4;
		public ushort ElementalDurationInTcMinus1_5;
		public ushort ElementalDurationInTcMinus1_6;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "uint16_t[3]")]
		public ushort Reserved_0;
		public ushort Reserved_1;
		public ushort Reserved_2;
		[NativeName(NativeNameType.Field, "pSubLayerHrdParametersNal")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SubLayerHrdParameters*")]
		public unsafe StdVideoH265SubLayerHrdParameters* PSubLayerHrdParametersNal;
		[NativeName(NativeNameType.Field, "pSubLayerHrdParametersVcl")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SubLayerHrdParameters*")]
		public unsafe StdVideoH265SubLayerHrdParameters* PSubLayerHrdParametersVcl;

		public unsafe StdVideoH265HrdParameters(StdVideoH265HrdFlags flags = default, byte tickDivisorminus2 = default, byte duCpbRemovalDelayIncrementLengthminus1 = default, byte dpbOutputDelayDuLengthminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte cpbSizeDuScale = default, byte initialCpbRemovalDelayLengthminus1 = default, byte auCpbRemovalDelayLengthminus1 = default, byte dpbOutputDelayLengthminus1 = default, byte* cpbCntminus1 = default, ushort* elementalDurationInTcminus1 = default, ushort* reserved = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl = default)
		{
			Flags = flags;
			TickDivisorMinus2 = tickDivisorminus2;
			DuCpbRemovalDelayIncrementLengthMinus1 = duCpbRemovalDelayIncrementLengthminus1;
			DpbOutputDelayDuLengthMinus1 = dpbOutputDelayDuLengthminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			CpbSizeDuScale = cpbSizeDuScale;
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			AuCpbRemovalDelayLengthMinus1 = auCpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			if (cpbCntminus1 != default)
			{
				CpbCntMinus1_0 = cpbCntminus1[0];
				CpbCntMinus1_1 = cpbCntminus1[1];
				CpbCntMinus1_2 = cpbCntminus1[2];
				CpbCntMinus1_3 = cpbCntminus1[3];
				CpbCntMinus1_4 = cpbCntminus1[4];
				CpbCntMinus1_5 = cpbCntminus1[5];
				CpbCntMinus1_6 = cpbCntminus1[6];
			}
			if (elementalDurationInTcminus1 != default)
			{
				ElementalDurationInTcMinus1_0 = elementalDurationInTcminus1[0];
				ElementalDurationInTcMinus1_1 = elementalDurationInTcminus1[1];
				ElementalDurationInTcMinus1_2 = elementalDurationInTcminus1[2];
				ElementalDurationInTcMinus1_3 = elementalDurationInTcminus1[3];
				ElementalDurationInTcMinus1_4 = elementalDurationInTcminus1[4];
				ElementalDurationInTcMinus1_5 = elementalDurationInTcminus1[5];
				ElementalDurationInTcMinus1_6 = elementalDurationInTcminus1[6];
			}
			if (reserved != default)
			{
				Reserved_0 = reserved[0];
				Reserved_1 = reserved[1];
				Reserved_2 = reserved[2];
			}
			PSubLayerHrdParametersNal = pSubLayerHrdParametersNal;
			PSubLayerHrdParametersVcl = pSubLayerHrdParametersVcl;
		}

		public unsafe StdVideoH265HrdParameters(StdVideoH265HrdFlags flags = default, byte tickDivisorminus2 = default, byte duCpbRemovalDelayIncrementLengthminus1 = default, byte dpbOutputDelayDuLengthminus1 = default, byte bitRateScale = default, byte cpbSizeScale = default, byte cpbSizeDuScale = default, byte initialCpbRemovalDelayLengthminus1 = default, byte auCpbRemovalDelayLengthminus1 = default, byte dpbOutputDelayLengthminus1 = default, Span<byte> cpbCntminus1 = default, Span<ushort> elementalDurationInTcminus1 = default, Span<ushort> reserved = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal = default, StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl = default)
		{
			Flags = flags;
			TickDivisorMinus2 = tickDivisorminus2;
			DuCpbRemovalDelayIncrementLengthMinus1 = duCpbRemovalDelayIncrementLengthminus1;
			DpbOutputDelayDuLengthMinus1 = dpbOutputDelayDuLengthminus1;
			BitRateScale = bitRateScale;
			CpbSizeScale = cpbSizeScale;
			CpbSizeDuScale = cpbSizeDuScale;
			InitialCpbRemovalDelayLengthMinus1 = initialCpbRemovalDelayLengthminus1;
			AuCpbRemovalDelayLengthMinus1 = auCpbRemovalDelayLengthminus1;
			DpbOutputDelayLengthMinus1 = dpbOutputDelayLengthminus1;
			if (cpbCntminus1 != default)
			{
				CpbCntMinus1_0 = cpbCntminus1[0];
				CpbCntMinus1_1 = cpbCntminus1[1];
				CpbCntMinus1_2 = cpbCntminus1[2];
				CpbCntMinus1_3 = cpbCntminus1[3];
				CpbCntMinus1_4 = cpbCntminus1[4];
				CpbCntMinus1_5 = cpbCntminus1[5];
				CpbCntMinus1_6 = cpbCntminus1[6];
			}
			if (elementalDurationInTcminus1 != default)
			{
				ElementalDurationInTcMinus1_0 = elementalDurationInTcminus1[0];
				ElementalDurationInTcMinus1_1 = elementalDurationInTcminus1[1];
				ElementalDurationInTcMinus1_2 = elementalDurationInTcminus1[2];
				ElementalDurationInTcMinus1_3 = elementalDurationInTcminus1[3];
				ElementalDurationInTcMinus1_4 = elementalDurationInTcminus1[4];
				ElementalDurationInTcMinus1_5 = elementalDurationInTcminus1[5];
				ElementalDurationInTcMinus1_6 = elementalDurationInTcminus1[6];
			}
			if (reserved != default)
			{
				Reserved_0 = reserved[0];
				Reserved_1 = reserved[1];
				Reserved_2 = reserved[2];
			}
			PSubLayerHrdParametersNal = pSubLayerHrdParametersNal;
			PSubLayerHrdParametersVcl = pSubLayerHrdParametersVcl;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265VpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265VpsFlags
	{
		[NativeName(NativeNameType.Field, "vps_temporal_id_nesting_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTemporalIdNestingFlag;
		[NativeName(NativeNameType.Field, "vps_sub_layer_ordering_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsSubLayerOrderingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vps_timing_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTimingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vps_poc_proportional_to_timing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsPocProportionalToTimingFlag;

		public unsafe StdVideoH265VpsFlags(uint vpsTemporalIdNestingFlag = default, uint vpsSubLayerOrderingInfoPresentFlag = default, uint vpsTimingInfoPresentFlag = default, uint vpsPocProportionalToTimingFlag = default)
		{
			VpsTemporalIdNestingFlag = vpsTemporalIdNestingFlag;
			VpsSubLayerOrderingInfoPresentFlag = vpsSubLayerOrderingInfoPresentFlag;
			VpsTimingInfoPresentFlag = vpsTimingInfoPresentFlag;
			VpsPocProportionalToTimingFlag = vpsPocProportionalToTimingFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ProfileTierLevelFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ProfileTierLevelFlags
	{
		[NativeName(NativeNameType.Field, "general_tier_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralTierFlag;
		[NativeName(NativeNameType.Field, "general_progressive_source_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralProgressiveSourceFlag;
		[NativeName(NativeNameType.Field, "general_interlaced_source_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralInterlacedSourceFlag;
		[NativeName(NativeNameType.Field, "general_non_packed_constraint_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralNonPackedConstraintFlag;
		[NativeName(NativeNameType.Field, "general_frame_only_constraint_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint GeneralFrameOnlyConstraintFlag;

		public unsafe StdVideoH265ProfileTierLevelFlags(uint generalTierFlag = default, uint generalProgressiveSourceFlag = default, uint generalInterlacedSourceFlag = default, uint generalNonPackedConstraintFlag = default, uint generalFrameOnlyConstraintFlag = default)
		{
			GeneralTierFlag = generalTierFlag;
			GeneralProgressiveSourceFlag = generalProgressiveSourceFlag;
			GeneralInterlacedSourceFlag = generalInterlacedSourceFlag;
			GeneralNonPackedConstraintFlag = generalNonPackedConstraintFlag;
			GeneralFrameOnlyConstraintFlag = generalFrameOnlyConstraintFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ProfileTierLevel")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ProfileTierLevel
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265ProfileTierLevelFlags")]
		public StdVideoH265ProfileTierLevelFlags Flags;
		[NativeName(NativeNameType.Field, "general_profile_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265ProfileIdc")]
		public StdVideoH265ProfileIdc GeneralProfileIdc;
		[NativeName(NativeNameType.Field, "general_level_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265LevelIdc")]
		public StdVideoH265LevelIdc GeneralLevelIdc;

		public unsafe StdVideoH265ProfileTierLevel(StdVideoH265ProfileTierLevelFlags flags = default, StdVideoH265ProfileIdc generalProfileIdc = default, StdVideoH265LevelIdc generalLevelIdc = default)
		{
			Flags = flags;
			GeneralProfileIdc = generalProfileIdc;
			GeneralLevelIdc = generalLevelIdc;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265VideoParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265VideoParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265VpsFlags")]
		public StdVideoH265VpsFlags Flags;
		[NativeName(NativeNameType.Field, "vps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "vps_max_sub_layers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VpsMaxSubLayersMinus1;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "vps_num_units_in_tick")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsNumUnitsInTick;
		[NativeName(NativeNameType.Field, "vps_time_scale")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsTimeScale;
		[NativeName(NativeNameType.Field, "vps_num_ticks_poc_diff_one_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VpsNumTicksPocDiffOneMinus1;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved3;
		[NativeName(NativeNameType.Field, "pDecPicBufMgr")]
		[NativeName(NativeNameType.Type, "const StdVideoH265DecPicBufMgr*")]
		public unsafe StdVideoH265DecPicBufMgr* PDecPicBufMgr;
		[NativeName(NativeNameType.Field, "pHrdParameters")]
		[NativeName(NativeNameType.Type, "const StdVideoH265HrdParameters*")]
		public unsafe StdVideoH265HrdParameters* PHrdParameters;
		[NativeName(NativeNameType.Field, "pProfileTierLevel")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ProfileTierLevel*")]
		public unsafe StdVideoH265ProfileTierLevel* PProfileTierLevel;

		public unsafe StdVideoH265VideoParameterSet(StdVideoH265VpsFlags flags = default, byte vpsVideoParameterSetId = default, byte vpsMaxSubLayersminus1 = default, byte reserved1 = default, byte reserved2 = default, uint vpsNumUnitsInTick = default, uint vpsTimeScale = default, uint vpsNumTicksPocDiffOneminus1 = default, uint reserved3 = default, StdVideoH265DecPicBufMgr* pDecPicBufMgr = default, StdVideoH265HrdParameters* pHrdParameters = default, StdVideoH265ProfileTierLevel* pProfileTierLevel = default)
		{
			Flags = flags;
			VpsVideoParameterSetId = vpsVideoParameterSetId;
			VpsMaxSubLayersMinus1 = vpsMaxSubLayersminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			VpsNumUnitsInTick = vpsNumUnitsInTick;
			VpsTimeScale = vpsTimeScale;
			VpsNumTicksPocDiffOneMinus1 = vpsNumTicksPocDiffOneminus1;
			Reserved3 = reserved3;
			PDecPicBufMgr = pDecPicBufMgr;
			PHrdParameters = pHrdParameters;
			PProfileTierLevel = pProfileTierLevel;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ScalingLists")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ScalingLists
	{
		[NativeName(NativeNameType.Field, "ScalingList4x4")]
		[NativeName(NativeNameType.Type, "uint8_t[16][6]")]
		public unsafe byte* ScalingList4x4_0;
		public unsafe byte* ScalingList4x4_1;
		public unsafe byte* ScalingList4x4_2;
		public unsafe byte* ScalingList4x4_3;
		public unsafe byte* ScalingList4x4_4;
		public unsafe byte* ScalingList4x4_5;
		[NativeName(NativeNameType.Field, "ScalingList8x8")]
		[NativeName(NativeNameType.Type, "uint8_t[64][6]")]
		public unsafe byte* ScalingList8x8_0;
		public unsafe byte* ScalingList8x8_1;
		public unsafe byte* ScalingList8x8_2;
		public unsafe byte* ScalingList8x8_3;
		public unsafe byte* ScalingList8x8_4;
		public unsafe byte* ScalingList8x8_5;
		[NativeName(NativeNameType.Field, "ScalingList16x16")]
		[NativeName(NativeNameType.Type, "uint8_t[64][6]")]
		public unsafe byte* ScalingList16x16_0;
		public unsafe byte* ScalingList16x16_1;
		public unsafe byte* ScalingList16x16_2;
		public unsafe byte* ScalingList16x16_3;
		public unsafe byte* ScalingList16x16_4;
		public unsafe byte* ScalingList16x16_5;
		[NativeName(NativeNameType.Field, "ScalingList32x32")]
		[NativeName(NativeNameType.Type, "uint8_t[64][2]")]
		public unsafe byte* ScalingList32x32_0;
		public unsafe byte* ScalingList32x32_1;
		[NativeName(NativeNameType.Field, "ScalingListDCCoef16x16")]
		[NativeName(NativeNameType.Type, "uint8_t[6]")]
		public byte ScalingListDCCoef16x16_0;
		public byte ScalingListDCCoef16x16_1;
		public byte ScalingListDCCoef16x16_2;
		public byte ScalingListDCCoef16x16_3;
		public byte ScalingListDCCoef16x16_4;
		public byte ScalingListDCCoef16x16_5;
		[NativeName(NativeNameType.Field, "ScalingListDCCoef32x32")]
		[NativeName(NativeNameType.Type, "uint8_t[2]")]
		public byte ScalingListDCCoef32x32_0;
		public byte ScalingListDCCoef32x32_1;

		public unsafe StdVideoH265ScalingLists(byte** scalingList4X4 = default, byte** scalingList8X8 = default, byte** scalingList16X16 = default, byte** scalingList32X32 = default, byte* scalingListDcCoef16X16 = default, byte* scalingListDcCoef32X32 = default)
		{
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
			if (scalingList16X16 != default)
			{
				ScalingList16x16_0 = scalingList16X16[0];
				ScalingList16x16_1 = scalingList16X16[1];
				ScalingList16x16_2 = scalingList16X16[2];
				ScalingList16x16_3 = scalingList16X16[3];
				ScalingList16x16_4 = scalingList16X16[4];
				ScalingList16x16_5 = scalingList16X16[5];
			}
			if (scalingList32X32 != default)
			{
				ScalingList32x32_0 = scalingList32X32[0];
				ScalingList32x32_1 = scalingList32X32[1];
			}
			if (scalingListDcCoef16X16 != default)
			{
				ScalingListDCCoef16x16_0 = scalingListDcCoef16X16[0];
				ScalingListDCCoef16x16_1 = scalingListDcCoef16X16[1];
				ScalingListDCCoef16x16_2 = scalingListDcCoef16X16[2];
				ScalingListDCCoef16x16_3 = scalingListDcCoef16X16[3];
				ScalingListDCCoef16x16_4 = scalingListDcCoef16X16[4];
				ScalingListDCCoef16x16_5 = scalingListDcCoef16X16[5];
			}
			if (scalingListDcCoef32X32 != default)
			{
				ScalingListDCCoef32x32_0 = scalingListDcCoef32X32[0];
				ScalingListDCCoef32x32_1 = scalingListDcCoef32X32[1];
			}
		}

		public unsafe StdVideoH265ScalingLists(Span<Pointer<byte>> scalingList4X4 = default, Span<Pointer<byte>> scalingList8X8 = default, Span<Pointer<byte>> scalingList16X16 = default, Span<Pointer<byte>> scalingList32X32 = default, Span<byte> scalingListDcCoef16X16 = default, Span<byte> scalingListDcCoef32X32 = default)
		{
			if (scalingList4X4 != default)
			{
				ScalingList4x4_0 = scalingList4X4[0];
				ScalingList4x4_1 = scalingList4X4[1];
				ScalingList4x4_2 = scalingList4X4[2];
				ScalingList4x4_3 = scalingList4X4[3];
				ScalingList4x4_4 = scalingList4X4[4];
				ScalingList4x4_5 = scalingList4X4[5];
			}
			if (scalingList8X8 != default)
			{
				ScalingList8x8_0 = scalingList8X8[0];
				ScalingList8x8_1 = scalingList8X8[1];
				ScalingList8x8_2 = scalingList8X8[2];
				ScalingList8x8_3 = scalingList8X8[3];
				ScalingList8x8_4 = scalingList8X8[4];
				ScalingList8x8_5 = scalingList8X8[5];
			}
			if (scalingList16X16 != default)
			{
				ScalingList16x16_0 = scalingList16X16[0];
				ScalingList16x16_1 = scalingList16X16[1];
				ScalingList16x16_2 = scalingList16X16[2];
				ScalingList16x16_3 = scalingList16X16[3];
				ScalingList16x16_4 = scalingList16X16[4];
				ScalingList16x16_5 = scalingList16X16[5];
			}
			if (scalingList32X32 != default)
			{
				ScalingList32x32_0 = scalingList32X32[0];
				ScalingList32x32_1 = scalingList32X32[1];
			}
			if (scalingListDcCoef16X16 != default)
			{
				ScalingListDCCoef16x16_0 = scalingListDcCoef16X16[0];
				ScalingListDCCoef16x16_1 = scalingListDcCoef16X16[1];
				ScalingListDCCoef16x16_2 = scalingListDcCoef16X16[2];
				ScalingListDCCoef16x16_3 = scalingListDcCoef16X16[3];
				ScalingListDCCoef16x16_4 = scalingListDcCoef16X16[4];
				ScalingListDCCoef16x16_5 = scalingListDcCoef16X16[5];
			}
			if (scalingListDcCoef32X32 != default)
			{
				ScalingListDCCoef32x32_0 = scalingListDcCoef32X32[0];
				ScalingListDCCoef32x32_1 = scalingListDcCoef32X32[1];
			}
		}


		public unsafe Span<Pointer<byte>> ScalingList4x4
		
		{
			get
			{
				fixed (byte** p = &this.ScalingList4x4_0)
				{
					return new Span<Pointer<byte>>(p, 6);
				}
			}
		}
		public unsafe Span<Pointer<byte>> ScalingList8x8
		
		{
			get
			{
				fixed (byte** p = &this.ScalingList8x8_0)
				{
					return new Span<Pointer<byte>>(p, 6);
				}
			}
		}
		public unsafe Span<Pointer<byte>> ScalingList16x16
		
		{
			get
			{
				fixed (byte** p = &this.ScalingList16x16_0)
				{
					return new Span<Pointer<byte>>(p, 6);
				}
			}
		}
		public unsafe Span<Pointer<byte>> ScalingList32x32
		
		{
			get
			{
				fixed (byte** p = &this.ScalingList32x32_0)
				{
					return new Span<Pointer<byte>>(p, 2);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SpsVuiFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SpsVuiFlags
	{
		[NativeName(NativeNameType.Field, "aspect_ratio_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AspectRatioInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanInfoPresentFlag;
		[NativeName(NativeNameType.Field, "overscan_appropriate_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OverscanAppropriateFlag;
		[NativeName(NativeNameType.Field, "video_signal_type_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoSignalTypePresentFlag;
		[NativeName(NativeNameType.Field, "video_full_range_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VideoFullRangeFlag;
		[NativeName(NativeNameType.Field, "colour_description_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ColourDescriptionPresentFlag;
		[NativeName(NativeNameType.Field, "chroma_loc_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaLocInfoPresentFlag;
		[NativeName(NativeNameType.Field, "neutral_chroma_indication_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint NeutralChromaIndicationFlag;
		[NativeName(NativeNameType.Field, "field_seq_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FieldSeqFlag;
		[NativeName(NativeNameType.Field, "frame_field_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint FrameFieldInfoPresentFlag;
		[NativeName(NativeNameType.Field, "default_display_window_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DefaultDisplayWindowFlag;
		[NativeName(NativeNameType.Field, "vui_timing_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiTimingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "vui_poc_proportional_to_timing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiPocProportionalToTimingFlag;
		[NativeName(NativeNameType.Field, "vui_hrd_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiHrdParametersPresentFlag;
		[NativeName(NativeNameType.Field, "bitstream_restriction_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint BitstreamRestrictionFlag;
		[NativeName(NativeNameType.Field, "tiles_fixed_structure_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TilesFixedStructureFlag;
		[NativeName(NativeNameType.Field, "motion_vectors_over_pic_boundaries_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MotionVectorsOverPicBoundariesFlag;
		[NativeName(NativeNameType.Field, "restricted_ref_pic_lists_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint RestrictedRefPicListsFlag;

		public unsafe StdVideoH265SpsVuiFlags(uint aspectRatioInfoPresentFlag = default, uint overscanInfoPresentFlag = default, uint overscanAppropriateFlag = default, uint videoSignalTypePresentFlag = default, uint videoFullRangeFlag = default, uint colourDescriptionPresentFlag = default, uint chromaLocInfoPresentFlag = default, uint neutralChromaIndicationFlag = default, uint fieldSeqFlag = default, uint frameFieldInfoPresentFlag = default, uint defaultDisplayWindowFlag = default, uint vuiTimingInfoPresentFlag = default, uint vuiPocProportionalToTimingFlag = default, uint vuiHrdParametersPresentFlag = default, uint bitstreamRestrictionFlag = default, uint tilesFixedStructureFlag = default, uint motionVectorsOverPicBoundariesFlag = default, uint restrictedRefPicListsFlag = default)
		{
			AspectRatioInfoPresentFlag = aspectRatioInfoPresentFlag;
			OverscanInfoPresentFlag = overscanInfoPresentFlag;
			OverscanAppropriateFlag = overscanAppropriateFlag;
			VideoSignalTypePresentFlag = videoSignalTypePresentFlag;
			VideoFullRangeFlag = videoFullRangeFlag;
			ColourDescriptionPresentFlag = colourDescriptionPresentFlag;
			ChromaLocInfoPresentFlag = chromaLocInfoPresentFlag;
			NeutralChromaIndicationFlag = neutralChromaIndicationFlag;
			FieldSeqFlag = fieldSeqFlag;
			FrameFieldInfoPresentFlag = frameFieldInfoPresentFlag;
			DefaultDisplayWindowFlag = defaultDisplayWindowFlag;
			VuiTimingInfoPresentFlag = vuiTimingInfoPresentFlag;
			VuiPocProportionalToTimingFlag = vuiPocProportionalToTimingFlag;
			VuiHrdParametersPresentFlag = vuiHrdParametersPresentFlag;
			BitstreamRestrictionFlag = bitstreamRestrictionFlag;
			TilesFixedStructureFlag = tilesFixedStructureFlag;
			MotionVectorsOverPicBoundariesFlag = motionVectorsOverPicBoundariesFlag;
			RestrictedRefPicListsFlag = restrictedRefPicListsFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SequenceParameterSetVui")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SequenceParameterSetVui
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265SpsVuiFlags")]
		public StdVideoH265SpsVuiFlags Flags;
		[NativeName(NativeNameType.Field, "aspect_ratio_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265AspectRatioIdc")]
		public StdVideoH265AspectRatioIdc AspectRatioIdc;
		[NativeName(NativeNameType.Field, "sar_width")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarWidth;
		[NativeName(NativeNameType.Field, "sar_height")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort SarHeight;
		[NativeName(NativeNameType.Field, "video_format")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte VideoFormat;
		[NativeName(NativeNameType.Field, "colour_primaries")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ColourPrimaries;
		[NativeName(NativeNameType.Field, "transfer_characteristics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte TransferCharacteristics;
		[NativeName(NativeNameType.Field, "matrix_coeffs")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MatrixCoeffs;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_top_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeTopField;
		[NativeName(NativeNameType.Field, "chroma_sample_loc_type_bottom_field")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaSampleLocTypeBottomField;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "def_disp_win_left_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinLeftOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_right_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinRightOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_top_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinTopOffset;
		[NativeName(NativeNameType.Field, "def_disp_win_bottom_offset")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort DefDispWinBottomOffset;
		[NativeName(NativeNameType.Field, "vui_num_units_in_tick")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiNumUnitsInTick;
		[NativeName(NativeNameType.Field, "vui_time_scale")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiTimeScale;
		[NativeName(NativeNameType.Field, "vui_num_ticks_poc_diff_one_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiNumTicksPocDiffOneMinus1;
		[NativeName(NativeNameType.Field, "min_spatial_segmentation_idc")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort MinSpatialSegmentationIdc;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved3;
		[NativeName(NativeNameType.Field, "max_bytes_per_pic_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxBytesPerPicDenom;
		[NativeName(NativeNameType.Field, "max_bits_per_min_cu_denom")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxBitsPerMinCuDenom;
		[NativeName(NativeNameType.Field, "log2_max_mv_length_horizontal")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxMvLengthHorizontal;
		[NativeName(NativeNameType.Field, "log2_max_mv_length_vertical")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxMvLengthVertical;
		[NativeName(NativeNameType.Field, "pHrdParameters")]
		[NativeName(NativeNameType.Type, "const StdVideoH265HrdParameters*")]
		public unsafe StdVideoH265HrdParameters* PHrdParameters;

		public unsafe StdVideoH265SequenceParameterSetVui(StdVideoH265SpsVuiFlags flags = default, StdVideoH265AspectRatioIdc aspectRatioIdc = default, ushort sarWidth = default, ushort sarHeight = default, byte videoFormat = default, byte colourPrimaries = default, byte transferCharacteristics = default, byte matrixCoeffs = default, byte chromaSampleLocTypeTopField = default, byte chromaSampleLocTypeBottomField = default, byte reserved1 = default, byte reserved2 = default, ushort defDispWinLeftOffset = default, ushort defDispWinRightOffset = default, ushort defDispWinTopOffset = default, ushort defDispWinBottomOffset = default, uint vuiNumUnitsInTick = default, uint vuiTimeScale = default, uint vuiNumTicksPocDiffOneminus1 = default, ushort minSpatialSegmentationIdc = default, ushort reserved3 = default, byte maxBytesPerPicDenom = default, byte maxBitsPerMinCuDenom = default, byte log2MaxMvLengthHorizontal = default, byte log2MaxMvLengthVertical = default, StdVideoH265HrdParameters* pHrdParameters = default)
		{
			Flags = flags;
			AspectRatioIdc = aspectRatioIdc;
			SarWidth = sarWidth;
			SarHeight = sarHeight;
			VideoFormat = videoFormat;
			ColourPrimaries = colourPrimaries;
			TransferCharacteristics = transferCharacteristics;
			MatrixCoeffs = matrixCoeffs;
			ChromaSampleLocTypeTopField = chromaSampleLocTypeTopField;
			ChromaSampleLocTypeBottomField = chromaSampleLocTypeBottomField;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			DefDispWinLeftOffset = defDispWinLeftOffset;
			DefDispWinRightOffset = defDispWinRightOffset;
			DefDispWinTopOffset = defDispWinTopOffset;
			DefDispWinBottomOffset = defDispWinBottomOffset;
			VuiNumUnitsInTick = vuiNumUnitsInTick;
			VuiTimeScale = vuiTimeScale;
			VuiNumTicksPocDiffOneMinus1 = vuiNumTicksPocDiffOneminus1;
			MinSpatialSegmentationIdc = minSpatialSegmentationIdc;
			Reserved3 = reserved3;
			MaxBytesPerPicDenom = maxBytesPerPicDenom;
			MaxBitsPerMinCuDenom = maxBitsPerMinCuDenom;
			Log2MaxMvLengthHorizontal = log2MaxMvLengthHorizontal;
			Log2MaxMvLengthVertical = log2MaxMvLengthVertical;
			PHrdParameters = pHrdParameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PredictorPaletteEntries")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PredictorPaletteEntries
	{
		[NativeName(NativeNameType.Field, "PredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "uint16_t[128][3]")]
		public unsafe ushort* PredictorPaletteEntries_0;
		public unsafe ushort* PredictorPaletteEntries_1;
		public unsafe ushort* PredictorPaletteEntries_2;

		public unsafe StdVideoH265PredictorPaletteEntries(ushort** predictorPaletteEntries = default)
		{
			if (predictorPaletteEntries != default)
			{
				PredictorPaletteEntries_0 = predictorPaletteEntries[0];
				PredictorPaletteEntries_1 = predictorPaletteEntries[1];
				PredictorPaletteEntries_2 = predictorPaletteEntries[2];
			}
		}

		public unsafe StdVideoH265PredictorPaletteEntries(Span<Pointer<ushort>> predictorPaletteEntries = default)
		{
			if (predictorPaletteEntries != default)
			{
				PredictorPaletteEntries_0 = predictorPaletteEntries[0];
				PredictorPaletteEntries_1 = predictorPaletteEntries[1];
				PredictorPaletteEntries_2 = predictorPaletteEntries[2];
			}
		}


		public unsafe Span<Pointer<ushort>> PredictorPaletteEntries
		
		{
			get
			{
				fixed (ushort** p = &this.PredictorPaletteEntries_0)
				{
					return new Span<Pointer<ushort>>(p, 3);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SpsFlags
	{
		[NativeName(NativeNameType.Field, "sps_temporal_id_nesting_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsTemporalIdNestingFlag;
		[NativeName(NativeNameType.Field, "separate_colour_plane_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SeparateColourPlaneFlag;
		[NativeName(NativeNameType.Field, "conformance_window_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConformanceWindowFlag;
		[NativeName(NativeNameType.Field, "sps_sub_layer_ordering_info_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsSubLayerOrderingInfoPresentFlag;
		[NativeName(NativeNameType.Field, "scaling_list_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ScalingListEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_scaling_list_data_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsScalingListDataPresentFlag;
		[NativeName(NativeNameType.Field, "amp_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint AmpEnabledFlag;
		[NativeName(NativeNameType.Field, "sample_adaptive_offset_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SampleAdaptiveOffsetEnabledFlag;
		[NativeName(NativeNameType.Field, "pcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PcmEnabledFlag;
		[NativeName(NativeNameType.Field, "pcm_loop_filter_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PcmLoopFilterDisabledFlag;
		[NativeName(NativeNameType.Field, "long_term_ref_pics_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LongTermRefPicsPresentFlag;
		[NativeName(NativeNameType.Field, "sps_temporal_mvp_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsTemporalMvpEnabledFlag;
		[NativeName(NativeNameType.Field, "strong_intra_smoothing_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StrongIntraSmoothingEnabledFlag;
		[NativeName(NativeNameType.Field, "vui_parameters_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint VuiParametersPresentFlag;
		[NativeName(NativeNameType.Field, "sps_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "sps_range_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsRangeExtensionFlag;
		[NativeName(NativeNameType.Field, "transform_skip_rotation_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipRotationEnabledFlag;
		[NativeName(NativeNameType.Field, "transform_skip_context_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipContextEnabledFlag;
		[NativeName(NativeNameType.Field, "implicit_rdpcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ImplicitRdpcmEnabledFlag;
		[NativeName(NativeNameType.Field, "explicit_rdpcm_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExplicitRdpcmEnabledFlag;
		[NativeName(NativeNameType.Field, "extended_precision_processing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ExtendedPrecisionProcessingFlag;
		[NativeName(NativeNameType.Field, "intra_smoothing_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IntraSmoothingDisabledFlag;
		[NativeName(NativeNameType.Field, "high_precision_offsets_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint HighPrecisionOffsetsEnabledFlag;
		[NativeName(NativeNameType.Field, "persistent_rice_adaptation_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PersistentRiceAdaptationEnabledFlag;
		[NativeName(NativeNameType.Field, "cabac_bypass_alignment_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CabacBypassAlignmentEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_scc_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsSccExtensionFlag;
		[NativeName(NativeNameType.Field, "sps_curr_pic_ref_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsCurrPicRefEnabledFlag;
		[NativeName(NativeNameType.Field, "palette_mode_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PaletteModeEnabledFlag;
		[NativeName(NativeNameType.Field, "sps_palette_predictor_initializers_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SpsPalettePredictorInitializersPresentFlag;
		[NativeName(NativeNameType.Field, "intra_boundary_filtering_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IntraBoundaryFilteringDisabledFlag;

		public unsafe StdVideoH265SpsFlags(uint spsTemporalIdNestingFlag = default, uint separateColourPlaneFlag = default, uint conformanceWindowFlag = default, uint spsSubLayerOrderingInfoPresentFlag = default, uint scalingListEnabledFlag = default, uint spsScalingListDataPresentFlag = default, uint ampEnabledFlag = default, uint sampleAdaptiveOffsetEnabledFlag = default, uint pcmEnabledFlag = default, uint pcmLoopFilterDisabledFlag = default, uint longTermRefPicsPresentFlag = default, uint spsTemporalMvpEnabledFlag = default, uint strongIntraSmoothingEnabledFlag = default, uint vuiParametersPresentFlag = default, uint spsExtensionPresentFlag = default, uint spsRangeExtensionFlag = default, uint transformSkipRotationEnabledFlag = default, uint transformSkipContextEnabledFlag = default, uint implicitRdpcmEnabledFlag = default, uint explicitRdpcmEnabledFlag = default, uint extendedPrecisionProcessingFlag = default, uint intraSmoothingDisabledFlag = default, uint highPrecisionOffsetsEnabledFlag = default, uint persistentRiceAdaptationEnabledFlag = default, uint cabacBypassAlignmentEnabledFlag = default, uint spsSccExtensionFlag = default, uint spsCurrPicRefEnabledFlag = default, uint paletteModeEnabledFlag = default, uint spsPalettePredictorInitializersPresentFlag = default, uint intraBoundaryFilteringDisabledFlag = default)
		{
			SpsTemporalIdNestingFlag = spsTemporalIdNestingFlag;
			SeparateColourPlaneFlag = separateColourPlaneFlag;
			ConformanceWindowFlag = conformanceWindowFlag;
			SpsSubLayerOrderingInfoPresentFlag = spsSubLayerOrderingInfoPresentFlag;
			ScalingListEnabledFlag = scalingListEnabledFlag;
			SpsScalingListDataPresentFlag = spsScalingListDataPresentFlag;
			AmpEnabledFlag = ampEnabledFlag;
			SampleAdaptiveOffsetEnabledFlag = sampleAdaptiveOffsetEnabledFlag;
			PcmEnabledFlag = pcmEnabledFlag;
			PcmLoopFilterDisabledFlag = pcmLoopFilterDisabledFlag;
			LongTermRefPicsPresentFlag = longTermRefPicsPresentFlag;
			SpsTemporalMvpEnabledFlag = spsTemporalMvpEnabledFlag;
			StrongIntraSmoothingEnabledFlag = strongIntraSmoothingEnabledFlag;
			VuiParametersPresentFlag = vuiParametersPresentFlag;
			SpsExtensionPresentFlag = spsExtensionPresentFlag;
			SpsRangeExtensionFlag = spsRangeExtensionFlag;
			TransformSkipRotationEnabledFlag = transformSkipRotationEnabledFlag;
			TransformSkipContextEnabledFlag = transformSkipContextEnabledFlag;
			ImplicitRdpcmEnabledFlag = implicitRdpcmEnabledFlag;
			ExplicitRdpcmEnabledFlag = explicitRdpcmEnabledFlag;
			ExtendedPrecisionProcessingFlag = extendedPrecisionProcessingFlag;
			IntraSmoothingDisabledFlag = intraSmoothingDisabledFlag;
			HighPrecisionOffsetsEnabledFlag = highPrecisionOffsetsEnabledFlag;
			PersistentRiceAdaptationEnabledFlag = persistentRiceAdaptationEnabledFlag;
			CabacBypassAlignmentEnabledFlag = cabacBypassAlignmentEnabledFlag;
			SpsSccExtensionFlag = spsSccExtensionFlag;
			SpsCurrPicRefEnabledFlag = spsCurrPicRefEnabledFlag;
			PaletteModeEnabledFlag = paletteModeEnabledFlag;
			SpsPalettePredictorInitializersPresentFlag = spsPalettePredictorInitializersPresentFlag;
			IntraBoundaryFilteringDisabledFlag = intraBoundaryFilteringDisabledFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ShortTermRefPicSetFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ShortTermRefPicSetFlags
	{
		[NativeName(NativeNameType.Field, "inter_ref_pic_set_prediction_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint InterRefPicSetPredictionFlag;
		[NativeName(NativeNameType.Field, "delta_rps_sign")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeltaRpsSign;

		public unsafe StdVideoH265ShortTermRefPicSetFlags(uint interRefPicSetPredictionFlag = default, uint deltaRpsSign = default)
		{
			InterRefPicSetPredictionFlag = interRefPicSetPredictionFlag;
			DeltaRpsSign = deltaRpsSign;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265ShortTermRefPicSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265ShortTermRefPicSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265ShortTermRefPicSetFlags")]
		public StdVideoH265ShortTermRefPicSetFlags Flags;
		[NativeName(NativeNameType.Field, "delta_idx_minus1")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeltaIdxMinus1;
		[NativeName(NativeNameType.Field, "use_delta_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UseDeltaFlag;
		[NativeName(NativeNameType.Field, "abs_delta_rps_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort AbsDeltaRpsMinus1;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicFlag;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_s0_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicS0Flag;
		[NativeName(NativeNameType.Field, "used_by_curr_pic_s1_flag")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort UsedByCurrPicS1Flag;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved3;
		[NativeName(NativeNameType.Field, "num_negative_pics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumNegativePics;
		[NativeName(NativeNameType.Field, "num_positive_pics")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumPositivePics;
		[NativeName(NativeNameType.Field, "delta_poc_s0_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[16]")]
		public ushort DeltaPocS0Minus1_0;
		public ushort DeltaPocS0Minus1_1;
		public ushort DeltaPocS0Minus1_2;
		public ushort DeltaPocS0Minus1_3;
		public ushort DeltaPocS0Minus1_4;
		public ushort DeltaPocS0Minus1_5;
		public ushort DeltaPocS0Minus1_6;
		public ushort DeltaPocS0Minus1_7;
		public ushort DeltaPocS0Minus1_8;
		public ushort DeltaPocS0Minus1_9;
		public ushort DeltaPocS0Minus1_10;
		public ushort DeltaPocS0Minus1_11;
		public ushort DeltaPocS0Minus1_12;
		public ushort DeltaPocS0Minus1_13;
		public ushort DeltaPocS0Minus1_14;
		public ushort DeltaPocS0Minus1_15;
		[NativeName(NativeNameType.Field, "delta_poc_s1_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[16]")]
		public ushort DeltaPocS1Minus1_0;
		public ushort DeltaPocS1Minus1_1;
		public ushort DeltaPocS1Minus1_2;
		public ushort DeltaPocS1Minus1_3;
		public ushort DeltaPocS1Minus1_4;
		public ushort DeltaPocS1Minus1_5;
		public ushort DeltaPocS1Minus1_6;
		public ushort DeltaPocS1Minus1_7;
		public ushort DeltaPocS1Minus1_8;
		public ushort DeltaPocS1Minus1_9;
		public ushort DeltaPocS1Minus1_10;
		public ushort DeltaPocS1Minus1_11;
		public ushort DeltaPocS1Minus1_12;
		public ushort DeltaPocS1Minus1_13;
		public ushort DeltaPocS1Minus1_14;
		public ushort DeltaPocS1Minus1_15;

		public unsafe StdVideoH265ShortTermRefPicSet(StdVideoH265ShortTermRefPicSetFlags flags = default, uint deltaIdxminus1 = default, ushort useDeltaFlag = default, ushort absDeltaRpsminus1 = default, ushort usedByCurrPicFlag = default, ushort usedByCurrPics0Flag = default, ushort usedByCurrPics1Flag = default, ushort reserved1 = default, byte reserved2 = default, byte reserved3 = default, byte numNegativePics = default, byte numPositivePics = default, ushort* deltaPocs0minus1 = default, ushort* deltaPocs1minus1 = default)
		{
			Flags = flags;
			DeltaIdxMinus1 = deltaIdxminus1;
			UseDeltaFlag = useDeltaFlag;
			AbsDeltaRpsMinus1 = absDeltaRpsminus1;
			UsedByCurrPicFlag = usedByCurrPicFlag;
			UsedByCurrPicS0Flag = usedByCurrPics0Flag;
			UsedByCurrPicS1Flag = usedByCurrPics1Flag;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			Reserved3 = reserved3;
			NumNegativePics = numNegativePics;
			NumPositivePics = numPositivePics;
			if (deltaPocs0minus1 != default)
			{
				DeltaPocS0Minus1_0 = deltaPocs0minus1[0];
				DeltaPocS0Minus1_1 = deltaPocs0minus1[1];
				DeltaPocS0Minus1_2 = deltaPocs0minus1[2];
				DeltaPocS0Minus1_3 = deltaPocs0minus1[3];
				DeltaPocS0Minus1_4 = deltaPocs0minus1[4];
				DeltaPocS0Minus1_5 = deltaPocs0minus1[5];
				DeltaPocS0Minus1_6 = deltaPocs0minus1[6];
				DeltaPocS0Minus1_7 = deltaPocs0minus1[7];
				DeltaPocS0Minus1_8 = deltaPocs0minus1[8];
				DeltaPocS0Minus1_9 = deltaPocs0minus1[9];
				DeltaPocS0Minus1_10 = deltaPocs0minus1[10];
				DeltaPocS0Minus1_11 = deltaPocs0minus1[11];
				DeltaPocS0Minus1_12 = deltaPocs0minus1[12];
				DeltaPocS0Minus1_13 = deltaPocs0minus1[13];
				DeltaPocS0Minus1_14 = deltaPocs0minus1[14];
				DeltaPocS0Minus1_15 = deltaPocs0minus1[15];
			}
			if (deltaPocs1minus1 != default)
			{
				DeltaPocS1Minus1_0 = deltaPocs1minus1[0];
				DeltaPocS1Minus1_1 = deltaPocs1minus1[1];
				DeltaPocS1Minus1_2 = deltaPocs1minus1[2];
				DeltaPocS1Minus1_3 = deltaPocs1minus1[3];
				DeltaPocS1Minus1_4 = deltaPocs1minus1[4];
				DeltaPocS1Minus1_5 = deltaPocs1minus1[5];
				DeltaPocS1Minus1_6 = deltaPocs1minus1[6];
				DeltaPocS1Minus1_7 = deltaPocs1minus1[7];
				DeltaPocS1Minus1_8 = deltaPocs1minus1[8];
				DeltaPocS1Minus1_9 = deltaPocs1minus1[9];
				DeltaPocS1Minus1_10 = deltaPocs1minus1[10];
				DeltaPocS1Minus1_11 = deltaPocs1minus1[11];
				DeltaPocS1Minus1_12 = deltaPocs1minus1[12];
				DeltaPocS1Minus1_13 = deltaPocs1minus1[13];
				DeltaPocS1Minus1_14 = deltaPocs1minus1[14];
				DeltaPocS1Minus1_15 = deltaPocs1minus1[15];
			}
		}

		public unsafe StdVideoH265ShortTermRefPicSet(StdVideoH265ShortTermRefPicSetFlags flags = default, uint deltaIdxminus1 = default, ushort useDeltaFlag = default, ushort absDeltaRpsminus1 = default, ushort usedByCurrPicFlag = default, ushort usedByCurrPics0Flag = default, ushort usedByCurrPics1Flag = default, ushort reserved1 = default, byte reserved2 = default, byte reserved3 = default, byte numNegativePics = default, byte numPositivePics = default, Span<ushort> deltaPocs0minus1 = default, Span<ushort> deltaPocs1minus1 = default)
		{
			Flags = flags;
			DeltaIdxMinus1 = deltaIdxminus1;
			UseDeltaFlag = useDeltaFlag;
			AbsDeltaRpsMinus1 = absDeltaRpsminus1;
			UsedByCurrPicFlag = usedByCurrPicFlag;
			UsedByCurrPicS0Flag = usedByCurrPics0Flag;
			UsedByCurrPicS1Flag = usedByCurrPics1Flag;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			Reserved3 = reserved3;
			NumNegativePics = numNegativePics;
			NumPositivePics = numPositivePics;
			if (deltaPocs0minus1 != default)
			{
				DeltaPocS0Minus1_0 = deltaPocs0minus1[0];
				DeltaPocS0Minus1_1 = deltaPocs0minus1[1];
				DeltaPocS0Minus1_2 = deltaPocs0minus1[2];
				DeltaPocS0Minus1_3 = deltaPocs0minus1[3];
				DeltaPocS0Minus1_4 = deltaPocs0minus1[4];
				DeltaPocS0Minus1_5 = deltaPocs0minus1[5];
				DeltaPocS0Minus1_6 = deltaPocs0minus1[6];
				DeltaPocS0Minus1_7 = deltaPocs0minus1[7];
				DeltaPocS0Minus1_8 = deltaPocs0minus1[8];
				DeltaPocS0Minus1_9 = deltaPocs0minus1[9];
				DeltaPocS0Minus1_10 = deltaPocs0minus1[10];
				DeltaPocS0Minus1_11 = deltaPocs0minus1[11];
				DeltaPocS0Minus1_12 = deltaPocs0minus1[12];
				DeltaPocS0Minus1_13 = deltaPocs0minus1[13];
				DeltaPocS0Minus1_14 = deltaPocs0minus1[14];
				DeltaPocS0Minus1_15 = deltaPocs0minus1[15];
			}
			if (deltaPocs1minus1 != default)
			{
				DeltaPocS1Minus1_0 = deltaPocs1minus1[0];
				DeltaPocS1Minus1_1 = deltaPocs1minus1[1];
				DeltaPocS1Minus1_2 = deltaPocs1minus1[2];
				DeltaPocS1Minus1_3 = deltaPocs1minus1[3];
				DeltaPocS1Minus1_4 = deltaPocs1minus1[4];
				DeltaPocS1Minus1_5 = deltaPocs1minus1[5];
				DeltaPocS1Minus1_6 = deltaPocs1minus1[6];
				DeltaPocS1Minus1_7 = deltaPocs1minus1[7];
				DeltaPocS1Minus1_8 = deltaPocs1minus1[8];
				DeltaPocS1Minus1_9 = deltaPocs1minus1[9];
				DeltaPocS1Minus1_10 = deltaPocs1minus1[10];
				DeltaPocS1Minus1_11 = deltaPocs1minus1[11];
				DeltaPocS1Minus1_12 = deltaPocs1minus1[12];
				DeltaPocS1Minus1_13 = deltaPocs1minus1[13];
				DeltaPocS1Minus1_14 = deltaPocs1minus1[14];
				DeltaPocS1Minus1_15 = deltaPocs1minus1[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265LongTermRefPicsSps")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265LongTermRefPicsSps
	{
		[NativeName(NativeNameType.Field, "used_by_curr_pic_lt_sps_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedByCurrPicLtSpsFlag;
		[NativeName(NativeNameType.Field, "lt_ref_pic_poc_lsb_sps")]
		[NativeName(NativeNameType.Type, "uint32_t[32]")]
		public uint LtRefPicPocLsbSps_0;
		public uint LtRefPicPocLsbSps_1;
		public uint LtRefPicPocLsbSps_2;
		public uint LtRefPicPocLsbSps_3;
		public uint LtRefPicPocLsbSps_4;
		public uint LtRefPicPocLsbSps_5;
		public uint LtRefPicPocLsbSps_6;
		public uint LtRefPicPocLsbSps_7;
		public uint LtRefPicPocLsbSps_8;
		public uint LtRefPicPocLsbSps_9;
		public uint LtRefPicPocLsbSps_10;
		public uint LtRefPicPocLsbSps_11;
		public uint LtRefPicPocLsbSps_12;
		public uint LtRefPicPocLsbSps_13;
		public uint LtRefPicPocLsbSps_14;
		public uint LtRefPicPocLsbSps_15;
		public uint LtRefPicPocLsbSps_16;
		public uint LtRefPicPocLsbSps_17;
		public uint LtRefPicPocLsbSps_18;
		public uint LtRefPicPocLsbSps_19;
		public uint LtRefPicPocLsbSps_20;
		public uint LtRefPicPocLsbSps_21;
		public uint LtRefPicPocLsbSps_22;
		public uint LtRefPicPocLsbSps_23;
		public uint LtRefPicPocLsbSps_24;
		public uint LtRefPicPocLsbSps_25;
		public uint LtRefPicPocLsbSps_26;
		public uint LtRefPicPocLsbSps_27;
		public uint LtRefPicPocLsbSps_28;
		public uint LtRefPicPocLsbSps_29;
		public uint LtRefPicPocLsbSps_30;
		public uint LtRefPicPocLsbSps_31;

		public unsafe StdVideoH265LongTermRefPicsSps(uint usedByCurrPicLtSpsFlag = default, uint* ltRefPicPocLsbSps = default)
		{
			UsedByCurrPicLtSpsFlag = usedByCurrPicLtSpsFlag;
			if (ltRefPicPocLsbSps != default)
			{
				LtRefPicPocLsbSps_0 = ltRefPicPocLsbSps[0];
				LtRefPicPocLsbSps_1 = ltRefPicPocLsbSps[1];
				LtRefPicPocLsbSps_2 = ltRefPicPocLsbSps[2];
				LtRefPicPocLsbSps_3 = ltRefPicPocLsbSps[3];
				LtRefPicPocLsbSps_4 = ltRefPicPocLsbSps[4];
				LtRefPicPocLsbSps_5 = ltRefPicPocLsbSps[5];
				LtRefPicPocLsbSps_6 = ltRefPicPocLsbSps[6];
				LtRefPicPocLsbSps_7 = ltRefPicPocLsbSps[7];
				LtRefPicPocLsbSps_8 = ltRefPicPocLsbSps[8];
				LtRefPicPocLsbSps_9 = ltRefPicPocLsbSps[9];
				LtRefPicPocLsbSps_10 = ltRefPicPocLsbSps[10];
				LtRefPicPocLsbSps_11 = ltRefPicPocLsbSps[11];
				LtRefPicPocLsbSps_12 = ltRefPicPocLsbSps[12];
				LtRefPicPocLsbSps_13 = ltRefPicPocLsbSps[13];
				LtRefPicPocLsbSps_14 = ltRefPicPocLsbSps[14];
				LtRefPicPocLsbSps_15 = ltRefPicPocLsbSps[15];
				LtRefPicPocLsbSps_16 = ltRefPicPocLsbSps[16];
				LtRefPicPocLsbSps_17 = ltRefPicPocLsbSps[17];
				LtRefPicPocLsbSps_18 = ltRefPicPocLsbSps[18];
				LtRefPicPocLsbSps_19 = ltRefPicPocLsbSps[19];
				LtRefPicPocLsbSps_20 = ltRefPicPocLsbSps[20];
				LtRefPicPocLsbSps_21 = ltRefPicPocLsbSps[21];
				LtRefPicPocLsbSps_22 = ltRefPicPocLsbSps[22];
				LtRefPicPocLsbSps_23 = ltRefPicPocLsbSps[23];
				LtRefPicPocLsbSps_24 = ltRefPicPocLsbSps[24];
				LtRefPicPocLsbSps_25 = ltRefPicPocLsbSps[25];
				LtRefPicPocLsbSps_26 = ltRefPicPocLsbSps[26];
				LtRefPicPocLsbSps_27 = ltRefPicPocLsbSps[27];
				LtRefPicPocLsbSps_28 = ltRefPicPocLsbSps[28];
				LtRefPicPocLsbSps_29 = ltRefPicPocLsbSps[29];
				LtRefPicPocLsbSps_30 = ltRefPicPocLsbSps[30];
				LtRefPicPocLsbSps_31 = ltRefPicPocLsbSps[31];
			}
		}

		public unsafe StdVideoH265LongTermRefPicsSps(uint usedByCurrPicLtSpsFlag = default, Span<uint> ltRefPicPocLsbSps = default)
		{
			UsedByCurrPicLtSpsFlag = usedByCurrPicLtSpsFlag;
			if (ltRefPicPocLsbSps != default)
			{
				LtRefPicPocLsbSps_0 = ltRefPicPocLsbSps[0];
				LtRefPicPocLsbSps_1 = ltRefPicPocLsbSps[1];
				LtRefPicPocLsbSps_2 = ltRefPicPocLsbSps[2];
				LtRefPicPocLsbSps_3 = ltRefPicPocLsbSps[3];
				LtRefPicPocLsbSps_4 = ltRefPicPocLsbSps[4];
				LtRefPicPocLsbSps_5 = ltRefPicPocLsbSps[5];
				LtRefPicPocLsbSps_6 = ltRefPicPocLsbSps[6];
				LtRefPicPocLsbSps_7 = ltRefPicPocLsbSps[7];
				LtRefPicPocLsbSps_8 = ltRefPicPocLsbSps[8];
				LtRefPicPocLsbSps_9 = ltRefPicPocLsbSps[9];
				LtRefPicPocLsbSps_10 = ltRefPicPocLsbSps[10];
				LtRefPicPocLsbSps_11 = ltRefPicPocLsbSps[11];
				LtRefPicPocLsbSps_12 = ltRefPicPocLsbSps[12];
				LtRefPicPocLsbSps_13 = ltRefPicPocLsbSps[13];
				LtRefPicPocLsbSps_14 = ltRefPicPocLsbSps[14];
				LtRefPicPocLsbSps_15 = ltRefPicPocLsbSps[15];
				LtRefPicPocLsbSps_16 = ltRefPicPocLsbSps[16];
				LtRefPicPocLsbSps_17 = ltRefPicPocLsbSps[17];
				LtRefPicPocLsbSps_18 = ltRefPicPocLsbSps[18];
				LtRefPicPocLsbSps_19 = ltRefPicPocLsbSps[19];
				LtRefPicPocLsbSps_20 = ltRefPicPocLsbSps[20];
				LtRefPicPocLsbSps_21 = ltRefPicPocLsbSps[21];
				LtRefPicPocLsbSps_22 = ltRefPicPocLsbSps[22];
				LtRefPicPocLsbSps_23 = ltRefPicPocLsbSps[23];
				LtRefPicPocLsbSps_24 = ltRefPicPocLsbSps[24];
				LtRefPicPocLsbSps_25 = ltRefPicPocLsbSps[25];
				LtRefPicPocLsbSps_26 = ltRefPicPocLsbSps[26];
				LtRefPicPocLsbSps_27 = ltRefPicPocLsbSps[27];
				LtRefPicPocLsbSps_28 = ltRefPicPocLsbSps[28];
				LtRefPicPocLsbSps_29 = ltRefPicPocLsbSps[29];
				LtRefPicPocLsbSps_30 = ltRefPicPocLsbSps[30];
				LtRefPicPocLsbSps_31 = ltRefPicPocLsbSps[31];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265SequenceParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265SequenceParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265SpsFlags")]
		public StdVideoH265SpsFlags Flags;
		[NativeName(NativeNameType.Field, "chroma_format_idc")]
		[NativeName(NativeNameType.Type, "StdVideoH265ChromaFormatIdc")]
		public StdVideoH265ChromaFormatIdc ChromaFormatIdc;
		[NativeName(NativeNameType.Field, "pic_width_in_luma_samples")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicWidthInLumaSamples;
		[NativeName(NativeNameType.Field, "pic_height_in_luma_samples")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PicHeightInLumaSamples;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "sps_max_sub_layers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsMaxSubLayersMinus1;
		[NativeName(NativeNameType.Field, "sps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "bit_depth_luma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthLumaMinus8;
		[NativeName(NativeNameType.Field, "bit_depth_chroma_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte BitDepthChromaMinus8;
		[NativeName(NativeNameType.Field, "log2_max_pic_order_cnt_lsb_minus4")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxPicOrderCntLsbMinus4;
		[NativeName(NativeNameType.Field, "log2_min_luma_coding_block_size_minus3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinLumaCodingBlockSizeMinus3;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_luma_coding_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinLumaCodingBlockSize;
		[NativeName(NativeNameType.Field, "log2_min_luma_transform_block_size_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinLumaTransformBlockSizeMinus2;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_luma_transform_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinLumaTransformBlockSize;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_inter")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxTransformHierarchyDepthInter;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_intra")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MaxTransformHierarchyDepthIntra;
		[NativeName(NativeNameType.Field, "num_short_term_ref_pic_sets")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumShortTermRefPicSets;
		[NativeName(NativeNameType.Field, "num_long_term_ref_pics_sps")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumLongTermRefPicsSps;
		[NativeName(NativeNameType.Field, "pcm_sample_bit_depth_luma_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PcmSampleBitDepthLumaMinus1;
		[NativeName(NativeNameType.Field, "pcm_sample_bit_depth_chroma_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PcmSampleBitDepthChromaMinus1;
		[NativeName(NativeNameType.Field, "log2_min_pcm_luma_coding_block_size_minus3")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MinPcmLumaCodingBlockSizeMinus3;
		[NativeName(NativeNameType.Field, "log2_diff_max_min_pcm_luma_coding_block_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2DiffMaxMinPcmLumaCodingBlockSize;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "palette_max_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PaletteMaxSize;
		[NativeName(NativeNameType.Field, "delta_palette_max_predictor_size")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DeltaPaletteMaxPredictorSize;
		[NativeName(NativeNameType.Field, "motion_vector_resolution_control_idc")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte MotionVectorResolutionControlIdc;
		[NativeName(NativeNameType.Field, "sps_num_palette_predictor_initializers_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsNumPalettePredictorInitializersMinus1;
		[NativeName(NativeNameType.Field, "conf_win_left_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinLeftOffset;
		[NativeName(NativeNameType.Field, "conf_win_right_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinRightOffset;
		[NativeName(NativeNameType.Field, "conf_win_top_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinTopOffset;
		[NativeName(NativeNameType.Field, "conf_win_bottom_offset")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConfWinBottomOffset;
		[NativeName(NativeNameType.Field, "pProfileTierLevel")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ProfileTierLevel*")]
		public unsafe StdVideoH265ProfileTierLevel* PProfileTierLevel;
		[NativeName(NativeNameType.Field, "pDecPicBufMgr")]
		[NativeName(NativeNameType.Type, "const StdVideoH265DecPicBufMgr*")]
		public unsafe StdVideoH265DecPicBufMgr* PDecPicBufMgr;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ScalingLists*")]
		public unsafe StdVideoH265ScalingLists* PScalingLists;
		[NativeName(NativeNameType.Field, "pShortTermRefPicSet")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ShortTermRefPicSet*")]
		public unsafe StdVideoH265ShortTermRefPicSet* PShortTermRefPicSet;
		[NativeName(NativeNameType.Field, "pLongTermRefPicsSps")]
		[NativeName(NativeNameType.Type, "const StdVideoH265LongTermRefPicsSps*")]
		public unsafe StdVideoH265LongTermRefPicsSps* PLongTermRefPicsSps;
		[NativeName(NativeNameType.Field, "pSequenceParameterSetVui")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SequenceParameterSetVui*")]
		public unsafe StdVideoH265SequenceParameterSetVui* PSequenceParameterSetVui;
		[NativeName(NativeNameType.Field, "pPredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "const StdVideoH265PredictorPaletteEntries*")]
		public unsafe StdVideoH265PredictorPaletteEntries* PPredictorPaletteEntries;

		public unsafe StdVideoH265SequenceParameterSet(StdVideoH265SpsFlags flags = default, StdVideoH265ChromaFormatIdc chromaFormatIdc = default, uint picWidthInLumaSamples = default, uint picHeightInLumaSamples = default, byte spsVideoParameterSetId = default, byte spsMaxSubLayersminus1 = default, byte spsSeqParameterSetId = default, byte bitDepthLumaminus8 = default, byte bitDepthChromaminus8 = default, byte log2MaxPicOrderCntLsbminus4 = default, byte log2MinLumaCodingBlockSizeminus3 = default, byte log2DiffMaxMinLumaCodingBlockSize = default, byte log2MinLumaTransformBlockSizeminus2 = default, byte log2DiffMaxMinLumaTransformBlockSize = default, byte maxTransformHierarchyDepthInter = default, byte maxTransformHierarchyDepthIntra = default, byte numShortTermRefPicSets = default, byte numLongTermRefPicsSps = default, byte pcmSampleBitDepthLumaminus1 = default, byte pcmSampleBitDepthChromaminus1 = default, byte log2MinPcmLumaCodingBlockSizeminus3 = default, byte log2DiffMaxMinPcmLumaCodingBlockSize = default, byte reserved1 = default, byte reserved2 = default, byte paletteMaxSize = default, byte deltaPaletteMaxPredictorSize = default, byte motionVectorResolutionControlIdc = default, byte spsNumPalettePredictorInitializersminus1 = default, uint confWinLeftOffset = default, uint confWinRightOffset = default, uint confWinTopOffset = default, uint confWinBottomOffset = default, StdVideoH265ProfileTierLevel* pProfileTierLevel = default, StdVideoH265DecPicBufMgr* pDecPicBufMgr = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet = default, StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps = default, StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			ChromaFormatIdc = chromaFormatIdc;
			PicWidthInLumaSamples = picWidthInLumaSamples;
			PicHeightInLumaSamples = picHeightInLumaSamples;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			SpsMaxSubLayersMinus1 = spsMaxSubLayersminus1;
			SpsSeqParameterSetId = spsSeqParameterSetId;
			BitDepthLumaMinus8 = bitDepthLumaminus8;
			BitDepthChromaMinus8 = bitDepthChromaminus8;
			Log2MaxPicOrderCntLsbMinus4 = log2MaxPicOrderCntLsbminus4;
			Log2MinLumaCodingBlockSizeMinus3 = log2MinLumaCodingBlockSizeminus3;
			Log2DiffMaxMinLumaCodingBlockSize = log2DiffMaxMinLumaCodingBlockSize;
			Log2MinLumaTransformBlockSizeMinus2 = log2MinLumaTransformBlockSizeminus2;
			Log2DiffMaxMinLumaTransformBlockSize = log2DiffMaxMinLumaTransformBlockSize;
			MaxTransformHierarchyDepthInter = maxTransformHierarchyDepthInter;
			MaxTransformHierarchyDepthIntra = maxTransformHierarchyDepthIntra;
			NumShortTermRefPicSets = numShortTermRefPicSets;
			NumLongTermRefPicsSps = numLongTermRefPicsSps;
			PcmSampleBitDepthLumaMinus1 = pcmSampleBitDepthLumaminus1;
			PcmSampleBitDepthChromaMinus1 = pcmSampleBitDepthChromaminus1;
			Log2MinPcmLumaCodingBlockSizeMinus3 = log2MinPcmLumaCodingBlockSizeminus3;
			Log2DiffMaxMinPcmLumaCodingBlockSize = log2DiffMaxMinPcmLumaCodingBlockSize;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			PaletteMaxSize = paletteMaxSize;
			DeltaPaletteMaxPredictorSize = deltaPaletteMaxPredictorSize;
			MotionVectorResolutionControlIdc = motionVectorResolutionControlIdc;
			SpsNumPalettePredictorInitializersMinus1 = spsNumPalettePredictorInitializersminus1;
			ConfWinLeftOffset = confWinLeftOffset;
			ConfWinRightOffset = confWinRightOffset;
			ConfWinTopOffset = confWinTopOffset;
			ConfWinBottomOffset = confWinBottomOffset;
			PProfileTierLevel = pProfileTierLevel;
			PDecPicBufMgr = pDecPicBufMgr;
			PScalingLists = pScalingLists;
			PShortTermRefPicSet = pShortTermRefPicSet;
			PLongTermRefPicsSps = pLongTermRefPicsSps;
			PSequenceParameterSetVui = pSequenceParameterSetVui;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PpsFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PpsFlags
	{
		[NativeName(NativeNameType.Field, "dependent_slice_segments_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DependentSliceSegmentsEnabledFlag;
		[NativeName(NativeNameType.Field, "output_flag_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint OutputFlagPresentFlag;
		[NativeName(NativeNameType.Field, "sign_data_hiding_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SignDataHidingEnabledFlag;
		[NativeName(NativeNameType.Field, "cabac_init_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CabacInitPresentFlag;
		[NativeName(NativeNameType.Field, "constrained_intra_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ConstrainedIntraPredFlag;
		[NativeName(NativeNameType.Field, "transform_skip_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransformSkipEnabledFlag;
		[NativeName(NativeNameType.Field, "cu_qp_delta_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CuQpDeltaEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_slice_chroma_qp_offsets_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsSliceChromaQpOffsetsPresentFlag;
		[NativeName(NativeNameType.Field, "weighted_pred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WeightedPredFlag;
		[NativeName(NativeNameType.Field, "weighted_bipred_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint WeightedBipredFlag;
		[NativeName(NativeNameType.Field, "transquant_bypass_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TransquantBypassEnabledFlag;
		[NativeName(NativeNameType.Field, "tiles_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint TilesEnabledFlag;
		[NativeName(NativeNameType.Field, "entropy_coding_sync_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint EntropyCodingSyncEnabledFlag;
		[NativeName(NativeNameType.Field, "uniform_spacing_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UniformSpacingFlag;
		[NativeName(NativeNameType.Field, "loop_filter_across_tiles_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint LoopFilterAcrossTilesEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_loop_filter_across_slices_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsLoopFilterAcrossSlicesEnabledFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_control_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterControlPresentFlag;
		[NativeName(NativeNameType.Field, "deblocking_filter_override_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint DeblockingFilterOverrideEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_deblocking_filter_disabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsDeblockingFilterDisabledFlag;
		[NativeName(NativeNameType.Field, "pps_scaling_list_data_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsScalingListDataPresentFlag;
		[NativeName(NativeNameType.Field, "lists_modification_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ListsModificationPresentFlag;
		[NativeName(NativeNameType.Field, "slice_segment_header_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSegmentHeaderExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "pps_extension_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsExtensionPresentFlag;
		[NativeName(NativeNameType.Field, "cross_component_prediction_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CrossComponentPredictionEnabledFlag;
		[NativeName(NativeNameType.Field, "chroma_qp_offset_list_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ChromaQpOffsetListEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_curr_pic_ref_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsCurrPicRefEnabledFlag;
		[NativeName(NativeNameType.Field, "residual_adaptive_colour_transform_enabled_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ResidualAdaptiveColourTransformEnabledFlag;
		[NativeName(NativeNameType.Field, "pps_slice_act_qp_offsets_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsSliceActQpOffsetsPresentFlag;
		[NativeName(NativeNameType.Field, "pps_palette_predictor_initializers_present_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsPalettePredictorInitializersPresentFlag;
		[NativeName(NativeNameType.Field, "monochrome_palette_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MonochromePaletteFlag;
		[NativeName(NativeNameType.Field, "pps_range_extension_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PpsRangeExtensionFlag;

		public unsafe StdVideoH265PpsFlags(uint dependentSliceSegmentsEnabledFlag = default, uint outputFlagPresentFlag = default, uint signDataHidingEnabledFlag = default, uint cabacInitPresentFlag = default, uint constrainedIntraPredFlag = default, uint transformSkipEnabledFlag = default, uint cuQpDeltaEnabledFlag = default, uint ppsSliceChromaQpOffsetsPresentFlag = default, uint weightedPredFlag = default, uint weightedBipredFlag = default, uint transquantBypassEnabledFlag = default, uint tilesEnabledFlag = default, uint entropyCodingSyncEnabledFlag = default, uint uniformSpacingFlag = default, uint loopFilterAcrossTilesEnabledFlag = default, uint ppsLoopFilterAcrossSlicesEnabledFlag = default, uint deblockingFilterControlPresentFlag = default, uint deblockingFilterOverrideEnabledFlag = default, uint ppsDeblockingFilterDisabledFlag = default, uint ppsScalingListDataPresentFlag = default, uint listsModificationPresentFlag = default, uint sliceSegmentHeaderExtensionPresentFlag = default, uint ppsExtensionPresentFlag = default, uint crossComponentPredictionEnabledFlag = default, uint chromaQpOffsetListEnabledFlag = default, uint ppsCurrPicRefEnabledFlag = default, uint residualAdaptiveColourTransformEnabledFlag = default, uint ppsSliceActQpOffsetsPresentFlag = default, uint ppsPalettePredictorInitializersPresentFlag = default, uint monochromePaletteFlag = default, uint ppsRangeExtensionFlag = default)
		{
			DependentSliceSegmentsEnabledFlag = dependentSliceSegmentsEnabledFlag;
			OutputFlagPresentFlag = outputFlagPresentFlag;
			SignDataHidingEnabledFlag = signDataHidingEnabledFlag;
			CabacInitPresentFlag = cabacInitPresentFlag;
			ConstrainedIntraPredFlag = constrainedIntraPredFlag;
			TransformSkipEnabledFlag = transformSkipEnabledFlag;
			CuQpDeltaEnabledFlag = cuQpDeltaEnabledFlag;
			PpsSliceChromaQpOffsetsPresentFlag = ppsSliceChromaQpOffsetsPresentFlag;
			WeightedPredFlag = weightedPredFlag;
			WeightedBipredFlag = weightedBipredFlag;
			TransquantBypassEnabledFlag = transquantBypassEnabledFlag;
			TilesEnabledFlag = tilesEnabledFlag;
			EntropyCodingSyncEnabledFlag = entropyCodingSyncEnabledFlag;
			UniformSpacingFlag = uniformSpacingFlag;
			LoopFilterAcrossTilesEnabledFlag = loopFilterAcrossTilesEnabledFlag;
			PpsLoopFilterAcrossSlicesEnabledFlag = ppsLoopFilterAcrossSlicesEnabledFlag;
			DeblockingFilterControlPresentFlag = deblockingFilterControlPresentFlag;
			DeblockingFilterOverrideEnabledFlag = deblockingFilterOverrideEnabledFlag;
			PpsDeblockingFilterDisabledFlag = ppsDeblockingFilterDisabledFlag;
			PpsScalingListDataPresentFlag = ppsScalingListDataPresentFlag;
			ListsModificationPresentFlag = listsModificationPresentFlag;
			SliceSegmentHeaderExtensionPresentFlag = sliceSegmentHeaderExtensionPresentFlag;
			PpsExtensionPresentFlag = ppsExtensionPresentFlag;
			CrossComponentPredictionEnabledFlag = crossComponentPredictionEnabledFlag;
			ChromaQpOffsetListEnabledFlag = chromaQpOffsetListEnabledFlag;
			PpsCurrPicRefEnabledFlag = ppsCurrPicRefEnabledFlag;
			ResidualAdaptiveColourTransformEnabledFlag = residualAdaptiveColourTransformEnabledFlag;
			PpsSliceActQpOffsetsPresentFlag = ppsSliceActQpOffsetsPresentFlag;
			PpsPalettePredictorInitializersPresentFlag = ppsPalettePredictorInitializersPresentFlag;
			MonochromePaletteFlag = monochromePaletteFlag;
			PpsRangeExtensionFlag = ppsRangeExtensionFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoH265PictureParameterSet")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoH265PictureParameterSet
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoH265PpsFlags")]
		public StdVideoH265PpsFlags Flags;
		[NativeName(NativeNameType.Field, "pps_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsPicParameterSetId;
		[NativeName(NativeNameType.Field, "pps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "num_extra_slice_header_bits")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumExtraSliceHeaderBits;
		[NativeName(NativeNameType.Field, "num_ref_idx_l0_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL0DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "num_ref_idx_l1_default_active_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumRefIdxL1DefaultActiveMinus1;
		[NativeName(NativeNameType.Field, "init_qp_minus26")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte InitQpMinus26;
		[NativeName(NativeNameType.Field, "diff_cu_qp_delta_depth")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DiffCuQpDeltaDepth;
		[NativeName(NativeNameType.Field, "pps_cb_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsCbQpOffset;
		[NativeName(NativeNameType.Field, "pps_cr_qp_offset")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsCrQpOffset;
		[NativeName(NativeNameType.Field, "pps_beta_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsBetaOffsetDiv2;
		[NativeName(NativeNameType.Field, "pps_tc_offset_div2")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsTcOffsetDiv2;
		[NativeName(NativeNameType.Field, "log2_parallel_merge_level_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2ParallelMergeLevelMinus2;
		[NativeName(NativeNameType.Field, "log2_max_transform_skip_block_size_minus2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2MaxTransformSkipBlockSizeMinus2;
		[NativeName(NativeNameType.Field, "diff_cu_chroma_qp_offset_depth")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte DiffCuChromaQpOffsetDepth;
		[NativeName(NativeNameType.Field, "chroma_qp_offset_list_len_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaQpOffsetListLenMinus1;
		[NativeName(NativeNameType.Field, "cb_qp_offset_list")]
		[NativeName(NativeNameType.Type, "int8_t[6]")]
		public byte CbQpOffsetList_0;
		public byte CbQpOffsetList_1;
		public byte CbQpOffsetList_2;
		public byte CbQpOffsetList_3;
		public byte CbQpOffsetList_4;
		public byte CbQpOffsetList_5;
		[NativeName(NativeNameType.Field, "cr_qp_offset_list")]
		[NativeName(NativeNameType.Type, "int8_t[6]")]
		public byte CrQpOffsetList_0;
		public byte CrQpOffsetList_1;
		public byte CrQpOffsetList_2;
		public byte CrQpOffsetList_3;
		public byte CrQpOffsetList_4;
		public byte CrQpOffsetList_5;
		[NativeName(NativeNameType.Field, "log2_sao_offset_scale_luma")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2SaoOffsetScaleLuma;
		[NativeName(NativeNameType.Field, "log2_sao_offset_scale_chroma")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Log2SaoOffsetScaleChroma;
		[NativeName(NativeNameType.Field, "pps_act_y_qp_offset_plus5")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActYQpOffsetPlus5;
		[NativeName(NativeNameType.Field, "pps_act_cb_qp_offset_plus5")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActCbQpOffsetPlus5;
		[NativeName(NativeNameType.Field, "pps_act_cr_qp_offset_plus3")]
		[NativeName(NativeNameType.Type, "int8_t")]
		public byte PpsActCrQpOffsetPlus3;
		[NativeName(NativeNameType.Field, "pps_num_palette_predictor_initializers")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsNumPalettePredictorInitializers;
		[NativeName(NativeNameType.Field, "luma_bit_depth_entry_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte LumaBitDepthEntryMinus8;
		[NativeName(NativeNameType.Field, "chroma_bit_depth_entry_minus8")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte ChromaBitDepthEntryMinus8;
		[NativeName(NativeNameType.Field, "num_tile_columns_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumTileColumnsMinus1;
		[NativeName(NativeNameType.Field, "num_tile_rows_minus1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumTileRowsMinus1;
		[NativeName(NativeNameType.Field, "reserved1")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved1;
		[NativeName(NativeNameType.Field, "reserved2")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte Reserved2;
		[NativeName(NativeNameType.Field, "column_width_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[19]")]
		public ushort ColumnWidthMinus1_0;
		public ushort ColumnWidthMinus1_1;
		public ushort ColumnWidthMinus1_2;
		public ushort ColumnWidthMinus1_3;
		public ushort ColumnWidthMinus1_4;
		public ushort ColumnWidthMinus1_5;
		public ushort ColumnWidthMinus1_6;
		public ushort ColumnWidthMinus1_7;
		public ushort ColumnWidthMinus1_8;
		public ushort ColumnWidthMinus1_9;
		public ushort ColumnWidthMinus1_10;
		public ushort ColumnWidthMinus1_11;
		public ushort ColumnWidthMinus1_12;
		public ushort ColumnWidthMinus1_13;
		public ushort ColumnWidthMinus1_14;
		public ushort ColumnWidthMinus1_15;
		public ushort ColumnWidthMinus1_16;
		public ushort ColumnWidthMinus1_17;
		public ushort ColumnWidthMinus1_18;
		[NativeName(NativeNameType.Field, "row_height_minus1")]
		[NativeName(NativeNameType.Type, "uint16_t[21]")]
		public ushort RowHeightMinus1_0;
		public ushort RowHeightMinus1_1;
		public ushort RowHeightMinus1_2;
		public ushort RowHeightMinus1_3;
		public ushort RowHeightMinus1_4;
		public ushort RowHeightMinus1_5;
		public ushort RowHeightMinus1_6;
		public ushort RowHeightMinus1_7;
		public ushort RowHeightMinus1_8;
		public ushort RowHeightMinus1_9;
		public ushort RowHeightMinus1_10;
		public ushort RowHeightMinus1_11;
		public ushort RowHeightMinus1_12;
		public ushort RowHeightMinus1_13;
		public ushort RowHeightMinus1_14;
		public ushort RowHeightMinus1_15;
		public ushort RowHeightMinus1_16;
		public ushort RowHeightMinus1_17;
		public ushort RowHeightMinus1_18;
		public ushort RowHeightMinus1_19;
		public ushort RowHeightMinus1_20;
		[NativeName(NativeNameType.Field, "reserved3")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint Reserved3;
		[NativeName(NativeNameType.Field, "pScalingLists")]
		[NativeName(NativeNameType.Type, "const StdVideoH265ScalingLists*")]
		public unsafe StdVideoH265ScalingLists* PScalingLists;
		[NativeName(NativeNameType.Field, "pPredictorPaletteEntries")]
		[NativeName(NativeNameType.Type, "const StdVideoH265PredictorPaletteEntries*")]
		public unsafe StdVideoH265PredictorPaletteEntries* PPredictorPaletteEntries;

		public unsafe StdVideoH265PictureParameterSet(StdVideoH265PpsFlags flags = default, byte ppsPicParameterSetId = default, byte ppsSeqParameterSetId = default, byte spsVideoParameterSetId = default, byte numExtraSliceHeaderBits = default, byte numRefIdxl0DefaultActiveminus1 = default, byte numRefIdxl1DefaultActiveminus1 = default, byte initQpminus26 = default, byte diffCuQpDeltaDepth = default, byte ppsCbQpOffset = default, byte ppsCrQpOffset = default, byte ppsBetaOffsetdiv2 = default, byte ppsTcOffsetdiv2 = default, byte log2ParallelMergeLevelminus2 = default, byte log2MaxTransformSkipBlockSizeminus2 = default, byte diffCuChromaQpOffsetDepth = default, byte chromaQpOffsetListLenminus1 = default, byte* cbQpOffsetList = default, byte* crQpOffsetList = default, byte log2SaoOffsetScaleLuma = default, byte log2SaoOffsetScaleChroma = default, byte ppsActYQpOffsetplus5 = default, byte ppsActCbQpOffsetplus5 = default, byte ppsActCrQpOffsetplus3 = default, byte ppsNumPalettePredictorInitializers = default, byte lumaBitDepthEntryminus8 = default, byte chromaBitDepthEntryminus8 = default, byte numTileColumnsminus1 = default, byte numTileRowsminus1 = default, byte reserved1 = default, byte reserved2 = default, ushort* columnWidthminus1 = default, ushort* rowHeightminus1 = default, uint reserved3 = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			PpsPicParameterSetId = ppsPicParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			NumExtraSliceHeaderBits = numExtraSliceHeaderBits;
			NumRefIdxL0DefaultActiveMinus1 = numRefIdxl0DefaultActiveminus1;
			NumRefIdxL1DefaultActiveMinus1 = numRefIdxl1DefaultActiveminus1;
			InitQpMinus26 = initQpminus26;
			DiffCuQpDeltaDepth = diffCuQpDeltaDepth;
			PpsCbQpOffset = ppsCbQpOffset;
			PpsCrQpOffset = ppsCrQpOffset;
			PpsBetaOffsetDiv2 = ppsBetaOffsetdiv2;
			PpsTcOffsetDiv2 = ppsTcOffsetdiv2;
			Log2ParallelMergeLevelMinus2 = log2ParallelMergeLevelminus2;
			Log2MaxTransformSkipBlockSizeMinus2 = log2MaxTransformSkipBlockSizeminus2;
			DiffCuChromaQpOffsetDepth = diffCuChromaQpOffsetDepth;
			ChromaQpOffsetListLenMinus1 = chromaQpOffsetListLenminus1;
			if (cbQpOffsetList != default)
			{
				CbQpOffsetList_0 = cbQpOffsetList[0];
				CbQpOffsetList_1 = cbQpOffsetList[1];
				CbQpOffsetList_2 = cbQpOffsetList[2];
				CbQpOffsetList_3 = cbQpOffsetList[3];
				CbQpOffsetList_4 = cbQpOffsetList[4];
				CbQpOffsetList_5 = cbQpOffsetList[5];
			}
			if (crQpOffsetList != default)
			{
				CrQpOffsetList_0 = crQpOffsetList[0];
				CrQpOffsetList_1 = crQpOffsetList[1];
				CrQpOffsetList_2 = crQpOffsetList[2];
				CrQpOffsetList_3 = crQpOffsetList[3];
				CrQpOffsetList_4 = crQpOffsetList[4];
				CrQpOffsetList_5 = crQpOffsetList[5];
			}
			Log2SaoOffsetScaleLuma = log2SaoOffsetScaleLuma;
			Log2SaoOffsetScaleChroma = log2SaoOffsetScaleChroma;
			PpsActYQpOffsetPlus5 = ppsActYQpOffsetplus5;
			PpsActCbQpOffsetPlus5 = ppsActCbQpOffsetplus5;
			PpsActCrQpOffsetPlus3 = ppsActCrQpOffsetplus3;
			PpsNumPalettePredictorInitializers = ppsNumPalettePredictorInitializers;
			LumaBitDepthEntryMinus8 = lumaBitDepthEntryminus8;
			ChromaBitDepthEntryMinus8 = chromaBitDepthEntryminus8;
			NumTileColumnsMinus1 = numTileColumnsminus1;
			NumTileRowsMinus1 = numTileRowsminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			if (columnWidthminus1 != default)
			{
				ColumnWidthMinus1_0 = columnWidthminus1[0];
				ColumnWidthMinus1_1 = columnWidthminus1[1];
				ColumnWidthMinus1_2 = columnWidthminus1[2];
				ColumnWidthMinus1_3 = columnWidthminus1[3];
				ColumnWidthMinus1_4 = columnWidthminus1[4];
				ColumnWidthMinus1_5 = columnWidthminus1[5];
				ColumnWidthMinus1_6 = columnWidthminus1[6];
				ColumnWidthMinus1_7 = columnWidthminus1[7];
				ColumnWidthMinus1_8 = columnWidthminus1[8];
				ColumnWidthMinus1_9 = columnWidthminus1[9];
				ColumnWidthMinus1_10 = columnWidthminus1[10];
				ColumnWidthMinus1_11 = columnWidthminus1[11];
				ColumnWidthMinus1_12 = columnWidthminus1[12];
				ColumnWidthMinus1_13 = columnWidthminus1[13];
				ColumnWidthMinus1_14 = columnWidthminus1[14];
				ColumnWidthMinus1_15 = columnWidthminus1[15];
				ColumnWidthMinus1_16 = columnWidthminus1[16];
				ColumnWidthMinus1_17 = columnWidthminus1[17];
				ColumnWidthMinus1_18 = columnWidthminus1[18];
			}
			if (rowHeightminus1 != default)
			{
				RowHeightMinus1_0 = rowHeightminus1[0];
				RowHeightMinus1_1 = rowHeightminus1[1];
				RowHeightMinus1_2 = rowHeightminus1[2];
				RowHeightMinus1_3 = rowHeightminus1[3];
				RowHeightMinus1_4 = rowHeightminus1[4];
				RowHeightMinus1_5 = rowHeightminus1[5];
				RowHeightMinus1_6 = rowHeightminus1[6];
				RowHeightMinus1_7 = rowHeightminus1[7];
				RowHeightMinus1_8 = rowHeightminus1[8];
				RowHeightMinus1_9 = rowHeightminus1[9];
				RowHeightMinus1_10 = rowHeightminus1[10];
				RowHeightMinus1_11 = rowHeightminus1[11];
				RowHeightMinus1_12 = rowHeightminus1[12];
				RowHeightMinus1_13 = rowHeightminus1[13];
				RowHeightMinus1_14 = rowHeightminus1[14];
				RowHeightMinus1_15 = rowHeightminus1[15];
				RowHeightMinus1_16 = rowHeightminus1[16];
				RowHeightMinus1_17 = rowHeightminus1[17];
				RowHeightMinus1_18 = rowHeightminus1[18];
				RowHeightMinus1_19 = rowHeightminus1[19];
				RowHeightMinus1_20 = rowHeightminus1[20];
			}
			Reserved3 = reserved3;
			PScalingLists = pScalingLists;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}

		public unsafe StdVideoH265PictureParameterSet(StdVideoH265PpsFlags flags = default, byte ppsPicParameterSetId = default, byte ppsSeqParameterSetId = default, byte spsVideoParameterSetId = default, byte numExtraSliceHeaderBits = default, byte numRefIdxl0DefaultActiveminus1 = default, byte numRefIdxl1DefaultActiveminus1 = default, byte initQpminus26 = default, byte diffCuQpDeltaDepth = default, byte ppsCbQpOffset = default, byte ppsCrQpOffset = default, byte ppsBetaOffsetdiv2 = default, byte ppsTcOffsetdiv2 = default, byte log2ParallelMergeLevelminus2 = default, byte log2MaxTransformSkipBlockSizeminus2 = default, byte diffCuChromaQpOffsetDepth = default, byte chromaQpOffsetListLenminus1 = default, Span<byte> cbQpOffsetList = default, Span<byte> crQpOffsetList = default, byte log2SaoOffsetScaleLuma = default, byte log2SaoOffsetScaleChroma = default, byte ppsActYQpOffsetplus5 = default, byte ppsActCbQpOffsetplus5 = default, byte ppsActCrQpOffsetplus3 = default, byte ppsNumPalettePredictorInitializers = default, byte lumaBitDepthEntryminus8 = default, byte chromaBitDepthEntryminus8 = default, byte numTileColumnsminus1 = default, byte numTileRowsminus1 = default, byte reserved1 = default, byte reserved2 = default, Span<ushort> columnWidthminus1 = default, Span<ushort> rowHeightminus1 = default, uint reserved3 = default, StdVideoH265ScalingLists* pScalingLists = default, StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries = default)
		{
			Flags = flags;
			PpsPicParameterSetId = ppsPicParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			NumExtraSliceHeaderBits = numExtraSliceHeaderBits;
			NumRefIdxL0DefaultActiveMinus1 = numRefIdxl0DefaultActiveminus1;
			NumRefIdxL1DefaultActiveMinus1 = numRefIdxl1DefaultActiveminus1;
			InitQpMinus26 = initQpminus26;
			DiffCuQpDeltaDepth = diffCuQpDeltaDepth;
			PpsCbQpOffset = ppsCbQpOffset;
			PpsCrQpOffset = ppsCrQpOffset;
			PpsBetaOffsetDiv2 = ppsBetaOffsetdiv2;
			PpsTcOffsetDiv2 = ppsTcOffsetdiv2;
			Log2ParallelMergeLevelMinus2 = log2ParallelMergeLevelminus2;
			Log2MaxTransformSkipBlockSizeMinus2 = log2MaxTransformSkipBlockSizeminus2;
			DiffCuChromaQpOffsetDepth = diffCuChromaQpOffsetDepth;
			ChromaQpOffsetListLenMinus1 = chromaQpOffsetListLenminus1;
			if (cbQpOffsetList != default)
			{
				CbQpOffsetList_0 = cbQpOffsetList[0];
				CbQpOffsetList_1 = cbQpOffsetList[1];
				CbQpOffsetList_2 = cbQpOffsetList[2];
				CbQpOffsetList_3 = cbQpOffsetList[3];
				CbQpOffsetList_4 = cbQpOffsetList[4];
				CbQpOffsetList_5 = cbQpOffsetList[5];
			}
			if (crQpOffsetList != default)
			{
				CrQpOffsetList_0 = crQpOffsetList[0];
				CrQpOffsetList_1 = crQpOffsetList[1];
				CrQpOffsetList_2 = crQpOffsetList[2];
				CrQpOffsetList_3 = crQpOffsetList[3];
				CrQpOffsetList_4 = crQpOffsetList[4];
				CrQpOffsetList_5 = crQpOffsetList[5];
			}
			Log2SaoOffsetScaleLuma = log2SaoOffsetScaleLuma;
			Log2SaoOffsetScaleChroma = log2SaoOffsetScaleChroma;
			PpsActYQpOffsetPlus5 = ppsActYQpOffsetplus5;
			PpsActCbQpOffsetPlus5 = ppsActCbQpOffsetplus5;
			PpsActCrQpOffsetPlus3 = ppsActCrQpOffsetplus3;
			PpsNumPalettePredictorInitializers = ppsNumPalettePredictorInitializers;
			LumaBitDepthEntryMinus8 = lumaBitDepthEntryminus8;
			ChromaBitDepthEntryMinus8 = chromaBitDepthEntryminus8;
			NumTileColumnsMinus1 = numTileColumnsminus1;
			NumTileRowsMinus1 = numTileRowsminus1;
			Reserved1 = reserved1;
			Reserved2 = reserved2;
			if (columnWidthminus1 != default)
			{
				ColumnWidthMinus1_0 = columnWidthminus1[0];
				ColumnWidthMinus1_1 = columnWidthminus1[1];
				ColumnWidthMinus1_2 = columnWidthminus1[2];
				ColumnWidthMinus1_3 = columnWidthminus1[3];
				ColumnWidthMinus1_4 = columnWidthminus1[4];
				ColumnWidthMinus1_5 = columnWidthminus1[5];
				ColumnWidthMinus1_6 = columnWidthminus1[6];
				ColumnWidthMinus1_7 = columnWidthminus1[7];
				ColumnWidthMinus1_8 = columnWidthminus1[8];
				ColumnWidthMinus1_9 = columnWidthminus1[9];
				ColumnWidthMinus1_10 = columnWidthminus1[10];
				ColumnWidthMinus1_11 = columnWidthminus1[11];
				ColumnWidthMinus1_12 = columnWidthminus1[12];
				ColumnWidthMinus1_13 = columnWidthminus1[13];
				ColumnWidthMinus1_14 = columnWidthminus1[14];
				ColumnWidthMinus1_15 = columnWidthminus1[15];
				ColumnWidthMinus1_16 = columnWidthminus1[16];
				ColumnWidthMinus1_17 = columnWidthminus1[17];
				ColumnWidthMinus1_18 = columnWidthminus1[18];
			}
			if (rowHeightminus1 != default)
			{
				RowHeightMinus1_0 = rowHeightminus1[0];
				RowHeightMinus1_1 = rowHeightminus1[1];
				RowHeightMinus1_2 = rowHeightminus1[2];
				RowHeightMinus1_3 = rowHeightminus1[3];
				RowHeightMinus1_4 = rowHeightminus1[4];
				RowHeightMinus1_5 = rowHeightminus1[5];
				RowHeightMinus1_6 = rowHeightminus1[6];
				RowHeightMinus1_7 = rowHeightminus1[7];
				RowHeightMinus1_8 = rowHeightminus1[8];
				RowHeightMinus1_9 = rowHeightminus1[9];
				RowHeightMinus1_10 = rowHeightminus1[10];
				RowHeightMinus1_11 = rowHeightminus1[11];
				RowHeightMinus1_12 = rowHeightminus1[12];
				RowHeightMinus1_13 = rowHeightminus1[13];
				RowHeightMinus1_14 = rowHeightminus1[14];
				RowHeightMinus1_15 = rowHeightminus1[15];
				RowHeightMinus1_16 = rowHeightminus1[16];
				RowHeightMinus1_17 = rowHeightminus1[17];
				RowHeightMinus1_18 = rowHeightminus1[18];
				RowHeightMinus1_19 = rowHeightminus1[19];
				RowHeightMinus1_20 = rowHeightminus1[20];
			}
			Reserved3 = reserved3;
			PScalingLists = pScalingLists;
			PPredictorPaletteEntries = pPredictorPaletteEntries;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265PictureInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265PictureInfoFlags
	{
		[NativeName(NativeNameType.Field, "IrapPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IrapPicFlag;
		[NativeName(NativeNameType.Field, "IdrPicFlag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IdrPicFlag;
		[NativeName(NativeNameType.Field, "IsReference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint IsReference;
		[NativeName(NativeNameType.Field, "short_term_ref_pic_set_sps_flag")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint ShortTermRefPicSetSpsFlag;

		public unsafe StdVideoDecodeH265PictureInfoFlags(uint irapPicFlag = default, uint idrPicFlag = default, uint isReference = default, uint shortTermRefPicSetSpsFlag = default)
		{
			IrapPicFlag = irapPicFlag;
			IdrPicFlag = idrPicFlag;
			IsReference = isReference;
			ShortTermRefPicSetSpsFlag = shortTermRefPicSetSpsFlag;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265PictureInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265PictureInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH265PictureInfoFlags")]
		public StdVideoDecodeH265PictureInfoFlags Flags;
		[NativeName(NativeNameType.Field, "sps_video_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte SpsVideoParameterSetId;
		[NativeName(NativeNameType.Field, "pps_seq_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsSeqParameterSetId;
		[NativeName(NativeNameType.Field, "pps_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte PpsPicParameterSetId;
		[NativeName(NativeNameType.Field, "NumDeltaPocsOfRefRpsIdx")]
		[NativeName(NativeNameType.Type, "uint8_t")]
		public byte NumDeltaPocsOfRefRpsIdx;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;
		[NativeName(NativeNameType.Field, "NumBitsForSTRefPicSetInSlice")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort NumBitsForSTRefPicSetInSlice;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Reserved;
		[NativeName(NativeNameType.Field, "RefPicSetStCurrBefore")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetStCurrBefore_0;
		public byte RefPicSetStCurrBefore_1;
		public byte RefPicSetStCurrBefore_2;
		public byte RefPicSetStCurrBefore_3;
		public byte RefPicSetStCurrBefore_4;
		public byte RefPicSetStCurrBefore_5;
		public byte RefPicSetStCurrBefore_6;
		public byte RefPicSetStCurrBefore_7;
		[NativeName(NativeNameType.Field, "RefPicSetStCurrAfter")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetStCurrAfter_0;
		public byte RefPicSetStCurrAfter_1;
		public byte RefPicSetStCurrAfter_2;
		public byte RefPicSetStCurrAfter_3;
		public byte RefPicSetStCurrAfter_4;
		public byte RefPicSetStCurrAfter_5;
		public byte RefPicSetStCurrAfter_6;
		public byte RefPicSetStCurrAfter_7;
		[NativeName(NativeNameType.Field, "RefPicSetLtCurr")]
		[NativeName(NativeNameType.Type, "uint8_t[8]")]
		public byte RefPicSetLtCurr_0;
		public byte RefPicSetLtCurr_1;
		public byte RefPicSetLtCurr_2;
		public byte RefPicSetLtCurr_3;
		public byte RefPicSetLtCurr_4;
		public byte RefPicSetLtCurr_5;
		public byte RefPicSetLtCurr_6;
		public byte RefPicSetLtCurr_7;

		public unsafe StdVideoDecodeH265PictureInfo(StdVideoDecodeH265PictureInfoFlags flags = default, byte spsVideoParameterSetId = default, byte ppsSeqParameterSetId = default, byte ppsPicParameterSetId = default, byte numDeltaPocsOfRefRpsIdx = default, int picOrderCntVal = default, ushort numBitsForStRefPicSetInSlice = default, ushort reserved = default, byte* refPicSetStCurrBefore = default, byte* refPicSetStCurrAfter = default, byte* refPicSetLtCurr = default)
		{
			Flags = flags;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			PpsPicParameterSetId = ppsPicParameterSetId;
			NumDeltaPocsOfRefRpsIdx = numDeltaPocsOfRefRpsIdx;
			PicOrderCntVal = picOrderCntVal;
			NumBitsForSTRefPicSetInSlice = numBitsForStRefPicSetInSlice;
			Reserved = reserved;
			if (refPicSetStCurrBefore != default)
			{
				RefPicSetStCurrBefore_0 = refPicSetStCurrBefore[0];
				RefPicSetStCurrBefore_1 = refPicSetStCurrBefore[1];
				RefPicSetStCurrBefore_2 = refPicSetStCurrBefore[2];
				RefPicSetStCurrBefore_3 = refPicSetStCurrBefore[3];
				RefPicSetStCurrBefore_4 = refPicSetStCurrBefore[4];
				RefPicSetStCurrBefore_5 = refPicSetStCurrBefore[5];
				RefPicSetStCurrBefore_6 = refPicSetStCurrBefore[6];
				RefPicSetStCurrBefore_7 = refPicSetStCurrBefore[7];
			}
			if (refPicSetStCurrAfter != default)
			{
				RefPicSetStCurrAfter_0 = refPicSetStCurrAfter[0];
				RefPicSetStCurrAfter_1 = refPicSetStCurrAfter[1];
				RefPicSetStCurrAfter_2 = refPicSetStCurrAfter[2];
				RefPicSetStCurrAfter_3 = refPicSetStCurrAfter[3];
				RefPicSetStCurrAfter_4 = refPicSetStCurrAfter[4];
				RefPicSetStCurrAfter_5 = refPicSetStCurrAfter[5];
				RefPicSetStCurrAfter_6 = refPicSetStCurrAfter[6];
				RefPicSetStCurrAfter_7 = refPicSetStCurrAfter[7];
			}
			if (refPicSetLtCurr != default)
			{
				RefPicSetLtCurr_0 = refPicSetLtCurr[0];
				RefPicSetLtCurr_1 = refPicSetLtCurr[1];
				RefPicSetLtCurr_2 = refPicSetLtCurr[2];
				RefPicSetLtCurr_3 = refPicSetLtCurr[3];
				RefPicSetLtCurr_4 = refPicSetLtCurr[4];
				RefPicSetLtCurr_5 = refPicSetLtCurr[5];
				RefPicSetLtCurr_6 = refPicSetLtCurr[6];
				RefPicSetLtCurr_7 = refPicSetLtCurr[7];
			}
		}

		public unsafe StdVideoDecodeH265PictureInfo(StdVideoDecodeH265PictureInfoFlags flags = default, byte spsVideoParameterSetId = default, byte ppsSeqParameterSetId = default, byte ppsPicParameterSetId = default, byte numDeltaPocsOfRefRpsIdx = default, int picOrderCntVal = default, ushort numBitsForStRefPicSetInSlice = default, ushort reserved = default, Span<byte> refPicSetStCurrBefore = default, Span<byte> refPicSetStCurrAfter = default, Span<byte> refPicSetLtCurr = default)
		{
			Flags = flags;
			SpsVideoParameterSetId = spsVideoParameterSetId;
			PpsSeqParameterSetId = ppsSeqParameterSetId;
			PpsPicParameterSetId = ppsPicParameterSetId;
			NumDeltaPocsOfRefRpsIdx = numDeltaPocsOfRefRpsIdx;
			PicOrderCntVal = picOrderCntVal;
			NumBitsForSTRefPicSetInSlice = numBitsForStRefPicSetInSlice;
			Reserved = reserved;
			if (refPicSetStCurrBefore != default)
			{
				RefPicSetStCurrBefore_0 = refPicSetStCurrBefore[0];
				RefPicSetStCurrBefore_1 = refPicSetStCurrBefore[1];
				RefPicSetStCurrBefore_2 = refPicSetStCurrBefore[2];
				RefPicSetStCurrBefore_3 = refPicSetStCurrBefore[3];
				RefPicSetStCurrBefore_4 = refPicSetStCurrBefore[4];
				RefPicSetStCurrBefore_5 = refPicSetStCurrBefore[5];
				RefPicSetStCurrBefore_6 = refPicSetStCurrBefore[6];
				RefPicSetStCurrBefore_7 = refPicSetStCurrBefore[7];
			}
			if (refPicSetStCurrAfter != default)
			{
				RefPicSetStCurrAfter_0 = refPicSetStCurrAfter[0];
				RefPicSetStCurrAfter_1 = refPicSetStCurrAfter[1];
				RefPicSetStCurrAfter_2 = refPicSetStCurrAfter[2];
				RefPicSetStCurrAfter_3 = refPicSetStCurrAfter[3];
				RefPicSetStCurrAfter_4 = refPicSetStCurrAfter[4];
				RefPicSetStCurrAfter_5 = refPicSetStCurrAfter[5];
				RefPicSetStCurrAfter_6 = refPicSetStCurrAfter[6];
				RefPicSetStCurrAfter_7 = refPicSetStCurrAfter[7];
			}
			if (refPicSetLtCurr != default)
			{
				RefPicSetLtCurr_0 = refPicSetLtCurr[0];
				RefPicSetLtCurr_1 = refPicSetLtCurr[1];
				RefPicSetLtCurr_2 = refPicSetLtCurr[2];
				RefPicSetLtCurr_3 = refPicSetLtCurr[3];
				RefPicSetLtCurr_4 = refPicSetLtCurr[4];
				RefPicSetLtCurr_5 = refPicSetLtCurr[5];
				RefPicSetLtCurr_6 = refPicSetLtCurr[6];
				RefPicSetLtCurr_7 = refPicSetLtCurr[7];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265ReferenceInfoFlags")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265ReferenceInfoFlags
	{
		[NativeName(NativeNameType.Field, "used_for_long_term_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UsedForLongTermReference;
		[NativeName(NativeNameType.Field, "unused_for_reference")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint UnusedForReference;

		public unsafe StdVideoDecodeH265ReferenceInfoFlags(uint usedForLongTermReference = default, uint unusedForReference = default)
		{
			UsedForLongTermReference = usedForLongTermReference;
			UnusedForReference = unusedForReference;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "StdVideoDecodeH265ReferenceInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct StdVideoDecodeH265ReferenceInfo
	{
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "StdVideoDecodeH265ReferenceInfoFlags")]
		public StdVideoDecodeH265ReferenceInfoFlags Flags;
		[NativeName(NativeNameType.Field, "PicOrderCntVal")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PicOrderCntVal;

		public unsafe StdVideoDecodeH265ReferenceInfo(StdVideoDecodeH265ReferenceInfoFlags flags = default, int picOrderCntVal = default)
		{
			Flags = flags;
			PicOrderCntVal = picOrderCntVal;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265ProfileInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265ProfileInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stdProfileIdc")]
		[NativeName(NativeNameType.Type, "StdVideoH265ProfileIdc")]
		public StdVideoH265ProfileIdc StdProfileIdc;

		public unsafe VkVideoDecodeH265ProfileInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoH265ProfileIdc stdProfileIdc = default)
		{
			SType = sType;
			PNext = pNext;
			StdProfileIdc = stdProfileIdc;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265CapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265CapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxLevelIdc")]
		[NativeName(NativeNameType.Type, "StdVideoH265LevelIdc")]
		public StdVideoH265LevelIdc MaxLevelIdc;

		public unsafe VkVideoDecodeH265CapabilitiesKHR(VkStructureType sType = default, void* pNext = default, StdVideoH265LevelIdc maxLevelIdc = default)
		{
			SType = sType;
			PNext = pNext;
			MaxLevelIdc = maxLevelIdc;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265SessionParametersAddInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265SessionParametersAddInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stdVPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StdVPSCount;
		[NativeName(NativeNameType.Field, "pStdVPSs")]
		[NativeName(NativeNameType.Type, "const StdVideoH265VideoParameterSet*")]
		public unsafe StdVideoH265VideoParameterSet* PStdVPSs;
		[NativeName(NativeNameType.Field, "stdSPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StdSPSCount;
		[NativeName(NativeNameType.Field, "pStdSPSs")]
		[NativeName(NativeNameType.Type, "const StdVideoH265SequenceParameterSet*")]
		public unsafe StdVideoH265SequenceParameterSet* PStdSPSs;
		[NativeName(NativeNameType.Field, "stdPPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint StdPPSCount;
		[NativeName(NativeNameType.Field, "pStdPPSs")]
		[NativeName(NativeNameType.Type, "const StdVideoH265PictureParameterSet*")]
		public unsafe StdVideoH265PictureParameterSet* PStdPPSs;

		public unsafe VkVideoDecodeH265SessionParametersAddInfoKHR(VkStructureType sType = default, void* pNext = default, uint stdVPSCount = default, StdVideoH265VideoParameterSet* pStdVPSs = default, uint stdSPSCount = default, StdVideoH265SequenceParameterSet* pStdSPSs = default, uint stdPPSCount = default, StdVideoH265PictureParameterSet* pStdPPSs = default)
		{
			SType = sType;
			PNext = pNext;
			StdVPSCount = stdVPSCount;
			PStdVPSs = pStdVPSs;
			StdSPSCount = stdSPSCount;
			PStdSPSs = pStdSPSs;
			StdPPSCount = stdPPSCount;
			PStdPPSs = pStdPPSs;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265SessionParametersCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265SessionParametersCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "maxStdVPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStdVPSCount;
		[NativeName(NativeNameType.Field, "maxStdSPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStdSPSCount;
		[NativeName(NativeNameType.Field, "maxStdPPSCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxStdPPSCount;
		[NativeName(NativeNameType.Field, "pParametersAddInfo")]
		[NativeName(NativeNameType.Type, "const VkVideoDecodeH265SessionParametersAddInfoKHR*")]
		public unsafe VkVideoDecodeH265SessionParametersAddInfoKHR* PParametersAddInfo;

		public unsafe VkVideoDecodeH265SessionParametersCreateInfoKHR(VkStructureType sType = default, void* pNext = default, uint maxStdVPSCount = default, uint maxStdSPSCount = default, uint maxStdPPSCount = default, VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo = default)
		{
			SType = sType;
			PNext = pNext;
			MaxStdVPSCount = maxStdVPSCount;
			MaxStdSPSCount = maxStdSPSCount;
			MaxStdPPSCount = maxStdPPSCount;
			PParametersAddInfo = pParametersAddInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265PictureInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265PictureInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pStdPictureInfo")]
		[NativeName(NativeNameType.Type, "const StdVideoDecodeH265PictureInfo*")]
		public unsafe StdVideoDecodeH265PictureInfo* PStdPictureInfo;
		[NativeName(NativeNameType.Field, "sliceSegmentCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SliceSegmentCount;
		[NativeName(NativeNameType.Field, "pSliceSegmentOffsets")]
		[NativeName(NativeNameType.Type, "const uint32_t*")]
		public unsafe uint* PSliceSegmentOffsets;

		public unsafe VkVideoDecodeH265PictureInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoDecodeH265PictureInfo* pStdPictureInfo = default, uint sliceSegmentCount = default, uint* pSliceSegmentOffsets = default)
		{
			SType = sType;
			PNext = pNext;
			PStdPictureInfo = pStdPictureInfo;
			SliceSegmentCount = sliceSegmentCount;
			PSliceSegmentOffsets = pSliceSegmentOffsets;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkVideoDecodeH265DpbSlotInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkVideoDecodeH265DpbSlotInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pStdReferenceInfo")]
		[NativeName(NativeNameType.Type, "const StdVideoDecodeH265ReferenceInfo*")]
		public unsafe StdVideoDecodeH265ReferenceInfo* PStdReferenceInfo;

		public unsafe VkVideoDecodeH265DpbSlotInfoKHR(VkStructureType sType = default, void* pNext = default, StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo = default)
		{
			SType = sType;
			PNext = pNext;
			PStdReferenceInfo = pStdReferenceInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkDeviceQueueGlobalPriorityCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "globalPriority")]
		[NativeName(NativeNameType.Type, "VkQueueGlobalPriorityKHR")]
		public VkQueueGlobalPriorityKHR GlobalPriority;

		public unsafe VkDeviceQueueGlobalPriorityCreateInfoKHR(VkStructureType sType = default, void* pNext = default, VkQueueGlobalPriorityKHR globalPriority = default)
		{
			SType = sType;
			PNext = pNext;
			GlobalPriority = globalPriority;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "globalPriorityQuery")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint GlobalPriorityQuery;

		public unsafe VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint globalPriorityQuery = default)
		{
			SType = sType;
			PNext = pNext;
			GlobalPriorityQuery = globalPriorityQuery;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkQueueFamilyGlobalPriorityPropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "priorityCount")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint PriorityCount;
		[NativeName(NativeNameType.Field, "priorities")]
		[NativeName(NativeNameType.Type, "VkQueueGlobalPriorityKHR[16]")]
		public VkQueueGlobalPriorityKHR Priorities_0;
		public VkQueueGlobalPriorityKHR Priorities_1;
		public VkQueueGlobalPriorityKHR Priorities_2;
		public VkQueueGlobalPriorityKHR Priorities_3;
		public VkQueueGlobalPriorityKHR Priorities_4;
		public VkQueueGlobalPriorityKHR Priorities_5;
		public VkQueueGlobalPriorityKHR Priorities_6;
		public VkQueueGlobalPriorityKHR Priorities_7;
		public VkQueueGlobalPriorityKHR Priorities_8;
		public VkQueueGlobalPriorityKHR Priorities_9;
		public VkQueueGlobalPriorityKHR Priorities_10;
		public VkQueueGlobalPriorityKHR Priorities_11;
		public VkQueueGlobalPriorityKHR Priorities_12;
		public VkQueueGlobalPriorityKHR Priorities_13;
		public VkQueueGlobalPriorityKHR Priorities_14;
		public VkQueueGlobalPriorityKHR Priorities_15;

		public unsafe VkQueueFamilyGlobalPriorityPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint priorityCount = default, VkQueueGlobalPriorityKHR* priorities = default)
		{
			SType = sType;
			PNext = pNext;
			PriorityCount = priorityCount;
			if (priorities != default)
			{
				Priorities_0 = priorities[0];
				Priorities_1 = priorities[1];
				Priorities_2 = priorities[2];
				Priorities_3 = priorities[3];
				Priorities_4 = priorities[4];
				Priorities_5 = priorities[5];
				Priorities_6 = priorities[6];
				Priorities_7 = priorities[7];
				Priorities_8 = priorities[8];
				Priorities_9 = priorities[9];
				Priorities_10 = priorities[10];
				Priorities_11 = priorities[11];
				Priorities_12 = priorities[12];
				Priorities_13 = priorities[13];
				Priorities_14 = priorities[14];
				Priorities_15 = priorities[15];
			}
		}

		public unsafe VkQueueFamilyGlobalPriorityPropertiesKHR(VkStructureType sType = default, void* pNext = default, uint priorityCount = default, Span<VkQueueGlobalPriorityKHR> priorities = default)
		{
			SType = sType;
			PNext = pNext;
			PriorityCount = priorityCount;
			if (priorities != default)
			{
				Priorities_0 = priorities[0];
				Priorities_1 = priorities[1];
				Priorities_2 = priorities[2];
				Priorities_3 = priorities[3];
				Priorities_4 = priorities[4];
				Priorities_5 = priorities[5];
				Priorities_6 = priorities[6];
				Priorities_7 = priorities[7];
				Priorities_8 = priorities[8];
				Priorities_9 = priorities[9];
				Priorities_10 = priorities[10];
				Priorities_11 = priorities[11];
				Priorities_12 = priorities[12];
				Priorities_13 = priorities[13];
				Priorities_14 = priorities[14];
				Priorities_15 = priorities[15];
			}
		}


		public unsafe Span<VkQueueGlobalPriorityKHR> Priorities
		
		{
			get
			{
				fixed (VkQueueGlobalPriorityKHR* p = &this.Priorities_0)
				{
					return new Span<VkQueueGlobalPriorityKHR>(p, 16);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "VkFragmentShadingRateAttachmentInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkFragmentShadingRateAttachmentInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pFragmentShadingRateAttachment")]
		[NativeName(NativeNameType.Type, "const VkAttachmentReference2*")]
		public unsafe VkAttachmentReference2* PFragmentShadingRateAttachment;
		[NativeName(NativeNameType.Field, "shadingRateAttachmentTexelSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D ShadingRateAttachmentTexelSize;

		public unsafe VkFragmentShadingRateAttachmentInfoKHR(VkStructureType sType = default, void* pNext = default, VkAttachmentReference2* pFragmentShadingRateAttachment = default, VkExtent2D shadingRateAttachmentTexelSize = default)
		{
			SType = sType;
			PNext = pNext;
			PFragmentShadingRateAttachment = pFragmentShadingRateAttachment;
			ShadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineFragmentShadingRateStateCreateInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "fragmentSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D FragmentSize;
		[NativeName(NativeNameType.Field, "combinerOps")]
		[NativeName(NativeNameType.Type, "VkFragmentShadingRateCombinerOpKHR[2]")]
		public VkFragmentShadingRateCombinerOpKHR CombinerOps_0;
		public VkFragmentShadingRateCombinerOpKHR CombinerOps_1;

		public unsafe VkPipelineFragmentShadingRateStateCreateInfoKHR(VkStructureType sType = default, void* pNext = default, VkExtent2D fragmentSize = default, VkFragmentShadingRateCombinerOpKHR* combinerOps = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentSize = fragmentSize;
			if (combinerOps != default)
			{
				CombinerOps_0 = combinerOps[0];
				CombinerOps_1 = combinerOps[1];
			}
		}

		public unsafe VkPipelineFragmentShadingRateStateCreateInfoKHR(VkStructureType sType = default, void* pNext = default, VkExtent2D fragmentSize = default, Span<VkFragmentShadingRateCombinerOpKHR> combinerOps = default)
		{
			SType = sType;
			PNext = pNext;
			FragmentSize = fragmentSize;
			if (combinerOps != default)
			{
				CombinerOps_0 = combinerOps[0];
				CombinerOps_1 = combinerOps[1];
			}
		}


		public unsafe Span<VkFragmentShadingRateCombinerOpKHR> CombinerOps
		
		{
			get
			{
				fixed (VkFragmentShadingRateCombinerOpKHR* p = &this.CombinerOps_0)
				{
					return new Span<VkFragmentShadingRateCombinerOpKHR>(p, 2);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentShadingRateFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineFragmentShadingRate")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineFragmentShadingRate;
		[NativeName(NativeNameType.Field, "primitiveFragmentShadingRate")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitiveFragmentShadingRate;
		[NativeName(NativeNameType.Field, "attachmentFragmentShadingRate")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint AttachmentFragmentShadingRate;

		public unsafe VkPhysicalDeviceFragmentShadingRateFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint pipelineFragmentShadingRate = default, uint primitiveFragmentShadingRate = default, uint attachmentFragmentShadingRate = default)
		{
			SType = sType;
			PNext = pNext;
			PipelineFragmentShadingRate = pipelineFragmentShadingRate;
			PrimitiveFragmentShadingRate = primitiveFragmentShadingRate;
			AttachmentFragmentShadingRate = attachmentFragmentShadingRate;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentShadingRatePropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "minFragmentShadingRateAttachmentTexelSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MinFragmentShadingRateAttachmentTexelSize;
		[NativeName(NativeNameType.Field, "maxFragmentShadingRateAttachmentTexelSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxFragmentShadingRateAttachmentTexelSize;
		[NativeName(NativeNameType.Field, "maxFragmentShadingRateAttachmentTexelSizeAspectRatio")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentShadingRateAttachmentTexelSizeAspectRatio;
		[NativeName(NativeNameType.Field, "primitiveFragmentShadingRateWithMultipleViewports")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PrimitiveFragmentShadingRateWithMultipleViewports;
		[NativeName(NativeNameType.Field, "layeredShadingRateAttachments")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint LayeredShadingRateAttachments;
		[NativeName(NativeNameType.Field, "fragmentShadingRateNonTrivialCombinerOps")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateNonTrivialCombinerOps;
		[NativeName(NativeNameType.Field, "maxFragmentSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D MaxFragmentSize;
		[NativeName(NativeNameType.Field, "maxFragmentSizeAspectRatio")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentSizeAspectRatio;
		[NativeName(NativeNameType.Field, "maxFragmentShadingRateCoverageSamples")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint MaxFragmentShadingRateCoverageSamples;
		[NativeName(NativeNameType.Field, "maxFragmentShadingRateRasterizationSamples")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlagBits")]
		public VkSampleCountFlagBits MaxFragmentShadingRateRasterizationSamples;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithShaderDepthStencilWrites")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithShaderDepthStencilWrites;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithSampleMask")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithSampleMask;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithShaderSampleMask")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithShaderSampleMask;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithConservativeRasterization")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithConservativeRasterization;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithFragmentShaderInterlock")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithFragmentShaderInterlock;
		[NativeName(NativeNameType.Field, "fragmentShadingRateWithCustomSampleLocations")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateWithCustomSampleLocations;
		[NativeName(NativeNameType.Field, "fragmentShadingRateStrictMultiplyCombiner")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint FragmentShadingRateStrictMultiplyCombiner;

		public unsafe VkPhysicalDeviceFragmentShadingRatePropertiesKHR(VkStructureType sType = default, void* pNext = default, VkExtent2D minFragmentShadingRateAttachmentTexelSize = default, VkExtent2D maxFragmentShadingRateAttachmentTexelSize = default, uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio = default, uint primitiveFragmentShadingRateWithMultipleViewports = default, uint layeredShadingRateAttachments = default, uint fragmentShadingRateNonTrivialCombinerOps = default, VkExtent2D maxFragmentSize = default, uint maxFragmentSizeAspectRatio = default, uint maxFragmentShadingRateCoverageSamples = default, VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples = default, uint fragmentShadingRateWithShaderDepthStencilWrites = default, uint fragmentShadingRateWithSampleMask = default, uint fragmentShadingRateWithShaderSampleMask = default, uint fragmentShadingRateWithConservativeRasterization = default, uint fragmentShadingRateWithFragmentShaderInterlock = default, uint fragmentShadingRateWithCustomSampleLocations = default, uint fragmentShadingRateStrictMultiplyCombiner = default)
		{
			SType = sType;
			PNext = pNext;
			MinFragmentShadingRateAttachmentTexelSize = minFragmentShadingRateAttachmentTexelSize;
			MaxFragmentShadingRateAttachmentTexelSize = maxFragmentShadingRateAttachmentTexelSize;
			MaxFragmentShadingRateAttachmentTexelSizeAspectRatio = maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
			PrimitiveFragmentShadingRateWithMultipleViewports = primitiveFragmentShadingRateWithMultipleViewports;
			LayeredShadingRateAttachments = layeredShadingRateAttachments;
			FragmentShadingRateNonTrivialCombinerOps = fragmentShadingRateNonTrivialCombinerOps;
			MaxFragmentSize = maxFragmentSize;
			MaxFragmentSizeAspectRatio = maxFragmentSizeAspectRatio;
			MaxFragmentShadingRateCoverageSamples = maxFragmentShadingRateCoverageSamples;
			MaxFragmentShadingRateRasterizationSamples = maxFragmentShadingRateRasterizationSamples;
			FragmentShadingRateWithShaderDepthStencilWrites = fragmentShadingRateWithShaderDepthStencilWrites;
			FragmentShadingRateWithSampleMask = fragmentShadingRateWithSampleMask;
			FragmentShadingRateWithShaderSampleMask = fragmentShadingRateWithShaderSampleMask;
			FragmentShadingRateWithConservativeRasterization = fragmentShadingRateWithConservativeRasterization;
			FragmentShadingRateWithFragmentShaderInterlock = fragmentShadingRateWithFragmentShaderInterlock;
			FragmentShadingRateWithCustomSampleLocations = fragmentShadingRateWithCustomSampleLocations;
			FragmentShadingRateStrictMultiplyCombiner = fragmentShadingRateStrictMultiplyCombiner;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDeviceFragmentShadingRateKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDeviceFragmentShadingRateKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "sampleCounts")]
		[NativeName(NativeNameType.Type, "VkSampleCountFlags")]
		public uint SampleCounts;
		[NativeName(NativeNameType.Field, "fragmentSize")]
		[NativeName(NativeNameType.Type, "VkExtent2D")]
		public VkExtent2D FragmentSize;

		public unsafe VkPhysicalDeviceFragmentShadingRateKHR(VkStructureType sType = default, void* pNext = default, uint sampleCounts = default, VkExtent2D fragmentSize = default)
		{
			SType = sType;
			PNext = pNext;
			SampleCounts = sampleCounts;
			FragmentSize = fragmentSize;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkSurfaceProtectedCapabilitiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkSurfaceProtectedCapabilitiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "supportsProtected")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint SupportsProtected;

		public unsafe VkSurfaceProtectedCapabilitiesKHR(VkStructureType sType = default, void* pNext = default, uint supportsProtected = default)
		{
			SType = sType;
			PNext = pNext;
			SupportsProtected = supportsProtected;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePresentWaitFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePresentWaitFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "presentWait")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PresentWait;

		public unsafe VkPhysicalDevicePresentWaitFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint presentWait = default)
		{
			SType = sType;
			PNext = pNext;
			PresentWait = presentWait;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipelineExecutableInfo")]
		[NativeName(NativeNameType.Type, "VkBool32")]
		public uint PipelineExecutableInfo;

		public unsafe VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(VkStructureType sType = default, void* pNext = default, uint pipelineExecutableInfo = default)
		{
			SType = sType;
			PNext = pNext;
			PipelineExecutableInfo = pipelineExecutableInfo;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineInfoKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineInfoKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "pipeline")]
		[NativeName(NativeNameType.Type, "VkPipeline")]
		public VkPipeline Pipeline;

		public unsafe VkPipelineInfoKHR(VkStructureType sType = default, void* pNext = default, VkPipeline pipeline = default)
		{
			SType = sType;
			PNext = pNext;
			Pipeline = pipeline;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "VkPipelineExecutablePropertiesKHR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VkPipelineExecutablePropertiesKHR
	{
		[NativeName(NativeNameType.Field, "sType")]
		[NativeName(NativeNameType.Type, "VkStructureType")]
		public VkStructureType SType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PNext;
		[NativeName(NativeNameType.Field, "stages")]
		[NativeName(NativeNameType.Type, "VkShaderStageFlags")]
		public uint Stages;
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Name_0;
		public byte Name_1;
		public byte Name_2;
		public byte Name_3;
		public byte Name_4;
		public byte Name_5;
		public byte Name_6;
		public byte Name_7;
		public byte Name_8;
		public byte Name_9;
		public byte Name_10;
		public byte Name_11;
		public byte Name_12;
		public byte Name_13;
		public byte Name_14;
		public byte Name_15;
		public byte Name_16;
		public byte Name_17;
		public byte Name_18;
		public byte Name_19;
		public byte Name_20;
		public byte Name_21;
		public byte Name_22;
		public byte Name_23;
		public byte Name_24;
		public byte Name_25;
		public byte Name_26;
		public byte Name_27;
		public byte Name_28;
		public byte Name_29;
		public byte Name_30;
		public byte Name_31;
		public byte Name_32;
		public byte Name_33;
		public byte Name_34;
		public byte Name_35;
		public byte Name_36;
		public byte Name_37;
		public byte Name_38;
		public byte Name_39;
		public byte Name_40;
		public byte Name_41;
		public byte Name_42;
		public byte Name_43;
		public byte Name_44;
		public byte Name_45;
		public byte Name_46;
		public byte Name_47;
		public byte Name_48;
		public byte Name_49;
		public byte Name_50;
		public byte Name_51;
		public byte Name_52;
		public byte Name_53;
		public byte Name_54;
		public byte Name_55;
		public byte Name_56;
		public byte Name_57;
		public byte Name_58;
		public byte Name_59;
		public byte Name_60;
		public byte Name_61;
		public byte Name_62;
		public byte Name_63;
		public byte Name_64;
		public byte Name_65;
		public byte Name_66;
		public byte Name_67;
		public byte Name_68;
		public byte Name_69;
		public byte Name_70;
		public byte Name_71;
		public byte Name_72;
		public byte Name_73;
		public byte Name_74;
		public byte Name_75;
		public byte Name_76;
		public byte Name_77;
		public byte Name_78;
		public byte Name_79;
		public byte Name_80;
		public byte Name_81;
		public byte Name_82;
		public byte Name_83;
		public byte Name_84;
		public byte Name_85;
		public byte Name_86;
		public byte Name_87;
		public byte Name_88;
		public byte Name_89;
		public byte Name_90;
		public byte Name_91;
		public byte Name_92;
		public byte Name_93;
		public byte Name_94;
		public byte Name_95;
		public byte Name_96;
		public byte Name_97;
		public byte Name_98;
		public byte Name_99;
		public byte Name_100;
		public byte Name_101;
		public byte Name_102;
		public byte Name_103;
		public byte Name_104;
		public byte Name_105;
		public byte Name_106;
		public byte Name_107;
		public byte Name_108;
		public byte Name_109;
		public byte Name_110;
		public byte Name_111;
		public byte Name_112;
		public byte Name_113;
		public byte Name_114;
		public byte Name_115;
		public byte Name_116;
		public byte Name_117;
		public byte Name_118;
		public byte Name_119;
		public byte Name_120;
		public byte Name_121;
		public byte Name_122;
		public byte Name_123;
		public byte Name_124;
		public byte Name_125;
		public byte Name_126;
		public byte Name_127;
		public byte Name_128;
		public byte Name_129;
		public byte Name_130;
		public byte Name_131;
		public byte Name_132;
		public byte Name_133;
		public byte Name_134;
		public byte Name_135;
		public byte Name_136;
		public byte Name_137;
		public byte Name_138;
		public byte Name_139;
		public byte Name_140;
		public byte Name_141;
		public byte Name_142;
		public byte Name_143;
		public byte Name_144;
		public byte Name_145;
		public byte Name_146;
		public byte Name_147;
		public byte Name_148;
		public byte Name_149;
		public byte Name_150;
		public byte Name_151;
		public byte Name_152;
		public byte Name_153;
		public byte Name_154;
		public byte Name_155;
		public byte Name_156;
		public byte Name_157;
		public byte Name_158;
		public byte Name_159;
		public byte Name_160;
		public byte Name_161;
		public byte Name_162;
		public byte Name_163;
		public byte Name_164;
		public byte Name_165;
		public byte Name_166;
		public byte Name_167;
		public byte Name_168;
		public byte Name_169;
		public byte Name_170;
		public byte Name_171;
		public byte Name_172;
		public byte Name_173;
		public byte Name_174;
		public byte Name_175;
		public byte Name_176;
		public byte Name_177;
		public byte Name_178;
		public byte Name_179;
		public byte Name_180;
		public byte Name_181;
		public byte Name_182;
		public byte Name_183;
		public byte Name_184;
		public byte Name_185;
		public byte Name_186;
		public byte Name_187;
		public byte Name_188;
		public byte Name_189;
		public byte Name_190;
		public byte Name_191;
		public byte Name_192;
		public byte Name_193;
		public byte Name_194;
		public byte Name_195;
		public byte Name_196;
		public byte Name_197;
		public byte Name_198;
		public byte Name_199;
		public byte Name_200;
		public byte Name_201;
		public byte Name_202;
		public byte Name_203;
		public byte Name_204;
		public byte Name_205;
		public byte Name_206;
		public byte Name_207;
		public byte Name_208;
		public byte Name_209;
		public byte Name_210;
		public byte Name_211;
		public byte Name_212;
		public byte Name_213;
		public byte Name_214;
		public byte Name_215;
		public byte Name_216;
		public byte Name_217;
		public byte Name_218;
		public byte Name_219;
		public byte Name_220;
		public byte Name_221;
		public byte Name_222;
		public byte Name_223;
		public byte Name_224;
		public byte Name_225;
		public byte Name_226;
		public byte Name_227;
		public byte Name_228;
		public byte Name_229;
		public byte Name_230;
		public byte Name_231;
		public byte Name_232;
		public byte Name_233;
		public byte Name_234;
		public byte Name_235;
		public byte Name_236;
		public byte Name_237;
		public byte Name_238;
		public byte Name_239;
		public byte Name_240;
		public byte Name_241;
		public byte Name_242;
		public byte Name_243;
		public byte Name_244;
		public byte Name_245;
		public byte Name_246;
		public byte Name_247;
		public byte Name_248;
		public byte Name_249;
		public byte Name_250;
		public byte Name_251;
		public byte Name_252;
		public byte Name_253;
		public byte Name_254;
		public byte Name_255;
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "char[256]")]
		public byte Description_0;
		public byte Description_1;
		public byte Description_2;
		public byte Description_3;
		public byte Description_4;
		public byte Description_5;
		public byte Description_6;
		public byte Description_7;
		public byte Description_8;
		public byte Description_9;
		public byte Description_10;
		public byte Description_11;
		public byte Description_12;
		public byte Description_13;
		public byte Description_14;
		public byte Description_15;
		public byte Description_16;
		public byte Description_17;
		public byte Description_18;
		public byte Description_19;
		public byte Description_20;
		public byte Description_21;
		public byte Description_22;
		public byte Description_23;
		public byte Description_24;
		public byte Description_25;
		public byte Description_26;
		public byte Description_27;
		public byte Description_28;
		public byte Description_29;
		public byte Description_30;
		public byte Description_31;
		public byte Description_32;
		public byte Description_33;
		public byte Description_34;
		public byte Description_35;
		public byte Description_36;
		public byte Description_37;
		public byte Description_38;
		public byte Description_39;
		public byte Description_40;
		public byte Description_41;
		public byte Description_42;
		public byte Description_43;
		public byte Description_44;
		public byte Description_45;
		public byte Description_46;
		public byte Description_47;
		public byte Description_48;
		public byte Description_49;
		public byte Description_50;
		public byte Description_51;
		public byte Description_52;
		public byte Description_53;
		public byte Description_54;
		public byte Description_55;
		public byte Description_56;
		public byte Description_57;
		public byte Description_58;
		public byte Description_59;
		public byte Description_60;
		public byte Description_61;
		public byte Description_62;
		public byte Description_63;
		public byte Description_64;
		public byte Description_65;
		public byte Description_66;
		public byte Description_67;
		public byte Description_68;
		public byte Description_69;
		public byte Description_70;
		public byte Description_71;
		public byte Description_72;
		public byte Description_73;
		public byte Description_74;
		public byte Description_75;
		public byte Description_76;
		public byte Description_77;
		public byte Description_78;
		public byte Description_79;
		public byte Description_80;
		public byte Description_81;
		public byte Description_82;
		public byte Description_83;
		public byte Description_84;
		public byte Description_85;
		public byte Description_86;
		public byte Description_87;
		public byte Description_88;
		public byte Description_89;
		public byte Description_90;
		public byte Description_91;
		public byte Description_92;
		public byte Description_93;
		public byte Description_94;
		public byte Description_95;
		public byte Description_96;
		public byte Description_97;
		public byte Description_98;
		public byte Description_99;
		public byte Description_100;
		public byte Description_101;
		public byte Description_102;
		public byte Description_103;
		public byte Description_104;
		public byte Description_105;
		public byte Description_106;
		public byte Description_107;
		public byte Description_108;
		public byte Description_109;
		public byte Description_110;
		public byte Description_111;
		public byte Description_112;
		public byte Description_113;
		public byte Description_114;
		public byte Description_115;
		public byte Description_116;
		public byte Description_117;
		public byte Description_118;
		public byte Description_119;
		public byte Description_120;
		public byte Description_121;
		public byte Description_122;
		public byte Description_123;
		public byte Description_124;
		public byte Description_125;
		public byte Description_126;
		public byte Description_127;
		public byte Description_128;
		public byte Description_129;
		public byte Description_130;
		public byte Description_131;
		public byte Description_132;
		public byte Description_133;
		public byte Description_134;
		public byte Description_135;
		public byte Description_136;
		public byte Description_137;
		public byte Description_138;
		public byte Description_139;
		public byte Description_140;
		public byte Description_141;
		public byte Description_142;
		public byte Description_143;
		public byte Description_144;
		public byte Description_145;
		public byte Description_146;
		public byte Description_147;
		public byte Description_148;
		public byte Description_149;
		public byte Description_150;
		public byte Description_151;
		public byte Description_152;
		public byte Description_153;
		public byte Description_154;
		public byte Description_155;
		public byte Description_156;
		public byte Description_157;
		public byte Description_158;
		public byte Description_159;
		public byte Description_160;
		public byte Description_161;
		public byte Description_162;
		public byte Description_163;
		public byte Description_164;
		public byte Description_165;
		public byte Description_166;
		public byte Description_167;
		public byte Description_168;
		public byte Description_169;
		public byte Description_170;
		public byte Description_171;
		public byte Description_172;
		public byte Description_173;
		public byte Description_174;
		public byte Description_175;
		public byte Description_176;
		public byte Description_177;
		public byte Description_178;
		public byte Description_179;
		public byte Description_180;
		public byte Description_181;
		public byte Description_182;
		public byte Description_183;
		public byte Description_184;
		public byte Description_185;
		public byte Description_186;
		public byte Description_187;
		public byte Description_188;
		public byte Description_189;
		public byte Description_190;
		public byte Description_191;
		public byte Description_192;
		public byte Description_193;
		public byte Description_194;
		public byte Description_195;
		public byte Description_196;
		public byte Description_197;
		public byte Description_198;
		public byte Description_199;
		public byte Description_200;
		public byte Description_201;
		public byte Description_202;
		public byte Description_203;
		public byte Description_204;
		public byte Description_205;
		public byte Description_206;
		public byte Description_207;
		public byte Description_208;
		public byte Description_209;
		public byte Description_210;
		public byte Description_211;
		public byte Description_212;
		public byte Description_213;
		public byte Description_214;
		public byte Description_215;
		public byte Description_216;
		public byte Description_217;
		public byte Description_218;
		public byte Description_219;
		public byte Description_220;
		public byte Description_221;
		public byte Description_222;
		public byte Description_223;
		public byte Description_224;
		public byte Description_225;
		public byte Description_226;
		public byte Description_227;
		public byte Description_228;
		public byte Description_229;
		public byte Description_230;
		public byte Description_231;
		public byte Description_232;
		public byte Description_233;
		public byte Description_234;
		public byte Description_235;
		public byte Description_236;
		public byte Description_237;
		public byte Description_238;
		public byte Description_239;
		public byte Description_240;
		public byte Description_241;
		public byte Description_242;
		public byte Description_243;
		public byte Description_244;
		public byte Description_245;
		public byte Description_246;
		public byte Description_247;
		public byte Description_248;
		public byte Description_249;
		public byte Description_250;
		public byte Description_251;
		public byte Description_252;
		public byte Description_253;
		public byte Description_254;
		public byte Description_255;
		[NativeName(NativeNameType.Field, "subgroupSize")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint SubgroupSize;

		public unsafe VkPipelineExecutablePropertiesKHR(VkStructureType sType = default, void* pNext = default, uint stages = default, byte* name = default, byte* description = default, uint subgroupSize = default)
		{
			SType = sType;
			PNext = pNext;
			Stages = stages;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			SubgroupSize = subgroupSize;
		}

		public unsafe VkPipelineExecutablePropertiesKHR(VkStructureType sType = default, void* pNext = default, uint stages = default, Span<byte> name = default, Span<byte> description = default, uint subgroupSize = default)
		{
			SType = sType;
			PNext = pNext;
			Stages = stages;
			if (name != default)
			{
				Name_0 = name[0];
				Name_1 = name[1];
				Name_2 = name[2];
				Name_3 = name[3];
				Name_4 = name[4];
				Name_5 = name[5];
				Name_6 = name[6];
				Name_7 = name[7];
				Name_8 = name[8];
				Name_9 = name[9];
				Name_10 = name[10];
				Name_11 = name[11];
				Name_12 = name[12];
				Name_13 = name[13];
				Name_14 = name[14];
				Name_15 = name[15];
				Name_16 = name[16];
				Name_17 = name[17];
				Name_18 = name[18];
				Name_19 = name[19];
				Name_20 = name[20];
				Name_21 = name[21];
				Name_22 = name[22];
				Name_23 = name[23];
				Name_24 = name[24];
				Name_25 = name[25];
				Name_26 = name[26];
				Name_27 = name[27];
				Name_28 = name[28];
				Name_29 = name[29];
				Name_30 = name[30];
				Name_31 = name[31];
				Name_32 = name[32];
				Name_33 = name[33];
				Name_34 = name[34];
				Name_35 = name[35];
				Name_36 = name[36];
				Name_37 = name[37];
				Name_38 = name[38];
				Name_39 = name[39];
				Name_40 = name[40];
				Name_41 = name[41];
				Name_42 = name[42];
				Name_43 = name[43];
				Name_44 = name[44];
				Name_45 = name[45];
				Name_46 = name[46];
				Name_47 = name[47];
				Name_48 = name[48];
				Name_49 = name[49];
				Name_50 = name[50];
				Name_51 = name[51];
				Name_52 = name[52];
				Name_53 = name[53];
				Name_54 = name[54];
				Name_55 = name[55];
				Name_56 = name[56];
				Name_57 = name[57];
				Name_58 = name[58];
				Name_59 = name[59];
				Name_60 = name[60];
				Name_61 = name[61];
				Name_62 = name[62];
				Name_63 = name[63];
				Name_64 = name[64];
				Name_65 = name[65];
				Name_66 = name[66];
				Name_67 = name[67];
				Name_68 = name[68];
				Name_69 = name[69];
				Name_70 = name[70];
				Name_71 = name[71];
				Name_72 = name[72];
				Name_73 = name[73];
				Name_74 = name[74];
				Name_75 = name[75];
				Name_76 = name[76];
				Name_77 = name[77];
				Name_78 = name[78];
				Name_79 = name[79];
				Name_80 = name[80];
				Name_81 = name[81];
				Name_82 = name[82];
				Name_83 = name[83];
				Name_84 = name[84];
				Name_85 = name[85];
				Name_86 = name[86];
				Name_87 = name[87];
				Name_88 = name[88];
				Name_89 = name[89];
				Name_90 = name[90];
				Name_91 = name[91];
				Name_92 = name[92];
				Name_93 = name[93];
				Name_94 = name[94];
				Name_95 = name[95];
				Name_96 = name[96];
				Name_97 = name[97];
				Name_98 = name[98];
				Name_99 = name[99];
				Name_100 = name[100];
				Name_101 = name[101];
				Name_102 = name[102];
				Name_103 = name[103];
				Name_104 = name[104];
				Name_105 = name[105];
				Name_106 = name[106];
				Name_107 = name[107];
				Name_108 = name[108];
				Name_109 = name[109];
				Name_110 = name[110];
				Name_111 = name[111];
				Name_112 = name[112];
				Name_113 = name[113];
				Name_114 = name[114];
				Name_115 = name[115];
				Name_116 = name[116];
				Name_117 = name[117];
				Name_118 = name[118];
				Name_119 = name[119];
				Name_120 = name[120];
				Name_121 = name[121];
				Name_122 = name[122];
				Name_123 = name[123];
				Name_124 = name[124];
				Name_125 = name[125];
				Name_126 = name[126];
				Name_127 = name[127];
				Name_128 = name[128];
				Name_129 = name[129];
				Name_130 = name[130];
				Name_131 = name[131];
				Name_132 = name[132];
				Name_133 = name[133];
				Name_134 = name[134];
				Name_135 = name[135];
				Name_136 = name[136];
				Name_137 = name[137];
				Name_138 = name[138];
				Name_139 = name[139];
				Name_140 = name[140];
				Name_141 = name[141];
				Name_142 = name[142];
				Name_143 = name[143];
				Name_144 = name[144];
				Name_145 = name[145];
				Name_146 = name[146];
				Name_147 = name[147];
				Name_148 = name[148];
				Name_149 = name[149];
				Name_150 = name[150];
				Name_151 = name[151];
				Name_152 = name[152];
				Name_153 = name[153];
				Name_154 = name[154];
				Name_155 = name[155];
				Name_156 = name[156];
				Name_157 = name[157];
				Name_158 = name[158];
				Name_159 = name[159];
				Name_160 = name[160];
				Name_161 = name[161];
				Name_162 = name[162];
				Name_163 = name[163];
				Name_164 = name[164];
				Name_165 = name[165];
				Name_166 = name[166];
				Name_167 = name[167];
				Name_168 = name[168];
				Name_169 = name[169];
				Name_170 = name[170];
				Name_171 = name[171];
				Name_172 = name[172];
				Name_173 = name[173];
				Name_174 = name[174];
				Name_175 = name[175];
				Name_176 = name[176];
				Name_177 = name[177];
				Name_178 = name[178];
				Name_179 = name[179];
				Name_180 = name[180];
				Name_181 = name[181];
				Name_182 = name[182];
				Name_183 = name[183];
				Name_184 = name[184];
				Name_185 = name[185];
				Name_186 = name[186];
				Name_187 = name[187];
				Name_188 = name[188];
				Name_189 = name[189];
				Name_190 = name[190];
				Name_191 = name[191];
				Name_192 = name[192];
				Name_193 = name[193];
				Name_194 = name[194];
				Name_195 = name[195];
				Name_196 = name[196];
				Name_197 = name[197];
				Name_198 = name[198];
				Name_199 = name[199];
				Name_200 = name[200];
				Name_201 = name[201];
				Name_202 = name[202];
				Name_203 = name[203];
				Name_204 = name[204];
				Name_205 = name[205];
				Name_206 = name[206];
				Name_207 = name[207];
				Name_208 = name[208];
				Name_209 = name[209];
				Name_210 = name[210];
				Name_211 = name[211];
				Name_212 = name[212];
				Name_213 = name[213];
				Name_214 = name[214];
				Name_215 = name[215];
				Name_216 = name[216];
				Name_217 = name[217];
				Name_218 = name[218];
				Name_219 = name[219];
				Name_220 = name[220];
				Name_221 = name[221];
				Name_222 = name[222];
				Name_223 = name[223];
				Name_224 = name[224];
				Name_225 = name[225];
				Name_226 = name[226];
				Name_227 = name[227];
				Name_228 = name[228];
				Name_229 = name[229];
				Name_230 = name[230];
				Name_231 = name[231];
				Name_232 = name[232];
				Name_233 = name[233];
				Name_234 = name[234];
				Name_235 = name[235];
				Name_236 = name[236];
				Name_237 = name[237];
				Name_238 = name[238];
				Name_239 = name[239];
				Name_240 = name[240];
				Name_241 = name[241];
				Name_242 = name[242];
				Name_243 = name[243];
				Name_244 = name[244];
				Name_245 = name[245];
				Name_246 = name[246];
				Name_247 = name[247];
				Name_248 = name[248];
				Name_249 = name[249];
				Name_250 = name[250];
				Name_251 = name[251];
				Name_252 = name[252];
				Name_253 = name[253];
				Name_254 = name[254];
				Name_255 = name[255];
			}
			if (description != default)
			{
				Description_0 = description[0];
				Description_1 = description[1];
				Description_2 = description[2];
				Description_3 = description[3];
				Description_4 = description[4];
				Description_5 = description[5];
				Description_6 = description[6];
				Description_7 = description[7];
				Description_8 = description[8];
				Description_9 = description[9];
				Description_10 = description[10];
				Description_11 = description[11];
				Description_12 = description[12];
				Description_13 = description[13];
				Description_14 = description[14];
				Description_15 = description[15];
				Description_16 = description[16];
				Description_17 = description[17];
				Description_18 = description[18];
				Description_19 = description[19];
				Description_20 = description[20];
				Description_21 = description[21];
				Description_22 = description[22];
				Description_23 = description[23];
				Description_24 = description[24];
				Description_25 = description[25];
				Description_26 = description[26];
				Description_27 = description[27];
				Description_28 = description[28];
				Description_29 = description[29];
				Description_30 = description[30];
				Description_31 = description[31];
				Description_32 = description[32];
				Description_33 = description[33];
				Description_34 = description[34];
				Description_35 = description[35];
				Description_36 = description[36];
				Description_37 = description[37];
				Description_38 = description[38];
				Description_39 = description[39];
				Description_40 = description[40];
				Description_41 = description[41];
				Description_42 = description[42];
				Description_43 = description[43];
				Description_44 = description[44];
				Description_45 = description[45];
				Description_46 = description[46];
				Description_47 = description[47];
				Description_48 = description[48];
				Description_49 = description[49];
				Description_50 = description[50];
				Description_51 = description[51];
				Description_52 = description[52];
				Description_53 = description[53];
				Description_54 = description[54];
				Description_55 = description[55];
				Description_56 = description[56];
				Description_57 = description[57];
				Description_58 = description[58];
				Description_59 = description[59];
				Description_60 = description[60];
				Description_61 = description[61];
				Description_62 = description[62];
				Description_63 = description[63];
				Description_64 = description[64];
				Description_65 = description[65];
				Description_66 = description[66];
				Description_67 = description[67];
				Description_68 = description[68];
				Description_69 = description[69];
				Description_70 = description[70];
				Description_71 = description[71];
				Description_72 = description[72];
				Description_73 = description[73];
				Description_74 = description[74];
				Description_75 = description[75];
				Description_76 = description[76];
				Description_77 = description[77];
				Description_78 = description[78];
				Description_79 = description[79];
				Description_80 = description[80];
				Description_81 = description[81];
				Description_82 = description[82];
				Description_83 = description[83];
				Description_84 = description[84];
				Description_85 = description[85];
				Description_86 = description[86];
				Description_87 = description[87];
				Description_88 = description[88];
				Description_89 = description[89];
				Description_90 = description[90];
				Description_91 = description[91];
				Description_92 = description[92];
				Description_93 = description[93];
				Description_94 = description[94];
				Description_95 = description[95];
				Description_96 = description[96];
				Description_97 = description[97];
				Description_98 = description[98];
				Description_99 = description[99];
				Description_100 = description[100];
				Description_101 = description[101];
				Description_102 = description[102];
				Description_103 = description[103];
				Description_104 = description[104];
				Description_105 = description[105];
				Description_106 = description[106];
				Description_107 = description[107];
				Description_108 = description[108];
				Description_109 = description[109];
				Description_110 = description[110];
				Description_111 = description[111];
				Description_112 = description[112];
				Description_113 = description[113];
				Description_114 = description[114];
				Description_115 = description[115];
				Description_116 = description[116];
				Description_117 = description[117];
				Description_118 = description[118];
				Description_119 = description[119];
				Description_120 = description[120];
				Description_121 = description[121];
				Description_122 = description[122];
				Description_123 = description[123];
				Description_124 = description[124];
				Description_125 = description[125];
				Description_126 = description[126];
				Description_127 = description[127];
				Description_128 = description[128];
				Description_129 = description[129];
				Description_130 = description[130];
				Description_131 = description[131];
				Description_132 = description[132];
				Description_133 = description[133];
				Description_134 = description[134];
				Description_135 = description[135];
				Description_136 = description[136];
				Description_137 = description[137];
				Description_138 = description[138];
				Description_139 = description[139];
				Description_140 = description[140];
				Description_141 = description[141];
				Description_142 = description[142];
				Description_143 = description[143];
				Description_144 = description[144];
				Description_145 = description[145];
				Description_146 = description[146];
				Description_147 = description[147];
				Description_148 = description[148];
				Description_149 = description[149];
				Description_150 = description[150];
				Description_151 = description[151];
				Description_152 = description[152];
				Description_153 = description[153];
				Description_154 = description[154];
				Description_155 = description[155];
				Description_156 = description[156];
				Description_157 = description[157];
				Description_158 = description[158];
				Description_159 = description[159];
				Description_160 = description[160];
				Description_161 = description[161];
				Description_162 = description[162];
				Description_163 = description[163];
				Description_164 = description[164];
				Description_165 = description[165];
				Description_166 = description[166];
				Description_167 = description[167];
				Description_168 = description[168];
				Description_169 = description[169];
				Description_170 = description[170];
				Description_171 = description[171];
				Description_172 = description[172];
				Description_173 = description[173];
				Description_174 = description[174];
				Description_175 = description[175];
				Description_176 = description[176];
				Description_177 = description[177];
				Description_178 = description[178];
				Description_179 = description[179];
				Description_180 = description[180];
				Description_181 = description[181];
				Description_182 = description[182];
				Description_183 = description[183];
				Description_184 = description[184];
				Description_185 = description[185];
				Description_186 = description[186];
				Description_187 = description[187];
				Description_188 = description[188];
				Description_189 = description[189];
				Description_190 = description[190];
				Description_191 = description[191];
				Description_192 = description[192];
				Description_193 = description[193];
				Description_194 = description[194];
				Description_195 = description[195];
				Description_196 = description[196];
				Description_197 = description[197];
				Description_198 = description[198];
				Description_199 = description[199];
				Description_200 = description[200];
				Description_201 = description[201];
				Description_202 = description[202];
				Description_203 = description[203];
				Description_204 = description[204];
				Description_205 = description[205];
				Description_206 = description[206];
				Description_207 = description[207];
				Description_208 = description[208];
				Description_209 = description[209];
				Description_210 = description[210];
				Description_211 = description[211];
				Description_212 = description[212];
				Description_213 = description[213];
				Description_214 = description[214];
				Description_215 = description[215];
				Description_216 = description[216];
				Description_217 = description[217];
				Description_218 = description[218];
				Description_219 = description[219];
				Description_220 = description[220];
				Description_221 = description[221];
				Description_222 = description[222];
				Description_223 = description[223];
				Description_224 = description[224];
				Description_225 = description[225];
				Description_226 = description[226];
				Description_227 = description[227];
				Description_228 = description[228];
				Description_229 = description[229];
				Description_230 = description[230];
				Description_231 = description[231];
				Description_232 = description[232];
				Description_233 = description[233];
				Description_234 = description[234];
				Description_235 = description[235];
				Description_236 = description[236];
				Description_237 = description[237];
				Description_238 = description[238];
				Description_239 = description[239];
				Description_240 = description[240];
				Description_241 = description[241];
				Description_242 = description[242];
				Description_243 = description[243];
				Description_244 = description[244];
				Description_245 = description[245];
				Description_246 = description[246];
				Description_247 = description[247];
				Description_248 = description[248];
				Description_249 = description[249];
				Description_250 = description[250];
				Description_251 = description[251];
				Description_252 = description[252];
				Description_253 = description[253];
				Description_254 = description[254];
				Description_255 = description[255];
			}
			SubgroupSize = subgroupSize;
		}


	}
}
