// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, (byte*)pg, b);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pb = &b)
			{
				int ret = SDLGetSurfaceColorModNative(surface, r, g, (byte*)pb);
				return ret;
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, r, g, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetSurfaceColorModNative(surface, (byte*)pr, g, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, g, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetSurfaceColorModNative(surface, r, (byte*)pg, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, r, (byte*)pg, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetSurfaceColorModNative(surface, (byte*)pr, (byte*)pg, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, (byte*)pg, (byte*)pb);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Set an additional alpha value used in blit operations.<br/>
		/// When this surface is blitted, during the blit operation the source alpha<br/>
		/// value is modulated by this alpha value according to the following formula:<br/>
		/// `srcA = srcA * (alpha / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetSurfaceAlphaModNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8")] byte alpha)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte, int>)vt[321])(surface, alpha);
		}
		/// <summary>/// Set an additional alpha value used in blit operations.<br/>/// When this surface is blitted, during the blit operation the source alpha<br/>/// value is modulated by this alpha value according to the following formula:<br/>/// `srcA = srcA * (alpha / 255)`<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8")] byte alpha)
		{
			int ret = SDLSetSurfaceAlphaModNative(surface, alpha);
			return ret;
		}

		/// <summary>/// Set an additional alpha value used in blit operations.<br/>/// When this surface is blitted, during the blit operation the source alpha<br/>/// value is modulated by this alpha value according to the following formula:<br/>/// `srcA = srcA * (alpha / 255)`<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8")] byte alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetSurfaceAlphaModNative((SDLSurface*)psurface, alpha);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetSurfaceAlphaModNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8*")] byte* alpha)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte*, int>)vt[322])(surface, alpha);
		}
		/// <summary>/// Get the additional alpha value used in blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8*")] byte* alpha)
		{
			int ret = SDLGetSurfaceAlphaModNative(surface, alpha);
			return ret;
		}

		/// <summary>/// Get the additional alpha value used in blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8*")] byte* alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLGetSurfaceAlphaModNative((SDLSurface*)psurface, alpha);
				return ret;
			}
		}

		/// <summary>/// Get the additional alpha value used in blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte alpha)
		{
			fixed (byte* palpha = &alpha)
			{
				int ret = SDLGetSurfaceAlphaModNative(surface, (byte*)palpha);
				return ret;
			}
		}

		/// <summary>/// Get the additional alpha value used in blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceAlphaMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceAlphaMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "alpha")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* palpha = &alpha)
				{
					int ret = SDLGetSurfaceAlphaModNative((SDLSurface*)psurface, (byte*)palpha);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the blend mode used for blit operations.<br/>
		/// To copy a surface to another surface (or texture) without blending with the<br/>
		/// existing data, the blendmode of the SOURCE surface should be set to<br/>
		/// `SDL_BLENDMODE_NONE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetSurfaceBlendModeNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBlendMode, int>)vt[323])(surface, blendMode);
		}
		/// <summary>/// Set the blend mode used for blit operations.<br/>/// To copy a surface to another surface (or texture) without blending with the<br/>/// existing data, the blendmode of the SOURCE surface should be set to<br/>/// `SDL_BLENDMODE_NONE`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			int ret = SDLSetSurfaceBlendModeNative(surface, blendMode);
			return ret;
		}

		/// <summary>/// Set the blend mode used for blit operations.<br/>/// To copy a surface to another surface (or texture) without blending with the<br/>/// existing data, the blendmode of the SOURCE surface should be set to<br/>/// `SDL_BLENDMODE_NONE`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetSurfaceBlendModeNative((SDLSurface*)psurface, blendMode);
				return ret;
			}
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetSurfaceBlendModeNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBlendMode*, int>)vt[324])(surface, blendMode);
		}
		/// <summary>/// Get the blend mode used for blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			int ret = SDLGetSurfaceBlendModeNative(surface, blendMode);
			return ret;
		}

		/// <summary>/// Get the blend mode used for blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLGetSurfaceBlendModeNative((SDLSurface*)psurface, blendMode);
				return ret;
			}
		}

		/// <summary>/// Get the blend mode used for blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] ref SDLBlendMode blendMode)
		{
			fixed (SDLBlendMode* pblendMode = &blendMode)
			{
				int ret = SDLGetSurfaceBlendModeNative(surface, (SDLBlendMode*)pblendMode);
				return ret;
			}
		}

		/// <summary>/// Get the blend mode used for blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceBlendMode([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] ref SDLBlendMode blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLBlendMode* pblendMode = &blendMode)
				{
					int ret = SDLGetSurfaceBlendModeNative((SDLSurface*)psurface, (SDLBlendMode*)pblendMode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetClipRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLSetClipRectNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLBool>)vt[325])(surface, rect);
		}
		/// <summary>/// Set the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// Note that blits are automatically clipped to the edges of the source and<br/>/// destination surfaces.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetClipRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLSetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			SDLBool ret = SDLSetClipRectNative(surface, rect);
			return ret;
		}

		/// <summary>/// Set the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// Note that blits are automatically clipped to the edges of the source and<br/>/// destination surfaces.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetClipRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLSetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = SDLSetClipRectNative((SDLSurface*)psurface, rect);
				return ret;
			}
		}

		/// <summary>/// Set the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// Note that blits are automatically clipped to the edges of the source and<br/>/// destination surfaces.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetClipRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLSetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLBool ret = SDLSetClipRectNative(surface, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Set the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// Note that blits are automatically clipped to the edges of the source and<br/>/// destination surfaces.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetClipRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLSetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRect* prect = &rect)
				{
					SDLBool ret = SDLSetClipRectNative((SDLSurface*)psurface, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetClipRectNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, void>)vt[326])(surface, rect);
		}
		/// <summary>/// Get the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			SDLGetClipRectNative(surface, rect);
		}

		/// <summary>/// Get the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLGetClipRectNative((SDLSurface*)psurface, rect);
			}
		}

		/// <summary>/// Get the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLGetClipRectNative(surface, (SDLRect*)prect);
			}
		}

		/// <summary>/// Get the clipping rectangle for a surface.<br/>/// When `surface` is the destination of a blit, only the area within the clip<br/>/// rectangle is drawn into.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetClipRect([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRect* prect = &rect)
				{
					SDLGetClipRectNative((SDLSurface*)psurface, (SDLRect*)prect);
				}
			}
		}

		/// <summary>
		/// Creates a new surface identical to the existing surface.<br/>
		/// The returned surface should be freed with SDL_FreeSurface().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DuplicateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		internal static SDLSurface* SDLDuplicateSurfaceNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLSurface*>)vt[327])(surface);
		}
		/// <summary>/// Creates a new surface identical to the existing surface.<br/>/// The returned surface should be freed with SDL_FreeSurface().<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DuplicateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLDuplicateSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			SDLSurface* ret = SDLDuplicateSurfaceNative(surface);
			return ret;
		}

		/// <summary>/// Creates a new surface identical to the existing surface.<br/>/// The returned surface should be freed with SDL_FreeSurface().<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DuplicateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLDuplicateSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLSurface* ret = SDLDuplicateSurfaceNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ConvertSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		internal static SDLSurface* SDLConvertSurfaceNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* fmt, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPixelFormat*, uint, SDLSurface*>)vt[328])(src, fmt, flags);
		}
		/// <summary>/// Copy an existing surface to a new surface of the specified format.<br/>/// This function is used to optimize images for faster *repeat* blitting. This<br/>/// is accomplished by converting the original and storing the result as a new<br/>/// surface. The new, optimized surface can then be used as the source for<br/>/// future blits, making them faster.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurface([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* fmt, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			SDLSurface* ret = SDLConvertSurfaceNative(src, fmt, flags);
			return ret;
		}

		/// <summary>/// Copy an existing surface to a new surface of the specified format.<br/>/// This function is used to optimize images for faster *repeat* blitting. This<br/>/// is accomplished by converting the original and storing the result as a new<br/>/// surface. The new, optimized surface can then be used as the source for<br/>/// future blits, making them faster.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurface([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* fmt, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				SDLSurface* ret = SDLConvertSurfaceNative((SDLSurface*)psrc, fmt, flags);
				return ret;
			}
		}

		/// <summary>/// Copy an existing surface to a new surface of the specified format.<br/>/// This function is used to optimize images for faster *repeat* blitting. This<br/>/// is accomplished by converting the original and storing the result as a new<br/>/// surface. The new, optimized surface can then be used as the source for<br/>/// future blits, making them faster.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurface([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat fmt, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (SDLPixelFormat* pfmt = &fmt)
			{
				SDLSurface* ret = SDLConvertSurfaceNative(src, (SDLPixelFormat*)pfmt, flags);
				return ret;
			}
		}

		/// <summary>/// Copy an existing surface to a new surface of the specified format.<br/>/// This function is used to optimize images for faster *repeat* blitting. This<br/>/// is accomplished by converting the original and storing the result as a new<br/>/// surface. The new, optimized surface can then be used as the source for<br/>/// future blits, making them faster.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurface([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat fmt, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLPixelFormat* pfmt = &fmt)
				{
					SDLSurface* ret = SDLConvertSurfaceNative((SDLSurface*)psrc, (SDLPixelFormat*)pfmt, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format enum.<br/>
		/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>
		/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>
		/// it might be easier to call but it doesn't have access to palette<br/>
		/// information for the destination surface, in case that would be important.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ConvertSurfaceFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		internal static SDLSurface* SDLConvertSurfaceFormatNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "pixel_format")] [NativeName(NativeNameType.Type, "Uint32")] uint pixelFormat, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, uint, uint, SDLSurface*>)vt[329])(src, pixelFormat, flags);
		}
		/// <summary>/// Copy an existing surface to a new surface of the specified format enum.<br/>/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>/// it might be easier to call but it doesn't have access to palette<br/>/// information for the destination surface, in case that would be important.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurfaceFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurfaceFormat([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "pixel_format")] [NativeName(NativeNameType.Type, "Uint32")] uint pixelFormat, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			SDLSurface* ret = SDLConvertSurfaceFormatNative(src, pixelFormat, flags);
			return ret;
		}

		/// <summary>/// Copy an existing surface to a new surface of the specified format enum.<br/>/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>/// it might be easier to call but it doesn't have access to palette<br/>/// information for the destination surface, in case that would be important.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertSurfaceFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLConvertSurfaceFormat([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "pixel_format")] [NativeName(NativeNameType.Type, "Uint32")] uint pixelFormat, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				SDLSurface* ret = SDLConvertSurfaceFormatNative((SDLSurface*)psrc, pixelFormat, flags);
				return ret;
			}
		}

		/// <summary>
		/// Copy a block of pixels of one format to another format.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ConvertPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLConvertPixelsNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "src_format")] [NativeName(NativeNameType.Type, "Uint32")] uint srcFormat, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const void*")] void* src, [NativeName(NativeNameType.Param, "src_pitch")] [NativeName(NativeNameType.Type, "int")] int srcPitch, [NativeName(NativeNameType.Param, "dst_format")] [NativeName(NativeNameType.Type, "Uint32")] uint dstFormat, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "dst_pitch")] [NativeName(NativeNameType.Type, "int")] int dstPitch)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, uint, void*, int, uint, void*, int, int>)vt[330])(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
		}
		/// <summary>/// Copy a block of pixels of one format to another format.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ConvertPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLConvertPixels([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "src_format")] [NativeName(NativeNameType.Type, "Uint32")] uint srcFormat, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const void*")] void* src, [NativeName(NativeNameType.Param, "src_pitch")] [NativeName(NativeNameType.Type, "int")] int srcPitch, [NativeName(NativeNameType.Param, "dst_format")] [NativeName(NativeNameType.Type, "Uint32")] uint dstFormat, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "dst_pitch")] [NativeName(NativeNameType.Type, "int")] int dstPitch)
		{
			int ret = SDLConvertPixelsNative(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			return ret;
		}

		/// <summary>
		/// Premultiply the alpha on a block of pixels.<br/>
		/// This is safe to use with src == dst, but not for other overlapping areas.<br/>
		/// This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PremultiplyAlpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLPremultiplyAlphaNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "src_format")] [NativeName(NativeNameType.Type, "Uint32")] uint srcFormat, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const void*")] void* src, [NativeName(NativeNameType.Param, "src_pitch")] [NativeName(NativeNameType.Type, "int")] int srcPitch, [NativeName(NativeNameType.Param, "dst_format")] [NativeName(NativeNameType.Type, "Uint32")] uint dstFormat, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "dst_pitch")] [NativeName(NativeNameType.Type, "int")] int dstPitch)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, uint, void*, int, uint, void*, int, int>)vt[331])(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
		}
		/// <summary>/// Premultiply the alpha on a block of pixels.<br/>/// This is safe to use with src == dst, but not for other overlapping areas.<br/>/// This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_PremultiplyAlpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLPremultiplyAlpha([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "src_format")] [NativeName(NativeNameType.Type, "Uint32")] uint srcFormat, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const void*")] void* src, [NativeName(NativeNameType.Param, "src_pitch")] [NativeName(NativeNameType.Type, "int")] int srcPitch, [NativeName(NativeNameType.Param, "dst_format")] [NativeName(NativeNameType.Type, "Uint32")] uint dstFormat, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void*")] void* dst, [NativeName(NativeNameType.Param, "dst_pitch")] [NativeName(NativeNameType.Type, "int")] int dstPitch)
		{
			int ret = SDLPremultiplyAlphaNative(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			return ret;
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLFillRectNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, uint, int>)vt[332])(dst, rect, color);
		}
		/// <summary>/// Perform a fast fill of a rectangle with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRect([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			int ret = SDLFillRectNative(dst, rect, color);
			return ret;
		}

		/// <summary>/// Perform a fast fill of a rectangle with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRect([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLFillRectNative((SDLSurface*)pdst, rect, color);
				return ret;
			}
		}

		/// <summary>/// Perform a fast fill of a rectangle with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRect([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLFillRectNative(dst, (SDLRect*)prect, color);
				return ret;
			}
		}

		/// <summary>/// Perform a fast fill of a rectangle with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRect([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLFillRectNative((SDLSurface*)pdst, (SDLRect*)prect, color);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLFillRectsNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, int, uint, int>)vt[333])(dst, rects, count, color);
		}
		/// <summary>/// Perform a fast fill of a set of rectangles with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRects([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			int ret = SDLFillRectsNative(dst, rects, count, color);
			return ret;
		}

		/// <summary>/// Perform a fast fill of a set of rectangles with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRects([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLFillRectsNative((SDLSurface*)pdst, rects, count, color);
				return ret;
			}
		}

		/// <summary>/// Perform a fast fill of a set of rectangles with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRects([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLFillRectsNative(dst, (SDLRect*)prects, count, color);
				return ret;
			}
		}

		/// <summary>/// Perform a fast fill of a set of rectangles with a specific color.<br/>/// `color` should be a pixel of the format used by the surface, and can be<br/>/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>/// alpha component then the destination is simply filled with that alpha<br/>/// information, no blending takes place.<br/>/// If there is a clip rectangle set on the destination (set via<br/>/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>/// of the clip rectangle and `rect`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLFillRects([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "Uint32")] uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* prects = &rects)
				{
					int ret = SDLFillRectsNative((SDLSurface*)pdst, (SDLRect*)prects, count, color);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLUpperBlitNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[334])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLUpperBlitNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLUpperBlitNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLUpperBlitNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLUpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLUpperBlitNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLUpperBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLUpperBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLUpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLUpperBlitNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast blit from the source surface to the destination surface.<br/>/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>/// macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLUpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLLowerBlitNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[335])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLLowerBlitNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLLowerBlitNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLLowerBlitNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLLowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLLowerBlitNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLLowerBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLLowerBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLLowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLLowerBlitNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface blitting only.<br/>/// This is a semi-private blit function and it performs low-level surface<br/>/// blitting, assuming the input rectangles have already been clipped.<br/>/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>/// instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLLowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSoftStretchNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[336])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLSoftStretchNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLSoftStretchNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLSoftStretchNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLSoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLSoftStretchNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLSoftStretchNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLSoftStretchNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLSoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLSoftStretchNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>/// format.<br/>/// Please use SDL_BlitScaled() instead.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretch([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLSoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSoftStretchLinearNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[337])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLSoftStretchLinearNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLSoftStretchLinearNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLSoftStretchLinearNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLSoftStretchLinearNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLSoftStretchLinearNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchLinearNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLSoftStretchLinearNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLSoftStretchLinearNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform bilinear scaling between two surfaces of the same format, 32BPP.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SoftStretchLinear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSoftStretchLinear([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLSoftStretchLinearNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform a scaled surface copy to a destination surface.<br/>
		/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>
		/// merely a macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLUpperBlitScaledNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[338])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLUpperBlitScaledNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLUpperBlitScaledNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLUpperBlitScaledNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLUpperBlitScaledNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLUpperBlitScaledNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitScaledNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLUpperBlitScaledNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLUpperBlitScaledNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform a scaled surface copy to a destination surface.<br/>/// SDL_UpperBlitScaled() has been replaced by SDL_BlitScaled(), which is<br/>/// merely a macro for this function with a less confusing name.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpperBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpperBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLUpperBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface scaled blitting only.<br/>
		/// This is a semi-private function and it performs low-level surface blitting,<br/>
		/// assuming the input rectangles have already been clipped.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLLowerBlitScaledNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)vt[339])(src, srcrect, dst, dstrect);
		}
		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLLowerBlitScaledNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLLowerBlitScaledNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SDLLowerBlitScaledNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SDLLowerBlitScaledNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLLowerBlitScaledNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitScaledNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLLowerBlitScaledNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLLowerBlitScaledNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Perform low-level surface scaled blitting only.<br/>/// This is a semi-private function and it performs low-level surface blitting,<br/>/// assuming the input rectangles have already been clipped.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LowerBlitScaled")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLowerBlitScaled([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLLowerBlitScaledNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Set the YUV conversion mode<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetYUVConversionMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetYUVConversionModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")] SdlYuvConversionMode mode)
		{
			((delegate* unmanaged[Cdecl]<SdlYuvConversionMode, void>)vt[340])(mode);
		}
		/// <summary>/// Set the YUV conversion mode<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetYUVConversionMode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetYUVConversionMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")] SdlYuvConversionMode mode)
		{
			SDLSetYUVConversionModeNative(mode);
		}

		/// <summary>
		/// Get the YUV conversion mode<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetYUVConversionMode")]
		[return: NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")]
		internal static SdlYuvConversionMode SDLGetYUVConversionModeNative()
		{
			return ((delegate* unmanaged[Cdecl]<SdlYuvConversionMode>)vt[341])();
		}
		/// <summary>/// Get the YUV conversion mode<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetYUVConversionMode")]
		[return: NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")]
		public static SdlYuvConversionMode SDLGetYUVConversionMode()
		{
			SdlYuvConversionMode ret = SDLGetYUVConversionModeNative();
			return ret;
		}

		/// <summary>
		/// Get the YUV conversion mode, returning the correct mode for the resolution<br/>
		/// when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetYUVConversionModeForResolution")]
		[return: NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")]
		internal static SdlYuvConversionMode SDLGetYUVConversionModeForResolutionNative([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, SdlYuvConversionMode>)vt[342])(width, height);
		}
		/// <summary>/// Get the YUV conversion mode, returning the correct mode for the resolution<br/>/// when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetYUVConversionModeForResolution")]
		[return: NativeName(NativeNameType.Type, "SDL_YUV_CONVERSION_MODE")]
		public static SdlYuvConversionMode SDLGetYUVConversionModeForResolution([NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			SdlYuvConversionMode ret = SDLGetYUVConversionModeForResolutionNative(width, height);
			return ret;
		}

		/// <summary>
		/// Get the number of video drivers compiled into SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumVideoDrivers")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetNumVideoDriversNative()
		{
			return ((delegate* unmanaged[Cdecl]<int>)vt[343])();
		}
		/// <summary>/// Get the number of video drivers compiled into SDL.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetNumVideoDrivers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetNumVideoDrivers()
		{
			int ret = SDLGetNumVideoDriversNative();
			return ret;
		}

		/// <summary>
		/// Get the name of a built in video driver.<br/>
		/// The video drivers are presented in the order in which they are normally<br/>
		/// checked during initialization.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGetVideoDriverNative([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[344])(index);
		}
		/// <summary>/// Get the name of a built in video driver.<br/>/// The video drivers are presented in the order in which they are normally<br/>/// checked during initialization.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetVideoDriver([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			byte* ret = SDLGetVideoDriverNative(index);
			return ret;
		}

		/// <summary>/// Get the name of a built in video driver.<br/>/// The video drivers are presented in the order in which they are normally<br/>/// checked during initialization.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetVideoDriverS([NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			string ret = Utils.DecodeStringUTF8(SDLGetVideoDriverNative(index));
			return ret;
		}

		/// <summary>
		/// Initialize the video subsystem, optionally specifying a video driver.<br/>
		/// This function initializes the video subsystem, setting up a connection to<br/>
		/// the window manager, etc, and determines the available display modes and<br/>
		/// pixel formats, but does not initialize a window or graphics mode.<br/>
		/// If you use this function and you haven't used the SDL_INIT_VIDEO flag with<br/>
		/// either SDL_Init() or SDL_InitSubSystem(), you should call SDL_VideoQuit()<br/>
		/// before calling SDL_Quit().<br/>
		/// It is safe to call this function multiple times. SDL_VideoInit() will call<br/>
		/// SDL_VideoQuit() itself if the video subsystem has already been initialized.<br/>
		/// You can use SDL_GetNumVideoDrivers() and SDL_GetVideoDriver() to find a<br/>
		/// specific `driver_name`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_VideoInit")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLVideoInitNative([NativeName(NativeNameType.Param, "driver_name")] [NativeName(NativeNameType.Type, "const char*")] byte* driverName)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int>)vt[345])(driverName);
		}
		/// <summary>/// Initialize the video subsystem, optionally specifying a video driver.<br/>/// This function initializes the video subsystem, setting up a connection to<br/>/// the window manager, etc, and determines the available display modes and<br/>/// pixel formats, but does not initialize a window or graphics mode.<br/>/// If you use this function and you haven't used the SDL_INIT_VIDEO flag with<br/>/// either SDL_Init() or SDL_InitSubSystem(), you should call SDL_VideoQuit()<br/>/// before calling SDL_Quit().<br/>/// It is safe to call this function multiple times. SDL_VideoInit() will call<br/>/// SDL_VideoQuit() itself if the video subsystem has already been initialized.<br/>/// You can use SDL_GetNumVideoDrivers() and SDL_GetVideoDriver() to find a<br/>/// specific `driver_name`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_VideoInit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVideoInit([NativeName(NativeNameType.Param, "driver_name")] [NativeName(NativeNameType.Type, "const char*")] byte* driverName)
		{
			int ret = SDLVideoInitNative(driverName);
			return ret;
		}

		/// <summary>/// Initialize the video subsystem, optionally specifying a video driver.<br/>/// This function initializes the video subsystem, setting up a connection to<br/>/// the window manager, etc, and determines the available display modes and<br/>/// pixel formats, but does not initialize a window or graphics mode.<br/>/// If you use this function and you haven't used the SDL_INIT_VIDEO flag with<br/>/// either SDL_Init() or SDL_InitSubSystem(), you should call SDL_VideoQuit()<br/>/// before calling SDL_Quit().<br/>/// It is safe to call this function multiple times. SDL_VideoInit() will call<br/>/// SDL_VideoQuit() itself if the video subsystem has already been initialized.<br/>/// You can use SDL_GetNumVideoDrivers() and SDL_GetVideoDriver() to find a<br/>/// specific `driver_name`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_VideoInit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVideoInit([NativeName(NativeNameType.Param, "driver_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte driverName)
		{
			fixed (byte* pdriverName = &driverName)
			{
				int ret = SDLVideoInitNative((byte*)pdriverName);
				return ret;
			}
		}

		/// <summary>/// Initialize the video subsystem, optionally specifying a video driver.<br/>/// This function initializes the video subsystem, setting up a connection to<br/>/// the window manager, etc, and determines the available display modes and<br/>/// pixel formats, but does not initialize a window or graphics mode.<br/>/// If you use this function and you haven't used the SDL_INIT_VIDEO flag with<br/>/// either SDL_Init() or SDL_InitSubSystem(), you should call SDL_VideoQuit()<br/>/// before calling SDL_Quit().<br/>/// It is safe to call this function multiple times. SDL_VideoInit() will call<br/>/// SDL_VideoQuit() itself if the video subsystem has already been initialized.<br/>/// You can use SDL_GetNumVideoDrivers() and SDL_GetVideoDriver() to find a<br/>/// specific `driver_name`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_VideoInit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVideoInit([NativeName(NativeNameType.Param, "driver_name")] [NativeName(NativeNameType.Type, "const char*")] string driverName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (driverName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(driverName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(driverName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLVideoInitNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Shut down the video subsystem, if initialized with SDL_VideoInit().<br/>
		/// This function closes all windows, and restores the original video mode.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_VideoQuit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLVideoQuitNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[346])();
		}
		/// <summary>/// Shut down the video subsystem, if initialized with SDL_VideoInit().<br/>/// This function closes all windows, and restores the original video mode.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_VideoQuit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVideoQuit()
		{
			SDLVideoQuitNative();
		}

		/// <summary>
		/// Get the name of the currently initialized video driver.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetCurrentVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGetCurrentVideoDriverNative()
		{
			return ((delegate* unmanaged[Cdecl]<byte*>)vt[347])();
		}
		/// <summary>/// Get the name of the currently initialized video driver.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetCurrentVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetCurrentVideoDriver()
		{
			byte* ret = SDLGetCurrentVideoDriverNative();
			return ret;
		}

		/// <summary>/// Get the name of the currently initialized video driver.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetCurrentVideoDriver")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetCurrentVideoDriverS()
		{
			string ret = Utils.DecodeStringUTF8(SDLGetCurrentVideoDriverNative());
			return ret;
		}

		/// <summary>
		/// Get the number of available video displays.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumVideoDisplays")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetNumVideoDisplaysNative()
		{
			return ((delegate* unmanaged[Cdecl]<int>)vt[348])();
		}
		/// <summary>/// Get the number of available video displays.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetNumVideoDisplays")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetNumVideoDisplays()
		{
			int ret = SDLGetNumVideoDisplaysNative();
			return ret;
		}

		/// <summary>
		/// Get the name of a display in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGetDisplayNameNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[349])(displayIndex);
		}
		/// <summary>/// Get the name of a display in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetDisplayName([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			byte* ret = SDLGetDisplayNameNative(displayIndex);
			return ret;
		}

		/// <summary>/// Get the name of a display in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetDisplayNameS([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLGetDisplayNameNative(displayIndex));
			return ret;
		}

		/// <summary>
		/// Get the desktop area represented by a display.<br/>
		/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetDisplayBoundsNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLRect*, int>)vt[350])(displayIndex, rect);
		}
		/// <summary>/// Get the desktop area represented by a display.<br/>/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayBounds([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLGetDisplayBoundsNative(displayIndex, rect);
			return ret;
		}

		/// <summary>/// Get the desktop area represented by a display.<br/>/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayBounds([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLGetDisplayBoundsNative(displayIndex, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Get the usable desktop area represented by a display.<br/>
		/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>
		/// This is the same area as SDL_GetDisplayBounds() reports, but with portions<br/>
		/// reserved by the system removed. For example, on Apple's macOS, this<br/>
		/// subtracts the area occupied by the menu bar and dock.<br/>
		/// Setting a window to be fullscreen generally bypasses these unusable areas,<br/>
		/// so these are good guidelines for the maximum space available to a<br/>
		/// non-fullscreen window.<br/>
		/// The parameter `rect` is ignored if it is NULL.<br/>
		/// This function also returns -1 if the parameter `displayIndex` is out of<br/>
		/// range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayUsableBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetDisplayUsableBoundsNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLRect*, int>)vt[351])(displayIndex, rect);
		}
		/// <summary>/// Get the usable desktop area represented by a display.<br/>/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>/// This is the same area as SDL_GetDisplayBounds() reports, but with portions<br/>/// reserved by the system removed. For example, on Apple's macOS, this<br/>/// subtracts the area occupied by the menu bar and dock.<br/>/// Setting a window to be fullscreen generally bypasses these unusable areas,<br/>/// so these are good guidelines for the maximum space available to a<br/>/// non-fullscreen window.<br/>/// The parameter `rect` is ignored if it is NULL.<br/>/// This function also returns -1 if the parameter `displayIndex` is out of<br/>/// range.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayUsableBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayUsableBounds([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLGetDisplayUsableBoundsNative(displayIndex, rect);
			return ret;
		}

		/// <summary>/// Get the usable desktop area represented by a display.<br/>/// The primary display (`displayIndex` zero) is always located at 0,0.<br/>/// This is the same area as SDL_GetDisplayBounds() reports, but with portions<br/>/// reserved by the system removed. For example, on Apple's macOS, this<br/>/// subtracts the area occupied by the menu bar and dock.<br/>/// Setting a window to be fullscreen generally bypasses these unusable areas,<br/>/// so these are good guidelines for the maximum space available to a<br/>/// non-fullscreen window.<br/>/// The parameter `rect` is ignored if it is NULL.<br/>/// This function also returns -1 if the parameter `displayIndex` is out of<br/>/// range.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayUsableBounds")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayUsableBounds([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLGetDisplayUsableBoundsNative(displayIndex, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Get the dots/pixels-per-inch for a display.<br/>
		/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>
		/// appropriate parameter is non-NULL.<br/>
		/// A failure of this function usually means that either no DPI information is<br/>
		/// available or the `displayIndex` is out of range.<br/>
		/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>
		/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>
		/// find the window size, which might be in logical points instead of pixels,<br/>
		/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>
		/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>
		/// the two values to get an actual scaling value between the two. We will be<br/>
		/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>
		/// more consistent, reliable, and clear.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetDisplayDPINative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] float* ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] float* hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] float* vdpi)
		{
			return ((delegate* unmanaged[Cdecl]<int, float*, float*, float*, int>)vt[352])(displayIndex, ddpi, hdpi, vdpi);
		}
		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] float* ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] float* hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] float* vdpi)
		{
			int ret = SDLGetDisplayDPINative(displayIndex, ddpi, hdpi, vdpi);
			return ret;
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] ref float ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] float* hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] float* vdpi)
		{
			fixed (float* pddpi = &ddpi)
			{
				int ret = SDLGetDisplayDPINative(displayIndex, (float*)pddpi, hdpi, vdpi);
				return ret;
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] float* ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] ref float hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] float* vdpi)
		{
			fixed (float* phdpi = &hdpi)
			{
				int ret = SDLGetDisplayDPINative(displayIndex, ddpi, (float*)phdpi, vdpi);
				return ret;
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] ref float ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] ref float hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] float* vdpi)
		{
			fixed (float* pddpi = &ddpi)
			{
				fixed (float* phdpi = &hdpi)
				{
					int ret = SDLGetDisplayDPINative(displayIndex, (float*)pddpi, (float*)phdpi, vdpi);
					return ret;
				}
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] float* ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] float* hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] ref float vdpi)
		{
			fixed (float* pvdpi = &vdpi)
			{
				int ret = SDLGetDisplayDPINative(displayIndex, ddpi, hdpi, (float*)pvdpi);
				return ret;
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] ref float ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] float* hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] ref float vdpi)
		{
			fixed (float* pddpi = &ddpi)
			{
				fixed (float* pvdpi = &vdpi)
				{
					int ret = SDLGetDisplayDPINative(displayIndex, (float*)pddpi, hdpi, (float*)pvdpi);
					return ret;
				}
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] float* ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] ref float hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] ref float vdpi)
		{
			fixed (float* phdpi = &hdpi)
			{
				fixed (float* pvdpi = &vdpi)
				{
					int ret = SDLGetDisplayDPINative(displayIndex, ddpi, (float*)phdpi, (float*)pvdpi);
					return ret;
				}
			}
		}

		/// <summary>/// Get the dots/pixels-per-inch for a display.<br/>/// Diagonal, horizontal and vertical DPI can all be optionally returned if the<br/>/// appropriate parameter is non-NULL.<br/>/// A failure of this function usually means that either no DPI information is<br/>/// available or the `displayIndex` is out of range.<br/>/// **WARNING**: This reports the DPI that the hardware reports, and it is not<br/>/// always reliable! It is almost always better to use SDL_GetWindowSize() to<br/>/// find the window size, which might be in logical points instead of pixels,<br/>/// and then SDL_GL_GetDrawableSize(), SDL_Vulkan_GetDrawableSize(),<br/>/// SDL_Metal_GetDrawableSize(), or SDL_GetRendererOutputSize(), and compare<br/>/// the two values to get an actual scaling value between the two. We will be<br/>/// rethinking how high-dpi details should be managed in SDL3 to make things<br/>/// more consistent, reliable, and clear.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayDPI")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayDPI([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "ddpi")] [NativeName(NativeNameType.Type, "float*")] ref float ddpi, [NativeName(NativeNameType.Param, "hdpi")] [NativeName(NativeNameType.Type, "float*")] ref float hdpi, [NativeName(NativeNameType.Param, "vdpi")] [NativeName(NativeNameType.Type, "float*")] ref float vdpi)
		{
			fixed (float* pddpi = &ddpi)
			{
				fixed (float* phdpi = &hdpi)
				{
					fixed (float* pvdpi = &vdpi)
					{
						int ret = SDLGetDisplayDPINative(displayIndex, (float*)pddpi, (float*)phdpi, (float*)pvdpi);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the orientation of a display.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayOrientation")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayOrientation")]
		internal static SDLDisplayOrientation SDLGetDisplayOrientationNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLDisplayOrientation>)vt[353])(displayIndex);
		}
		/// <summary>/// Get the orientation of a display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayOrientation")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayOrientation")]
		public static SDLDisplayOrientation SDLGetDisplayOrientation([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			SDLDisplayOrientation ret = SDLGetDisplayOrientationNative(displayIndex);
			return ret;
		}

		/// <summary>
		/// Get the number of available display modes.<br/>
		/// The `displayIndex` needs to be in the range from 0 to<br/>
		/// SDL_GetNumVideoDisplays() - 1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumDisplayModes")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetNumDisplayModesNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[354])(displayIndex);
		}
		/// <summary>/// Get the number of available display modes.<br/>/// The `displayIndex` needs to be in the range from 0 to<br/>/// SDL_GetNumVideoDisplays() - 1.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetNumDisplayModes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetNumDisplayModes([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			int ret = SDLGetNumDisplayModesNative(displayIndex);
			return ret;
		}

		/// <summary>
		/// Get information about a specific display mode.<br/>
		/// The display modes are sorted in this priority:<br/>
		/// - width -> largest to smallest<br/>
		/// - height -> largest to smallest<br/>
		/// - bits per pixel -> more colors to fewer colors<br/>
		/// - packed pixel layout -> largest to smallest<br/>
		/// - refresh rate -> highest to lowest<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetDisplayModeNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "modeIndex")] [NativeName(NativeNameType.Type, "int")] int modeIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, SDLDisplayMode*, int>)vt[355])(displayIndex, modeIndex, mode);
		}
		/// <summary>/// Get information about a specific display mode.<br/>/// The display modes are sorted in this priority:<br/>/// - width -> largest to smallest<br/>/// - height -> largest to smallest<br/>/// - bits per pixel -> more colors to fewer colors<br/>/// - packed pixel layout -> largest to smallest<br/>/// - refresh rate -> highest to lowest<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "modeIndex")] [NativeName(NativeNameType.Type, "int")] int modeIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			int ret = SDLGetDisplayModeNative(displayIndex, modeIndex, mode);
			return ret;
		}

		/// <summary>/// Get information about a specific display mode.<br/>/// The display modes are sorted in this priority:<br/>/// - width -> largest to smallest<br/>/// - height -> largest to smallest<br/>/// - bits per pixel -> more colors to fewer colors<br/>/// - packed pixel layout -> largest to smallest<br/>/// - refresh rate -> highest to lowest<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "modeIndex")] [NativeName(NativeNameType.Type, "int")] int modeIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				int ret = SDLGetDisplayModeNative(displayIndex, modeIndex, (SDLDisplayMode*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// Get information about the desktop's display mode.<br/>
		/// There's a difference between this function and SDL_GetCurrentDisplayMode()<br/>
		/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>
		/// function will return the previous native display mode, and not the current<br/>
		/// display mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetDesktopDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetDesktopDisplayModeNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLDisplayMode*, int>)vt[356])(displayIndex, mode);
		}
		/// <summary>/// Get information about the desktop's display mode.<br/>/// There's a difference between this function and SDL_GetCurrentDisplayMode()<br/>/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>/// function will return the previous native display mode, and not the current<br/>/// display mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDesktopDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDesktopDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			int ret = SDLGetDesktopDisplayModeNative(displayIndex, mode);
			return ret;
		}

		/// <summary>/// Get information about the desktop's display mode.<br/>/// There's a difference between this function and SDL_GetCurrentDisplayMode()<br/>/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>/// function will return the previous native display mode, and not the current<br/>/// display mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetDesktopDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetDesktopDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				int ret = SDLGetDesktopDisplayModeNative(displayIndex, (SDLDisplayMode*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// Get information about the current display mode.<br/>
		/// There's a difference between this function and SDL_GetDesktopDisplayMode()<br/>
		/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>
		/// function will return the current display mode, and not the previous native<br/>
		/// display mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetCurrentDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetCurrentDisplayModeNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLDisplayMode*, int>)vt[357])(displayIndex, mode);
		}
		/// <summary>/// Get information about the current display mode.<br/>/// There's a difference between this function and SDL_GetDesktopDisplayMode()<br/>/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>/// function will return the current display mode, and not the previous native<br/>/// display mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetCurrentDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetCurrentDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			int ret = SDLGetCurrentDisplayModeNative(displayIndex, mode);
			return ret;
		}

		/// <summary>/// Get information about the current display mode.<br/>/// There's a difference between this function and SDL_GetDesktopDisplayMode()<br/>/// when SDL runs fullscreen and has changed the resolution. In that case this<br/>/// function will return the current display mode, and not the previous native<br/>/// display mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetCurrentDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetCurrentDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				int ret = SDLGetCurrentDisplayModeNative(displayIndex, (SDLDisplayMode*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// Get the closest match to the requested display mode.<br/>
		/// The available display modes are scanned and `closest` is filled in with the<br/>
		/// closest mode matching the requested mode and returned. The mode format and<br/>
		/// refresh rate default to the desktop mode if they are set to 0. The modes<br/>
		/// are scanned with size being first priority, format being second priority,<br/>
		/// and finally checking the refresh rate. If all the available modes are too<br/>
		/// small, then NULL is returned.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetClosestDisplayMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode*")]
		internal static SDLDisplayMode* SDLGetClosestDisplayModeNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode, [NativeName(NativeNameType.Param, "closest")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* closest)
		{
			return ((delegate* unmanaged[Cdecl]<int, SDLDisplayMode*, SDLDisplayMode*, SDLDisplayMode*>)vt[358])(displayIndex, mode, closest);
		}
		/// <summary>/// Get the closest match to the requested display mode.<br/>/// The available display modes are scanned and `closest` is filled in with the<br/>/// closest mode matching the requested mode and returned. The mode format and<br/>/// refresh rate default to the desktop mode if they are set to 0. The modes<br/>/// are scanned with size being first priority, format being second priority,<br/>/// and finally checking the refresh rate. If all the available modes are too<br/>/// small, then NULL is returned.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClosestDisplayMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode*")]
		public static SDLDisplayMode* SDLGetClosestDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode, [NativeName(NativeNameType.Param, "closest")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* closest)
		{
			SDLDisplayMode* ret = SDLGetClosestDisplayModeNative(displayIndex, mode, closest);
			return ret;
		}

		/// <summary>/// Get the closest match to the requested display mode.<br/>/// The available display modes are scanned and `closest` is filled in with the<br/>/// closest mode matching the requested mode and returned. The mode format and<br/>/// refresh rate default to the desktop mode if they are set to 0. The modes<br/>/// are scanned with size being first priority, format being second priority,<br/>/// and finally checking the refresh rate. If all the available modes are too<br/>/// small, then NULL is returned.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClosestDisplayMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode*")]
		public static SDLDisplayMode* SDLGetClosestDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] ref SDLDisplayMode mode, [NativeName(NativeNameType.Param, "closest")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* closest)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				SDLDisplayMode* ret = SDLGetClosestDisplayModeNative(displayIndex, (SDLDisplayMode*)pmode, closest);
				return ret;
			}
		}

		/// <summary>/// Get the closest match to the requested display mode.<br/>/// The available display modes are scanned and `closest` is filled in with the<br/>/// closest mode matching the requested mode and returned. The mode format and<br/>/// refresh rate default to the desktop mode if they are set to 0. The modes<br/>/// are scanned with size being first priority, format being second priority,<br/>/// and finally checking the refresh rate. If all the available modes are too<br/>/// small, then NULL is returned.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClosestDisplayMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode*")]
		public static SDLDisplayMode* SDLGetClosestDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode, [NativeName(NativeNameType.Param, "closest")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode closest)
		{
			fixed (SDLDisplayMode* pclosest = &closest)
			{
				SDLDisplayMode* ret = SDLGetClosestDisplayModeNative(displayIndex, mode, (SDLDisplayMode*)pclosest);
				return ret;
			}
		}

		/// <summary>/// Get the closest match to the requested display mode.<br/>/// The available display modes are scanned and `closest` is filled in with the<br/>/// closest mode matching the requested mode and returned. The mode format and<br/>/// refresh rate default to the desktop mode if they are set to 0. The modes<br/>/// are scanned with size being first priority, format being second priority,<br/>/// and finally checking the refresh rate. If all the available modes are too<br/>/// small, then NULL is returned.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetClosestDisplayMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode*")]
		public static SDLDisplayMode* SDLGetClosestDisplayMode([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] ref SDLDisplayMode mode, [NativeName(NativeNameType.Param, "closest")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode closest)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				fixed (SDLDisplayMode* pclosest = &closest)
				{
					SDLDisplayMode* ret = SDLGetClosestDisplayModeNative(displayIndex, (SDLDisplayMode*)pmode, (SDLDisplayMode*)pclosest);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the index of the display containing a point<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetPointDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetPointDisplayIndexNative([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* point)
		{
			return ((delegate* unmanaged[Cdecl]<SDLPoint*, int>)vt[359])(point);
		}
		/// <summary>/// Get the index of the display containing a point<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPointDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetPointDisplayIndex([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* point)
		{
			int ret = SDLGetPointDisplayIndexNative(point);
			return ret;
		}

		/// <summary>/// Get the index of the display containing a point<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPointDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetPointDisplayIndex([NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint point)
		{
			fixed (SDLPoint* ppoint = &point)
			{
				int ret = SDLGetPointDisplayIndexNative((SDLPoint*)ppoint);
				return ret;
			}
		}

		/// <summary>
		/// Get the index of the display primarily containing a rect<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRectDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetRectDisplayIndexNative([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRect*, int>)vt[360])(rect);
		}
		/// <summary>/// Get the index of the display primarily containing a rect<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRectDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRectDisplayIndex([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLGetRectDisplayIndexNative(rect);
			return ret;
		}

		/// <summary>/// Get the index of the display primarily containing a rect<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRectDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRectDisplayIndex([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLGetRectDisplayIndexNative((SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Get the index of the display associated with a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetWindowDisplayIndexNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)vt[361])(window);
		}
		/// <summary>/// Get the index of the display associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayIndex([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			int ret = SDLGetWindowDisplayIndexNative(window);
			return ret;
		}

		/// <summary>/// Get the index of the display associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayIndex([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLGetWindowDisplayIndexNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the display mode to use when a window is visible at fullscreen.<br/>
		/// This only affects the display mode used when the window is fullscreen. To<br/>
		/// change the window size when the window is not fullscreen, use<br/>
		/// SDL_SetWindowSize().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowDisplayModeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLDisplayMode*, int>)vt[362])(window, mode);
		}
		/// <summary>/// Set the display mode to use when a window is visible at fullscreen.<br/>/// This only affects the display mode used when the window is fullscreen. To<br/>/// change the window size when the window is not fullscreen, use<br/>/// SDL_SetWindowSize().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			int ret = SDLSetWindowDisplayModeNative(window, mode);
			return ret;
		}

		/// <summary>/// Set the display mode to use when a window is visible at fullscreen.<br/>/// This only affects the display mode used when the window is fullscreen. To<br/>/// change the window size when the window is not fullscreen, use<br/>/// SDL_SetWindowSize().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowDisplayModeNative((SDLWindow*)pwindow, mode);
				return ret;
			}
		}

		/// <summary>/// Set the display mode to use when a window is visible at fullscreen.<br/>/// This only affects the display mode used when the window is fullscreen. To<br/>/// change the window size when the window is not fullscreen, use<br/>/// SDL_SetWindowSize().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				int ret = SDLSetWindowDisplayModeNative(window, (SDLDisplayMode*)pmode);
				return ret;
			}
		}

		/// <summary>/// Set the display mode to use when a window is visible at fullscreen.<br/>/// This only affects the display mode used when the window is fullscreen. To<br/>/// change the window size when the window is not fullscreen, use<br/>/// SDL_SetWindowSize().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLDisplayMode* pmode = &mode)
				{
					int ret = SDLSetWindowDisplayModeNative((SDLWindow*)pwindow, (SDLDisplayMode*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query the display mode to use when a window is visible at fullscreen.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetWindowDisplayModeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLDisplayMode*, int>)vt[363])(window, mode);
		}
		/// <summary>/// Query the display mode to use when a window is visible at fullscreen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			int ret = SDLGetWindowDisplayModeNative(window, mode);
			return ret;
		}

		/// <summary>/// Query the display mode to use when a window is visible at fullscreen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] SDLDisplayMode* mode)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLGetWindowDisplayModeNative((SDLWindow*)pwindow, mode);
				return ret;
			}
		}

		/// <summary>/// Query the display mode to use when a window is visible at fullscreen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLDisplayMode* pmode = &mode)
			{
				int ret = SDLGetWindowDisplayModeNative(window, (SDLDisplayMode*)pmode);
				return ret;
			}
		}

		/// <summary>/// Query the display mode to use when a window is visible at fullscreen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowDisplayMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowDisplayMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "SDL_DisplayMode*")] ref SDLDisplayMode mode)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLDisplayMode* pmode = &mode)
				{
					int ret = SDLGetWindowDisplayModeNative((SDLWindow*)pwindow, (SDLDisplayMode*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// Data returned should be freed with SDL_free.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* SDLGetWindowICCProfileNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, ulong*, void*>)vt[364])(window, size);
		}
		/// <summary>/// Get the raw ICC profile data for the screen the window is currently on.<br/>/// Data returned should be freed with SDL_free.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			void* ret = SDLGetWindowICCProfileNative(window, size);
			return ret;
		}

		/// <summary>/// Get the raw ICC profile data for the screen the window is currently on.<br/>/// Data returned should be freed with SDL_free.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* size)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				void* ret = SDLGetWindowICCProfileNative((SDLWindow*)pwindow, size);
				return ret;
			}
		}

		/// <summary>/// Get the raw ICC profile data for the screen the window is currently on.<br/>/// Data returned should be freed with SDL_free.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				void* ret = SDLGetWindowICCProfileNative(window, (ulong*)psize);
				return ret;
			}
		}

		/// <summary>/// Get the raw ICC profile data for the screen the window is currently on.<br/>/// Data returned should be freed with SDL_free.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint size)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (nuint* psize = &size)
				{
					void* ret = SDLGetWindowICCProfileNative((SDLWindow*)pwindow, (ulong*)psize);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the pixel format associated with the window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		internal static uint SDLGetWindowPixelFormatNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint>)vt[365])(window);
		}
		/// <summary>/// Get the pixel format associated with the window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowPixelFormat([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			uint ret = SDLGetWindowPixelFormatNative(window);
			return ret;
		}

		/// <summary>/// Get the pixel format associated with the window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowPixelFormat([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				uint ret = SDLGetWindowPixelFormatNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Create a window with the specified position, dimensions, and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window<br/>
		/// - `SDL_WINDOW_FULLSCREEN_DESKTOP`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_INPUT_GRABBED`: window has grabbed input focus<br/>
		/// - `SDL_WINDOW_ALLOW_HIGHDPI`: window should be created in high-DPI mode if<br/>
		/// supported (>= SDL 2.0.1)<br/>
		/// `SDL_WINDOW_SHOWN` is ignored by SDL_CreateWindow(). The SDL_Window is<br/>
		/// implicitly shown if SDL_WINDOW_HIDDEN is not set. `SDL_WINDOW_SHOWN` may be<br/>
		/// queried later using SDL_GetWindowFlags().<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// If the window is created with the `SDL_WINDOW_ALLOW_HIGHDPI` flag, its size<br/>
		/// in pixels may differ from its size in screen coordinates on platforms with<br/>
		/// high-DPI support (e.g. iOS and macOS). Use SDL_GetWindowSize() to query the<br/>
		/// client area's size in screen coordinates, and SDL_GL_GetDrawableSize() or<br/>
		/// SDL_GetRendererOutputSize() to query the drawable size in pixels. Note that<br/>
		/// when this flag is set, the drawable size can vary after the window is<br/>
		/// created and should be queried after major window events such as when the<br/>
		/// window is resized or moved between displays.<br/>
		/// If the window is set fullscreen, the width and height parameters `w` and<br/>
		/// `h` will not be used. However, invalid size parameters (e.g. too large) may<br/>
		/// still fail. Window size is actually limited to 16384 x 16384 for all<br/>
		/// platforms at window creation.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		internal static SDLWindow* SDLCreateWindowNative([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, int, int, uint, SDLWindow*>)vt[366])(title, x, y, w, h, flags);
		}
		/// <summary>/// Create a window with the specified position, dimensions, and flags.<br/>/// `flags` may be any of the following OR'd together:<br/>/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window<br/>/// - `SDL_WINDOW_FULLSCREEN_DESKTOP`: fullscreen window at desktop resolution<br/>/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>/// - `SDL_WINDOW_INPUT_GRABBED`: window has grabbed input focus<br/>/// - `SDL_WINDOW_ALLOW_HIGHDPI`: window should be created in high-DPI mode if<br/>/// supported (>= SDL 2.0.1)<br/>/// `SDL_WINDOW_SHOWN` is ignored by SDL_CreateWindow(). The SDL_Window is<br/>/// implicitly shown if SDL_WINDOW_HIDDEN is not set. `SDL_WINDOW_SHOWN` may be<br/>/// queried later using SDL_GetWindowFlags().<br/>/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>/// If the window is created with the `SDL_WINDOW_ALLOW_HIGHDPI` flag, its size<br/>/// in pixels may differ from its size in screen coordinates on platforms with<br/>/// high-DPI support (e.g. iOS and macOS). Use SDL_GetWindowSize() to query the<br/>/// client area's size in screen coordinates, and SDL_GL_GetDrawableSize() or<br/>/// SDL_GetRendererOutputSize() to query the drawable size in pixels. Note that<br/>/// when this flag is set, the drawable size can vary after the window is<br/>/// created and should be queried after major window events such as when the<br/>/// window is resized or moved between displays.<br/>/// If the window is set fullscreen, the width and height parameters `w` and<br/>/// `h` will not be used. However, invalid size parameters (e.g. too large) may<br/>/// still fail. Window size is actually limited to 16384 x 16384 for all<br/>/// platforms at window creation.<br/>/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>/// SDL_CreateWindow() will fail.<br/>/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>/// loader or link to a dynamic library version. This limitation may be removed<br/>/// in a future version of SDL.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLCreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			SDLWindow* ret = SDLCreateWindowNative(title, x, y, w, h, flags);
			return ret;
		}

		/// <summary>/// Create a window with the specified position, dimensions, and flags.<br/>/// `flags` may be any of the following OR'd together:<br/>/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window<br/>/// - `SDL_WINDOW_FULLSCREEN_DESKTOP`: fullscreen window at desktop resolution<br/>/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>/// - `SDL_WINDOW_INPUT_GRABBED`: window has grabbed input focus<br/>/// - `SDL_WINDOW_ALLOW_HIGHDPI`: window should be created in high-DPI mode if<br/>/// supported (>= SDL 2.0.1)<br/>/// `SDL_WINDOW_SHOWN` is ignored by SDL_CreateWindow(). The SDL_Window is<br/>/// implicitly shown if SDL_WINDOW_HIDDEN is not set. `SDL_WINDOW_SHOWN` may be<br/>/// queried later using SDL_GetWindowFlags().<br/>/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>/// If the window is created with the `SDL_WINDOW_ALLOW_HIGHDPI` flag, its size<br/>/// in pixels may differ from its size in screen coordinates on platforms with<br/>/// high-DPI support (e.g. iOS and macOS). Use SDL_GetWindowSize() to query the<br/>/// client area's size in screen coordinates, and SDL_GL_GetDrawableSize() or<br/>/// SDL_GetRendererOutputSize() to query the drawable size in pixels. Note that<br/>/// when this flag is set, the drawable size can vary after the window is<br/>/// created and should be queried after major window events such as when the<br/>/// window is resized or moved between displays.<br/>/// If the window is set fullscreen, the width and height parameters `w` and<br/>/// `h` will not be used. However, invalid size parameters (e.g. too large) may<br/>/// still fail. Window size is actually limited to 16384 x 16384 for all<br/>/// platforms at window creation.<br/>/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>/// SDL_CreateWindow() will fail.<br/>/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>/// loader or link to a dynamic library version. This limitation may be removed<br/>/// in a future version of SDL.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLCreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] ref byte title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (byte* ptitle = &title)
			{
				SDLWindow* ret = SDLCreateWindowNative((byte*)ptitle, x, y, w, h, flags);
				return ret;
			}
		}

		/// <summary>/// Create a window with the specified position, dimensions, and flags.<br/>/// `flags` may be any of the following OR'd together:<br/>/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window<br/>/// - `SDL_WINDOW_FULLSCREEN_DESKTOP`: fullscreen window at desktop resolution<br/>/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>/// - `SDL_WINDOW_INPUT_GRABBED`: window has grabbed input focus<br/>/// - `SDL_WINDOW_ALLOW_HIGHDPI`: window should be created in high-DPI mode if<br/>/// supported (>= SDL 2.0.1)<br/>/// `SDL_WINDOW_SHOWN` is ignored by SDL_CreateWindow(). The SDL_Window is<br/>/// implicitly shown if SDL_WINDOW_HIDDEN is not set. `SDL_WINDOW_SHOWN` may be<br/>/// queried later using SDL_GetWindowFlags().<br/>/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>/// If the window is created with the `SDL_WINDOW_ALLOW_HIGHDPI` flag, its size<br/>/// in pixels may differ from its size in screen coordinates on platforms with<br/>/// high-DPI support (e.g. iOS and macOS). Use SDL_GetWindowSize() to query the<br/>/// client area's size in screen coordinates, and SDL_GL_GetDrawableSize() or<br/>/// SDL_GetRendererOutputSize() to query the drawable size in pixels. Note that<br/>/// when this flag is set, the drawable size can vary after the window is<br/>/// created and should be queried after major window events such as when the<br/>/// window is resized or moved between displays.<br/>/// If the window is set fullscreen, the width and height parameters `w` and<br/>/// `h` will not be used. However, invalid size parameters (e.g. too large) may<br/>/// still fail. Window size is actually limited to 16384 x 16384 for all<br/>/// platforms at window creation.<br/>/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>/// SDL_CreateWindow() will fail.<br/>/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>/// loader or link to a dynamic library version. This limitation may be removed<br/>/// in a future version of SDL.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLCreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] string title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (title != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(title);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLWindow* ret = SDLCreateWindowNative(pStr0, x, y, w, h, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Create an SDL window from an existing native window.<br/>
		/// In some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows)<br/>
		/// the hint `SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT` needs to be configured<br/>
		/// before using SDL_CreateWindowFrom().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindowFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		internal static SDLWindow* SDLCreateWindowFromNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			return ((delegate* unmanaged[Cdecl]<void*, SDLWindow*>)vt[367])(data);
		}
	}
}
