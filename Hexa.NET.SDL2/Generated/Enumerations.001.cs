// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{

	/// <summary>/// These are the various supported windowing subsystems<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_SYSWM_TYPE")]
	public enum SdlSyswmType : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_UNKNOWN")]
		[NativeName(NativeNameType.Value, "0")]
		Unknown = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_WINDOWS")]
		[NativeName(NativeNameType.Value, "1")]
		Windows = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_X11")]
		[NativeName(NativeNameType.Value, "2")]
		X11 = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_DIRECTFB")]
		[NativeName(NativeNameType.Value, "3")]
		Directfb = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_COCOA")]
		[NativeName(NativeNameType.Value, "4")]
		Cocoa = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_UIKIT")]
		[NativeName(NativeNameType.Value, "5")]
		Uikit = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_WAYLAND")]
		[NativeName(NativeNameType.Value, "6")]
		Wayland = unchecked(6),
		/// <summary>/// no longer available, left for API/ABI compatibility. Remove in 2.1! <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_MIR")]
		[NativeName(NativeNameType.Value, "7")]
		Mir = unchecked(7),

		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_WINRT")]
		[NativeName(NativeNameType.Value, "8")]
		Winrt = unchecked(8),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_ANDROID")]
		[NativeName(NativeNameType.Value, "9")]
		Android = unchecked(9),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_VIVANTE")]
		[NativeName(NativeNameType.Value, "10")]
		Vivante = unchecked(10),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_OS2")]
		[NativeName(NativeNameType.Value, "11")]
		Os2 = unchecked(11),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_HAIKU")]
		[NativeName(NativeNameType.Value, "12")]
		Haiku = unchecked(12),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_KMSDRM")]
		[NativeName(NativeNameType.Value, "13")]
		Kmsdrm = unchecked(13),
		[NativeName(NativeNameType.EnumItem, "SDL_SYSWM_RISCOS")]
		[NativeName(NativeNameType.Value, "14")]
		Riscos = unchecked(14),
	}

	/// <summary>/// <br/>/// @<br/>/// { <br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_eventaction")]
	public enum SDLEventaction : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_ADDEVENT")]
		[NativeName(NativeNameType.Value, "0")]
		Addevent = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "SDL_PEEKEVENT")]
		[NativeName(NativeNameType.Value, "1")]
		Peekevent = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_GETEVENT")]
		[NativeName(NativeNameType.Value, "2")]
		Getevent = unchecked(2),
	}

	/// <summary>/// <br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_HintPriority")]
	public enum SDLHintPriority : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_HINT_DEFAULT")]
		[NativeName(NativeNameType.Value, "0")]
		Default = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "SDL_HINT_NORMAL")]
		[NativeName(NativeNameType.Value, "1")]
		Normal = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_HINT_OVERRIDE")]
		[NativeName(NativeNameType.Value, "2")]
		Override = unchecked(2),
	}

	/// <summary>/// <br/>/// By default the application category is enabled at the INFO level,<br/>/// the assert category is enabled at the WARN level, test is enabled<br/>/// at the VERBOSE level and all other categories are enabled at the<br/>/// ERROR level.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_LogCategory")]
	public enum SDLLogCategory : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_APPLICATION")]
		[NativeName(NativeNameType.Value, "0")]
		Application = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_ERROR")]
		[NativeName(NativeNameType.Value, "1")]
		Error = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_ASSERT")]
		[NativeName(NativeNameType.Value, "2")]
		Assert = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_SYSTEM")]
		[NativeName(NativeNameType.Value, "3")]
		System = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_AUDIO")]
		[NativeName(NativeNameType.Value, "4")]
		Audio = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_VIDEO")]
		[NativeName(NativeNameType.Value, "5")]
		Video = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RENDER")]
		[NativeName(NativeNameType.Value, "6")]
		Render = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_INPUT")]
		[NativeName(NativeNameType.Value, "7")]
		Input = unchecked(7),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_TEST")]
		[NativeName(NativeNameType.Value, "8")]
		Test = unchecked(8),
		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED1")]
		[NativeName(NativeNameType.Value, "9")]
		Reserved1 = unchecked(9),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED2")]
		[NativeName(NativeNameType.Value, "10")]
		Reserved2 = unchecked(10),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED3")]
		[NativeName(NativeNameType.Value, "11")]
		Reserved3 = unchecked(11),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED4")]
		[NativeName(NativeNameType.Value, "12")]
		Reserved4 = unchecked(12),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED5")]
		[NativeName(NativeNameType.Value, "13")]
		Reserved5 = unchecked(13),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED6")]
		[NativeName(NativeNameType.Value, "14")]
		Reserved6 = unchecked(14),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED7")]
		[NativeName(NativeNameType.Value, "15")]
		Reserved7 = unchecked(15),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED8")]
		[NativeName(NativeNameType.Value, "16")]
		Reserved8 = unchecked(16),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED9")]
		[NativeName(NativeNameType.Value, "17")]
		Reserved9 = unchecked(17),

		/// <summary>/// Reserved for future SDL library use <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_RESERVED10")]
		[NativeName(NativeNameType.Value, "18")]
		Reserved10 = unchecked(18),

		/// <summary>/// Beyond this point is reserved for application use, e.g.<br/>/// enum {<br/>/// MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,<br/>/// MYAPP_CATEGORY_AWESOME2,<br/>/// MYAPP_CATEGORY_AWESOME3,<br/>/// ...<br/>/// };<br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_LOG_CATEGORY_CUSTOM")]
		[NativeName(NativeNameType.Value, "19")]
		Custom = unchecked(19),

	}

	/// <summary>/// <br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_LogPriority")]
	public enum SDLLogPriority : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_VERBOSE")]
		[NativeName(NativeNameType.Value, "1")]
		Verbose = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_DEBUG")]
		[NativeName(NativeNameType.Value, "2")]
		Debug = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_INFO")]
		[NativeName(NativeNameType.Value, "3")]
		Info = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_WARN")]
		[NativeName(NativeNameType.Value, "4")]
		Warn = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_ERROR")]
		[NativeName(NativeNameType.Value, "5")]
		Error = unchecked(5),
		[NativeName(NativeNameType.EnumItem, "SDL_LOG_PRIORITY_CRITICAL")]
		[NativeName(NativeNameType.Value, "6")]
		Critical = unchecked(6),
		[NativeName(NativeNameType.EnumItem, "SDL_NUM_LOG_PRIORITIES")]
		[NativeName(NativeNameType.Value, "7")]
		NumLogPriorities = unchecked(7),
	}

	/// <summary>/// SDL_MessageBox flags. If supported will display warning icon, etc.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_MessageBoxFlags")]
	public enum SDLMessageBoxFlags : int
	{
		/// <summary>/// error dialog <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_ERROR")]
		[NativeName(NativeNameType.Value, "16")]
		Error = unchecked(16),

		/// <summary>/// warning dialog <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_WARNING")]
		[NativeName(NativeNameType.Value, "32")]
		Warning = unchecked(32),

		/// <summary>/// informational dialog <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_INFORMATION")]
		[NativeName(NativeNameType.Value, "64")]
		Information = unchecked(64),

		/// <summary>/// buttons placed left to right <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT")]
		[NativeName(NativeNameType.Value, "128")]
		ButtonsLeftToRight = unchecked(128),

		/// <summary>/// buttons placed right to left <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT")]
		[NativeName(NativeNameType.Value, "256")]
		ButtonsRightToLeft = unchecked(256),

	}

	/// <summary>/// Flags for SDL_MessageBoxButtonData.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_MessageBoxButtonFlags")]
	public enum SDLMessageBoxButtonFlags : int
	{
		/// <summary>/// Marks the default button when return is hit <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT")]
		[NativeName(NativeNameType.Value, "1")]
		ReturnkeyDefault = unchecked(1),

		/// <summary>/// Marks the default button when escape is hit <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT")]
		[NativeName(NativeNameType.Value, "2")]
		EscapekeyDefault = unchecked(2),

	}

	[NativeName(NativeNameType.Enum, "SDL_MessageBoxColorType")]
	public enum SDLMessageBoxColorType : int
	{
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_BACKGROUND")]
		[NativeName(NativeNameType.Value, "0")]
		Background = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_TEXT")]
		[NativeName(NativeNameType.Value, "1")]
		Text = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER")]
		[NativeName(NativeNameType.Value, "2")]
		ButtonBorder = unchecked(2),
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND")]
		[NativeName(NativeNameType.Value, "3")]
		ButtonBackground = unchecked(3),
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED")]
		[NativeName(NativeNameType.Value, "4")]
		ButtonSelected = unchecked(4),
		[NativeName(NativeNameType.EnumItem, "SDL_MESSAGEBOX_COLOR_MAX")]
		[NativeName(NativeNameType.Value, "5")]
		Max = unchecked(5),
	}

	/// <summary>/// The basic state for the system's power supply.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_PowerState")]
	public enum SDLPowerState : int
	{
		/// <summary>/// cannot determine power status <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_POWERSTATE_UNKNOWN")]
		[NativeName(NativeNameType.Value, "0")]
		Unknown = unchecked(0),

		/// <summary>/// Not plugged in, running on the battery <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_POWERSTATE_ON_BATTERY")]
		[NativeName(NativeNameType.Value, "1")]
		OnBattery = unchecked(1),

		/// <summary>/// Plugged in, no battery available <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_POWERSTATE_NO_BATTERY")]
		[NativeName(NativeNameType.Value, "2")]
		NoBattery = unchecked(2),

		/// <summary>/// Plugged in, charging battery <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_POWERSTATE_CHARGING")]
		[NativeName(NativeNameType.Value, "3")]
		Charging = unchecked(3),

		/// <summary>/// Plugged in, battery charged <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_POWERSTATE_CHARGED")]
		[NativeName(NativeNameType.Value, "4")]
		Charged = unchecked(4),

	}

	/// <summary>/// Flags used when creating a rendering context<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_RendererFlags")]
	public enum SDLRendererFlags : int
	{
		/// <summary>/// The renderer is a software fallback <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_RENDERER_SOFTWARE")]
		[NativeName(NativeNameType.Value, "1")]
		Software = unchecked(1),

		/// <summary>/// The renderer uses hardware<br/>/// acceleration <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_RENDERER_ACCELERATED")]
		[NativeName(NativeNameType.Value, "2")]
		Accelerated = unchecked(2),

		/// <summary>/// Present is synchronized<br/>/// with the refresh rate <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_RENDERER_PRESENTVSYNC")]
		[NativeName(NativeNameType.Value, "4")]
		Presentvsync = unchecked(4),

		/// <summary>/// The renderer supports<br/>/// rendering to texture <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_RENDERER_TARGETTEXTURE")]
		[NativeName(NativeNameType.Value, "8")]
		Targettexture = unchecked(8),

	}

	/// <summary>/// The scaling mode for a texture.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_ScaleMode")]
	public enum SDLScaleMode : int
	{
		/// <summary>/// nearest pixel sampling <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_ScaleModeNearest")]
		[NativeName(NativeNameType.Value, "0")]
		Nearest = unchecked(0),

		/// <summary>/// linear filtering <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_ScaleModeLinear")]
		[NativeName(NativeNameType.Value, "1")]
		Linear = unchecked(1),

		/// <summary>/// anisotropic filtering <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_ScaleModeBest")]
		[NativeName(NativeNameType.Value, "2")]
		Best = unchecked(2),

	}

	/// <summary>/// The access pattern allowed for a texture.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_TextureAccess")]
	public enum SDLTextureAccess : int
	{
		/// <summary>/// Changes rarely, not lockable <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREACCESS_STATIC")]
		[NativeName(NativeNameType.Value, "0")]
		Static = unchecked(0),

		/// <summary>/// Changes frequently, lockable <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREACCESS_STREAMING")]
		[NativeName(NativeNameType.Value, "1")]
		Streaming = unchecked(1),

		/// <summary>/// Texture can be used as a render target <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREACCESS_TARGET")]
		[NativeName(NativeNameType.Value, "2")]
		Target = unchecked(2),

	}

	/// <summary>/// The texture channel modulation used in SDL_RenderCopy().<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_TextureModulate")]
	public enum SDLTextureModulate : int
	{
		/// <summary>/// No modulation <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREMODULATE_NONE")]
		[NativeName(NativeNameType.Value, "0")]
		None = unchecked(0),

		/// <summary>/// srcC = srcC * color <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREMODULATE_COLOR")]
		[NativeName(NativeNameType.Value, "1")]
		Color = unchecked(1),

		/// <summary>/// srcA = srcA * alpha <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_TEXTUREMODULATE_ALPHA")]
		[NativeName(NativeNameType.Value, "2")]
		Alpha = unchecked(2),

	}

	/// <summary>/// Flip constants for SDL_RenderCopyEx<br/>/// </summary>	[NativeName(NativeNameType.Enum, "SDL_RendererFlip")]
	public enum SDLRendererFlip : int
	{
		/// <summary>/// Do not flip <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_FLIP_NONE")]
		[NativeName(NativeNameType.Value, "0")]
		None = unchecked(0),

		/// <summary>/// flip horizontally <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_FLIP_HORIZONTAL")]
		[NativeName(NativeNameType.Value, "1")]
		Horizontal = unchecked(1),

		/// <summary>/// flip vertically <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "SDL_FLIP_VERTICAL")]
		[NativeName(NativeNameType.Value, "2")]
		Vertical = unchecked(2),

	}

	/// <summary>/// <br/>/// </summary>	[NativeName(NativeNameType.Enum, "WindowShapeMode")]
	public enum WindowShapeMode : int
	{
		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "ShapeModeDefault")]
		[NativeName(NativeNameType.Value, "0")]
		Default = unchecked(0),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "ShapeModeBinarizeAlpha")]
		[NativeName(NativeNameType.Value, "1")]
		BinarizeAlpha = unchecked(1),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "ShapeModeReverseBinarizeAlpha")]
		[NativeName(NativeNameType.Value, "2")]
		ReverseBinarizeAlpha = unchecked(2),

		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.EnumItem, "ShapeModeColorKey")]
		[NativeName(NativeNameType.Value, "3")]
		ColorKey = unchecked(3),

	}

	/// <summary>/// Enumerated boolean type<br/>/// Values other than zero should be considered to be true.  Therefore<br/>/// comparisons should not be made against KHRONOS_TRUE.<br/>/// </summary>	[NativeName(NativeNameType.Enum, "khronos_boolean_enum_t")]
	public enum KhronosBooleanEnum : int
	{
		[NativeName(NativeNameType.EnumItem, "KHRONOS_FALSE")]
		[NativeName(NativeNameType.Value, "0")]
		False = unchecked(0),
		[NativeName(NativeNameType.EnumItem, "KHRONOS_TRUE")]
		[NativeName(NativeNameType.Value, "1")]
		True = unchecked(1),
		[NativeName(NativeNameType.EnumItem, "KHRONOS_BOOLEAN_ENUM_FORCE_SIZE")]
		[NativeName(NativeNameType.Value, "2147483647")]
		ForceSize = unchecked(2147483647),
	}

}
