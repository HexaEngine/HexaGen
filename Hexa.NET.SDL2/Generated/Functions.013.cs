// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get the current render target.<br/>
		/// The default render target is the window for which the renderer was created,<br/>
		/// and is reported a NULL here.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRenderTarget")]
		[return: NativeName(NativeNameType.Type, "SDL_Texture*")]
		internal static SDLTexture* SDLGetRenderTargetNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLTexture*>)vt[753])(renderer);
		}
		/// <summary>/// Get the current render target.<br/>/// The default render target is the window for which the renderer was created,<br/>/// and is reported a NULL here.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderTarget")]
		[return: NativeName(NativeNameType.Type, "SDL_Texture*")]
		public static SDLTexture* SDLGetRenderTarget([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLTexture* ret = SDLGetRenderTargetNative(renderer);
			return ret;
		}

		/// <summary>/// Get the current render target.<br/>/// The default render target is the window for which the renderer was created,<br/>/// and is reported a NULL here.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderTarget")]
		[return: NativeName(NativeNameType.Type, "SDL_Texture*")]
		public static SDLTexture* SDLGetRenderTarget([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLTexture* ret = SDLGetRenderTargetNative((SDLRenderer*)prenderer);
				return ret;
			}
		}

		/// <summary>
		/// Set a device independent resolution for rendering.<br/>
		/// This function uses the viewport and scaling functionality to allow a fixed<br/>
		/// logical resolution for rendering, regardless of the actual output<br/>
		/// resolution. If the actual output resolution doesn't have the same aspect<br/>
		/// ratio the output rendering will be centered within the output display.<br/>
		/// If the output display is a window, mouse and touch events in the window<br/>
		/// will be filtered and scaled so they seem to arrive within the logical<br/>
		/// resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether<br/>
		/// relative motion events are also scaled.<br/>
		/// If this function results in scaling or subpixel drawing by the rendering<br/>
		/// backend, it will be handled using the appropriate quality hints.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderSetLogicalSizeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, int>)vt[754])(renderer, w, h);
		}
		/// <summary>/// Set a device independent resolution for rendering.<br/>/// This function uses the viewport and scaling functionality to allow a fixed<br/>/// logical resolution for rendering, regardless of the actual output<br/>/// resolution. If the actual output resolution doesn't have the same aspect<br/>/// ratio the output rendering will be centered within the output display.<br/>/// If the output display is a window, mouse and touch events in the window<br/>/// will be filtered and scaled so they seem to arrive within the logical<br/>/// resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether<br/>/// relative motion events are also scaled.<br/>/// If this function results in scaling or subpixel drawing by the rendering<br/>/// backend, it will be handled using the appropriate quality hints.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			int ret = SDLRenderSetLogicalSizeNative(renderer, w, h);
			return ret;
		}

		/// <summary>/// Set a device independent resolution for rendering.<br/>/// This function uses the viewport and scaling functionality to allow a fixed<br/>/// logical resolution for rendering, regardless of the actual output<br/>/// resolution. If the actual output resolution doesn't have the same aspect<br/>/// ratio the output rendering will be centered within the output display.<br/>/// If the output display is a window, mouse and touch events in the window<br/>/// will be filtered and scaled so they seem to arrive within the logical<br/>/// resolution. The SDL_HINT_MOUSE_RELATIVE_SCALING hint controls whether<br/>/// relative motion events are also scaled.<br/>/// If this function results in scaling or subpixel drawing by the rendering<br/>/// backend, it will be handled using the appropriate quality hints.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderSetLogicalSizeNative((SDLRenderer*)prenderer, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get device independent resolution for rendering.<br/>
		/// When using the main rendering target (eg no target texture is set): this<br/>
		/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>
		/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>
		/// width and height.<br/>
		/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>
		/// it returns the logical width and height that are set.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderGetLogicalSizeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, int*, int*, void>)vt[755])(renderer, w, h);
		}
		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLRenderGetLogicalSizeNative(renderer, w, h);
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderGetLogicalSizeNative((SDLRenderer*)prenderer, w, h);
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLRenderGetLogicalSizeNative(renderer, (int*)pw, h);
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pw = &w)
				{
					SDLRenderGetLogicalSizeNative((SDLRenderer*)prenderer, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLRenderGetLogicalSizeNative(renderer, w, (int*)ph);
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* ph = &h)
				{
					SDLRenderGetLogicalSizeNative((SDLRenderer*)prenderer, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLRenderGetLogicalSizeNative(renderer, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get device independent resolution for rendering.<br/>/// When using the main rendering target (eg no target texture is set): this<br/>/// may return 0 for `w` and `h` if the SDL_Renderer has never had its logical<br/>/// size set by SDL_RenderSetLogicalSize(). Otherwise it returns the logical<br/>/// width and height.<br/>/// When using a target texture: Never return 0 for `w` and `h` at first. Then<br/>/// it returns the logical width and height that are set.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetLogicalSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetLogicalSize([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLRenderGetLogicalSizeNative((SDLRenderer*)prenderer, (int*)pw, (int*)ph);
					}
				}
			}
		}

		/// <summary>
		/// Set whether to force integer scales for resolution-independent rendering.<br/>
		/// This function restricts the logical viewport to integer values - that is,<br/>
		/// when a resolution is between two multiples of a logical size, the viewport<br/>
		/// size is rounded down to the lower multiple.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderSetIntegerScaleNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool enable)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLBool, int>)vt[756])(renderer, enable);
		}
		/// <summary>/// Set whether to force integer scales for resolution-independent rendering.<br/>/// This function restricts the logical viewport to integer values - that is,<br/>/// when a resolution is between two multiples of a logical size, the viewport<br/>/// size is rounded down to the lower multiple.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetIntegerScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool enable)
		{
			int ret = SDLRenderSetIntegerScaleNative(renderer, enable);
			return ret;
		}

		/// <summary>/// Set whether to force integer scales for resolution-independent rendering.<br/>/// This function restricts the logical viewport to integer values - that is,<br/>/// when a resolution is between two multiples of a logical size, the viewport<br/>/// size is rounded down to the lower multiple.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetIntegerScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "enable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool enable)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderSetIntegerScaleNative((SDLRenderer*)prenderer, enable);
				return ret;
			}
		}

		/// <summary>
		/// Get whether integer scales are forced for resolution-independent rendering.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLRenderGetIntegerScaleNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLBool>)vt[757])(renderer);
		}
		/// <summary>/// Get whether integer scales are forced for resolution-independent rendering.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLRenderGetIntegerScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLBool ret = SDLRenderGetIntegerScaleNative(renderer);
			return ret;
		}

		/// <summary>/// Get whether integer scales are forced for resolution-independent rendering.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetIntegerScale")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLRenderGetIntegerScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLBool ret = SDLRenderGetIntegerScaleNative((SDLRenderer*)prenderer);
				return ret;
			}
		}

		/// <summary>
		/// Set the drawing area for rendering on the current target.<br/>
		/// When the window is resized, the viewport is reset to fill the entire new<br/>
		/// window size.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetViewport")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderSetViewportNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int>)vt[758])(renderer, rect);
		}
		/// <summary>/// Set the drawing area for rendering on the current target.<br/>/// When the window is resized, the viewport is reset to fill the entire new<br/>/// window size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetViewport")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderSetViewportNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Set the drawing area for rendering on the current target.<br/>/// When the window is resized, the viewport is reset to fill the entire new<br/>/// window size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetViewport")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderSetViewportNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Set the drawing area for rendering on the current target.<br/>/// When the window is resized, the viewport is reset to fill the entire new<br/>/// window size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetViewport")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderSetViewportNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Set the drawing area for rendering on the current target.<br/>/// When the window is resized, the viewport is reset to fill the entire new<br/>/// window size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetViewport")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLRenderSetViewportNative((SDLRenderer*)prenderer, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the drawing area for the current target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderGetViewportNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, void>)vt[759])(renderer, rect);
		}
		/// <summary>/// Get the drawing area for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			SDLRenderGetViewportNative(renderer, rect);
		}

		/// <summary>/// Get the drawing area for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderGetViewportNative((SDLRenderer*)prenderer, rect);
			}
		}

		/// <summary>/// Get the drawing area for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLRenderGetViewportNative(renderer, (SDLRect*)prect);
			}
		}

		/// <summary>/// Get the drawing area for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetViewport([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					SDLRenderGetViewportNative((SDLRenderer*)prenderer, (SDLRect*)prect);
				}
			}
		}

		/// <summary>
		/// Set the clip rectangle for rendering on the specified target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetClipRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderSetClipRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int>)vt[760])(renderer, rect);
		}
		/// <summary>/// Set the clip rectangle for rendering on the specified target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetClipRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderSetClipRectNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Set the clip rectangle for rendering on the specified target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetClipRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderSetClipRectNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Set the clip rectangle for rendering on the specified target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetClipRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderSetClipRectNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Set the clip rectangle for rendering on the specified target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetClipRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLRenderSetClipRectNative((SDLRenderer*)prenderer, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the clip rectangle for the current target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderGetClipRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, void>)vt[761])(renderer, rect);
		}
		/// <summary>/// Get the clip rectangle for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			SDLRenderGetClipRectNative(renderer, rect);
		}

		/// <summary>/// Get the clip rectangle for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderGetClipRectNative((SDLRenderer*)prenderer, rect);
			}
		}

		/// <summary>/// Get the clip rectangle for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLRenderGetClipRectNative(renderer, (SDLRect*)prect);
			}
		}

		/// <summary>/// Get the clip rectangle for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetClipRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					SDLRenderGetClipRectNative((SDLRenderer*)prenderer, (SDLRect*)prect);
				}
			}
		}

		/// <summary>
		/// Get whether clipping is enabled on the given renderer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderIsClipEnabled")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLRenderIsClipEnabledNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLBool>)vt[762])(renderer);
		}
		/// <summary>/// Get whether clipping is enabled on the given renderer.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderIsClipEnabled")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLRenderIsClipEnabled([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLBool ret = SDLRenderIsClipEnabledNative(renderer);
			return ret;
		}

		/// <summary>/// Get whether clipping is enabled on the given renderer.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderIsClipEnabled")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLRenderIsClipEnabled([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLBool ret = SDLRenderIsClipEnabledNative((SDLRenderer*)prenderer);
				return ret;
			}
		}

		/// <summary>
		/// Set the drawing scale for rendering on the current target.<br/>
		/// The drawing coordinates are scaled by the x/y scaling factors before they<br/>
		/// are used by the renderer. This allows resolution independent drawing with a<br/>
		/// single coordinate system.<br/>
		/// If this results in scaling or subpixel drawing by the rendering backend, it<br/>
		/// will be handled using the appropriate quality hints. For best results use<br/>
		/// integer scaling factors.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderSetScaleNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float")] float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float")] float scaleY)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, float, float, int>)vt[763])(renderer, scaleX, scaleY);
		}
		/// <summary>/// Set the drawing scale for rendering on the current target.<br/>/// The drawing coordinates are scaled by the x/y scaling factors before they<br/>/// are used by the renderer. This allows resolution independent drawing with a<br/>/// single coordinate system.<br/>/// If this results in scaling or subpixel drawing by the rendering backend, it<br/>/// will be handled using the appropriate quality hints. For best results use<br/>/// integer scaling factors.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float")] float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float")] float scaleY)
		{
			int ret = SDLRenderSetScaleNative(renderer, scaleX, scaleY);
			return ret;
		}

		/// <summary>/// Set the drawing scale for rendering on the current target.<br/>/// The drawing coordinates are scaled by the x/y scaling factors before they<br/>/// are used by the renderer. This allows resolution independent drawing with a<br/>/// single coordinate system.<br/>/// If this results in scaling or subpixel drawing by the rendering backend, it<br/>/// will be handled using the appropriate quality hints. For best results use<br/>/// integer scaling factors.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetScale")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float")] float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float")] float scaleY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderSetScaleNative((SDLRenderer*)prenderer, scaleX, scaleY);
				return ret;
			}
		}

		/// <summary>
		/// Get the drawing scale for the current target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderGetScaleNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] float* scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] float* scaleY)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, float*, float*, void>)vt[764])(renderer, scaleX, scaleY);
		}
		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] float* scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] float* scaleY)
		{
			SDLRenderGetScaleNative(renderer, scaleX, scaleY);
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] float* scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] float* scaleY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderGetScaleNative((SDLRenderer*)prenderer, scaleX, scaleY);
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] ref float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] float* scaleY)
		{
			fixed (float* pscaleX = &scaleX)
			{
				SDLRenderGetScaleNative(renderer, (float*)pscaleX, scaleY);
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] ref float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] float* scaleY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* pscaleX = &scaleX)
				{
					SDLRenderGetScaleNative((SDLRenderer*)prenderer, (float*)pscaleX, scaleY);
				}
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] float* scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] ref float scaleY)
		{
			fixed (float* pscaleY = &scaleY)
			{
				SDLRenderGetScaleNative(renderer, scaleX, (float*)pscaleY);
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] float* scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] ref float scaleY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* pscaleY = &scaleY)
				{
					SDLRenderGetScaleNative((SDLRenderer*)prenderer, scaleX, (float*)pscaleY);
				}
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] ref float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] ref float scaleY)
		{
			fixed (float* pscaleX = &scaleX)
			{
				fixed (float* pscaleY = &scaleY)
				{
					SDLRenderGetScaleNative(renderer, (float*)pscaleX, (float*)pscaleY);
				}
			}
		}

		/// <summary>/// Get the drawing scale for the current target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderGetScale([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "scaleX")] [NativeName(NativeNameType.Type, "float*")] ref float scaleX, [NativeName(NativeNameType.Param, "scaleY")] [NativeName(NativeNameType.Type, "float*")] ref float scaleY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* pscaleX = &scaleX)
				{
					fixed (float* pscaleY = &scaleY)
					{
						SDLRenderGetScaleNative((SDLRenderer*)prenderer, (float*)pscaleX, (float*)pscaleY);
					}
				}
			}
		}

		/// <summary>
		/// Get logical coordinates of point in renderer when given real coordinates of<br/>
		/// point in window.<br/>
		/// Logical coordinates will differ from real coordinates when render is scaled<br/>
		/// and logical renderer size set<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderWindowToLogicalNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] float* logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] float* logicalY)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, float*, float*, void>)vt[765])(renderer, windowX, windowY, logicalX, logicalY);
		}
		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] float* logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] float* logicalY)
		{
			SDLRenderWindowToLogicalNative(renderer, windowX, windowY, logicalX, logicalY);
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] float* logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] float* logicalY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderWindowToLogicalNative((SDLRenderer*)prenderer, windowX, windowY, logicalX, logicalY);
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] ref float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] float* logicalY)
		{
			fixed (float* plogicalX = &logicalX)
			{
				SDLRenderWindowToLogicalNative(renderer, windowX, windowY, (float*)plogicalX, logicalY);
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] ref float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] float* logicalY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* plogicalX = &logicalX)
				{
					SDLRenderWindowToLogicalNative((SDLRenderer*)prenderer, windowX, windowY, (float*)plogicalX, logicalY);
				}
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] float* logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] ref float logicalY)
		{
			fixed (float* plogicalY = &logicalY)
			{
				SDLRenderWindowToLogicalNative(renderer, windowX, windowY, logicalX, (float*)plogicalY);
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] float* logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] ref float logicalY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* plogicalY = &logicalY)
				{
					SDLRenderWindowToLogicalNative((SDLRenderer*)prenderer, windowX, windowY, logicalX, (float*)plogicalY);
				}
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] ref float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] ref float logicalY)
		{
			fixed (float* plogicalX = &logicalX)
			{
				fixed (float* plogicalY = &logicalY)
				{
					SDLRenderWindowToLogicalNative(renderer, windowX, windowY, (float*)plogicalX, (float*)plogicalY);
				}
			}
		}

		/// <summary>/// Get logical coordinates of point in renderer when given real coordinates of<br/>/// point in window.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderWindowToLogical")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderWindowToLogical([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int")] int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int")] int windowY, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float*")] ref float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float*")] ref float logicalY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (float* plogicalX = &logicalX)
				{
					fixed (float* plogicalY = &logicalY)
					{
						SDLRenderWindowToLogicalNative((SDLRenderer*)prenderer, windowX, windowY, (float*)plogicalX, (float*)plogicalY);
					}
				}
			}
		}

		/// <summary>
		/// Get real coordinates of point in window when given logical coordinates of<br/>
		/// point in renderer.<br/>
		/// Logical coordinates will differ from real coordinates when render is scaled<br/>
		/// and logical renderer size set<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRenderLogicalToWindowNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] int* windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] int* windowY)
		{
			((delegate* unmanaged[Cdecl]<SDLRenderer*, float, float, int*, int*, void>)vt[766])(renderer, logicalX, logicalY, windowX, windowY);
		}
		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] int* windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] int* windowY)
		{
			SDLRenderLogicalToWindowNative(renderer, logicalX, logicalY, windowX, windowY);
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] int* windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] int* windowY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLRenderLogicalToWindowNative((SDLRenderer*)prenderer, logicalX, logicalY, windowX, windowY);
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] ref int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] int* windowY)
		{
			fixed (int* pwindowX = &windowX)
			{
				SDLRenderLogicalToWindowNative(renderer, logicalX, logicalY, (int*)pwindowX, windowY);
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] ref int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] int* windowY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pwindowX = &windowX)
				{
					SDLRenderLogicalToWindowNative((SDLRenderer*)prenderer, logicalX, logicalY, (int*)pwindowX, windowY);
				}
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] int* windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] ref int windowY)
		{
			fixed (int* pwindowY = &windowY)
			{
				SDLRenderLogicalToWindowNative(renderer, logicalX, logicalY, windowX, (int*)pwindowY);
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] int* windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] ref int windowY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pwindowY = &windowY)
				{
					SDLRenderLogicalToWindowNative((SDLRenderer*)prenderer, logicalX, logicalY, windowX, (int*)pwindowY);
				}
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] ref int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] ref int windowY)
		{
			fixed (int* pwindowX = &windowX)
			{
				fixed (int* pwindowY = &windowY)
				{
					SDLRenderLogicalToWindowNative(renderer, logicalX, logicalY, (int*)pwindowX, (int*)pwindowY);
				}
			}
		}

		/// <summary>/// Get real coordinates of point in window when given logical coordinates of<br/>/// point in renderer.<br/>/// Logical coordinates will differ from real coordinates when render is scaled<br/>/// and logical renderer size set<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderLogicalToWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderLogicalToWindow([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "logicalX")] [NativeName(NativeNameType.Type, "float")] float logicalX, [NativeName(NativeNameType.Param, "logicalY")] [NativeName(NativeNameType.Type, "float")] float logicalY, [NativeName(NativeNameType.Param, "windowX")] [NativeName(NativeNameType.Type, "int*")] ref int windowX, [NativeName(NativeNameType.Param, "windowY")] [NativeName(NativeNameType.Type, "int*")] ref int windowY)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pwindowX = &windowX)
				{
					fixed (int* pwindowY = &windowY)
					{
						SDLRenderLogicalToWindowNative((SDLRenderer*)prenderer, logicalX, logicalY, (int*)pwindowX, (int*)pwindowY);
					}
				}
			}
		}

		/// <summary>
		/// Set the color used for drawing operations (Rect, Line and Clear).<br/>
		/// Set the color for drawing or filling rectangles, lines, and points, and for<br/>
		/// SDL_RenderClear().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetRenderDrawColorNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8")] byte a)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, byte, byte, byte, byte, int>)vt[767])(renderer, r, g, b, a);
		}
		/// <summary>/// Set the color used for drawing operations (Rect, Line and Clear).<br/>/// Set the color for drawing or filling rectangles, lines, and points, and for<br/>/// SDL_RenderClear().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8")] byte a)
		{
			int ret = SDLSetRenderDrawColorNative(renderer, r, g, b, a);
			return ret;
		}

		/// <summary>/// Set the color used for drawing operations (Rect, Line and Clear).<br/>/// Set the color for drawing or filling rectangles, lines, and points, and for<br/>/// SDL_RenderClear().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8")] byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLSetRenderDrawColorNative((SDLRenderer*)prenderer, r, g, b, a);
				return ret;
			}
		}

		/// <summary>
		/// Get the color used for drawing operations (Rect, Line and Clear).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetRenderDrawColorNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, byte*, byte*, byte*, byte*, int>)vt[768])(renderer, r, g, b, a);
		}
		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			int ret = SDLGetRenderDrawColorNative(renderer, r, g, b, a);
			return ret;
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, g, b, a);
				return ret;
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, g, b, a);
				return ret;
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, g, b, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pg = &g)
			{
				int ret = SDLGetRenderDrawColorNative(renderer, r, (byte*)pg, b, a);
				return ret;
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pg = &g)
				{
					int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, (byte*)pg, b, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, (byte*)pg, b, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, (byte*)pg, b, a);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pb = &b)
			{
				int ret = SDLGetRenderDrawColorNative(renderer, r, g, (byte*)pb, a);
				return ret;
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, g, (byte*)pb, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, g, (byte*)pb, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, g, (byte*)pb, a);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, r, (byte*)pg, (byte*)pb, a);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, (byte*)pg, (byte*)pb, a);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, (byte*)pg, (byte*)pb, a);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, (byte*)pg, (byte*)pb, a);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pa = &a)
			{
				int ret = SDLGetRenderDrawColorNative(renderer, r, g, b, (byte*)pa);
				return ret;
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pa = &a)
				{
					int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, g, b, (byte*)pa);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pa = &a)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, g, b, (byte*)pa);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, g, b, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pa = &a)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, r, (byte*)pg, b, (byte*)pa);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, (byte*)pg, b, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, (byte*)pg, b, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pa = &a)
						{
							int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, (byte*)pg, b, (byte*)pa);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pb = &b)
			{
				fixed (byte* pa = &a)
				{
					int ret = SDLGetRenderDrawColorNative(renderer, r, g, (byte*)pb, (byte*)pa);
					return ret;
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, g, (byte*)pb, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, g, (byte*)pb, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, g, (byte*)pb, (byte*)pa);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						int ret = SDLGetRenderDrawColorNative(renderer, r, (byte*)pg, (byte*)pb, (byte*)pa);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, r, (byte*)pg, (byte*)pb, (byte*)pa);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								int ret = SDLGetRenderDrawColorNative((SDLRenderer*)prenderer, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Set the blend mode used for drawing operations (Fill and Line).<br/>
		/// If the blend mode is not supported, the closest supported mode is chosen.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetRenderDrawBlendModeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLBlendMode, int>)vt[769])(renderer, blendMode);
		}
		/// <summary>/// Set the blend mode used for drawing operations (Fill and Line).<br/>/// If the blend mode is not supported, the closest supported mode is chosen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			int ret = SDLSetRenderDrawBlendModeNative(renderer, blendMode);
			return ret;
		}

		/// <summary>/// Set the blend mode used for drawing operations (Fill and Line).<br/>/// If the blend mode is not supported, the closest supported mode is chosen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLSetRenderDrawBlendModeNative((SDLRenderer*)prenderer, blendMode);
				return ret;
			}
		}

		/// <summary>
		/// Get the blend mode used for drawing operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetRenderDrawBlendModeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLBlendMode*, int>)vt[770])(renderer, blendMode);
		}
		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			int ret = SDLGetRenderDrawBlendModeNative(renderer, blendMode);
			return ret;
		}

		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLGetRenderDrawBlendModeNative((SDLRenderer*)prenderer, blendMode);
				return ret;
			}
		}

		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] ref SDLBlendMode blendMode)
		{
			fixed (SDLBlendMode* pblendMode = &blendMode)
			{
				int ret = SDLGetRenderDrawBlendModeNative(renderer, (SDLBlendMode*)pblendMode);
				return ret;
			}
		}

		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] ref SDLBlendMode blendMode)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLBlendMode* pblendMode = &blendMode)
				{
					int ret = SDLGetRenderDrawBlendModeNative((SDLRenderer*)prenderer, (SDLBlendMode*)pblendMode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Clear the current rendering target with the drawing color.<br/>
		/// This function clears the entire rendering target, ignoring the viewport and<br/>
		/// the clip rectangle.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderClear")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderClearNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int>)vt[771])(renderer);
		}
		/// <summary>/// Clear the current rendering target with the drawing color.<br/>/// This function clears the entire rendering target, ignoring the viewport and<br/>/// the clip rectangle.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderClear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderClear([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			int ret = SDLRenderClearNative(renderer);
			return ret;
		}

		/// <summary>/// Clear the current rendering target with the drawing color.<br/>/// This function clears the entire rendering target, ignoring the viewport and<br/>/// the clip rectangle.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderClear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderClear([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderClearNative((SDLRenderer*)prenderer);
				return ret;
			}
		}

		/// <summary>
		/// Draw a point on the current rendering target.<br/>
		/// SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,<br/>
		/// use SDL_RenderDrawPoints() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawPointNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, int>)vt[772])(renderer, x, y);
		}
		/// <summary>/// Draw a point on the current rendering target.<br/>/// SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,<br/>/// use SDL_RenderDrawPoints() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoint([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			int ret = SDLRenderDrawPointNative(renderer, x, y);
			return ret;
		}

		/// <summary>/// Draw a point on the current rendering target.<br/>/// SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,<br/>/// use SDL_RenderDrawPoints() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoint([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawPointNative((SDLRenderer*)prenderer, x, y);
				return ret;
			}
		}

		/// <summary>
		/// Draw multiple points on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawPointsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLPoint*, int, int>)vt[773])(renderer, points, count);
		}
		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawPointsNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawPointsNative((SDLRenderer*)prenderer, points, count);
				return ret;
			}
		}

		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawPointsNative(renderer, (SDLPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLPoint* ppoints = &points)
				{
					int ret = SDLRenderDrawPointsNative((SDLRenderer*)prenderer, (SDLPoint*)ppoints, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw a line on the current rendering target.<br/>
		/// SDL_RenderDrawLine() draws the line to include both end points. If you want<br/>
		/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLine")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawLineNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "int")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "int")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "int")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "int")] int y2)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, int, int, int>)vt[774])(renderer, x1, y1, x2, y2);
		}
		/// <summary>/// Draw a line on the current rendering target.<br/>/// SDL_RenderDrawLine() draws the line to include both end points. If you want<br/>/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLine")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLine([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "int")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "int")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "int")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "int")] int y2)
		{
			int ret = SDLRenderDrawLineNative(renderer, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>/// Draw a line on the current rendering target.<br/>/// SDL_RenderDrawLine() draws the line to include both end points. If you want<br/>/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLine")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLine([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "int")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "int")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "int")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "int")] int y2)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawLineNative((SDLRenderer*)prenderer, x1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Draw a series of connected lines on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawLinesNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLPoint*, int, int>)vt[775])(renderer, points, count);
		}
		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawLinesNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawLinesNative((SDLRenderer*)prenderer, points, count);
				return ret;
			}
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawLinesNative(renderer, (SDLPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLPoint* ppoints = &points)
				{
					int ret = SDLRenderDrawLinesNative((SDLRenderer*)prenderer, (SDLPoint*)ppoints, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw a rectangle on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int>)vt[776])(renderer, rect);
		}
		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderDrawRectNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawRectNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderDrawRectNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLRenderDrawRectNative((SDLRenderer*)prenderer, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw some number of rectangles on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawRectsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int, int>)vt[777])(renderer, rects, count);
		}
		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawRectsNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawRectsNative((SDLRenderer*)prenderer, rects, count);
				return ret;
			}
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLRenderDrawRectsNative(renderer, (SDLRect*)prects, count);
				return ret;
			}
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prects = &rects)
				{
					int ret = SDLRenderDrawRectsNative((SDLRenderer*)prenderer, (SDLRect*)prects, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Fill a rectangle on the current rendering target with the drawing color.<br/>
		/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>
		/// color's alpha value is ignored unless blending is enabled with the<br/>
		/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderFillRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int>)vt[778])(renderer, rect);
		}
		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderFillRectNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderFillRectNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderFillRectNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLRenderFillRectNative((SDLRenderer*)prenderer, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Fill some number of rectangles on the current rendering target with the<br/>
		/// drawing color.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderFillRectsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLRect*, int, int>)vt[779])(renderer, rects, count);
		}
		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderFillRectsNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderFillRectsNative((SDLRenderer*)prenderer, rects, count);
				return ret;
			}
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLRenderFillRectsNative(renderer, (SDLRect*)prects, count);
				return ret;
			}
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* prects = &rects)
				{
					int ret = SDLRenderFillRectsNative((SDLRenderer*)prenderer, (SDLRect*)prects, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering target.<br/>
		/// The texture is blended with the destination based on its blend mode set<br/>
		/// with SDL_SetTextureBlendMode().<br/>
		/// The texture color is affected based on its color modulation set by<br/>
		/// SDL_SetTextureColorMod().<br/>
		/// The texture alpha is affected based on its alpha modulation set by<br/>
		/// SDL_SetTextureAlphaMod().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderCopyNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLTexture*, SDLRect*, SDLRect*, int>)vt[780])(renderer, texture, srcrect, dstrect);
		}
		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLRenderCopyNative(renderer, texture, srcrect, dstrect);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, texture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyNative(renderer, texture, (SDLRect*)psrcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyNative(renderer, texture, srcrect, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, texture, srcrect, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLRenderCopyNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering, with optional<br/>
		/// rotation and flipping.<br/>
		/// Copy a portion of the texture to the current rendering target, optionally<br/>
		/// rotating it by angle around the given center and also flipping it<br/>
		/// top-bottom and/or left-right.<br/>
		/// The texture is blended with the destination based on its blend mode set<br/>
		/// with SDL_SetTextureBlendMode().<br/>
		/// The texture color is affected based on its color modulation set by<br/>
		/// SDL_SetTextureColorMod().<br/>
		/// The texture alpha is affected based on its alpha modulation set by<br/>
		/// SDL_SetTextureAlphaMod().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderCopyExNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLTexture*, SDLRect*, SDLRect*, double, SDLPoint*, SDLRendererFlip, int>)vt[781])(renderer, texture, srcrect, dstrect, angle, center, flip);
		}
		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			int ret = SDLRenderCopyExNative(renderer, texture, srcrect, dstrect, angle, center, flip);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, srcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLPoint* pcenter = &center)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						fixed (SDLPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						fixed (SDLPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						fixed (SDLPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						fixed (SDLPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					fixed (SDLRect* psrcrect = &srcrect)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							fixed (SDLPoint* pcenter = &center)
							{
								int ret = SDLRenderCopyExNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Draw a point on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawPointFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, float, float, int>)vt[782])(renderer, x, y);
		}
		/// <summary>/// Draw a point on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			int ret = SDLRenderDrawPointFNative(renderer, x, y);
			return ret;
		}

		/// <summary>/// Draw a point on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawPointFNative((SDLRenderer*)prenderer, x, y);
				return ret;
			}
		}

		/// <summary>
		/// Draw multiple points on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawPointsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFPoint*, int, int>)vt[783])(renderer, points, count);
		}
		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawPointsFNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawPointsFNative((SDLRenderer*)prenderer, points, count);
				return ret;
			}
		}

		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawPointsFNative(renderer, (SDLFPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFPoint* ppoints = &points)
				{
					int ret = SDLRenderDrawPointsFNative((SDLRenderer*)prenderer, (SDLFPoint*)ppoints, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw a line on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLineF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawLineFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, float, float, float, float, int>)vt[784])(renderer, x1, y1, x2, y2);
		}
		/// <summary>/// Draw a line on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLineF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLineF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			int ret = SDLRenderDrawLineFNative(renderer, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>/// Draw a line on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLineF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLineF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawLineFNative((SDLRenderer*)prenderer, x1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Draw a series of connected lines on the current rendering target at<br/>
		/// subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawLinesFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFPoint*, int, int>)vt[785])(renderer, points, count);
		}
		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawLinesFNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawLinesFNative((SDLRenderer*)prenderer, points, count);
				return ret;
			}
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawLinesFNative(renderer, (SDLFPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFPoint* ppoints = &points)
				{
					int ret = SDLRenderDrawLinesFNative((SDLRenderer*)prenderer, (SDLFPoint*)ppoints, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw a rectangle on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawRectFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFRect*, int>)vt[786])(renderer, rect);
		}
		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			int ret = SDLRenderDrawRectFNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawRectFNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLFRect* prect = &rect)
			{
				int ret = SDLRenderDrawRectFNative(renderer, (SDLFRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFRect* prect = &rect)
				{
					int ret = SDLRenderDrawRectFNative((SDLRenderer*)prenderer, (SDLFRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Draw some number of rectangles on the current rendering target at subpixel<br/>
		/// precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderDrawRectsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFRect*, int, int>)vt[787])(renderer, rects, count);
		}
		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawRectsFNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderDrawRectsFNative((SDLRenderer*)prenderer, rects, count);
				return ret;
			}
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFRect* prects = &rects)
			{
				int ret = SDLRenderDrawRectsFNative(renderer, (SDLFRect*)prects, count);
				return ret;
			}
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFRect* prects = &rects)
				{
					int ret = SDLRenderDrawRectsFNative((SDLRenderer*)prenderer, (SDLFRect*)prects, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Fill a rectangle on the current rendering target with the drawing color at<br/>
		/// subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderFillRectFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFRect*, int>)vt[788])(renderer, rect);
		}
		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			int ret = SDLRenderFillRectFNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderFillRectFNative((SDLRenderer*)prenderer, rect);
				return ret;
			}
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLFRect* prect = &rect)
			{
				int ret = SDLRenderFillRectFNative(renderer, (SDLFRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFRect* prect = &rect)
				{
					int ret = SDLRenderFillRectFNative((SDLRenderer*)prenderer, (SDLFRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Fill some number of rectangles on the current rendering target with the<br/>
		/// drawing color at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderFillRectsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLFRect*, int, int>)vt[789])(renderer, rects, count);
		}
		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderFillRectsFNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderFillRectsFNative((SDLRenderer*)prenderer, rects, count);
				return ret;
			}
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFRect* prects = &rects)
			{
				int ret = SDLRenderFillRectsFNative(renderer, (SDLFRect*)prects, count);
				return ret;
			}
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLFRect* prects = &rects)
				{
					int ret = SDLRenderFillRectsFNative((SDLRenderer*)prenderer, (SDLFRect*)prects, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering target at subpixel<br/>
		/// precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLRenderCopyFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLTexture*, SDLRect*, SDLFRect*, int>)vt[790])(renderer, texture, srcrect, dstrect);
		}
		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			int ret = SDLRenderCopyFNative(renderer, texture, srcrect, dstrect);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLRenderCopyFNative((SDLRenderer*)prenderer, texture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyFNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLTexture* ptexture = &texture)
				{
					int ret = SDLRenderCopyFNative((SDLRenderer*)prenderer, (SDLTexture*)ptexture, srcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyFNative(renderer, texture, (SDLRect*)psrcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyFNative((SDLRenderer*)prenderer, texture, (SDLRect*)psrcrect, dstrect);
					return ret;
				}
			}
		}
	}
}
