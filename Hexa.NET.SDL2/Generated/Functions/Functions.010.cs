// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickSetVirtualHatNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte, int>)vt[499])(joystick, hat, value);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, byte, int>)vt[499])((nint)joystick, hat, value);
			#endif
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSetVirtualHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			int ret = SDLJoystickSetVirtualHatNative(joystick, hat, value);
			return ret;
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSetVirtualHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickSetVirtualHatNative((SDLJoystick*)pjoystick, hat, value);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLJoystickNameNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)vt[500])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[500])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickName([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = SDLJoystickNameNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickNameS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(SDLJoystickNameNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickName([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = SDLJoystickNameNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickNameS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(SDLJoystickNameNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLJoystickPathNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)vt[501])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[501])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickPath([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = SDLJoystickPathNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickPathS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(SDLJoystickPathNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickPath([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = SDLJoystickPathNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickPathS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(SDLJoystickPathNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickGetPlayerIndexNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[502])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[502])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickGetPlayerIndexNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickGetPlayerIndexNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLJoystickSetPlayerIndexNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLJoystick*, int, void>)vt[503])(joystick, playerIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[503])((nint)joystick, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickSetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLJoystickSetPlayerIndexNative(joystick, playerIndex);
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickSetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickSetPlayerIndexNative((SDLJoystick*)pjoystick, playerIndex);
			}
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		internal static Guid SDLJoystickGetGUIDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, Guid>)vt[504])(joystick);
			#else
			return (Guid)((delegate* unmanaged[Cdecl]<nint, Guid>)vt[504])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			Guid ret = SDLJoystickGetGUIDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				Guid ret = SDLJoystickGetGUIDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLJoystickGetVendorNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)vt[505])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[505])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetVendor([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = SDLJoystickGetVendorNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetVendor([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = SDLJoystickGetVendorNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLJoystickGetProductNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)vt[506])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[506])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetProduct([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = SDLJoystickGetProductNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetProduct([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = SDLJoystickGetProductNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLJoystickGetProductVersionNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)vt[507])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[507])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetProductVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = SDLJoystickGetProductVersionNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetProductVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = SDLJoystickGetProductVersionNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLJoystickGetFirmwareVersionNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)vt[508])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[508])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetFirmwareVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = SDLJoystickGetFirmwareVersionNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLJoystickGetFirmwareVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = SDLJoystickGetFirmwareVersionNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLJoystickGetSerialNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)vt[509])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[509])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickGetSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = SDLJoystickGetSerialNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickGetSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(SDLJoystickGetSerialNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLJoystickGetSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = SDLJoystickGetSerialNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLJoystickGetSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(SDLJoystickGetSerialNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		internal static SDLJoystickType SDLJoystickGetTypeNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickType>)vt[510])(joystick);
			#else
			return (SDLJoystickType)((delegate* unmanaged[Cdecl]<nint, SDLJoystickType>)vt[510])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType SDLJoystickGetType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLJoystickType ret = SDLJoystickGetTypeNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType SDLJoystickGetType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickType ret = SDLJoystickGetTypeNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLJoystickGetGUIDStringNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] byte* pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Guid, byte*, int, void>)vt[511])(guid, pszGUID, cbGUID);
			#else
			((delegate* unmanaged[Cdecl]<Guid, nint, int, void>)vt[511])(guid, (nint)pszGUID, cbGUID);
			#endif
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] byte* pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			SDLJoystickGetGUIDStringNative(guid, pszGUID, cbGUID);
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] ref byte pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			fixed (byte* ppszGUID = &pszGUID)
			{
				SDLJoystickGetGUIDStringNative(guid, (byte*)ppszGUID, cbGUID);
			}
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] ref string pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pszGUID != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pszGUID);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pszGUID, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLJoystickGetGUIDStringNative(guid, pStr0, cbGUID);
			pszGUID = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		internal static Guid SDLJoystickGetGUIDFromStringNative([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] byte* pchGUID)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Guid>)vt[512])(pchGUID);
			#else
			return (Guid)((delegate* unmanaged[Cdecl]<nint, Guid>)vt[512])((nint)pchGUID);
			#endif
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] byte* pchGUID)
		{
			Guid ret = SDLJoystickGetGUIDFromStringNative(pchGUID);
			return ret;
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] ref byte pchGUID)
		{
			fixed (byte* ppchGUID = &pchGUID)
			{
				Guid ret = SDLJoystickGetGUIDFromStringNative((byte*)ppchGUID);
				return ret;
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> pchGUID)
		{
			fixed (byte* ppchGUID = pchGUID)
			{
				Guid ret = SDLJoystickGetGUIDFromStringNative((byte*)ppchGUID);
				return ret;
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid SDLJoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] string pchGUID)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pchGUID != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pchGUID);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pchGUID, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Guid ret = SDLJoystickGetGUIDFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetJoystickGUIDInfoNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Guid, ushort*, ushort*, ushort*, ushort*, void>)vt[513])(guid, vendor, product, version, crc16);
			#else
			((delegate* unmanaged[Cdecl]<Guid, nint, nint, nint, nint, void>)vt[513])(guid, (nint)vendor, (nint)product, (nint)version, (nint)crc16);
			#endif
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			SDLGetJoystickGUIDInfoNative(guid, vendor, product, version, crc16);
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				SDLGetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pversion = &version)
			{
				SDLGetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					SDLGetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, crc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pcrc16 = &crc16)
			{
				SDLGetJoystickGUIDInfoNative(guid, vendor, product, version, (ushort*)pcrc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					SDLGetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pversion = &version)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					SDLGetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						SDLGetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						fixed (ushort* pcrc16 = &crc16)
						{
							SDLGetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLJoystickGetAttachedNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)vt[514])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)vt[514])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAttached([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = SDLJoystickGetAttachedNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAttached([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = SDLJoystickGetAttachedNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		internal static int SDLJoystickInstanceIDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[515])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[515])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int SDLJoystickInstanceID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickInstanceIDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int SDLJoystickInstanceID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickInstanceIDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickNumAxesNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[516])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[516])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickNumAxesNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickNumAxesNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickNumBallsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[517])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[517])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickNumBallsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickNumBallsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickNumHatsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[518])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[518])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickNumHatsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickNumHatsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickNumButtonsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)vt[519])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[519])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = SDLJoystickNumButtonsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickNumButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickNumButtonsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLJoystickUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[520])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[520])();
			#endif
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickUpdate()
		{
			SDLJoystickUpdateNative();
		}

		/// <summary>
		/// Enable/disable joystick event polling.<br/>
		/// If joystick events are disabled, you must call SDL_JoystickUpdate()<br/>
		/// yourself and manually check the state of the joystick when you want<br/>
		/// joystick information.<br/>
		/// It is recommended that you leave joystick event handling enabled.<br/>
		/// **WARNING**: Calling this function may delete all events currently in SDL's<br/>
		/// event queue.<br/>
		/// While `param` is meant to be one of `SDL_QUERY`, `SDL_IGNORE`, or<br/>
		/// `SDL_ENABLE`, this function accepts any value, with any non-zero value that<br/>
		/// isn't `SDL_QUERY` being treated as `SDL_ENABLE`.<br/>
		/// If SDL was built with events disabled (extremely uncommon!), this will<br/>
		/// do nothing and always return `SDL_IGNORE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickEventStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[521])(state);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[521])(state);
			#endif
		}

		/// <summary>
		/// Enable/disable joystick event polling.<br/>
		/// If joystick events are disabled, you must call SDL_JoystickUpdate()<br/>
		/// yourself and manually check the state of the joystick when you want<br/>
		/// joystick information.<br/>
		/// It is recommended that you leave joystick event handling enabled.<br/>
		/// **WARNING**: Calling this function may delete all events currently in SDL's<br/>
		/// event queue.<br/>
		/// While `param` is meant to be one of `SDL_QUERY`, `SDL_IGNORE`, or<br/>
		/// `SDL_ENABLE`, this function accepts any value, with any non-zero value that<br/>
		/// isn't `SDL_QUERY` being treated as `SDL_ENABLE`.<br/>
		/// If SDL was built with events disabled (extremely uncommon!), this will<br/>
		/// do nothing and always return `SDL_IGNORE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickEventState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			int ret = SDLJoystickEventStateNative(state);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		internal static short SDLJoystickGetAxisNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short>)vt[522])(joystick, axis);
			#else
			return (short)((delegate* unmanaged[Cdecl]<nint, int, short>)vt[522])((nint)joystick, axis);
			#endif
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short SDLJoystickGetAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			short ret = SDLJoystickGetAxisNative(joystick, axis);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short SDLJoystickGetAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				short ret = SDLJoystickGetAxisNative((SDLJoystick*)pjoystick, axis);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLJoystickGetAxisInitialStateNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short*, SDLBool>)vt[523])(joystick, axis, state);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, int, nint, SDLBool>)vt[523])((nint)joystick, axis, (nint)state);
			#endif
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			SDLBool ret = SDLJoystickGetAxisInitialStateNative(joystick, axis, state);
			return ret;
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = SDLJoystickGetAxisInitialStateNative((SDLJoystick*)pjoystick, axis, state);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] ref short state)
		{
			fixed (short* pstate = &state)
			{
				SDLBool ret = SDLJoystickGetAxisInitialStateNative(joystick, axis, (short*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] ref short state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (short* pstate = &state)
				{
					SDLBool ret = SDLJoystickGetAxisInitialStateNative((SDLJoystick*)pjoystick, axis, (short*)pstate);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		internal static byte SDLJoystickGetHatNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)vt[524])(joystick, hat);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[524])((nint)joystick, hat);
			#endif
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLJoystickGetHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			byte ret = SDLJoystickGetHatNative(joystick, hat);
			return ret;
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLJoystickGetHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = SDLJoystickGetHatNative((SDLJoystick*)pjoystick, hat);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickGetBallNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, int*, int*, int>)vt[525])(joystick, ball, dx, dy);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int>)vt[525])((nint)joystick, ball, (nint)dx, (nint)dy);
			#endif
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			int ret = SDLJoystickGetBallNative(joystick, ball, dx, dy);
			return ret;
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickGetBallNative((SDLJoystick*)pjoystick, ball, dx, dy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (int* pdx = &dx)
			{
				int ret = SDLJoystickGetBallNative(joystick, ball, (int*)pdx, dy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					int ret = SDLJoystickGetBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, dy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (int* pdy = &dy)
			{
				int ret = SDLJoystickGetBallNative(joystick, ball, dx, (int*)pdy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdy = &dy)
				{
					int ret = SDLJoystickGetBallNative((SDLJoystick*)pjoystick, ball, dx, (int*)pdy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (int* pdx = &dx)
			{
				fixed (int* pdy = &dy)
				{
					int ret = SDLJoystickGetBallNative(joystick, ball, (int*)pdx, (int*)pdy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					fixed (int* pdy = &dy)
					{
						int ret = SDLJoystickGetBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, (int*)pdy);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		internal static byte SDLJoystickGetButtonNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)vt[526])(joystick, button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[526])((nint)joystick, button);
			#endif
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLJoystickGetButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			byte ret = SDLJoystickGetButtonNative(joystick, button);
			return ret;
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLJoystickGetButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = SDLJoystickGetButtonNative((SDLJoystick*)pjoystick, button);
				return ret;
			}
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickRumbleNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, int>)vt[527])(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)vt[527])((nint)joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			int ret = SDLJoystickRumbleNative(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickRumbleNative((SDLJoystick*)pjoystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickRumbleTriggersNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, int>)vt[528])(joystick, leftRumble, rightRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)vt[528])((nint)joystick, leftRumble, rightRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			int ret = SDLJoystickRumbleTriggersNative(joystick, leftRumble, rightRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickRumbleTriggersNative((SDLJoystick*)pjoystick, leftRumble, rightRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLJoystickHasLEDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)vt[529])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)vt[529])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = SDLJoystickHasLEDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = SDLJoystickHasLEDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLJoystickHasRumbleNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)vt[530])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)vt[530])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = SDLJoystickHasRumbleNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = SDLJoystickHasRumbleNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLJoystickHasRumbleTriggersNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)vt[531])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)vt[531])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = SDLJoystickHasRumbleTriggersNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLJoystickHasRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = SDLJoystickHasRumbleTriggersNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickSetLEDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte, byte, byte, int>)vt[532])(joystick, red, green, blue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, byte, byte, int>)vt[532])((nint)joystick, red, green, blue);
			#endif
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSetLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			int ret = SDLJoystickSetLEDNative(joystick, red, green, blue);
			return ret;
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSetLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickSetLEDNative((SDLJoystick*)pjoystick, red, green, blue);
				return ret;
			}
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLJoystickSendEffectNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, void*, int, int>)vt[533])(joystick, data, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[533])((nint)joystick, (nint)data, size);
			#endif
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSendEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			int ret = SDLJoystickSendEffectNative(joystick, data, size);
			return ret;
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLJoystickSendEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = SDLJoystickSendEffectNative((SDLJoystick*)pjoystick, data, size);
				return ret;
			}
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLJoystickCloseNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLJoystick*, void>)vt[534])(joystick);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[534])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickClose([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLJoystickCloseNative(joystick);
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLJoystickClose([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickCloseNative((SDLJoystick*)pjoystick);
			}
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		internal static SDLJoystickPowerLevel SDLJoystickCurrentPowerLevelNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickPowerLevel>)vt[535])(joystick);
			#else
			return (SDLJoystickPowerLevel)((delegate* unmanaged[Cdecl]<nint, SDLJoystickPowerLevel>)vt[535])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		public static SDLJoystickPowerLevel SDLJoystickCurrentPowerLevel([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLJoystickPowerLevel ret = SDLJoystickCurrentPowerLevelNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		public static SDLJoystickPowerLevel SDLJoystickCurrentPowerLevel([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickPowerLevel ret = SDLJoystickCurrentPowerLevelNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Locking for multi-threaded access to the sensor API<br/>
		/// If you are using the sensor API or handling events from multiple threads<br/>
		/// you should use these locking functions to protect access to the sensors.<br/>
		/// In particular, you are guaranteed that the sensor list won't change, so the<br/>
		/// API functions that take a sensor index will be valid, and sensor events<br/>
		/// will not be delivered.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLLockSensorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[536])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[536])();
			#endif
		}

		/// <summary>
		/// Locking for multi-threaded access to the sensor API<br/>
		/// If you are using the sensor API or handling events from multiple threads<br/>
		/// you should use these locking functions to protect access to the sensors.<br/>
		/// In particular, you are guaranteed that the sensor list won't change, so the<br/>
		/// API functions that take a sensor index will be valid, and sensor events<br/>
		/// will not be delivered.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLLockSensors()
		{
			SDLLockSensorsNative();
		}

		[NativeName(NativeNameType.Func, "SDL_UnlockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLUnlockSensorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[537])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[537])();
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_UnlockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnlockSensors()
		{
			SDLUnlockSensorsNative();
		}

		/// <summary>
		/// Count the number of sensors attached to the system right now.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_NumSensors")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLNumSensorsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[538])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[538])();
			#endif
		}

		/// <summary>
		/// Count the number of sensors attached to the system right now.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_NumSensors")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLNumSensors()
		{
			int ret = SDLNumSensorsNative();
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLSensorGetDeviceNameNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[539])(deviceIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[539])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLSensorGetDeviceName([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			byte* ret = SDLSensorGetDeviceNameNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLSensorGetDeviceNameS([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLSensorGetDeviceNameNative(deviceIndex));
			return ret;
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		internal static SDLSensorType SDLSensorGetDeviceTypeNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensorType>)vt[540])(deviceIndex);
			#else
			return (SDLSensorType)((delegate* unmanaged[Cdecl]<int, SDLSensorType>)vt[540])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SDLSensorGetDeviceType([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLSensorType ret = SDLSensorGetDeviceTypeNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSensorGetDeviceNonPortableTypeNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[541])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[541])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDeviceNonPortableType([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = SDLSensorGetDeviceNonPortableTypeNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		internal static int SDLSensorGetDeviceInstanceIDNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[542])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[542])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SDLSensorGetDeviceInstanceID([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = SDLSensorGetDeviceInstanceIDNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Open a sensor for use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		internal static SDLSensor* SDLSensorOpenNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensor*>)vt[543])(deviceIndex);
			#else
			return (SDLSensor*)((delegate* unmanaged[Cdecl]<int, nint>)vt[543])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Open a sensor for use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		public static SDLSensor* SDLSensorOpen([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLSensor* ret = SDLSensorOpenNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Return the SDL_Sensor associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		internal static SDLSensor* SDLSensorFromInstanceIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_SensorID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensor*>)vt[544])(instanceId);
			#else
			return (SDLSensor*)((delegate* unmanaged[Cdecl]<int, nint>)vt[544])(instanceId);
			#endif
		}

		/// <summary>
		/// Return the SDL_Sensor associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		public static SDLSensor* SDLSensorFromInstanceID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_SensorID")] int instanceId)
		{
			SDLSensor* ret = SDLSensorFromInstanceIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLSensorGetNameNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, byte*>)vt[545])(sensor);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[545])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLSensorGetName([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			byte* ret = SDLSensorGetNameNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLSensorGetNameS([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			string ret = Utils.DecodeStringUTF8(SDLSensorGetNameNative(sensor));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLSensorGetName([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				byte* ret = SDLSensorGetNameNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLSensorGetNameS([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				string ret = Utils.DecodeStringUTF8(SDLSensorGetNameNative((SDLSensor*)psensor));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		internal static SDLSensorType SDLSensorGetTypeNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, SDLSensorType>)vt[546])(sensor);
			#else
			return (SDLSensorType)((delegate* unmanaged[Cdecl]<nint, SDLSensorType>)vt[546])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SDLSensorGetType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			SDLSensorType ret = SDLSensorGetTypeNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SDLSensorGetType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				SDLSensorType ret = SDLSensorGetTypeNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSensorGetNonPortableTypeNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, int>)vt[547])(sensor);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[547])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetNonPortableType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			int ret = SDLSensorGetNonPortableTypeNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetNonPortableType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SDLSensorGetNonPortableTypeNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		internal static int SDLSensorGetInstanceIDNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, int>)vt[548])(sensor);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[548])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SDLSensorGetInstanceID([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			int ret = SDLSensorGetInstanceIDNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SDLSensorGetInstanceID([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SDLSensorGetInstanceIDNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSensorGetDataNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, float*, int, int>)vt[549])(sensor, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[549])((nint)sensor, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			int ret = SDLSensorGetDataNative(sensor, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SDLSensorGetDataNative((SDLSensor*)psensor, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = SDLSensorGetDataNative(sensor, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (float* pdata = &data)
				{
					int ret = SDLSensorGetDataNative((SDLSensor*)psensor, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSensorGetDataWithTimestampNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, ulong*, float*, int, int>)vt[550])(sensor, timestamp, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, int>)vt[550])((nint)sensor, (nint)timestamp, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			int ret = SDLSensorGetDataWithTimestampNative(sensor, timestamp, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SDLSensorGetDataWithTimestampNative((SDLSensor*)psensor, timestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				int ret = SDLSensorGetDataWithTimestampNative(sensor, (ulong*)ptimestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					int ret = SDLSensorGetDataWithTimestampNative((SDLSensor*)psensor, (ulong*)ptimestamp, data, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = SDLSensorGetDataWithTimestampNative(sensor, timestamp, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (float* pdata = &data)
				{
					int ret = SDLSensorGetDataWithTimestampNative((SDLSensor*)psensor, timestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				fixed (float* pdata = &data)
				{
					int ret = SDLSensorGetDataWithTimestampNative(sensor, (ulong*)ptimestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					fixed (float* pdata = &data)
					{
						int ret = SDLSensorGetDataWithTimestampNative((SDLSensor*)psensor, (ulong*)ptimestamp, (float*)pdata, numValues);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSensorCloseNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSensor*, void>)vt[551])(sensor);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[551])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSensorClose([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			SDLSensorCloseNative(sensor);
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSensorClose([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				SDLSensorCloseNative((SDLSensor*)psensor);
			}
		}

		/// <summary>
		/// Update the current state of the open sensors.<br/>
		/// This is called automatically by the event loop if sensor events are<br/>
		/// enabled.<br/>
		/// This needs to be called from the thread that initialized the sensor<br/>
		/// subsystem.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSensorUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[552])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[552])();
			#endif
		}

		/// <summary>
		/// Update the current state of the open sensors.<br/>
		/// This is called automatically by the event loop if sensor events are<br/>
		/// enabled.<br/>
		/// This needs to be called from the thread that initialized the sensor<br/>
		/// subsystem.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSensorUpdate()
		{
			SDLSensorUpdateNative();
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGameControllerAddMappingsFromRWNative([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRWops*, int, int>)vt[553])(rw, freerw);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[553])((nint)rw, freerw);
			#endif
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMappingsFromRW([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			int ret = SDLGameControllerAddMappingsFromRWNative(rw, freerw);
			return ret;
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMappingsFromRW([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] ref SDLRWops rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			fixed (SDLRWops* prw = &rw)
			{
				int ret = SDLGameControllerAddMappingsFromRWNative((SDLRWops*)prw, freerw);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGameControllerAddMappingNative([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] byte* mappingString)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)vt[554])(mappingString);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[554])((nint)mappingString);
			#endif
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] byte* mappingString)
		{
			int ret = SDLGameControllerAddMappingNative(mappingString);
			return ret;
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] ref byte mappingString)
		{
			fixed (byte* pmappingString = &mappingString)
			{
				int ret = SDLGameControllerAddMappingNative((byte*)pmappingString);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mappingString)
		{
			fixed (byte* pmappingString = mappingString)
			{
				int ret = SDLGameControllerAddMappingNative((byte*)pmappingString);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] string mappingString)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mappingString != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mappingString);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mappingString, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLGameControllerAddMappingNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the number of mappings installed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNumMappings")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGameControllerNumMappingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[555])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[555])();
			#endif
		}

		/// <summary>
		/// Get the number of mappings installed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNumMappings")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerNumMappings()
		{
			int ret = SDLGameControllerNumMappingsNative();
			return ret;
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLGameControllerMappingForIndexNative([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[556])(mappingIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[556])(mappingIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLGameControllerMappingForIndex([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			byte* ret = SDLGameControllerMappingForIndexNative(mappingIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLGameControllerMappingForIndexS([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerMappingForIndexNative(mappingIndex));
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLGameControllerMappingForGUIDNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid, byte*>)vt[557])(guid);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<Guid, nint>)vt[557])(guid);
			#endif
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLGameControllerMappingForGUID([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			byte* ret = SDLGameControllerMappingForGUIDNative(guid);
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLGameControllerMappingForGUIDS([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerMappingForGUIDNative(guid));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLGameControllerMappingNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)vt[558])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[558])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLGameControllerMapping([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = SDLGameControllerMappingNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLGameControllerMappingS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerMappingNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLGameControllerMapping([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = SDLGameControllerMappingNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLGameControllerMappingS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(SDLGameControllerMappingNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGameController")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLIsGameControllerNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLBool>)vt[559])(joystickIndex);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<int, SDLBool>)vt[559])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGameController")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIsGameController([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLBool ret = SDLIsGameControllerNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGameControllerNameForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[560])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[560])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerNameForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = SDLGameControllerNameForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerNameForIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerNameForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGameControllerPathForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[561])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[561])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerPathForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = SDLGameControllerPathForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerPathForIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerPathForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerTypeForIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		internal static SDLGameControllerType SDLGameControllerTypeForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)vt[562])(joystickIndex);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)vt[562])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerTypeForIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType SDLGameControllerTypeForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLGameControllerType ret = SDLGameControllerTypeForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLGameControllerMappingForDeviceIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[563])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[563])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLGameControllerMappingForDeviceIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = SDLGameControllerMappingForDeviceIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLGameControllerMappingForDeviceIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerMappingForDeviceIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		internal static SDLGameController* SDLGameControllerOpenNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)vt[564])(joystickIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)vt[564])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* SDLGameControllerOpen([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLGameController* ret = SDLGameControllerOpenNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		internal static SDLGameController* SDLGameControllerFromInstanceIDNative([NativeName(NativeNameType.Param, "joyid")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int joyid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)vt[565])(joyid);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)vt[565])(joyid);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* SDLGameControllerFromInstanceID([NativeName(NativeNameType.Param, "joyid")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int joyid)
		{
			SDLGameController* ret = SDLGameControllerFromInstanceIDNative(joyid);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		internal static SDLGameController* SDLGameControllerFromPlayerIndexNative([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)vt[566])(playerIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)vt[566])(playerIndex);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* SDLGameControllerFromPlayerIndex([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLGameController* ret = SDLGameControllerFromPlayerIndexNative(playerIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGameControllerNameNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)vt[567])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[567])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerName([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = SDLGameControllerNameNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerNameS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerNameNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerName([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = SDLGameControllerNameNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerNameS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(SDLGameControllerNameNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGameControllerPathNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)vt[568])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[568])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerPath([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = SDLGameControllerPathNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerPathS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerPathNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerPath([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = SDLGameControllerPathNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerPathS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(SDLGameControllerPathNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		internal static SDLGameControllerType SDLGameControllerGetTypeNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerType>)vt[569])(gamecontroller);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerType>)vt[569])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType SDLGameControllerGetType([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			SDLGameControllerType ret = SDLGameControllerGetTypeNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType SDLGameControllerGetType([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerType ret = SDLGameControllerGetTypeNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGameControllerGetPlayerIndexNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int>)vt[570])(gamecontroller);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[570])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerGetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			int ret = SDLGameControllerGetPlayerIndexNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerGetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = SDLGameControllerGetPlayerIndexNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGameControllerSetPlayerIndexNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGameController*, int, void>)vt[571])(gamecontroller, playerIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[571])((nint)gamecontroller, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGameControllerSetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLGameControllerSetPlayerIndexNative(gamecontroller, playerIndex);
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGameControllerSetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerSetPlayerIndexNative((SDLGameController*)pgamecontroller, playerIndex);
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLGameControllerGetVendorNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)vt[572])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[572])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetVendor([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ushort ret = SDLGameControllerGetVendorNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetVendor([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = SDLGameControllerGetVendorNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLGameControllerGetProductNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)vt[573])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[573])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetProduct([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ushort ret = SDLGameControllerGetProductNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetProduct([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = SDLGameControllerGetProductNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLGameControllerGetProductVersionNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)vt[574])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[574])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetProductVersion([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ushort ret = SDLGameControllerGetProductVersionNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetProductVersion([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = SDLGameControllerGetProductVersionNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLGameControllerGetFirmwareVersionNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)vt[575])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)vt[575])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetFirmwareVersion([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ushort ret = SDLGameControllerGetFirmwareVersionNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLGameControllerGetFirmwareVersion([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = SDLGameControllerGetFirmwareVersionNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGameControllerGetSerialNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)vt[576])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[576])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerGetSerial([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = SDLGameControllerGetSerialNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerGetSerialS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(SDLGameControllerGetSerialNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGameControllerGetSerial([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = SDLGameControllerGetSerialNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGameControllerGetSerialS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(SDLGameControllerGetSerialNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		internal static ulong SDLGameControllerGetSteamHandleNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ulong>)vt[577])(gamecontroller);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong>)vt[577])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLGameControllerGetSteamHandle([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ulong ret = SDLGameControllerGetSteamHandleNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLGameControllerGetSteamHandle([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ulong ret = SDLGameControllerGetSteamHandleNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLGameControllerGetAttachedNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLBool>)vt[578])(gamecontroller);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)vt[578])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGameControllerGetAttached([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			SDLBool ret = SDLGameControllerGetAttachedNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGameControllerGetAttached([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = SDLGameControllerGetAttachedNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		internal static SDLJoystick* SDLGameControllerGetJoystickNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLJoystick*>)vt[579])(gamecontroller);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[579])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		public static SDLJoystick* SDLGameControllerGetJoystick([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			SDLJoystick* ret = SDLGameControllerGetJoystickNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		public static SDLJoystick* SDLGameControllerGetJoystick([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLJoystick* ret = SDLGameControllerGetJoystickNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Query or change current state of Game Controller events.<br/>
		/// If controller events are disabled, you must call SDL_GameControllerUpdate()<br/>
		/// yourself and check the state of the controller when you want controller<br/>
		/// information.<br/>
		/// Any number can be passed to SDL_GameControllerEventState(), but only -1, 0,<br/>
		/// and 1 will have any effect. Other numbers will just be returned.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGameControllerEventStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[580])(state);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[580])(state);
			#endif
		}

		/// <summary>
		/// Query or change current state of Game Controller events.<br/>
		/// If controller events are disabled, you must call SDL_GameControllerUpdate()<br/>
		/// yourself and check the state of the controller when you want controller<br/>
		/// information.<br/>
		/// Any number can be passed to SDL_GameControllerEventState(), but only -1, 0,<br/>
		/// and 1 will have any effect. Other numbers will just be returned.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGameControllerEventState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			int ret = SDLGameControllerEventStateNative(state);
			return ret;
		}

		/// <summary>
		/// Manually pump game controller updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGameControllerUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[581])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[581])();
			#endif
		}

		/// <summary>
		/// Manually pump game controller updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGameControllerUpdate()
		{
			SDLGameControllerUpdateNative();
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerAxis")]
		internal static SDLGameControllerAxis SDLGameControllerGetAxisFromStringNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGameControllerAxis>)vt[582])(str);
			#else
			return (SDLGameControllerAxis)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis>)vt[582])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerAxis")]
		public static SDLGameControllerAxis SDLGameControllerGetAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			SDLGameControllerAxis ret = SDLGameControllerGetAxisFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerAxis")]
		public static SDLGameControllerAxis SDLGameControllerGetAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGameControllerAxis ret = SDLGameControllerGetAxisFromStringNative((byte*)pstr);
				return ret;
			}
		}
	}
}
