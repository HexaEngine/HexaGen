// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetRGBA")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLGetRGBANative([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a);

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			SDLGetRGBANative(pixel, format, r, g, b, a);
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, g, b, a);
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				SDLGetRGBANative(pixel, format, (byte*)pr, g, b, a);
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, g, b, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pg = &g)
			{
				SDLGetRGBANative(pixel, format, r, (byte*)pg, b, a);
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, (byte*)pg, b, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					SDLGetRGBANative(pixel, format, (byte*)pr, (byte*)pg, b, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, (byte*)pg, b, a);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pb = &b)
			{
				SDLGetRGBANative(pixel, format, r, g, (byte*)pb, a);
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pb = &b)
				{
					SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, g, (byte*)pb, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					SDLGetRGBANative(pixel, format, (byte*)pr, g, (byte*)pb, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, g, (byte*)pb, a);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					SDLGetRGBANative(pixel, format, r, (byte*)pg, (byte*)pb, a);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, (byte*)pg, (byte*)pb, a);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						SDLGetRGBANative(pixel, format, (byte*)pr, (byte*)pg, (byte*)pb, a);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] byte* a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, (byte*)pg, (byte*)pb, a);
						}
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pa = &a)
			{
				SDLGetRGBANative(pixel, format, r, g, b, (byte*)pa);
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pa = &a)
				{
					SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, g, b, (byte*)pa);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pa = &a)
				{
					SDLGetRGBANative(pixel, format, (byte*)pr, g, b, (byte*)pa);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, g, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pa = &a)
				{
					SDLGetRGBANative(pixel, format, r, (byte*)pg, b, (byte*)pa);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, (byte*)pg, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, format, (byte*)pr, (byte*)pg, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pa = &a)
						{
							SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, (byte*)pg, b, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pb = &b)
			{
				fixed (byte* pa = &a)
				{
					SDLGetRGBANative(pixel, format, r, g, (byte*)pb, (byte*)pa);
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, g, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, format, (byte*)pr, g, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, g, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						SDLGetRGBANative(pixel, format, r, (byte*)pg, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, r, (byte*)pg, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] SDLPixelFormat* format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							SDLGetRGBANative(pixel, format, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>/// Get RGBA values from a pixel in the specified format.<br/>/// This function uses the entire 8-bit [0..255] range when converting color<br/>/// components from pixel formats with less than 8-bits per RGB component<br/>/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>/// (100% opaque).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRGBA")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetRGBA([NativeName(NativeNameType.Param, "pixel")] [NativeName(NativeNameType.Type, "Uint32")] uint pixel, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const SDL_PixelFormat*")] ref SDLPixelFormat format, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (SDLPixelFormat* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								SDLGetRGBANative(pixel, (SDLPixelFormat*)pformat, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate a 256 entry gamma ramp for a gamma value.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CalculateGammaRamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_CalculateGammaRamp")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLCalculateGammaRampNative([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma, [NativeName(NativeNameType.Param, "ramp")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* ramp);

		/// <summary>/// Calculate a 256 entry gamma ramp for a gamma value.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CalculateGammaRamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLCalculateGammaRamp([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma, [NativeName(NativeNameType.Param, "ramp")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* ramp)
		{
			SDLCalculateGammaRampNative(gamma, ramp);
		}

		/// <summary>/// Calculate a 256 entry gamma ramp for a gamma value.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CalculateGammaRamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLCalculateGammaRamp([NativeName(NativeNameType.Param, "gamma")] [NativeName(NativeNameType.Type, "float")] float gamma, [NativeName(NativeNameType.Param, "ramp")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort ramp)
		{
			fixed (ushort* pramp = &ramp)
			{
				SDLCalculateGammaRampNative(gamma, (ushort*)pramp);
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasIntersection")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_HasIntersection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLHasIntersectionNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b);

		/// <summary>/// Determine whether two rectangles intersect.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersection")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersection([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b)
		{
			SDLBool ret = SDLHasIntersectionNative(a, b);
			return ret;
		}

		/// <summary>/// Determine whether two rectangles intersect.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersection")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersection([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b)
		{
			fixed (SDLRect* pa = &a)
			{
				SDLBool ret = SDLHasIntersectionNative((SDLRect*)pa, b);
				return ret;
			}
		}

		/// <summary>/// Determine whether two rectangles intersect.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersection")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersection([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b)
		{
			fixed (SDLRect* pb = &b)
			{
				SDLBool ret = SDLHasIntersectionNative(a, (SDLRect*)pb);
				return ret;
			}
		}

		/// <summary>/// Determine whether two rectangles intersect.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersection")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersection([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					SDLBool ret = SDLHasIntersectionNative((SDLRect*)pa, (SDLRect*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IntersectRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIntersectRectNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result);

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			SDLBool ret = SDLIntersectRectNative(a, b, result);
			return ret;
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				SDLBool ret = SDLIntersectRectNative((SDLRect*)pa, b, result);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pb = &b)
			{
				SDLBool ret = SDLIntersectRectNative(a, (SDLRect*)pb, result);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					SDLBool ret = SDLIntersectRectNative((SDLRect*)pa, (SDLRect*)pb, result);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				SDLBool ret = SDLIntersectRectNative(a, b, (SDLRect*)presult);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLBool ret = SDLIntersectRectNative((SDLRect*)pa, b, (SDLRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pb = &b)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLBool ret = SDLIntersectRectNative(a, (SDLRect*)pb, (SDLRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					fixed (SDLRect* presult = &result)
					{
						SDLBool ret = SDLIntersectRectNative((SDLRect*)pa, (SDLRect*)pb, (SDLRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_UnionRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLUnionRectNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result);

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			SDLUnionRectNative(a, b, result);
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				SDLUnionRectNative((SDLRect*)pa, b, result);
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pb = &b)
			{
				SDLUnionRectNative(a, (SDLRect*)pb, result);
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					SDLUnionRectNative((SDLRect*)pa, (SDLRect*)pb, result);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				SDLUnionRectNative(a, b, (SDLRect*)presult);
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLUnionRectNative((SDLRect*)pa, b, (SDLRect*)presult);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pb = &b)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLUnionRectNative(a, (SDLRect*)pb, (SDLRect*)presult);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					fixed (SDLRect* presult = &result)
					{
						SDLUnionRectNative((SDLRect*)pa, (SDLRect*)pb, (SDLRect*)presult);
					}
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_EnclosePoints")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLEnclosePointsNative([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result);

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			SDLBool ret = SDLEnclosePointsNative(points, count, clip, result);
			return ret;
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				SDLBool ret = SDLEnclosePointsNative((SDLPoint*)ppoints, count, clip, result);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLRect* pclip = &clip)
			{
				SDLBool ret = SDLEnclosePointsNative(points, count, (SDLRect*)pclip, result);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* pclip = &clip)
				{
					SDLBool ret = SDLEnclosePointsNative((SDLPoint*)ppoints, count, (SDLRect*)pclip, result);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				SDLBool ret = SDLEnclosePointsNative(points, count, clip, (SDLRect*)presult);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLBool ret = SDLEnclosePointsNative((SDLPoint*)ppoints, count, clip, (SDLRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLRect* pclip = &clip)
			{
				fixed (SDLRect* presult = &result)
				{
					SDLBool ret = SDLEnclosePointsNative(points, count, (SDLRect*)pclip, (SDLRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EnclosePoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEnclosePoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_Rect*")] ref SDLRect result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* pclip = &clip)
				{
					fixed (SDLRect* presult = &result)
					{
						SDLBool ret = SDLEnclosePointsNative((SDLPoint*)ppoints, count, (SDLRect*)pclip, (SDLRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IntersectRectAndLine")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIntersectRectAndLineNative([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2);

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* px1 = &x1)
			{
				SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* py1 = &y1)
			{
				SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, (int*)py1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, (int*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, x2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* px2 = &x2)
			{
				SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, y1, (int*)px2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px2 = &x2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, y1, (int*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* px2 = &x2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, y1, (int*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* px2 = &x2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, (int*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* px2 = &x2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, (int*)py1, (int*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, (int*)py1, (int*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, y2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* py2 = &y2)
			{
				SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, y1, x2, (int*)py2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, y1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, y1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, (int*)py1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, (int*)py1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] int* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, x2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* px2 = &x2)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, y1, (int*)px2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, y1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, y1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] int* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = SDLIntersectRectAndLineNative(rect, x1, (int*)py1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] int* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = SDLIntersectRectAndLineNative(rect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "int*")] ref int x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "int*")] ref int y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "int*")] ref int x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "int*")] ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							fixed (int* py2 = &y2)
							{
								SDLBool ret = SDLIntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasIntersectionF")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_HasIntersectionF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLHasIntersectionFNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b);

		/// <summary>/// Determine whether two rectangles intersect with float precision.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersectionF")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersectionF([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b)
		{
			SDLBool ret = SDLHasIntersectionFNative(a, b);
			return ret;
		}

		/// <summary>/// Determine whether two rectangles intersect with float precision.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersectionF")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersectionF([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b)
		{
			fixed (SDLFRect* pa = &a)
			{
				SDLBool ret = SDLHasIntersectionFNative((SDLFRect*)pa, b);
				return ret;
			}
		}

		/// <summary>/// Determine whether two rectangles intersect with float precision.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersectionF")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersectionF([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b)
		{
			fixed (SDLFRect* pb = &b)
			{
				SDLBool ret = SDLHasIntersectionFNative(a, (SDLFRect*)pb);
				return ret;
			}
		}

		/// <summary>/// Determine whether two rectangles intersect with float precision.<br/>/// If either pointer is NULL the function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasIntersectionF")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasIntersectionF([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					SDLBool ret = SDLHasIntersectionFNative((SDLFRect*)pa, (SDLFRect*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IntersectFRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIntersectFRectNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result);

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			SDLBool ret = SDLIntersectFRectNative(a, b, result);
			return ret;
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				SDLBool ret = SDLIntersectFRectNative((SDLFRect*)pa, b, result);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				SDLBool ret = SDLIntersectFRectNative(a, (SDLFRect*)pb, result);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					SDLBool ret = SDLIntersectFRectNative((SDLFRect*)pa, (SDLFRect*)pb, result);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				SDLBool ret = SDLIntersectFRectNative(a, b, (SDLFRect*)presult);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = SDLIntersectFRectNative((SDLFRect*)pa, b, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = SDLIntersectFRectNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of two rectangles with float precision.<br/>/// If `result` is NULL then this function will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRect")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						SDLBool ret = SDLIntersectFRectNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_UnionFRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLUnionFRectNative([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result);

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			SDLUnionFRectNative(a, b, result);
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				SDLUnionFRectNative((SDLFRect*)pa, b, result);
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				SDLUnionFRectNative(a, (SDLFRect*)pb, result);
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					SDLUnionFRectNative((SDLFRect*)pa, (SDLFRect*)pb, result);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				SDLUnionFRectNative(a, b, (SDLFRect*)presult);
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLUnionFRectNative((SDLFRect*)pa, b, (SDLFRect*)presult);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLUnionFRectNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
				}
			}
		}

		/// <summary>/// Calculate the union of two rectangles with float precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnionFRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnionFRect([NativeName(NativeNameType.Param, "A")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect a, [NativeName(NativeNameType.Param, "B")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect b, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						SDLUnionFRectNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
					}
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_EncloseFPoints")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLEncloseFPointsNative([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result);

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			SDLBool ret = SDLEncloseFPointsNative(points, count, clip, result);
			return ret;
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				SDLBool ret = SDLEncloseFPointsNative((SDLFPoint*)ppoints, count, clip, result);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				SDLBool ret = SDLEncloseFPointsNative(points, count, (SDLFRect*)pclip, result);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					SDLBool ret = SDLEncloseFPointsNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, result);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				SDLBool ret = SDLEncloseFPointsNative(points, count, clip, (SDLFRect*)presult);
				return ret;
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = SDLEncloseFPointsNative((SDLFPoint*)ppoints, count, clip, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = SDLEncloseFPointsNative(points, count, (SDLFRect*)pclip, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate a minimal rectangle enclosing a set of points with float<br/>/// precision.<br/>/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>/// considered.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_EncloseFPoints")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLEncloseFPoints([NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "clip")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect clip, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_FRect*")] ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					fixed (SDLFRect* presult = &result)
					{
						SDLBool ret = SDLEncloseFPointsNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, (SDLFRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IntersectFRectAndLine")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIntersectFRectAndLineNative([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2);

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* px1 = &x1)
			{
				SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* py1 = &y1)
			{
				SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, (float*)py1, x2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* px2 = &x2)
			{
				SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, y1, (float*)px2, y2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, y1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, (float*)py1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, y2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* py2 = &y2)
			{
				SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, y1, x2, (float*)py2);
				return ret;
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, y1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, (float*)py1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] float* x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* px2 = &x2)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, y1, (float*)px2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, y1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] float* y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = SDLIntersectFRectAndLineNative(rect, x1, (float*)py1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] float* x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = SDLIntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Calculate the intersection of a rectangle and line segment with float<br/>/// precision.<br/>/// This function is used to clip a line segment to a rectangle. A line segment<br/>/// contained entirely within the rectangle or that does not intersect will<br/>/// remain unchanged. A line segment that crosses the rectangle at either or<br/>/// both ends will be clipped to the boundary of the rectangle and the new<br/>/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IntersectFRectAndLine")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIntersectFRectAndLine([NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect, [NativeName(NativeNameType.Param, "X1")] [NativeName(NativeNameType.Type, "float*")] ref float x1, [NativeName(NativeNameType.Param, "Y1")] [NativeName(NativeNameType.Type, "float*")] ref float y1, [NativeName(NativeNameType.Param, "X2")] [NativeName(NativeNameType.Type, "float*")] ref float x2, [NativeName(NativeNameType.Param, "Y2")] [NativeName(NativeNameType.Type, "float*")] ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							fixed (float* py2 = &y2)
							{
								SDLBool ret = SDLIntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compose a custom blend mode for renderers.<br/>
		/// The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept<br/>
		/// the SDL_BlendMode returned by this function if the renderer supports it.<br/>
		/// A blend mode controls how the pixels from a drawing operation (source) get<br/>
		/// combined with the pixels from the render target (destination). First, the<br/>
		/// components of the source and destination pixels get multiplied with their<br/>
		/// blend factors. Then, the blend operation takes the two products and<br/>
		/// calculates the result that will get stored in the render target.<br/>
		/// Expressed in pseudocode, it would look like this:<br/>
		/// ```c<br/>
		/// dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);<br/>
		/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);<br/>
		/// ```<br/>
		/// Where the functions `colorOperation(src, dst)` and `alphaOperation(src,<br/>
		/// dst)` can return one of the following:<br/>
		/// - `src + dst`<br/>
		/// - `src - dst`<br/>
		/// - `dst - src`<br/>
		/// - `min(src, dst)`<br/>
		/// - `max(src, dst)`<br/>
		/// The red, green, and blue components are always multiplied with the first,<br/>
		/// second, and third components of the SDL_BlendFactor, respectively. The<br/>
		/// fourth component is not used.<br/>
		/// The alpha component is always multiplied with the fourth component of the<br/>
		/// SDL_BlendFactor. The other components are not used in the alpha<br/>
		/// calculation.<br/>
		/// Support for these blend modes varies for each renderer. To check if a<br/>
		/// specific SDL_BlendMode is supported, create a renderer and pass it to<br/>
		/// either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will<br/>
		/// return with an error if the blend mode is not supported.<br/>
		/// This list describes the support of custom blend modes for each renderer in<br/>
		/// SDL 2.0.6. All renderers support the four blend modes listed in the<br/>
		/// SDL_BlendMode enumeration.<br/>
		/// - **direct3d**: Supports all operations with all factors. However, some<br/>
		/// factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and<br/>
		/// `SDL_BLENDOPERATION_MAXIMUM`.<br/>
		/// - **direct3d11**: Same as Direct3D 9.<br/>
		/// - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL<br/>
		/// 2.0.6.<br/>
		/// - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. Color and alpha factors need to be the same. OpenGL ES 1<br/>
		/// implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`<br/>
		/// and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha<br/>
		/// operations being different from each other. May support color and alpha<br/>
		/// factors being different from each other.<br/>
		/// - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,<br/>
		/// `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`<br/>
		/// operations with all factors.<br/>
		/// - **psp**: No custom blend mode support.<br/>
		/// - **software**: No custom blend mode support.<br/>
		/// Some renderers do not provide an alpha component for the default render<br/>
		/// target. The `SDL_BLENDFACTOR_DST_ALPHA` and<br/>
		/// `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this<br/>
		/// case.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ComposeCustomBlendMode")]
		[return: NativeName(NativeNameType.Type, "SDL_BlendMode")]
		[LibraryImport(LibName, EntryPoint = "SDL_ComposeCustomBlendMode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBlendMode SDLComposeCustomBlendModeNative([NativeName(NativeNameType.Param, "srcColorFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor srcColorFactor, [NativeName(NativeNameType.Param, "dstColorFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor dstColorFactor, [NativeName(NativeNameType.Param, "colorOperation")] [NativeName(NativeNameType.Type, "SDL_BlendOperation")] SDLBlendOperation colorOperation, [NativeName(NativeNameType.Param, "srcAlphaFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor srcAlphaFactor, [NativeName(NativeNameType.Param, "dstAlphaFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor dstAlphaFactor, [NativeName(NativeNameType.Param, "alphaOperation")] [NativeName(NativeNameType.Type, "SDL_BlendOperation")] SDLBlendOperation alphaOperation);

		/// <summary>/// Compose a custom blend mode for renderers.<br/>/// The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept<br/>/// the SDL_BlendMode returned by this function if the renderer supports it.<br/>/// A blend mode controls how the pixels from a drawing operation (source) get<br/>/// combined with the pixels from the render target (destination). First, the<br/>/// components of the source and destination pixels get multiplied with their<br/>/// blend factors. Then, the blend operation takes the two products and<br/>/// calculates the result that will get stored in the render target.<br/>/// Expressed in pseudocode, it would look like this:<br/>/// ```c<br/>/// dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);<br/>/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);<br/>/// ```<br/>/// Where the functions `colorOperation(src, dst)` and `alphaOperation(src,<br/>/// dst)` can return one of the following:<br/>/// - `src + dst`<br/>/// - `src - dst`<br/>/// - `dst - src`<br/>/// - `min(src, dst)`<br/>/// - `max(src, dst)`<br/>/// The red, green, and blue components are always multiplied with the first,<br/>/// second, and third components of the SDL_BlendFactor, respectively. The<br/>/// fourth component is not used.<br/>/// The alpha component is always multiplied with the fourth component of the<br/>/// SDL_BlendFactor. The other components are not used in the alpha<br/>/// calculation.<br/>/// Support for these blend modes varies for each renderer. To check if a<br/>/// specific SDL_BlendMode is supported, create a renderer and pass it to<br/>/// either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will<br/>/// return with an error if the blend mode is not supported.<br/>/// This list describes the support of custom blend modes for each renderer in<br/>/// SDL 2.0.6. All renderers support the four blend modes listed in the<br/>/// SDL_BlendMode enumeration.<br/>/// - **direct3d**: Supports all operations with all factors. However, some<br/>/// factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and<br/>/// `SDL_BLENDOPERATION_MAXIMUM`.<br/>/// - **direct3d11**: Same as Direct3D 9.<br/>/// - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>/// factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL<br/>/// 2.0.6.<br/>/// - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>/// factors. Color and alpha factors need to be the same. OpenGL ES 1<br/>/// implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`<br/>/// and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha<br/>/// operations being different from each other. May support color and alpha<br/>/// factors being different from each other.<br/>/// - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,<br/>/// `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`<br/>/// operations with all factors.<br/>/// - **psp**: No custom blend mode support.<br/>/// - **software**: No custom blend mode support.<br/>/// Some renderers do not provide an alpha component for the default render<br/>/// target. The `SDL_BLENDFACTOR_DST_ALPHA` and<br/>/// `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this<br/>/// case.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ComposeCustomBlendMode")]
		[return: NativeName(NativeNameType.Type, "SDL_BlendMode")]
		public static SDLBlendMode SDLComposeCustomBlendMode([NativeName(NativeNameType.Param, "srcColorFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor srcColorFactor, [NativeName(NativeNameType.Param, "dstColorFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor dstColorFactor, [NativeName(NativeNameType.Param, "colorOperation")] [NativeName(NativeNameType.Type, "SDL_BlendOperation")] SDLBlendOperation colorOperation, [NativeName(NativeNameType.Param, "srcAlphaFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor srcAlphaFactor, [NativeName(NativeNameType.Param, "dstAlphaFactor")] [NativeName(NativeNameType.Type, "SDL_BlendFactor")] SDLBlendFactor dstAlphaFactor, [NativeName(NativeNameType.Param, "alphaOperation")] [NativeName(NativeNameType.Type, "SDL_BlendOperation")] SDLBlendOperation alphaOperation)
		{
			SDLBlendMode ret = SDLComposeCustomBlendModeNative(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface.<br/>
		/// If `depth` is 4 or 8 bits, an empty palette is allocated for the surface.<br/>
		/// If `depth` is greater than 8 bits, the pixel format is set using the<br/>
		/// [RGBA]mask parameters.<br/>
		/// The [RGBA]mask parameters are the bitmasks used to extract that color from<br/>
		/// a pixel. For instance, `Rmask` being 0xFF000000 means the red data is<br/>
		/// stored in the most significant byte. Using zeros for the RGB masks sets a<br/>
		/// default value, based on the depth. For example:<br/>
		/// ```c++<br/>
		/// SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);<br/>
		/// ```<br/>
		/// However, using zero for the Amask results in an Amask of 0.<br/>
		/// By default surfaces with an alpha mask are set up for blending as with:<br/>
		/// ```c++<br/>
		/// SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)<br/>
		/// ```<br/>
		/// You can change this by calling SDL_SetSurfaceBlendMode() and selecting a<br/>
		/// different `blendMode`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		[LibraryImport(LibName, EntryPoint = "SDL_CreateRGBSurface")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLSurface* SDLCreateRGBSurfaceNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "Rmask")] [NativeName(NativeNameType.Type, "Uint32")] uint rmask, [NativeName(NativeNameType.Param, "Gmask")] [NativeName(NativeNameType.Type, "Uint32")] uint gmask, [NativeName(NativeNameType.Param, "Bmask")] [NativeName(NativeNameType.Type, "Uint32")] uint bmask, [NativeName(NativeNameType.Param, "Amask")] [NativeName(NativeNameType.Type, "Uint32")] uint amask);

		/// <summary>/// Allocate a new RGB surface.<br/>/// If `depth` is 4 or 8 bits, an empty palette is allocated for the surface.<br/>/// If `depth` is greater than 8 bits, the pixel format is set using the<br/>/// [RGBA]mask parameters.<br/>/// The [RGBA]mask parameters are the bitmasks used to extract that color from<br/>/// a pixel. For instance, `Rmask` being 0xFF000000 means the red data is<br/>/// stored in the most significant byte. Using zeros for the RGB masks sets a<br/>/// default value, based on the depth. For example:<br/>/// ```c++<br/>/// SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);<br/>/// ```<br/>/// However, using zero for the Amask results in an Amask of 0.<br/>/// By default surfaces with an alpha mask are set up for blending as with:<br/>/// ```c++<br/>/// SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)<br/>/// ```<br/>/// You can change this by calling SDL_SetSurfaceBlendMode() and selecting a<br/>/// different `blendMode`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLCreateRGBSurface([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "Rmask")] [NativeName(NativeNameType.Type, "Uint32")] uint rmask, [NativeName(NativeNameType.Param, "Gmask")] [NativeName(NativeNameType.Type, "Uint32")] uint gmask, [NativeName(NativeNameType.Param, "Bmask")] [NativeName(NativeNameType.Type, "Uint32")] uint bmask, [NativeName(NativeNameType.Param, "Amask")] [NativeName(NativeNameType.Type, "Uint32")] uint amask)
		{
			SDLSurface* ret = SDLCreateRGBSurfaceNative(flags, width, height, depth, rmask, gmask, bmask, amask);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with a specific pixel format.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except instead<br/>
		/// of providing pixel color masks, you provide it with a predefined format<br/>
		/// from SDL_PixelFormatEnum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceWithFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		[LibraryImport(LibName, EntryPoint = "SDL_CreateRGBSurfaceWithFormat")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLSurface* SDLCreateRGBSurfaceWithFormatNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format);

		/// <summary>/// Allocate a new RGB surface with a specific pixel format.<br/>/// This function operates mostly like SDL_CreateRGBSurface(), except instead<br/>/// of providing pixel color masks, you provide it with a predefined format<br/>/// from SDL_PixelFormatEnum.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceWithFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLCreateRGBSurfaceWithFormat([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format)
		{
			SDLSurface* ret = SDLCreateRGBSurfaceWithFormatNative(flags, width, height, depth, format);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with existing pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except it does<br/>
		/// not allocate memory for the pixel data, instead the caller provides an<br/>
		/// existing buffer of data for the surface to use.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		[LibraryImport(LibName, EntryPoint = "SDL_CreateRGBSurfaceFrom")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLSurface* SDLCreateRGBSurfaceFromNative([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch, [NativeName(NativeNameType.Param, "Rmask")] [NativeName(NativeNameType.Type, "Uint32")] uint rmask, [NativeName(NativeNameType.Param, "Gmask")] [NativeName(NativeNameType.Type, "Uint32")] uint gmask, [NativeName(NativeNameType.Param, "Bmask")] [NativeName(NativeNameType.Type, "Uint32")] uint bmask, [NativeName(NativeNameType.Param, "Amask")] [NativeName(NativeNameType.Type, "Uint32")] uint amask);

		/// <summary>/// Allocate a new RGB surface with existing pixel data.<br/>/// This function operates mostly like SDL_CreateRGBSurface(), except it does<br/>/// not allocate memory for the pixel data, instead the caller provides an<br/>/// existing buffer of data for the surface to use.<br/>/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>/// you must free the surface before you free the pixel data.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLCreateRGBSurfaceFrom([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch, [NativeName(NativeNameType.Param, "Rmask")] [NativeName(NativeNameType.Type, "Uint32")] uint rmask, [NativeName(NativeNameType.Param, "Gmask")] [NativeName(NativeNameType.Type, "Uint32")] uint gmask, [NativeName(NativeNameType.Param, "Bmask")] [NativeName(NativeNameType.Type, "Uint32")] uint bmask, [NativeName(NativeNameType.Param, "Amask")] [NativeName(NativeNameType.Type, "Uint32")] uint amask)
		{
			SDLSurface* ret = SDLCreateRGBSurfaceFromNative(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with with a specific pixel format and existing<br/>
		/// pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurfaceFrom(), except<br/>
		/// instead of providing pixel color masks, you provide it with a predefined<br/>
		/// format from SDL_PixelFormatEnum.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceWithFormatFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		[LibraryImport(LibName, EntryPoint = "SDL_CreateRGBSurfaceWithFormatFrom")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLSurface* SDLCreateRGBSurfaceWithFormatFromNative([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format);

		/// <summary>/// Allocate a new RGB surface with with a specific pixel format and existing<br/>/// pixel data.<br/>/// This function operates mostly like SDL_CreateRGBSurfaceFrom(), except<br/>/// instead of providing pixel color masks, you provide it with a predefined<br/>/// format from SDL_PixelFormatEnum.<br/>/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>/// you must free the surface before you free the pixel data.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateRGBSurfaceWithFormatFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLCreateRGBSurfaceWithFormatFrom([NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "depth")] [NativeName(NativeNameType.Type, "int")] int depth, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format)
		{
			SDLSurface* ret = SDLCreateRGBSurfaceWithFormatFromNative(pixels, width, height, depth, pitch, format);
			return ret;
		}

		/// <summary>
		/// Free an RGB surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FreeSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_FreeSurface")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLFreeSurfaceNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface);

		/// <summary>/// Free an RGB surface.<br/>/// It is safe to pass NULL to this function.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FreeSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLFreeSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			SDLFreeSurfaceNative(surface);
		}

		/// <summary>/// Free an RGB surface.<br/>/// It is safe to pass NULL to this function.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_FreeSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLFreeSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLFreeSurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetSurfacePalette")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetSurfacePalette")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetSurfacePaletteNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "palette")] [NativeName(NativeNameType.Type, "SDL_Palette*")] SDLPalette* palette);

		/// <summary>/// Set the palette used by a surface.<br/>/// A single palette can be shared with many surfaces.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfacePalette")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfacePalette([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "palette")] [NativeName(NativeNameType.Type, "SDL_Palette*")] SDLPalette* palette)
		{
			int ret = SDLSetSurfacePaletteNative(surface, palette);
			return ret;
		}

		/// <summary>/// Set the palette used by a surface.<br/>/// A single palette can be shared with many surfaces.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfacePalette")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfacePalette([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "palette")] [NativeName(NativeNameType.Type, "SDL_Palette*")] SDLPalette* palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetSurfacePaletteNative((SDLSurface*)psurface, palette);
				return ret;
			}
		}

		/// <summary>/// Set the palette used by a surface.<br/>/// A single palette can be shared with many surfaces.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfacePalette")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfacePalette([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "palette")] [NativeName(NativeNameType.Type, "SDL_Palette*")] ref SDLPalette palette)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				int ret = SDLSetSurfacePaletteNative(surface, (SDLPalette*)ppalette);
				return ret;
			}
		}

		/// <summary>/// Set the palette used by a surface.<br/>/// A single palette can be shared with many surfaces.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfacePalette")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfacePalette([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "palette")] [NativeName(NativeNameType.Type, "SDL_Palette*")] ref SDLPalette palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					int ret = SDLSetSurfacePaletteNative((SDLSurface*)psurface, (SDLPalette*)ppalette);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_LockSurface")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLLockSurfaceNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface);

		/// <summary>/// Set up a surface for directly accessing the pixels.<br/>/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>/// and read from `surface->pixels`, using the pixel format stored in<br/>/// `surface->format`. Once you are done accessing the surface, you should use<br/>/// SDL_UnlockSurface() to release it.<br/>/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>/// 0, then you can read and write to the surface at any time, and the pixel<br/>/// format of the surface will not change.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LockSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLockSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			int ret = SDLLockSurfaceNative(surface);
			return ret;
		}

		/// <summary>/// Set up a surface for directly accessing the pixels.<br/>/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>/// and read from `surface->pixels`, using the pixel format stored in<br/>/// `surface->format`. Once you are done accessing the surface, you should use<br/>/// SDL_UnlockSurface() to release it.<br/>/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>/// 0, then you can read and write to the surface at any time, and the pixel<br/>/// format of the surface will not change.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LockSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLLockSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLLockSurfaceNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnlockSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_UnlockSurface")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLUnlockSurfaceNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface);

		/// <summary>/// Release a surface after directly accessing the pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnlockSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnlockSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			SDLUnlockSurfaceNative(surface);
		}

		/// <summary>/// Release a surface after directly accessing the pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UnlockSurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLUnlockSurface([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLUnlockSurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>
		/// result in a memory leak.<br/>
		/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>
		/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>
		/// from a file, convert it to an SDL_Surface and then close the file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadBMP_RW")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP_RW")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLSurface* SDLLoadBMPRWNative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* src, [NativeName(NativeNameType.Param, "freesrc")] [NativeName(NativeNameType.Type, "int")] int freesrc);

		/// <summary>/// Load a BMP image from a seekable SDL data stream.<br/>/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>/// result in a memory leak.<br/>/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>/// from a file, convert it to an SDL_Surface and then close the file.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LoadBMP_RW")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLLoadBMPRW([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* src, [NativeName(NativeNameType.Param, "freesrc")] [NativeName(NativeNameType.Type, "int")] int freesrc)
		{
			SDLSurface* ret = SDLLoadBMPRWNative(src, freesrc);
			return ret;
		}

		/// <summary>/// Load a BMP image from a seekable SDL data stream.<br/>/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>/// result in a memory leak.<br/>/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>/// from a file, convert it to an SDL_Surface and then close the file.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_LoadBMP_RW")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLLoadBMPRW([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_RWops*")] ref SDLRWops src, [NativeName(NativeNameType.Param, "freesrc")] [NativeName(NativeNameType.Type, "int")] int freesrc)
		{
			fixed (SDLRWops* psrc = &src)
			{
				SDLSurface* ret = SDLLoadBMPRWNative((SDLRWops*)psrc, freesrc);
				return ret;
			}
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SaveBMP_RW")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP_RW")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSaveBMPRWNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* dst, [NativeName(NativeNameType.Param, "freedst")] [NativeName(NativeNameType.Type, "int")] int freedst);

		/// <summary>/// Save a surface to a seekable SDL data stream in BMP format.<br/>/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>/// not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SaveBMP_RW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSaveBMPRW([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* dst, [NativeName(NativeNameType.Param, "freedst")] [NativeName(NativeNameType.Type, "int")] int freedst)
		{
			int ret = SDLSaveBMPRWNative(surface, dst, freedst);
			return ret;
		}

		/// <summary>/// Save a surface to a seekable SDL data stream in BMP format.<br/>/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>/// not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SaveBMP_RW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSaveBMPRW([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* dst, [NativeName(NativeNameType.Param, "freedst")] [NativeName(NativeNameType.Type, "int")] int freedst)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSaveBMPRWNative((SDLSurface*)psurface, dst, freedst);
				return ret;
			}
		}

		/// <summary>/// Save a surface to a seekable SDL data stream in BMP format.<br/>/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>/// not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SaveBMP_RW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSaveBMPRW([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_RWops*")] ref SDLRWops dst, [NativeName(NativeNameType.Param, "freedst")] [NativeName(NativeNameType.Type, "int")] int freedst)
		{
			fixed (SDLRWops* pdst = &dst)
			{
				int ret = SDLSaveBMPRWNative(surface, (SDLRWops*)pdst, freedst);
				return ret;
			}
		}

		/// <summary>/// Save a surface to a seekable SDL data stream in BMP format.<br/>/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>/// not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SaveBMP_RW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSaveBMPRW([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_RWops*")] ref SDLRWops dst, [NativeName(NativeNameType.Param, "freedst")] [NativeName(NativeNameType.Type, "int")] int freedst)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRWops* pdst = &dst)
				{
					int ret = SDLSaveBMPRWNative((SDLSurface*)psurface, (SDLRWops*)pdst, freedst);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the RLE acceleration hint for a surface.<br/>
		/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>
		/// the surface must be locked before directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceRLE")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetSurfaceRLENative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag);

		/// <summary>/// Set the RLE acceleration hint for a surface.<br/>/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>/// the surface must be locked before directly accessing the pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceRLE([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag)
		{
			int ret = SDLSetSurfaceRLENative(surface, flag);
			return ret;
		}

		/// <summary>/// Set the RLE acceleration hint for a surface.<br/>/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>/// the surface must be locked before directly accessing the pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceRLE([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetSurfaceRLENative((SDLSurface*)psurface, flag);
				return ret;
			}
		}

		/// <summary>
		/// Returns whether the surface is RLE enabled<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_HasSurfaceRLE")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLHasSurfaceRLENative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface);

		/// <summary>/// Returns whether the surface is RLE enabled<br/>/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasSurfaceRLE([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			SDLBool ret = SDLHasSurfaceRLENative(surface);
			return ret;
		}

		/// <summary>/// Returns whether the surface is RLE enabled<br/>/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasSurfaceRLE")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasSurfaceRLE([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = SDLHasSurfaceRLENative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Set the color key (transparent pixel) in a surface.<br/>
		/// The color key defines a pixel value that will be treated as transparent in<br/>
		/// a blit. For example, one can use this to specify that cyan pixels should be<br/>
		/// considered transparent, and therefore not rendered.<br/>
		/// It is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// RLE acceleration can substantially speed up blitting of images with large<br/>
		/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetColorKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetColorKeyNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32")] uint key);

		/// <summary>/// Set the color key (transparent pixel) in a surface.<br/>/// The color key defines a pixel value that will be treated as transparent in<br/>/// a blit. For example, one can use this to specify that cyan pixels should be<br/>/// considered transparent, and therefore not rendered.<br/>/// It is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// RLE acceleration can substantially speed up blitting of images with large<br/>/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32")] uint key)
		{
			int ret = SDLSetColorKeyNative(surface, flag, key);
			return ret;
		}

		/// <summary>/// Set the color key (transparent pixel) in a surface.<br/>/// The color key defines a pixel value that will be treated as transparent in<br/>/// a blit. For example, one can use this to specify that cyan pixels should be<br/>/// considered transparent, and therefore not rendered.<br/>/// It is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// RLE acceleration can substantially speed up blitting of images with large<br/>/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32")] uint key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetColorKeyNative((SDLSurface*)psurface, flag, key);
				return ret;
			}
		}

		/// <summary>
		/// Returns whether the surface has a color key<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasColorKey")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_HasColorKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLHasColorKeyNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface);

		/// <summary>/// Returns whether the surface has a color key<br/>/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasColorKey")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface)
		{
			SDLBool ret = SDLHasColorKeyNative(surface);
			return ret;
		}

		/// <summary>/// Returns whether the surface has a color key<br/>/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasColorKey")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = SDLHasColorKeyNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetColorKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGetColorKeyNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32*")] uint* key);

		/// <summary>/// Get the color key (transparent pixel) for a surface.<br/>/// The color key is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// If the surface doesn't have color key enabled this function returns -1.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32*")] uint* key)
		{
			int ret = SDLGetColorKeyNative(surface, key);
			return ret;
		}

		/// <summary>/// Get the color key (transparent pixel) for a surface.<br/>/// The color key is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// If the surface doesn't have color key enabled this function returns -1.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32*")] uint* key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLGetColorKeyNative((SDLSurface*)psurface, key);
				return ret;
			}
		}

		/// <summary>/// Get the color key (transparent pixel) for a surface.<br/>/// The color key is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// If the surface doesn't have color key enabled this function returns -1.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32*")] ref uint key)
		{
			fixed (uint* pkey = &key)
			{
				int ret = SDLGetColorKeyNative(surface, (uint*)pkey);
				return ret;
			}
		}

		/// <summary>/// Get the color key (transparent pixel) for a surface.<br/>/// The color key is a pixel of the format used by the surface, as generated by<br/>/// SDL_MapRGB().<br/>/// If the surface doesn't have color key enabled this function returns -1.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetColorKey")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetColorKey([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "Uint32*")] ref uint key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (uint* pkey = &key)
				{
					int ret = SDLGetColorKeyNative((SDLSurface*)psurface, (uint*)pkey);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set an additional color value multiplied into blit operations.<br/>
		/// When this surface is blitted, during the blit operation each source color<br/>
		/// channel is modulated by the appropriate color value according to the<br/>
		/// following formula:<br/>
		/// `srcC = srcC * (color / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorMod")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetSurfaceColorModNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b);

		/// <summary>/// Set an additional color value multiplied into blit operations.<br/>/// When this surface is blitted, during the blit operation each source color<br/>/// channel is modulated by the appropriate color value according to the<br/>/// following formula:<br/>/// `srcC = srcC * (color / 255)`<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b)
		{
			int ret = SDLSetSurfaceColorModNative(surface, r, g, b);
			return ret;
		}

		/// <summary>/// Set an additional color value multiplied into blit operations.<br/>/// When this surface is blitted, during the blit operation each source color<br/>/// channel is modulated by the appropriate color value according to the<br/>/// following formula:<br/>/// `srcC = srcC * (color / 255)`<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8")] byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8")] byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8")] byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLSetSurfaceColorModNative((SDLSurface*)psurface, r, g, b);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorMod")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGetSurfaceColorModNative([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b);

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			int ret = SDLGetSurfaceColorModNative(surface, r, g, b);
			return ret;
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, r, g, b);
				return ret;
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (byte* pr = &r)
			{
				int ret = SDLGetSurfaceColorModNative(surface, (byte*)pr, g, b);
				return ret;
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, g, b);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (byte* pg = &g)
			{
				int ret = SDLGetSurfaceColorModNative(surface, r, (byte*)pg, b);
				return ret;
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pg = &g)
				{
					int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, r, (byte*)pg, b);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					int ret = SDLGetSurfaceColorModNative(surface, (byte*)pr, (byte*)pg, b);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, (byte*)pg, b);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pb = &b)
			{
				int ret = SDLGetSurfaceColorModNative(surface, r, g, (byte*)pb);
				return ret;
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] byte* r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetSurfaceColorModNative((SDLSurface*)psurface, r, g, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>/// Get the additional color value multiplied into blit operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetSurfaceColorMod")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetSurfaceColorMod([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] byte* g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					int ret = SDLGetSurfaceColorModNative(surface, (byte*)pr, g, (byte*)pb);
					return ret;
				}
			}
		}
	}
}
