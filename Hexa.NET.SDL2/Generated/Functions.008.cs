// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>/// Get the color used for drawing operations (Rect, Line and Clear).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawColor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawColor([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "Uint8*")] ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							int ret = SDLGetRenderDrawColorNative(renderer, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Set the blend mode used for drawing operations (Fill and Line).<br/>
		/// If the blend mode is not supported, the closest supported mode is chosen.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetRenderDrawBlendMode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetRenderDrawBlendModeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode);

		/// <summary>/// Set the blend mode used for drawing operations (Fill and Line).<br/>/// If the blend mode is not supported, the closest supported mode is chosen.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode")] SDLBlendMode blendMode)
		{
			int ret = SDLSetRenderDrawBlendModeNative(renderer, blendMode);
			return ret;
		}

		/// <summary>
		/// Get the blend mode used for drawing operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetRenderDrawBlendMode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGetRenderDrawBlendModeNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode);

		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] SDLBlendMode* blendMode)
		{
			int ret = SDLGetRenderDrawBlendModeNative(renderer, blendMode);
			return ret;
		}

		/// <summary>/// Get the blend mode used for drawing operations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRenderDrawBlendMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRenderDrawBlendMode([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "blendMode")] [NativeName(NativeNameType.Type, "SDL_BlendMode*")] ref SDLBlendMode blendMode)
		{
			fixed (SDLBlendMode* pblendMode = &blendMode)
			{
				int ret = SDLGetRenderDrawBlendModeNative(renderer, (SDLBlendMode*)pblendMode);
				return ret;
			}
		}

		/// <summary>
		/// Clear the current rendering target with the drawing color.<br/>
		/// This function clears the entire rendering target, ignoring the viewport and<br/>
		/// the clip rectangle.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderClear")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderClear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderClearNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Clear the current rendering target with the drawing color.<br/>/// This function clears the entire rendering target, ignoring the viewport and<br/>/// the clip rectangle.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderClear")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderClear([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			int ret = SDLRenderClearNative(renderer);
			return ret;
		}

		/// <summary>
		/// Draw a point on the current rendering target.<br/>
		/// SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,<br/>
		/// use SDL_RenderDrawPoints() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawPoint")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawPointNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y);

		/// <summary>/// Draw a point on the current rendering target.<br/>/// SDL_RenderDrawPoint() draws a single point. If you want to draw multiple,<br/>/// use SDL_RenderDrawPoints() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoint([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			int ret = SDLRenderDrawPointNative(renderer, x, y);
			return ret;
		}

		/// <summary>
		/// Draw multiple points on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawPoints")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawPointsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawPointsNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw multiple points on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPoints")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPoints([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawPointsNative(renderer, (SDLPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>
		/// Draw a line on the current rendering target.<br/>
		/// SDL_RenderDrawLine() draws the line to include both end points. If you want<br/>
		/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLine")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawLine")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawLineNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "int")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "int")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "int")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "int")] int y2);

		/// <summary>/// Draw a line on the current rendering target.<br/>/// SDL_RenderDrawLine() draws the line to include both end points. If you want<br/>/// to draw multiple, connecting lines use SDL_RenderDrawLines() instead.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLine")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLine([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "int")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "int")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "int")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "int")] int y2)
		{
			int ret = SDLRenderDrawLineNative(renderer, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>
		/// Draw a series of connected lines on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawLines")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawLinesNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawLinesNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLines([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawLinesNative(renderer, (SDLPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>
		/// Draw a rectangle on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect);

		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderDrawRectNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Draw a rectangle on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderDrawRectNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Draw some number of rectangles on the current rendering target.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawRects")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawRectsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawRectsNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLRenderDrawRectsNative(renderer, (SDLRect*)prects, count);
				return ret;
			}
		}

		/// <summary>
		/// Fill a rectangle on the current rendering target with the drawing color.<br/>
		/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>
		/// color's alpha value is ignored unless blending is enabled with the<br/>
		/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderFillRectNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect);

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLRenderFillRectNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color.<br/>/// The current drawing color is set by SDL_SetRenderDrawColor(), and the<br/>/// color's alpha value is ignored unless blending is enabled with the<br/>/// appropriate call to SDL_SetRenderDrawBlendMode().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRect([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderFillRectNative(renderer, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Fill some number of rectangles on the current rendering target with the<br/>
		/// drawing color.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRects")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderFillRectsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderFillRectsNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRects([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLRenderFillRectsNative(renderer, (SDLRect*)prects, count);
				return ret;
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering target.<br/>
		/// The texture is blended with the destination based on its blend mode set<br/>
		/// with SDL_SetTextureBlendMode().<br/>
		/// The texture color is affected based on its color modulation set by<br/>
		/// SDL_SetTextureColorMod().<br/>
		/// The texture alpha is affected based on its alpha modulation set by<br/>
		/// SDL_SetTextureAlphaMod().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderCopy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderCopyNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect);

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			int ret = SDLRenderCopyNative(renderer, texture, srcrect, dstrect);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyNative(renderer, texture, (SDLRect*)psrcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyNative(renderer, texture, srcrect, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopy")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopy([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering, with optional<br/>
		/// rotation and flipping.<br/>
		/// Copy a portion of the texture to the current rendering target, optionally<br/>
		/// rotating it by angle around the given center and also flipping it<br/>
		/// top-bottom and/or left-right.<br/>
		/// The texture is blended with the destination based on its blend mode set<br/>
		/// with SDL_SetTextureBlendMode().<br/>
		/// The texture color is affected based on its color modulation set by<br/>
		/// SDL_SetTextureColorMod().<br/>
		/// The texture alpha is affected based on its alpha modulation set by<br/>
		/// SDL_SetTextureAlphaMod().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderCopyEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderCopyExNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip);

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			int ret = SDLRenderCopyExNative(renderer, texture, srcrect, dstrect, angle, center, flip);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLPoint* pcenter = &center)
			{
				int ret = SDLRenderCopyExNative(renderer, texture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				fixed (SDLPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExNative(renderer, texture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					fixed (SDLPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExNative(renderer, texture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering, with optional<br/>/// rotation and flipping.<br/>/// Copy a portion of the texture to the current rendering target, optionally<br/>/// rotating it by angle around the given center and also flipping it<br/>/// top-bottom and/or left-right.<br/>/// The texture is blended with the destination based on its blend mode set<br/>/// with SDL_SetTextureBlendMode().<br/>/// The texture color is affected based on its color modulation set by<br/>/// SDL_SetTextureColorMod().<br/>/// The texture alpha is affected based on its alpha modulation set by<br/>/// SDL_SetTextureAlphaMod().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyEx([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_Point*")] ref SDLPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						fixed (SDLPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLRect*)pdstrect, angle, (SDLPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Draw a point on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawPointF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawPointFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y);

		/// <summary>/// Draw a point on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			int ret = SDLRenderDrawPointFNative(renderer, x, y);
			return ret;
		}

		/// <summary>
		/// Draw multiple points on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawPointsF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawPointsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawPointsFNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw multiple points on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawPointsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawPointsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawPointsFNative(renderer, (SDLFPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>
		/// Draw a line on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLineF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawLineF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawLineFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2);

		/// <summary>/// Draw a line on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLineF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLineF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			int ret = SDLRenderDrawLineFNative(renderer, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>
		/// Draw a series of connected lines on the current rendering target at<br/>
		/// subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawLinesF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawLinesFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawLinesFNative(renderer, points, count);
			return ret;
		}

		/// <summary>/// Draw a series of connected lines on the current rendering target at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawLinesF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawLinesF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "points")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint points, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				int ret = SDLRenderDrawLinesFNative(renderer, (SDLFPoint*)ppoints, count);
				return ret;
			}
		}

		/// <summary>
		/// Draw a rectangle on the current rendering target at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawRectF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawRectFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect);

		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			int ret = SDLRenderDrawRectFNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Draw a rectangle on the current rendering target at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLFRect* prect = &rect)
			{
				int ret = SDLRenderDrawRectFNative(renderer, (SDLFRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Draw some number of rectangles on the current rendering target at subpixel<br/>
		/// precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderDrawRectsF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderDrawRectsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderDrawRectsFNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Draw some number of rectangles on the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderDrawRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderDrawRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFRect* prects = &rects)
			{
				int ret = SDLRenderDrawRectsFNative(renderer, (SDLFRect*)prects, count);
				return ret;
			}
		}

		/// <summary>
		/// Fill a rectangle on the current rendering target with the drawing color at<br/>
		/// subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRectF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderFillRectFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect);

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rect)
		{
			int ret = SDLRenderFillRectFNative(renderer, rect);
			return ret;
		}

		/// <summary>/// Fill a rectangle on the current rendering target with the drawing color at<br/>/// subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rect)
		{
			fixed (SDLFRect* prect = &rect)
			{
				int ret = SDLRenderFillRectFNative(renderer, (SDLFRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Fill some number of rectangles on the current rendering target with the<br/>
		/// drawing color at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRectsF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderFillRectsFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count);

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SDLRenderFillRectsFNative(renderer, rects, count);
			return ret;
		}

		/// <summary>/// Fill some number of rectangles on the current rendering target with the<br/>/// drawing color at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFillRectsF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFillRectsF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect rects, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLFRect* prects = &rects)
			{
				int ret = SDLRenderFillRectsFNative(renderer, (SDLFRect*)prects, count);
				return ret;
			}
		}

		/// <summary>
		/// Copy a portion of the texture to the current rendering target at subpixel<br/>
		/// precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderCopyF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderCopyFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect);

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			int ret = SDLRenderCopyFNative(renderer, texture, srcrect, dstrect);
			return ret;
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyFNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyFNative(renderer, texture, (SDLRect*)psrcrect, dstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect)
		{
			fixed (SDLFRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyFNative(renderer, texture, srcrect, (SDLFRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyFNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLFRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyFNative(renderer, texture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the texture to the current rendering target at subpixel<br/>/// precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLFRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Copy a portion of the source texture to the current rendering target, with<br/>
		/// rotation and flipping, at subpixel precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderCopyExF")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderCopyExFNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip);

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			int ret = SDLRenderCopyExFNative(renderer, texture, srcrect, dstrect, angle, center, flip);
			return ret;
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SDLRenderCopyExFNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLFRect* pdstrect = &dstrect)
			{
				int ret = SDLRenderCopyExFNative(renderer, texture, srcrect, (SDLFRect*)pdstrect, angle, center, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLFRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					int ret = SDLRenderCopyExFNative(renderer, texture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect, angle, center, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] SDLFPoint* center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLFRect* pdstrect = &dstrect)
					{
						int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect, angle, center, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLFPoint* pcenter = &center)
			{
				int ret = SDLRenderCopyExFNative(renderer, texture, srcrect, dstrect, angle, (SDLFPoint*)pcenter, flip);
				return ret;
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLFPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, srcrect, dstrect, angle, (SDLFPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLFPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExFNative(renderer, texture, (SDLRect*)psrcrect, dstrect, angle, (SDLFPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] SDLFRect* dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLFPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, dstrect, angle, (SDLFPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLFRect* pdstrect = &dstrect)
			{
				fixed (SDLFPoint* pcenter = &center)
				{
					int ret = SDLRenderCopyExFNative(renderer, texture, srcrect, (SDLFRect*)pdstrect, angle, (SDLFPoint*)pcenter, flip);
					return ret;
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					fixed (SDLFPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, srcrect, (SDLFRect*)pdstrect, angle, (SDLFPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLFRect* pdstrect = &dstrect)
				{
					fixed (SDLFPoint* pcenter = &center)
					{
						int ret = SDLRenderCopyExFNative(renderer, texture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect, angle, (SDLFPoint*)pcenter, flip);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Copy a portion of the source texture to the current rendering target, with<br/>/// rotation and flipping, at subpixel precision.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderCopyExF")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderCopyExF([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect srcrect, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "const SDL_FRect*")] ref SDLFRect dstrect, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "const double")] double angle, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const SDL_FPoint*")] ref SDLFPoint center, [NativeName(NativeNameType.Param, "flip")] [NativeName(NativeNameType.Type, "const SDL_RendererFlip")] SDLRendererFlip flip)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLFRect* pdstrect = &dstrect)
					{
						fixed (SDLFPoint* pcenter = &center)
						{
							int ret = SDLRenderCopyExFNative(renderer, (SDLTexture*)ptexture, (SDLRect*)psrcrect, (SDLFRect*)pdstrect, angle, (SDLFPoint*)pcenter, flip);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Render a list of triangles, optionally using a texture and indices into the<br/>
		/// vertex array Color and alpha modulation is done per vertex<br/>
		/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGeometry")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderGeometryNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] SDLVertex* vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] int* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices);

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] SDLVertex* vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] int* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			int ret = SDLRenderGeometryNative(renderer, texture, vertices, numVertices, indices, numIndices);
			return ret;
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] SDLVertex* vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] int* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderGeometryNative(renderer, (SDLTexture*)ptexture, vertices, numVertices, indices, numIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] ref SDLVertex vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] int* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLVertex* pvertices = &vertices)
			{
				int ret = SDLRenderGeometryNative(renderer, texture, (SDLVertex*)pvertices, numVertices, indices, numIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] ref SDLVertex vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] int* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLVertex* pvertices = &vertices)
				{
					int ret = SDLRenderGeometryNative(renderer, (SDLTexture*)ptexture, (SDLVertex*)pvertices, numVertices, indices, numIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] SDLVertex* vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] ref int indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (int* pindices = &indices)
			{
				int ret = SDLRenderGeometryNative(renderer, texture, vertices, numVertices, (int*)pindices, numIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] SDLVertex* vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] ref int indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (int* pindices = &indices)
				{
					int ret = SDLRenderGeometryNative(renderer, (SDLTexture*)ptexture, vertices, numVertices, (int*)pindices, numIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] ref SDLVertex vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] ref int indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLVertex* pvertices = &vertices)
			{
				fixed (int* pindices = &indices)
				{
					int ret = SDLRenderGeometryNative(renderer, texture, (SDLVertex*)pvertices, numVertices, (int*)pindices, numIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex array Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometry")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometry([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "vertices")] [NativeName(NativeNameType.Type, "const SDL_Vertex*")] ref SDLVertex vertices, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const int*")] ref int indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLVertex* pvertices = &vertices)
				{
					fixed (int* pindices = &indices)
					{
						int ret = SDLRenderGeometryNative(renderer, (SDLTexture*)ptexture, (SDLVertex*)pvertices, numVertices, (int*)pindices, numIndices);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Render a list of triangles, optionally using a texture and indices into the<br/>
		/// vertex arrays Color and alpha modulation is done per vertex<br/>
		/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGeometryRaw")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderGeometryRawNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices);

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			int ret = SDLRenderGeometryRawNative(renderer, texture, xy, xyStride, color, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
			return ret;
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, xy, xyStride, color, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (float* pxy = &xy)
			{
				int ret = SDLRenderGeometryRawNative(renderer, texture, (float*)pxy, xyStride, color, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (float* pxy = &xy)
				{
					int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, (float*)pxy, xyStride, color, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLColor* pcolor = &color)
			{
				int ret = SDLRenderGeometryRawNative(renderer, texture, xy, xyStride, (SDLColor*)pcolor, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLColor* pcolor = &color)
				{
					int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, xy, xyStride, (SDLColor*)pcolor, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (float* pxy = &xy)
			{
				fixed (SDLColor* pcolor = &color)
				{
					int ret = SDLRenderGeometryRawNative(renderer, texture, (float*)pxy, xyStride, (SDLColor*)pcolor, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] float* uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (float* pxy = &xy)
				{
					fixed (SDLColor* pcolor = &color)
					{
						int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, (float*)pxy, xyStride, (SDLColor*)pcolor, colorStride, uv, uvStride, numVertices, indices, numIndices, sizeIndices);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (float* puv = &uv)
			{
				int ret = SDLRenderGeometryRawNative(renderer, texture, xy, xyStride, color, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
				return ret;
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (float* puv = &uv)
				{
					int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, xy, xyStride, color, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (float* pxy = &xy)
			{
				fixed (float* puv = &uv)
				{
					int ret = SDLRenderGeometryRawNative(renderer, texture, (float*)pxy, xyStride, color, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] SDLColor* color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (float* pxy = &xy)
				{
					fixed (float* puv = &uv)
					{
						int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, (float*)pxy, xyStride, color, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLColor* pcolor = &color)
			{
				fixed (float* puv = &uv)
				{
					int ret = SDLRenderGeometryRawNative(renderer, texture, xy, xyStride, (SDLColor*)pcolor, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
					return ret;
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] float* xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (SDLColor* pcolor = &color)
				{
					fixed (float* puv = &uv)
					{
						int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, xy, xyStride, (SDLColor*)pcolor, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (float* pxy = &xy)
			{
				fixed (SDLColor* pcolor = &color)
				{
					fixed (float* puv = &uv)
					{
						int ret = SDLRenderGeometryRawNative(renderer, texture, (float*)pxy, xyStride, (SDLColor*)pcolor, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Render a list of triangles, optionally using a texture and indices into the<br/>/// vertex arrays Color and alpha modulation is done per vertex<br/>/// (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGeometryRaw")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderGeometryRaw([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] ref SDLTexture texture, [NativeName(NativeNameType.Param, "xy")] [NativeName(NativeNameType.Type, "const float*")] ref float xy, [NativeName(NativeNameType.Param, "xy_stride")] [NativeName(NativeNameType.Type, "int")] int xyStride, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "const SDL_Color*")] ref SDLColor color, [NativeName(NativeNameType.Param, "color_stride")] [NativeName(NativeNameType.Type, "int")] int colorStride, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const float*")] ref float uv, [NativeName(NativeNameType.Param, "uv_stride")] [NativeName(NativeNameType.Type, "int")] int uvStride, [NativeName(NativeNameType.Param, "num_vertices")] [NativeName(NativeNameType.Type, "int")] int numVertices, [NativeName(NativeNameType.Param, "indices")] [NativeName(NativeNameType.Type, "const void*")] void* indices, [NativeName(NativeNameType.Param, "num_indices")] [NativeName(NativeNameType.Type, "int")] int numIndices, [NativeName(NativeNameType.Param, "size_indices")] [NativeName(NativeNameType.Type, "int")] int sizeIndices)
		{
			fixed (SDLTexture* ptexture = &texture)
			{
				fixed (float* pxy = &xy)
				{
					fixed (SDLColor* pcolor = &color)
					{
						fixed (float* puv = &uv)
						{
							int ret = SDLRenderGeometryRawNative(renderer, (SDLTexture*)ptexture, (float*)pxy, xyStride, (SDLColor*)pcolor, colorStride, (float*)puv, uvStride, numVertices, indices, numIndices, sizeIndices);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Read pixels from the current rendering target to an array of pixels.<br/>
		/// **WARNING**: This is a very slow operation, and should not be used<br/>
		/// frequently. If you're using this on the main rendering target, it should be<br/>
		/// called after rendering and before SDL_RenderPresent().<br/>
		/// `pitch` specifies the number of bytes between rows in the destination<br/>
		/// `pixels` data. This allows you to write to a subrectangle or have padded<br/>
		/// rows in the destination. Generally, `pitch` should equal the number of<br/>
		/// pixels per row in the `pixels` data times the number of bytes per pixel,<br/>
		/// but it might contain additional padding (for example, 24bit RGB Windows<br/>
		/// Bitmap data pads all rows to multiples of 4 bytes).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderReadPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderReadPixels")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderReadPixelsNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch);

		/// <summary>/// Read pixels from the current rendering target to an array of pixels.<br/>/// **WARNING**: This is a very slow operation, and should not be used<br/>/// frequently. If you're using this on the main rendering target, it should be<br/>/// called after rendering and before SDL_RenderPresent().<br/>/// `pitch` specifies the number of bytes between rows in the destination<br/>/// `pixels` data. This allows you to write to a subrectangle or have padded<br/>/// rows in the destination. Generally, `pitch` should equal the number of<br/>/// pixels per row in the `pixels` data times the number of bytes per pixel,<br/>/// but it might contain additional padding (for example, 24bit RGB Windows<br/>/// Bitmap data pads all rows to multiples of 4 bytes).<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderReadPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderReadPixels([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch)
		{
			int ret = SDLRenderReadPixelsNative(renderer, rect, format, pixels, pitch);
			return ret;
		}

		/// <summary>/// Read pixels from the current rendering target to an array of pixels.<br/>/// **WARNING**: This is a very slow operation, and should not be used<br/>/// frequently. If you're using this on the main rendering target, it should be<br/>/// called after rendering and before SDL_RenderPresent().<br/>/// `pitch` specifies the number of bytes between rows in the destination<br/>/// `pixels` data. This allows you to write to a subrectangle or have padded<br/>/// rows in the destination. Generally, `pitch` should equal the number of<br/>/// pixels per row in the `pixels` data times the number of bytes per pixel,<br/>/// but it might contain additional padding (for example, 24bit RGB Windows<br/>/// Bitmap data pads all rows to multiples of 4 bytes).<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderReadPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderReadPixels([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "Uint32")] uint format, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "void*")] void* pixels, [NativeName(NativeNameType.Param, "pitch")] [NativeName(NativeNameType.Type, "int")] int pitch)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLRenderReadPixelsNative(renderer, (SDLRect*)prect, format, pixels, pitch);
				return ret;
			}
		}

		/// <summary>
		/// Update the screen with any rendering performed since the previous call.<br/>
		/// SDL's rendering functions operate on a backbuffer; that is, calling a<br/>
		/// rendering function such as SDL_RenderDrawLine() does not directly put a<br/>
		/// line on the screen, but rather updates the backbuffer. As such, you compose<br/>
		/// your entire scene and *present* the composed backbuffer to the screen as a<br/>
		/// complete picture.<br/>
		/// Therefore, when using SDL's rendering API, one does all drawing intended<br/>
		/// for the frame, and then calls this function once per frame to present the<br/>
		/// final drawing to the user.<br/>
		/// The backbuffer should be considered invalidated after each present; do not<br/>
		/// assume that previous contents will exist between frames. You are strongly<br/>
		/// encouraged to call SDL_RenderClear() to initialize the backbuffer before<br/>
		/// starting each new frame's drawing, even if you plan to overwrite every<br/>
		/// pixel.<br/>
		/// <br/>
		/// <br/>
		/// You may only call this function on the main thread. If this<br/>
		/// happens to work on a background thread on any given platform<br/>
		/// or backend, it's purely by luck and you should not rely on it<br/>
		/// to work next time.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderPresent")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderPresent")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLRenderPresentNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Update the screen with any rendering performed since the previous call.<br/>/// SDL's rendering functions operate on a backbuffer; that is, calling a<br/>/// rendering function such as SDL_RenderDrawLine() does not directly put a<br/>/// line on the screen, but rather updates the backbuffer. As such, you compose<br/>/// your entire scene and *present* the composed backbuffer to the screen as a<br/>/// complete picture.<br/>/// Therefore, when using SDL's rendering API, one does all drawing intended<br/>/// for the frame, and then calls this function once per frame to present the<br/>/// final drawing to the user.<br/>/// The backbuffer should be considered invalidated after each present; do not<br/>/// assume that previous contents will exist between frames. You are strongly<br/>/// encouraged to call SDL_RenderClear() to initialize the backbuffer before<br/>/// starting each new frame's drawing, even if you plan to overwrite every<br/>/// pixel.<br/>/// <br/>/// <br/>/// You may only call this function on the main thread. If this<br/>/// happens to work on a background thread on any given platform<br/>/// or backend, it's purely by luck and you should not rely on it<br/>/// to work next time.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderPresent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRenderPresent([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLRenderPresentNative(renderer);
		}

		/// <summary>
		/// Destroy the specified texture.<br/>
		/// Passing NULL or an otherwise invalid texture will set the SDL error message<br/>
		/// to "Invalid texture".<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_DestroyTexture")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLDestroyTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture);

		/// <summary>/// Destroy the specified texture.<br/>/// Passing NULL or an otherwise invalid texture will set the SDL error message<br/>/// to "Invalid texture".<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DestroyTexture")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLDestroyTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture)
		{
			SDLDestroyTextureNative(texture);
		}

		/// <summary>
		/// Destroy the rendering context for a window and free associated textures.<br/>
		/// If `renderer` is NULL, this function will return immediately after setting<br/>
		/// the SDL error message to "Invalid renderer". See SDL_GetError().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyRenderer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_DestroyRenderer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLDestroyRendererNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Destroy the rendering context for a window and free associated textures.<br/>/// If `renderer` is NULL, this function will return immediately after setting<br/>/// the SDL error message to "Invalid renderer". See SDL_GetError().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DestroyRenderer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLDestroyRenderer([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLDestroyRendererNative(renderer);
		}

		/// <summary>
		/// Force the rendering context to flush any pending commands to the underlying<br/>
		/// rendering API.<br/>
		/// You do not need to (and in fact, shouldn't) call this function unless you<br/>
		/// are planning to call into OpenGL/Direct3D/Metal/whatever directly in<br/>
		/// addition to using an SDL_Renderer.<br/>
		/// This is for a very-specific case: if you are using SDL's render API, you<br/>
		/// asked for a specific renderer backend (OpenGL, Direct3D, etc), you set<br/>
		/// SDL_HINT_RENDER_BATCHING to "1", and you plan to make OpenGL/D3D/whatever<br/>
		/// calls in addition to SDL render API calls. If all of this applies, you<br/>
		/// should call SDL_RenderFlush() between calls to SDL's render API and the<br/>
		/// low-level API you're using in cooperation.<br/>
		/// In all other cases, you can ignore this function. This is only here to get<br/>
		/// maximum performance out of a specific situation. In all other cases, SDL<br/>
		/// will do the right thing, perhaps at a performance loss.<br/>
		/// This function is first available in SDL 2.0.10, and is not needed in 2.0.9<br/>
		/// and earlier, as earlier versions did not queue rendering commands at all,<br/>
		/// instead flushing them to the OS immediately.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderFlush")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderFlush")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderFlushNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Force the rendering context to flush any pending commands to the underlying<br/>/// rendering API.<br/>/// You do not need to (and in fact, shouldn't) call this function unless you<br/>/// are planning to call into OpenGL/Direct3D/Metal/whatever directly in<br/>/// addition to using an SDL_Renderer.<br/>/// This is for a very-specific case: if you are using SDL's render API, you<br/>/// asked for a specific renderer backend (OpenGL, Direct3D, etc), you set<br/>/// SDL_HINT_RENDER_BATCHING to "1", and you plan to make OpenGL/D3D/whatever<br/>/// calls in addition to SDL render API calls. If all of this applies, you<br/>/// should call SDL_RenderFlush() between calls to SDL's render API and the<br/>/// low-level API you're using in cooperation.<br/>/// In all other cases, you can ignore this function. This is only here to get<br/>/// maximum performance out of a specific situation. In all other cases, SDL<br/>/// will do the right thing, perhaps at a performance loss.<br/>/// This function is first available in SDL 2.0.10, and is not needed in 2.0.9<br/>/// and earlier, as earlier versions did not queue rendering commands at all,<br/>/// instead flushing them to the OS immediately.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderFlush")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderFlush([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			int ret = SDLRenderFlushNative(renderer);
			return ret;
		}

		/// <summary>
		/// Bind an OpenGL/ES/ES2 texture to the current context.<br/>
		/// This is for use with OpenGL instructions when rendering OpenGL primitives<br/>
		/// directly.<br/>
		/// If not NULL, `texw` and `texh` will be filled with the width and height<br/>
		/// values suitable for the provided texture. In most cases, both will be 1.0,<br/>
		/// however, on systems that support the GL_ARB_texture_rectangle extension,<br/>
		/// these values will actually be the pixel width and height used to create the<br/>
		/// texture, so this factor needs to be taken into account when providing<br/>
		/// texture coordinates to OpenGL.<br/>
		/// You need a renderer to create an SDL_Texture, therefore you can only use<br/>
		/// this function with an implicit OpenGL context from SDL_CreateRenderer(),<br/>
		/// not with your own OpenGL context. If you need control over your OpenGL<br/>
		/// context, you need to write your own texture-loading methods.<br/>
		/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and<br/>
		/// re-order the color channels in the shaders phase, so the uploaded texture<br/>
		/// may have swapped color channels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GL_BindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GL_BindTexture")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGLBindTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "texw")] [NativeName(NativeNameType.Type, "float*")] float* texw, [NativeName(NativeNameType.Param, "texh")] [NativeName(NativeNameType.Type, "float*")] float* texh);

		/// <summary>/// Bind an OpenGL/ES/ES2 texture to the current context.<br/>/// This is for use with OpenGL instructions when rendering OpenGL primitives<br/>/// directly.<br/>/// If not NULL, `texw` and `texh` will be filled with the width and height<br/>/// values suitable for the provided texture. In most cases, both will be 1.0,<br/>/// however, on systems that support the GL_ARB_texture_rectangle extension,<br/>/// these values will actually be the pixel width and height used to create the<br/>/// texture, so this factor needs to be taken into account when providing<br/>/// texture coordinates to OpenGL.<br/>/// You need a renderer to create an SDL_Texture, therefore you can only use<br/>/// this function with an implicit OpenGL context from SDL_CreateRenderer(),<br/>/// not with your own OpenGL context. If you need control over your OpenGL<br/>/// context, you need to write your own texture-loading methods.<br/>/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and<br/>/// re-order the color channels in the shaders phase, so the uploaded texture<br/>/// may have swapped color channels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GL_BindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGLBindTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "texw")] [NativeName(NativeNameType.Type, "float*")] float* texw, [NativeName(NativeNameType.Param, "texh")] [NativeName(NativeNameType.Type, "float*")] float* texh)
		{
			int ret = SDLGLBindTextureNative(texture, texw, texh);
			return ret;
		}

		/// <summary>/// Bind an OpenGL/ES/ES2 texture to the current context.<br/>/// This is for use with OpenGL instructions when rendering OpenGL primitives<br/>/// directly.<br/>/// If not NULL, `texw` and `texh` will be filled with the width and height<br/>/// values suitable for the provided texture. In most cases, both will be 1.0,<br/>/// however, on systems that support the GL_ARB_texture_rectangle extension,<br/>/// these values will actually be the pixel width and height used to create the<br/>/// texture, so this factor needs to be taken into account when providing<br/>/// texture coordinates to OpenGL.<br/>/// You need a renderer to create an SDL_Texture, therefore you can only use<br/>/// this function with an implicit OpenGL context from SDL_CreateRenderer(),<br/>/// not with your own OpenGL context. If you need control over your OpenGL<br/>/// context, you need to write your own texture-loading methods.<br/>/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and<br/>/// re-order the color channels in the shaders phase, so the uploaded texture<br/>/// may have swapped color channels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GL_BindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGLBindTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "texw")] [NativeName(NativeNameType.Type, "float*")] ref float texw, [NativeName(NativeNameType.Param, "texh")] [NativeName(NativeNameType.Type, "float*")] float* texh)
		{
			fixed (float* ptexw = &texw)
			{
				int ret = SDLGLBindTextureNative(texture, (float*)ptexw, texh);
				return ret;
			}
		}

		/// <summary>/// Bind an OpenGL/ES/ES2 texture to the current context.<br/>/// This is for use with OpenGL instructions when rendering OpenGL primitives<br/>/// directly.<br/>/// If not NULL, `texw` and `texh` will be filled with the width and height<br/>/// values suitable for the provided texture. In most cases, both will be 1.0,<br/>/// however, on systems that support the GL_ARB_texture_rectangle extension,<br/>/// these values will actually be the pixel width and height used to create the<br/>/// texture, so this factor needs to be taken into account when providing<br/>/// texture coordinates to OpenGL.<br/>/// You need a renderer to create an SDL_Texture, therefore you can only use<br/>/// this function with an implicit OpenGL context from SDL_CreateRenderer(),<br/>/// not with your own OpenGL context. If you need control over your OpenGL<br/>/// context, you need to write your own texture-loading methods.<br/>/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and<br/>/// re-order the color channels in the shaders phase, so the uploaded texture<br/>/// may have swapped color channels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GL_BindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGLBindTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "texw")] [NativeName(NativeNameType.Type, "float*")] float* texw, [NativeName(NativeNameType.Param, "texh")] [NativeName(NativeNameType.Type, "float*")] ref float texh)
		{
			fixed (float* ptexh = &texh)
			{
				int ret = SDLGLBindTextureNative(texture, texw, (float*)ptexh);
				return ret;
			}
		}

		/// <summary>/// Bind an OpenGL/ES/ES2 texture to the current context.<br/>/// This is for use with OpenGL instructions when rendering OpenGL primitives<br/>/// directly.<br/>/// If not NULL, `texw` and `texh` will be filled with the width and height<br/>/// values suitable for the provided texture. In most cases, both will be 1.0,<br/>/// however, on systems that support the GL_ARB_texture_rectangle extension,<br/>/// these values will actually be the pixel width and height used to create the<br/>/// texture, so this factor needs to be taken into account when providing<br/>/// texture coordinates to OpenGL.<br/>/// You need a renderer to create an SDL_Texture, therefore you can only use<br/>/// this function with an implicit OpenGL context from SDL_CreateRenderer(),<br/>/// not with your own OpenGL context. If you need control over your OpenGL<br/>/// context, you need to write your own texture-loading methods.<br/>/// Also note that SDL may upload RGB textures as BGR (or vice-versa), and<br/>/// re-order the color channels in the shaders phase, so the uploaded texture<br/>/// may have swapped color channels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GL_BindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGLBindTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture, [NativeName(NativeNameType.Param, "texw")] [NativeName(NativeNameType.Type, "float*")] ref float texw, [NativeName(NativeNameType.Param, "texh")] [NativeName(NativeNameType.Type, "float*")] ref float texh)
		{
			fixed (float* ptexw = &texw)
			{
				fixed (float* ptexh = &texh)
				{
					int ret = SDLGLBindTextureNative(texture, (float*)ptexw, (float*)ptexh);
					return ret;
				}
			}
		}

		/// <summary>
		/// Unbind an OpenGL/ES/ES2 texture from the current context.<br/>
		/// See SDL_GL_BindTexture() for examples on how to use these functions<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GL_UnbindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GL_UnbindTexture")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGLUnbindTextureNative([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture);

		/// <summary>/// Unbind an OpenGL/ES/ES2 texture from the current context.<br/>/// See SDL_GL_BindTexture() for examples on how to use these functions<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GL_UnbindTexture")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGLUnbindTexture([NativeName(NativeNameType.Param, "texture")] [NativeName(NativeNameType.Type, "SDL_Texture*")] SDLTexture* texture)
		{
			int ret = SDLGLUnbindTextureNative(texture);
			return ret;
		}

		/// <summary>
		/// Get the CAMetalLayer associated with the given Metal renderer.<br/>
		/// This function returns `void *`, so SDL doesn't have to include Metal's<br/>
		/// headers, but it can be safely cast to a `CAMetalLayer *`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetMetalLayer")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGetMetalLayer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* SDLRenderGetMetalLayerNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Get the CAMetalLayer associated with the given Metal renderer.<br/>/// This function returns `void *`, so SDL doesn't have to include Metal's<br/>/// headers, but it can be safely cast to a `CAMetalLayer *`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetMetalLayer")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLRenderGetMetalLayer([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			void* ret = SDLRenderGetMetalLayerNative(renderer);
			return ret;
		}

		/// <summary>
		/// Get the Metal command encoder for the current frame<br/>
		/// This function returns `void *`, so SDL doesn't have to include Metal's<br/>
		/// headers, but it can be safely cast to an `id<br/>
		/// <MTLRenderCommandEncoder<br/>
		/// >`.<br/>
		/// Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give<br/>
		/// SDL a drawable to render to, which might happen if the window is<br/>
		/// hidden/minimized/offscreen. This doesn't apply to command encoders for<br/>
		/// render targets, just the window's backbuffer. Check your return values!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetMetalCommandEncoder")]
		[return: NativeName(NativeNameType.Type, "void*")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGetMetalCommandEncoder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void* SDLRenderGetMetalCommandEncoderNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Get the Metal command encoder for the current frame<br/>/// This function returns `void *`, so SDL doesn't have to include Metal's<br/>/// headers, but it can be safely cast to an `id<br/>/// <MTLRenderCommandEncoder<br/>/// >`.<br/>/// Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give<br/>/// SDL a drawable to render to, which might happen if the window is<br/>/// hidden/minimized/offscreen. This doesn't apply to command encoders for<br/>/// render targets, just the window's backbuffer. Check your return values!<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetMetalCommandEncoder")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLRenderGetMetalCommandEncoder([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			void* ret = SDLRenderGetMetalCommandEncoderNative(renderer);
			return ret;
		}

		/// <summary>
		/// Toggle VSync of the given renderer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderSetVSync")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderSetVSync")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLRenderSetVSyncNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "vsync")] [NativeName(NativeNameType.Type, "int")] int vsync);

		/// <summary>/// Toggle VSync of the given renderer.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderSetVSync")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLRenderSetVSync([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "vsync")] [NativeName(NativeNameType.Type, "int")] int vsync)
		{
			int ret = SDLRenderSetVSyncNative(renderer, vsync);
			return ret;
		}

		/// <summary>
		/// Create a window that can be shaped with the specified position, dimensions,<br/>
		/// and flags.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateShapedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		[LibraryImport(LibName, EntryPoint = "SDL_CreateShapedWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLWindow* SDLCreateShapedWindowNative([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "unsigned int")] uint x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "unsigned int")] uint y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "unsigned int")] uint w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "unsigned int")] uint h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags);

		/// <summary>/// Create a window that can be shaped with the specified position, dimensions,<br/>/// and flags.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateShapedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLCreateShapedWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "unsigned int")] uint x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "unsigned int")] uint y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "unsigned int")] uint w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "unsigned int")] uint h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			SDLWindow* ret = SDLCreateShapedWindowNative(title, x, y, w, h, flags);
			return ret;
		}

		/// <summary>
		/// Return whether the given window is a shaped window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsShapedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IsShapedWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIsShapedWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "const SDL_Window*")] SDLWindow* window);

		/// <summary>/// Return whether the given window is a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IsShapedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIsShapedWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "const SDL_Window*")] SDLWindow* window)
		{
			SDLBool ret = SDLIsShapedWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Set the shape and parameters of a shaped window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowShape")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetWindowShape")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLSetWindowShapeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* shape, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] SDLWindowShapeMode* shapeMode);

		/// <summary>/// Set the shape and parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowShape")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowShape([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* shape, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] SDLWindowShapeMode* shapeMode)
		{
			int ret = SDLSetWindowShapeNative(window, shape, shapeMode);
			return ret;
		}

		/// <summary>/// Set the shape and parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowShape")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowShape([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface shape, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] SDLWindowShapeMode* shapeMode)
		{
			fixed (SDLSurface* pshape = &shape)
			{
				int ret = SDLSetWindowShapeNative(window, (SDLSurface*)pshape, shapeMode);
				return ret;
			}
		}

		/// <summary>/// Set the shape and parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowShape")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowShape([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* shape, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] ref SDLWindowShapeMode shapeMode)
		{
			fixed (SDLWindowShapeMode* pshapeMode = &shapeMode)
			{
				int ret = SDLSetWindowShapeNative(window, shape, (SDLWindowShapeMode*)pshapeMode);
				return ret;
			}
		}

		/// <summary>/// Set the shape and parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowShape")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowShape([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface shape, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] ref SDLWindowShapeMode shapeMode)
		{
			fixed (SDLSurface* pshape = &shape)
			{
				fixed (SDLWindowShapeMode* pshapeMode = &shapeMode)
				{
					int ret = SDLSetWindowShapeNative(window, (SDLSurface*)pshape, (SDLWindowShapeMode*)pshapeMode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the shape parameters of a shaped window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetShapedWindowMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetShapedWindowMode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGetShapedWindowModeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] SDLWindowShapeMode* shapeMode);

		/// <summary>/// Get the shape parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetShapedWindowMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetShapedWindowMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] SDLWindowShapeMode* shapeMode)
		{
			int ret = SDLGetShapedWindowModeNative(window, shapeMode);
			return ret;
		}

		/// <summary>/// Get the shape parameters of a shaped window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetShapedWindowMode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetShapedWindowMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "shape_mode")] [NativeName(NativeNameType.Type, "SDL_WindowShapeMode*")] ref SDLWindowShapeMode shapeMode)
		{
			fixed (SDLWindowShapeMode* pshapeMode = &shapeMode)
			{
				int ret = SDLGetShapedWindowModeNative(window, (SDLWindowShapeMode*)pshapeMode);
				return ret;
			}
		}

		/// <summary>
		/// Set a callback for every Windows message, run before TranslateMessage().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowsMessageHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_SetWindowsMessageHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLSetWindowsMessageHookNative([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_WindowsMessageHook")] SdlWindowsmessagehook callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata);

		/// <summary>/// Set a callback for every Windows message, run before TranslateMessage().<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowsMessageHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowsMessageHook([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_WindowsMessageHook")] SdlWindowsmessagehook callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			SDLSetWindowsMessageHookNative(callback, userdata);
		}

		/// <summary>
		/// Get the D3D9 adapter index that matches the specified display index.<br/>
		/// The returned adapter index can be passed to `IDirect3D9::CreateDevice` and<br/>
		/// controls on which monitor a full screen application will appear.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Direct3D9GetAdapterIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_Direct3D9GetAdapterIndex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLDirect3D9GetAdapterIndexNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex);

		/// <summary>/// Get the D3D9 adapter index that matches the specified display index.<br/>/// The returned adapter index can be passed to `IDirect3D9::CreateDevice` and<br/>/// controls on which monitor a full screen application will appear.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Direct3D9GetAdapterIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLDirect3D9GetAdapterIndex([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex)
		{
			int ret = SDLDirect3D9GetAdapterIndexNative(displayIndex);
			return ret;
		}

		/// <summary>
		/// Get the D3D9 device associated with a renderer.<br/>
		/// Once you are done using the device, you should release it to avoid a<br/>
		/// resource leak.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D9Device")]
		[return: NativeName(NativeNameType.Type, "IDirect3DDevice9*")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGetD3D9Device")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial IDirect3DDevice9* SDLRenderGetD3D9DeviceNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Get the D3D9 device associated with a renderer.<br/>/// Once you are done using the device, you should release it to avoid a<br/>/// resource leak.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D9Device")]
		[return: NativeName(NativeNameType.Type, "IDirect3DDevice9*")]
		public static IDirect3DDevice9* SDLRenderGetD3D9Device([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			IDirect3DDevice9* ret = SDLRenderGetD3D9DeviceNative(renderer);
			return ret;
		}

		/// <summary>
		/// Get the D3D11 device associated with a renderer.<br/>
		/// Once you are done using the device, you should release it to avoid a<br/>
		/// resource leak.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D11Device")]
		[return: NativeName(NativeNameType.Type, "ID3D11Device*")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGetD3D11Device")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ID3D11Device* SDLRenderGetD3D11DeviceNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Get the D3D11 device associated with a renderer.<br/>/// Once you are done using the device, you should release it to avoid a<br/>/// resource leak.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D11Device")]
		[return: NativeName(NativeNameType.Type, "ID3D11Device*")]
		public static ID3D11Device* SDLRenderGetD3D11Device([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			ID3D11Device* ret = SDLRenderGetD3D11DeviceNative(renderer);
			return ret;
		}

		/// <summary>
		/// Get the D3D12 device associated with a renderer.<br/>
		/// Once you are done using the device, you should release it to avoid a<br/>
		/// resource leak.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D12Device")]
		[return: NativeName(NativeNameType.Type, "ID3D12Device*")]
		[LibraryImport(LibName, EntryPoint = "SDL_RenderGetD3D12Device")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ID3D12Device* SDLRenderGetD3D12DeviceNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer);

		/// <summary>/// Get the D3D12 device associated with a renderer.<br/>/// Once you are done using the device, you should release it to avoid a<br/>/// resource leak.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RenderGetD3D12Device")]
		[return: NativeName(NativeNameType.Type, "ID3D12Device*")]
		public static ID3D12Device* SDLRenderGetD3D12Device([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			ID3D12Device* ret = SDLRenderGetD3D12DeviceNative(renderer);
			return ret;
		}

		/// <summary>
		/// Get the DXGI Adapter and Output indices for the specified display index.<br/>
		/// The DXGI Adapter and Output indices can be passed to `EnumAdapters` and<br/>
		/// `EnumOutputs` respectively to get the objects required to create a DX10 or<br/>
		/// DX11 device and swap chain.<br/>
		/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it<br/>
		/// returns an SDL_bool.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DXGIGetOutputInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_DXGIGetOutputInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLDXGIGetOutputInfoNative([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "adapterIndex")] [NativeName(NativeNameType.Type, "int*")] int* adapterIndex, [NativeName(NativeNameType.Param, "outputIndex")] [NativeName(NativeNameType.Type, "int*")] int* outputIndex);

		/// <summary>/// Get the DXGI Adapter and Output indices for the specified display index.<br/>/// The DXGI Adapter and Output indices can be passed to `EnumAdapters` and<br/>/// `EnumOutputs` respectively to get the objects required to create a DX10 or<br/>/// DX11 device and swap chain.<br/>/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it<br/>/// returns an SDL_bool.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DXGIGetOutputInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLDXGIGetOutputInfo([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "adapterIndex")] [NativeName(NativeNameType.Type, "int*")] int* adapterIndex, [NativeName(NativeNameType.Param, "outputIndex")] [NativeName(NativeNameType.Type, "int*")] int* outputIndex)
		{
			SDLBool ret = SDLDXGIGetOutputInfoNative(displayIndex, adapterIndex, outputIndex);
			return ret;
		}

		/// <summary>/// Get the DXGI Adapter and Output indices for the specified display index.<br/>/// The DXGI Adapter and Output indices can be passed to `EnumAdapters` and<br/>/// `EnumOutputs` respectively to get the objects required to create a DX10 or<br/>/// DX11 device and swap chain.<br/>/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it<br/>/// returns an SDL_bool.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DXGIGetOutputInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLDXGIGetOutputInfo([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "adapterIndex")] [NativeName(NativeNameType.Type, "int*")] ref int adapterIndex, [NativeName(NativeNameType.Param, "outputIndex")] [NativeName(NativeNameType.Type, "int*")] int* outputIndex)
		{
			fixed (int* padapterIndex = &adapterIndex)
			{
				SDLBool ret = SDLDXGIGetOutputInfoNative(displayIndex, (int*)padapterIndex, outputIndex);
				return ret;
			}
		}

		/// <summary>/// Get the DXGI Adapter and Output indices for the specified display index.<br/>/// The DXGI Adapter and Output indices can be passed to `EnumAdapters` and<br/>/// `EnumOutputs` respectively to get the objects required to create a DX10 or<br/>/// DX11 device and swap chain.<br/>/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it<br/>/// returns an SDL_bool.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DXGIGetOutputInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLDXGIGetOutputInfo([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "adapterIndex")] [NativeName(NativeNameType.Type, "int*")] int* adapterIndex, [NativeName(NativeNameType.Param, "outputIndex")] [NativeName(NativeNameType.Type, "int*")] ref int outputIndex)
		{
			fixed (int* poutputIndex = &outputIndex)
			{
				SDLBool ret = SDLDXGIGetOutputInfoNative(displayIndex, adapterIndex, (int*)poutputIndex);
				return ret;
			}
		}

		/// <summary>/// Get the DXGI Adapter and Output indices for the specified display index.<br/>/// The DXGI Adapter and Output indices can be passed to `EnumAdapters` and<br/>/// `EnumOutputs` respectively to get the objects required to create a DX10 or<br/>/// DX11 device and swap chain.<br/>/// Before SDL 2.0.4 this function did not return a value. Since SDL 2.0.4 it<br/>/// returns an SDL_bool.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DXGIGetOutputInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLDXGIGetOutputInfo([NativeName(NativeNameType.Param, "displayIndex")] [NativeName(NativeNameType.Type, "int")] int displayIndex, [NativeName(NativeNameType.Param, "adapterIndex")] [NativeName(NativeNameType.Type, "int*")] ref int adapterIndex, [NativeName(NativeNameType.Param, "outputIndex")] [NativeName(NativeNameType.Type, "int*")] ref int outputIndex)
		{
			fixed (int* padapterIndex = &adapterIndex)
			{
				fixed (int* poutputIndex = &outputIndex)
				{
					SDLBool ret = SDLDXGIGetOutputInfoNative(displayIndex, (int*)padapterIndex, (int*)poutputIndex);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query if the current device is a tablet.<br/>
		/// If SDL can't determine this, it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsTablet")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_IsTablet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLIsTabletNative();

		/// <summary>/// Query if the current device is a tablet.<br/>/// If SDL can't determine this, it will return SDL_FALSE.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_IsTablet")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLIsTablet()
		{
			SDLBool ret = SDLIsTabletNative();
			return ret;
		}

		/// <summary>
		/// Functions used by iOS application delegates to notify SDL about state changes <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillTerminate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillTerminate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationWillTerminateNative();

		/// <summary>/// Functions used by iOS application delegates to notify SDL about state changes <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillTerminate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationWillTerminate()
		{
			SDLOnApplicationWillTerminateNative();
		}

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidReceiveMemoryWarning")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationDidReceiveMemoryWarningNative();

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidReceiveMemoryWarning")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationDidReceiveMemoryWarning()
		{
			SDLOnApplicationDidReceiveMemoryWarningNative();
		}

		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillResignActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillResignActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationWillResignActiveNative();

		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillResignActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationWillResignActive()
		{
			SDLOnApplicationWillResignActiveNative();
		}

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidEnterBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidEnterBackground")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationDidEnterBackgroundNative();

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidEnterBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationDidEnterBackground()
		{
			SDLOnApplicationDidEnterBackgroundNative();
		}

		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillEnterForeground")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillEnterForeground")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationWillEnterForegroundNative();

		[NativeName(NativeNameType.Func, "SDL_OnApplicationWillEnterForeground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationWillEnterForeground()
		{
			SDLOnApplicationWillEnterForegroundNative();
		}

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidBecomeActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidBecomeActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLOnApplicationDidBecomeActiveNative();

		[NativeName(NativeNameType.Func, "SDL_OnApplicationDidBecomeActive")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLOnApplicationDidBecomeActive()
		{
			SDLOnApplicationDidBecomeActiveNative();
		}

		/// <summary>
		/// Get the number of milliseconds since SDL library initialization.<br/>
		/// This value wraps if the program runs for more than ~49 days.<br/>
		/// This function is not recommended as of SDL 2.0.18; use SDL_GetTicks64()<br/>
		/// instead, where the value doesn't wrap every ~49 days. There are places in<br/>
		/// SDL where we provide a 32-bit timestamp that can not change without<br/>
		/// breaking binary compatibility, though, so this function isn't officially<br/>
		/// deprecated.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetTicks")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetTicks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SDLGetTicksNative();

		/// <summary>/// Get the number of milliseconds since SDL library initialization.<br/>/// This value wraps if the program runs for more than ~49 days.<br/>/// This function is not recommended as of SDL 2.0.18; use SDL_GetTicks64()<br/>/// instead, where the value doesn't wrap every ~49 days. There are places in<br/>/// SDL where we provide a 32-bit timestamp that can not change without<br/>/// breaking binary compatibility, though, so this function isn't officially<br/>/// deprecated.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetTicks")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetTicks()
		{
			uint ret = SDLGetTicksNative();
			return ret;
		}

		/// <summary>
		/// Get the number of milliseconds since SDL library initialization.<br/>
		/// Note that you should not use the SDL_TICKS_PASSED macro with values<br/>
		/// returned by this function, as that macro does clever math to compensate for<br/>
		/// the 32-bit overflow every ~49 days that SDL_GetTicks() suffers from. 64-bit<br/>
		/// values from this function can be safely compared directly.<br/>
		/// For example, if you want to wait 100 ms, you could do this:<br/>
		/// ```c<br/>
		/// const Uint64 timeout = SDL_GetTicks64() + 100;<br/>
		/// while (SDL_GetTicks64() <br/>
		/// <<br/>
		/// timeout) {<br/>
		/// // ... do work until timeout has elapsed<br/>
		/// }<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetTicks64")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetTicks64")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong SDLGetTicks64Native();

		/// <summary>/// Get the number of milliseconds since SDL library initialization.<br/>/// Note that you should not use the SDL_TICKS_PASSED macro with values<br/>/// returned by this function, as that macro does clever math to compensate for<br/>/// the 32-bit overflow every ~49 days that SDL_GetTicks() suffers from. 64-bit<br/>/// values from this function can be safely compared directly.<br/>/// For example, if you want to wait 100 ms, you could do this:<br/>/// ```c<br/>/// const Uint64 timeout = SDL_GetTicks64() + 100;<br/>/// while (SDL_GetTicks64() <br/>/// <<br/>/// timeout) {<br/>/// // ... do work until timeout has elapsed<br/>/// }<br/>/// ```<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetTicks64")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLGetTicks64()
		{
			ulong ret = SDLGetTicks64Native();
			return ret;
		}

		/// <summary>
		/// Get the current value of the high resolution counter.<br/>
		/// This function is typically used for profiling.<br/>
		/// The counter values are only meaningful relative to each other. Differences<br/>
		/// between values can be converted to times by using<br/>
		/// SDL_GetPerformanceFrequency().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetPerformanceCounter")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceCounter")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong SDLGetPerformanceCounterNative();

		/// <summary>/// Get the current value of the high resolution counter.<br/>/// This function is typically used for profiling.<br/>/// The counter values are only meaningful relative to each other. Differences<br/>/// between values can be converted to times by using<br/>/// SDL_GetPerformanceFrequency().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPerformanceCounter")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLGetPerformanceCounter()
		{
			ulong ret = SDLGetPerformanceCounterNative();
			return ret;
		}

		/// <summary>
		/// Get the count per second of the high resolution counter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetPerformanceFrequency")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceFrequency")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ulong SDLGetPerformanceFrequencyNative();

		/// <summary>/// Get the count per second of the high resolution counter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPerformanceFrequency")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLGetPerformanceFrequency()
		{
			ulong ret = SDLGetPerformanceFrequencyNative();
			return ret;
		}

		/// <summary>
		/// Wait a specified number of milliseconds before returning.<br/>
		/// This function waits a specified number of milliseconds before returning. It<br/>
		/// waits at least the specified time, but possibly longer due to OS<br/>
		/// scheduling.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Delay")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_Delay")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLDelayNative([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "Uint32")] uint ms);

		/// <summary>/// Wait a specified number of milliseconds before returning.<br/>/// This function waits a specified number of milliseconds before returning. It<br/>/// waits at least the specified time, but possibly longer due to OS<br/>/// scheduling.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Delay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLDelay([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "Uint32")] uint ms)
		{
			SDLDelayNative(ms);
		}

		/// <summary>
		/// Call a callback function at a future time.<br/>
		/// If you use this function, you must pass `SDL_INIT_TIMER` to SDL_Init().<br/>
		/// The callback function is passed the current timer interval and the user<br/>
		/// supplied parameter from the SDL_AddTimer() call and should return the next<br/>
		/// timer interval. If the value returned from the callback is 0, the timer is<br/>
		/// canceled.<br/>
		/// The callback is run on a separate thread.<br/>
		/// Timers take into account the amount of time it took to execute the<br/>
		/// callback. For example, if the callback took 250 ms to execute and returned<br/>
		/// 1000 (ms), the timer would only wait another 750 ms before its next<br/>
		/// iteration.<br/>
		/// Timing may be inexact due to OS scheduling. Be sure to note the current<br/>
		/// time with SDL_GetTicks() or SDL_GetPerformanceCounter() in case your<br/>
		/// callback needs to adjust for variances.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddTimer")]
		[return: NativeName(NativeNameType.Type, "SDL_TimerID")]
		[LibraryImport(LibName, EntryPoint = "SDL_AddTimer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLAddTimerNative([NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint32")] uint interval, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_TimerCallback")] SdlTimercallback callback, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "void*")] void* param);

		/// <summary>/// Call a callback function at a future time.<br/>/// If you use this function, you must pass `SDL_INIT_TIMER` to SDL_Init().<br/>/// The callback function is passed the current timer interval and the user<br/>/// supplied parameter from the SDL_AddTimer() call and should return the next<br/>/// timer interval. If the value returned from the callback is 0, the timer is<br/>/// canceled.<br/>/// The callback is run on a separate thread.<br/>/// Timers take into account the amount of time it took to execute the<br/>/// callback. For example, if the callback took 250 ms to execute and returned<br/>/// 1000 (ms), the timer would only wait another 750 ms before its next<br/>/// iteration.<br/>/// Timing may be inexact due to OS scheduling. Be sure to note the current<br/>/// time with SDL_GetTicks() or SDL_GetPerformanceCounter() in case your<br/>/// callback needs to adjust for variances.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_AddTimer")]
		[return: NativeName(NativeNameType.Type, "SDL_TimerID")]
		public static int SDLAddTimer([NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint32")] uint interval, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_TimerCallback")] SdlTimercallback callback, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "void*")] void* param)
		{
			int ret = SDLAddTimerNative(interval, callback, param);
			return ret;
		}

		/// <summary>
		/// Remove a timer created with SDL_AddTimer().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RemoveTimer")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_RemoveTimer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLRemoveTimerNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int id);

		/// <summary>/// Remove a timer created with SDL_AddTimer().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RemoveTimer")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLRemoveTimer([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int id)
		{
			SDLBool ret = SDLRemoveTimerNative(id);
			return ret;
		}

		/// <summary>
		/// Get the version of SDL that is linked against your program.<br/>
		/// If you are linking to SDL dynamically, then it is possible that the current<br/>
		/// version will be different than the version you compiled against. This<br/>
		/// function returns the current version, while SDL_VERSION() is a macro that<br/>
		/// tells you what version you compiled with.<br/>
		/// This function may be called safely at any time, even before SDL_Init().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetVersion")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetVersion")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLGetVersionNative([NativeName(NativeNameType.Param, "ver")] [NativeName(NativeNameType.Type, "SDL_version*")] SDLVersion* ver);

		/// <summary>/// Get the version of SDL that is linked against your program.<br/>/// If you are linking to SDL dynamically, then it is possible that the current<br/>/// version will be different than the version you compiled against. This<br/>/// function returns the current version, while SDL_VERSION() is a macro that<br/>/// tells you what version you compiled with.<br/>/// This function may be called safely at any time, even before SDL_Init().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetVersion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetVersion([NativeName(NativeNameType.Param, "ver")] [NativeName(NativeNameType.Type, "SDL_version*")] SDLVersion* ver)
		{
			SDLGetVersionNative(ver);
		}

		/// <summary>
		/// Get the code revision of SDL that is linked against your program.<br/>
		/// This value is the revision of the code you are linked with and may be<br/>
		/// different from the code you are compiling with, which is found in the<br/>
		/// constant SDL_REVISION.<br/>
		/// The revision is arbitrary string (a hash value) uniquely identifying the<br/>
		/// exact revision of the SDL library in use, and is only useful in comparing<br/>
		/// against other revisions. It is NOT an incrementing number.<br/>
		/// If SDL wasn't built from a git repository with the appropriate tools, this<br/>
		/// will return an empty string.<br/>
		/// Prior to SDL 2.0.16, before development moved to GitHub, this returned a<br/>
		/// hash for a Mercurial repository.<br/>
		/// You shouldn't use this function for anything but logging it for debugging<br/>
		/// purposes. The string is not intended to be reliable in any way.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRevision")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetRevision")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* SDLGetRevisionNative();

		/// <summary>/// Get the code revision of SDL that is linked against your program.<br/>/// This value is the revision of the code you are linked with and may be<br/>/// different from the code you are compiling with, which is found in the<br/>/// constant SDL_REVISION.<br/>/// The revision is arbitrary string (a hash value) uniquely identifying the<br/>/// exact revision of the SDL library in use, and is only useful in comparing<br/>/// against other revisions. It is NOT an incrementing number.<br/>/// If SDL wasn't built from a git repository with the appropriate tools, this<br/>/// will return an empty string.<br/>/// Prior to SDL 2.0.16, before development moved to GitHub, this returned a<br/>/// hash for a Mercurial repository.<br/>/// You shouldn't use this function for anything but logging it for debugging<br/>/// purposes. The string is not intended to be reliable in any way.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRevision")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetRevision()
		{
			byte* ret = SDLGetRevisionNative();
			return ret;
		}

		/// <summary>/// Get the code revision of SDL that is linked against your program.<br/>/// This value is the revision of the code you are linked with and may be<br/>/// different from the code you are compiling with, which is found in the<br/>/// constant SDL_REVISION.<br/>/// The revision is arbitrary string (a hash value) uniquely identifying the<br/>/// exact revision of the SDL library in use, and is only useful in comparing<br/>/// against other revisions. It is NOT an incrementing number.<br/>/// If SDL wasn't built from a git repository with the appropriate tools, this<br/>/// will return an empty string.<br/>/// Prior to SDL 2.0.16, before development moved to GitHub, this returned a<br/>/// hash for a Mercurial repository.<br/>/// You shouldn't use this function for anything but logging it for debugging<br/>/// purposes. The string is not intended to be reliable in any way.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRevision")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetRevisionS()
		{
			string ret = Utils.DecodeStringUTF8(SDLGetRevisionNative());
			return ret;
		}

		/// <summary>
		/// Obsolete function, do not use.<br/>
		/// When SDL was hosted in a Mercurial repository, and was built carefully,<br/>
		/// this would return the revision number that the build was created from. This<br/>
		/// number was not reliable for several reasons, but more importantly, SDL is<br/>
		/// now hosted in a git repository, which does not offer numbers at all, only<br/>
		/// hashes. This function only ever returns zero now. Don't use it.<br/>
		/// Before SDL 2.0.16, this might have returned an unreliable, but non-zero<br/>
		/// number.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRevisionNumber")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetRevisionNumber")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLGetRevisionNumberNative();

		/// <summary>/// Obsolete function, do not use.<br/>/// When SDL was hosted in a Mercurial repository, and was built carefully,<br/>/// this would return the revision number that the build was created from. This<br/>/// number was not reliable for several reasons, but more importantly, SDL is<br/>/// now hosted in a git repository, which does not offer numbers at all, only<br/>/// hashes. This function only ever returns zero now. Don't use it.<br/>/// Before SDL 2.0.16, this might have returned an unreliable, but non-zero<br/>/// number.<br/>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetRevisionNumber")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetRevisionNumber()
		{
			int ret = SDLGetRevisionNumberNative();
			return ret;
		}

		/// <summary>
		/// Report the user's preferred locale.<br/>
		/// This returns an array of SDL_Locale structs, the final item zeroed out.<br/>
		/// When the caller is done with this array, it should call SDL_free() on the<br/>
		/// returned value; all the memory involved is allocated in a single block, so<br/>
		/// a single SDL_free() will suffice.<br/>
		/// Returned language strings are in the format xx, where 'xx' is an ISO-639<br/>
		/// language specifier (such as "en" for English, "de" for German, etc).<br/>
		/// Country strings are in the format YY, where "YY" is an ISO-3166 country<br/>
		/// code (such as "US" for the United States, "CA" for Canada, etc). Country<br/>
		/// might be NULL if there's no specific guidance on them (so you might get {<br/>
		/// "en", "US" } for American English, but { "en", NULL } means "English<br/>
		/// language, generically"). Language strings are never NULL, except to<br/>
		/// terminate the array.<br/>
		/// Please note that not all of these strings are 2 characters; some are three<br/>
		/// or more.<br/>
		/// The returned list of locales are in the order of the user's preference. For<br/>
		/// example, a German citizen that is fluent in US English and knows enough<br/>
		/// Japanese to navigate around Tokyo might have a list like: { "de", "en_US",<br/>
		/// "jp", NULL }. Someone from England might prefer British English (where<br/>
		/// "color" is spelled "colour", etc), but will settle for anything like it: {<br/>
		/// "en_GB", "en", NULL }.<br/>
		/// This function returns NULL on error, including when the platform does not<br/>
		/// supply this information at all.<br/>
		/// This might be a "slow" call that has to query the operating system. It's<br/>
		/// best to ask for this once and save the results. However, this list can<br/>
		/// change, usually because the user has changed a system preference outside of<br/>
		/// your program; SDL will send an SDL_LOCALECHANGED event in this case, if<br/>
		/// possible, and you can call this function again to get an updated copy of<br/>
		/// preferred locales.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetPreferredLocales")]
		[return: NativeName(NativeNameType.Type, "SDL_Locale*")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetPreferredLocales")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLLocale* SDLGetPreferredLocalesNative();

		/// <summary>/// Report the user's preferred locale.<br/>/// This returns an array of SDL_Locale structs, the final item zeroed out.<br/>/// When the caller is done with this array, it should call SDL_free() on the<br/>/// returned value; all the memory involved is allocated in a single block, so<br/>/// a single SDL_free() will suffice.<br/>/// Returned language strings are in the format xx, where 'xx' is an ISO-639<br/>/// language specifier (such as "en" for English, "de" for German, etc).<br/>/// Country strings are in the format YY, where "YY" is an ISO-3166 country<br/>/// code (such as "US" for the United States, "CA" for Canada, etc). Country<br/>/// might be NULL if there's no specific guidance on them (so you might get {<br/>/// "en", "US" } for American English, but { "en", NULL } means "English<br/>/// language, generically"). Language strings are never NULL, except to<br/>/// terminate the array.<br/>/// Please note that not all of these strings are 2 characters; some are three<br/>/// or more.<br/>/// The returned list of locales are in the order of the user's preference. For<br/>/// example, a German citizen that is fluent in US English and knows enough<br/>/// Japanese to navigate around Tokyo might have a list like: { "de", "en_US",<br/>/// "jp", NULL }. Someone from England might prefer British English (where<br/>/// "color" is spelled "colour", etc), but will settle for anything like it: {<br/>/// "en_GB", "en", NULL }.<br/>/// This function returns NULL on error, including when the platform does not<br/>/// supply this information at all.<br/>/// This might be a "slow" call that has to query the operating system. It's<br/>/// best to ask for this once and save the results. However, this list can<br/>/// change, usually because the user has changed a system preference outside of<br/>/// your program; SDL will send an SDL_LOCALECHANGED event in this case, if<br/>/// possible, and you can call this function again to get an updated copy of<br/>/// preferred locales.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetPreferredLocales")]
		[return: NativeName(NativeNameType.Type, "SDL_Locale*")]
		public static SDLLocale* SDLGetPreferredLocales()
		{
			SDLLocale* ret = SDLGetPreferredLocalesNative();
			return ret;
		}

		/// <summary>
		/// Open a URL/URI in the browser or other appropriate external application.<br/>
		/// Open a URL in a separate, system-provided application. How this works will<br/>
		/// vary wildly depending on the platform. This will likely launch what makes<br/>
		/// sense to handle a specific URL's protocol (a web browser for `http://`,<br/>
		/// etc), but it might also be able to launch file managers for directories and<br/>
		/// other things.<br/>
		/// What happens when you open a URL varies wildly as well: your game window<br/>
		/// may lose focus (and may or may not lose focus if your game was fullscreen<br/>
		/// or grabbing input at the time). On mobile devices, your app will likely<br/>
		/// move to the background or your process might be paused. Any given platform<br/>
		/// may or may not handle a given URL.<br/>
		/// If this is unimplemented (or simply unavailable) for a platform, this will<br/>
		/// fail with an error. A successful result does not mean the URL loaded, just<br/>
		/// that we launched _something_ to handle it (or at least believe we did).<br/>
		/// All this to say: this function can be useful, but you should definitely<br/>
		/// test it on every platform you target.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenURL")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_OpenURL")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLOpenURLNative([NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url);

		/// <summary>/// Open a URL/URI in the browser or other appropriate external application.<br/>/// Open a URL in a separate, system-provided application. How this works will<br/>/// vary wildly depending on the platform. This will likely launch what makes<br/>/// sense to handle a specific URL's protocol (a web browser for `http://`,<br/>/// etc), but it might also be able to launch file managers for directories and<br/>/// other things.<br/>/// What happens when you open a URL varies wildly as well: your game window<br/>/// may lose focus (and may or may not lose focus if your game was fullscreen<br/>/// or grabbing input at the time). On mobile devices, your app will likely<br/>/// move to the background or your process might be paused. Any given platform<br/>/// may or may not handle a given URL.<br/>/// If this is unimplemented (or simply unavailable) for a platform, this will<br/>/// fail with an error. A successful result does not mean the URL loaded, just<br/>/// that we launched _something_ to handle it (or at least believe we did).<br/>/// All this to say: this function can be useful, but you should definitely<br/>/// test it on every platform you target.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_OpenURL")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLOpenURL([NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			int ret = SDLOpenURLNative(url);
			return ret;
		}

		/// <summary>
		/// Initialize the SDL library.<br/>
		/// SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the<br/>
		/// two may be used interchangeably. Though for readability of your code<br/>
		/// SDL_InitSubSystem() might be preferred.<br/>
		/// The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)<br/>
		/// subsystems are initialized by default. Message boxes<br/>
		/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the<br/>
		/// video subsystem, in hopes of being useful in showing an error dialog when<br/>
		/// SDL_Init fails. You must specifically initialize other subsystems if you<br/>
		/// use them in your application.<br/>
		/// Logging (such as SDL_Log) works without initialization, too.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_INIT_TIMER`: timer subsystem<br/>
		/// - `SDL_INIT_AUDIO`: audio subsystem<br/>
		/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the<br/>
		/// events subsystem<br/>
		/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem<br/>
		/// - `SDL_INIT_GAMECONTROLLER`: controller subsystem; automatically<br/>
		/// initializes the joystick subsystem<br/>
		/// - `SDL_INIT_EVENTS`: events subsystem<br/>
		/// - `SDL_INIT_EVERYTHING`: all of the above subsystems<br/>
		/// - `SDL_INIT_NOPARACHUTE`: compatibility; this flag is ignored<br/>
		/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()<br/>
		/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or<br/>
		/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then<br/>
		/// this call will increase the ref-count and return.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Init")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_Init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLInitNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags);

		/// <summary>/// Initialize the SDL library.<br/>/// SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the<br/>/// two may be used interchangeably. Though for readability of your code<br/>/// SDL_InitSubSystem() might be preferred.<br/>/// The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)<br/>/// subsystems are initialized by default. Message boxes<br/>/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the<br/>/// video subsystem, in hopes of being useful in showing an error dialog when<br/>/// SDL_Init fails. You must specifically initialize other subsystems if you<br/>/// use them in your application.<br/>/// Logging (such as SDL_Log) works without initialization, too.<br/>/// `flags` may be any of the following OR'd together:<br/>/// - `SDL_INIT_TIMER`: timer subsystem<br/>/// - `SDL_INIT_AUDIO`: audio subsystem<br/>/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events<br/>/// subsystem<br/>/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the<br/>/// events subsystem<br/>/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem<br/>/// - `SDL_INIT_GAMECONTROLLER`: controller subsystem; automatically<br/>/// initializes the joystick subsystem<br/>/// - `SDL_INIT_EVENTS`: events subsystem<br/>/// - `SDL_INIT_EVERYTHING`: all of the above subsystems<br/>/// - `SDL_INIT_NOPARACHUTE`: compatibility; this flag is ignored<br/>/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()<br/>/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or<br/>/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then<br/>/// this call will increase the ref-count and return.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Init")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLInit([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			int ret = SDLInitNative(flags);
			return ret;
		}

		/// <summary>
		/// Compatibility function to initialize the SDL library.<br/>
		/// In SDL2, this function and SDL_Init() are interchangeable.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_InitSubSystem")]
		[return: NativeName(NativeNameType.Type, "int")]
		[LibraryImport(LibName, EntryPoint = "SDL_InitSubSystem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int SDLInitSubSystemNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags);

		/// <summary>/// Compatibility function to initialize the SDL library.<br/>/// In SDL2, this function and SDL_Init() are interchangeable.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_InitSubSystem")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLInitSubSystem([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			int ret = SDLInitSubSystemNative(flags);
			return ret;
		}

		/// <summary>
		/// Shut down specific SDL subsystems.<br/>
		/// If you start a subsystem using a call to that subsystem's init function<br/>
		/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),<br/>
		/// SDL_QuitSubSystem() and SDL_WasInit() will not work. You will need to use<br/>
		/// that subsystem's quit function (SDL_VideoQuit()) directly instead. But<br/>
		/// generally, you should not be using those functions directly anyhow; use<br/>
		/// SDL_Init() instead.<br/>
		/// You still need to call SDL_Quit() even if you close all open subsystems<br/>
		/// with SDL_QuitSubSystem().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_QuitSubSystem")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_QuitSubSystem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLQuitSubSystemNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags);

		/// <summary>/// Shut down specific SDL subsystems.<br/>/// If you start a subsystem using a call to that subsystem's init function<br/>/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),<br/>/// SDL_QuitSubSystem() and SDL_WasInit() will not work. You will need to use<br/>/// that subsystem's quit function (SDL_VideoQuit()) directly instead. But<br/>/// generally, you should not be using those functions directly anyhow; use<br/>/// SDL_Init() instead.<br/>/// You still need to call SDL_Quit() even if you close all open subsystems<br/>/// with SDL_QuitSubSystem().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_QuitSubSystem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLQuitSubSystem([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			SDLQuitSubSystemNative(flags);
		}

		/// <summary>
		/// Get a mask of the specified subsystems which are currently initialized.<br/>
		/// <br/>
		/// The return value does not include SDL_INIT_NOPARACHUTE.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_WasInit")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[LibraryImport(LibName, EntryPoint = "SDL_WasInit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint SDLWasInitNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags);

		/// <summary>/// Get a mask of the specified subsystems which are currently initialized.<br/>/// <br/>/// The return value does not include SDL_INIT_NOPARACHUTE.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_WasInit")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLWasInit([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			uint ret = SDLWasInitNative(flags);
			return ret;
		}

		/// <summary>
		/// Clean up all initialized subsystems.<br/>
		/// You should call this function even if you have already shutdown each<br/>
		/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this<br/>
		/// function even in the case of errors in initialization.<br/>
		/// If you start a subsystem using a call to that subsystem's init function<br/>
		/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),<br/>
		/// then you must use that subsystem's quit function (SDL_VideoQuit()) to shut<br/>
		/// it down before calling SDL_Quit(). But generally, you should not be using<br/>
		/// those functions directly anyhow; use SDL_Init() instead.<br/>
		/// You can use this function with atexit() to ensure that it is run when your<br/>
		/// application is shutdown, but it is not wise to do this from a library or<br/>
		/// other dynamically loaded code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Quit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[LibraryImport(LibName, EntryPoint = "SDL_Quit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SDLQuitNative();

		/// <summary>/// Clean up all initialized subsystems.<br/>/// You should call this function even if you have already shutdown each<br/>/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this<br/>/// function even in the case of errors in initialization.<br/>/// If you start a subsystem using a call to that subsystem's init function<br/>/// (for example SDL_VideoInit()) instead of SDL_Init() or SDL_InitSubSystem(),<br/>/// then you must use that subsystem's quit function (SDL_VideoQuit()) to shut<br/>/// it down before calling SDL_Quit(). But generally, you should not be using<br/>/// those functions directly anyhow; use SDL_Init() instead.<br/>/// You can use this function with atexit() to ensure that it is run when your<br/>/// application is shutdown, but it is not wise to do this from a library or<br/>/// other dynamically loaded code.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Quit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLQuit()
		{
			SDLQuitNative();
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowWMInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[LibraryImport(LibName, EntryPoint = "SDL_GetWindowWMInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial SDLBool SDLGetWindowWMInfoNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "SDL_SysWMinfo*")] SDLSysWMinfo* info);

		/// <summary>/// Get driver-specific information about a window.<br/>/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>/// The caller must initialize the `info` structure's version by using<br/>/// `SDL_VERSION(<br/>/// &info<br/>/// .version)`, and then this function will fill in the rest<br/>/// of the structure with information about the given window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowWMInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowWMInfo([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "SDL_SysWMinfo*")] SDLSysWMinfo* info)
		{
			SDLBool ret = SDLGetWindowWMInfoNative(window, info);
			return ret;
		}

		/// <summary>/// Get driver-specific information about a window.<br/>/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>/// The caller must initialize the `info` structure's version by using<br/>/// `SDL_VERSION(<br/>/// &info<br/>/// .version)`, and then this function will fill in the rest<br/>/// of the structure with information about the given window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowWMInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowWMInfo([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "SDL_SysWMinfo*")] ref SDLSysWMinfo info)
		{
			fixed (SDLSysWMinfo* pinfo = &info)
			{
				SDLBool ret = SDLGetWindowWMInfoNative(window, (SDLSysWMinfo*)pinfo);
				return ret;
			}
		}

	}
}
