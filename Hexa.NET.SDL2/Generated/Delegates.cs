// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// Return the size of the file in this rwops, or -1 if unknown<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "size")]
	[return: NativeName(NativeNameType.Type, "Sint64")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Size([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* context);

	/// <summary>
	/// Seek to <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// relative to <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// one of stdio's whence values:<br/>
	/// RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "seek")]
	[return: NativeName(NativeNameType.Type, "Sint64")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Seek([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* context, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "Sint64")] long offset, [NativeName(NativeNameType.Param, "whence")] [NativeName(NativeNameType.Type, "int")] int whence);

	/// <summary>
	/// Read up to <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// objects each of size <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// from the data<br/>
	/// stream to the area pointed at by <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "read")]
	[return: NativeName(NativeNameType.Type, "size_t")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Read([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* context, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "maxnum")] [NativeName(NativeNameType.Type, "size_t")] nuint maxnum);

	/// <summary>
	/// Write exactly <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// objects each of size <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// from the area<br/>
	/// pointed at by <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// to data stream.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "write")]
	[return: NativeName(NativeNameType.Type, "size_t")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Write([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* context, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "const void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "num")] [NativeName(NativeNameType.Type, "size_t")] nuint num);

	/// <summary>
	/// Close and free an allocated SDL_RWops structure.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "close")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Close([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* context);

	/// <summary>
	/// Callback that feeds the audio device (NULL to use SDL_QueueAudio()). <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "callback")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Callback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "Uint8*")] byte* stream, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len);

	/// <summary>
	/// Called when the joystick state should be updated <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Update")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Update([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata);

	/// <summary>
	/// Called when the player index is set <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetPlayerIndex")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SetPlayerIndex([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex);

	/// <summary>
	/// Implements SDL_JoystickRumble() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Rumble")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Rumble([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble);

	/// <summary>
	/// Implements SDL_JoystickRumbleTriggers() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "RumbleTriggers")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int RumbleTriggers([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble);

	/// <summary>
	/// Implements SDL_JoystickSetLED() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetLED")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SetLED([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue);

	/// <summary>
	/// Implements SDL_JoystickSendEffect() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SendEffect")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SendEffect([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_malloc_func")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SdlMallocFunc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_calloc_func")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SdlCallocFunc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_realloc_func")]
	[return: NativeName(NativeNameType.Type, "void*")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SdlReallocFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void*")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_free_func")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SdlFreeFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void*")] void* mem);

	/// <summary>
	/// The prototype for the application's main() function<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_main_func")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SdlMainFunc([NativeName(NativeNameType.Param, "argc")] [NativeName(NativeNameType.Type, "int")] int argc, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char*[-1]")] byte** argv);

	/// <summary>
	/// A callback that fires when an SDL assertion fails.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AssertionHandler")]
	[return: NativeName(NativeNameType.Type, "SDL_AssertState")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAssertState SdlAssertionhandler([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const SDL_AssertData*")] SDLAssertData* data, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata);

	/// <summary>
	/// The function passed to SDL_CreateThread().<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ThreadFunction")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SdlThreadfunction([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "pfnSDL_CurrentBeginThread")]
	[return: NativeName(NativeNameType.Type, "uintptr_t")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint PfnsdlCurrentbeginthread([NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "void*")] void* unknown0, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "unsigned int")] uint unknown1, [NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "unsigned int (*)(void*)*")] delegate*<void*, uint> func, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "void*")] void* unknown3, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "unsigned int")] uint unknown4, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* unknown5);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "pfnSDL_CurrentEndThread")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void PfnsdlCurrentendthread([NativeName(NativeNameType.Param, "code")] [NativeName(NativeNameType.Type, "unsigned int")] uint code);

	/// <summary>
	/// This function is called when the audio device needs more data.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// Once the callback returns, the buffer will no longer be valid.<br/>
	/// Stereo samples are stored in a LRLRLR ordering.<br/>
	/// You can choose to avoid callbacks and use SDL_QueueAudio() instead, if<br/>
	/// you like. Just open your audio device with a NULL callback.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioCallback")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "Uint8*")] byte* stream, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioFilter")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioFilter([NativeName(NativeNameType.Param, "cvt")] [NativeName(NativeNameType.Type, "SDL_AudioCVT*")] SDLAudioCV* cvt, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "SDL_AudioFormat")] ushort format);

	/// <summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_blit")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SdlBlit([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* src, [NativeName(NativeNameType.Param, "srcrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* srcrect, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* dst, [NativeName(NativeNameType.Param, "dstrect")] [NativeName(NativeNameType.Type, "SDL_Rect*")] SDLRect* dstrect);

	/// <summary>
	/// Callback used for hit-testing.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HitTest")]
	[return: NativeName(NativeNameType.Type, "SDL_HitTestResult")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLHitTestResult SdlHittest([NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* win, [NativeName(NativeNameType.Param, "area")] [NativeName(NativeNameType.Type, "const SDL_Point*")] SDLPoint* area, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data);

	/// <summary>
	/// A function pointer used for callbacks that watch the event queue.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EventFilter")]
	[return: NativeName(NativeNameType.Type, "int")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SdlEventfilter([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "SDL_Event*")] SDLEvent* evnt);

	/// <summary>
	/// Type definition of the hint callback function.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HintCallback")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SdlHintcallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "oldValue")] [NativeName(NativeNameType.Type, "const char*")] byte* oldValue, [NativeName(NativeNameType.Param, "newValue")] [NativeName(NativeNameType.Type, "const char*")] byte* newValue);

	/// <summary>
	/// The prototype for the log output callback function.<br/>
	/// This function is called by SDL when there is new text to be logged.<br/>
	/// <br/>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// <summary>
	/// To be documented.
	/// </summary>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_LogOutputFunction")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SdlLogoutputfunction([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "category")] [NativeName(NativeNameType.Type, "int")] int category, [NativeName(NativeNameType.Param, "priority")] [NativeName(NativeNameType.Type, "SDL_LogPriority")] SDLLogPriority priority, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message);

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_WindowsMessageHook")]
	[return: NativeName(NativeNameType.Type, "void")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SdlWindowsmessagehook([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata, [NativeName(NativeNameType.Param, "hWnd")] [NativeName(NativeNameType.Type, "void*")] void* hWnd, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "unsigned int")] uint message, [NativeName(NativeNameType.Param, "wParam")] [NativeName(NativeNameType.Type, "Uint64")] ulong wParam, [NativeName(NativeNameType.Param, "lParam")] [NativeName(NativeNameType.Type, "Sint64")] long lParam);

	/// <summary>
	/// Function prototype for the timer callback function.<br/>
	/// The callback function is passed the current timer interval and returns<br/>
	/// the next timer interval. If the returned value is the same as the one<br/>
	/// passed in, the periodic alarm continues, otherwise a new alarm is<br/>
	/// scheduled. If the callback returns 0, the periodic alarm is cancelled.<br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TimerCallback")]
	[return: NativeName(NativeNameType.Type, "Uint32")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint SdlTimercallback([NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint32")] uint interval, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "void*")] void* param);

}
