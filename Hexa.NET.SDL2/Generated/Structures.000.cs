// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	[NativeName(NativeNameType.StructOrClass, "_SDL_iconv_t")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLIconv
	{


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_AssertData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAssertData
	{
		[NativeName(NativeNameType.Field, "always_ignore")]
		[NativeName(NativeNameType.Type, "int")]
		public int AlwaysIgnore;
		[NativeName(NativeNameType.Field, "trigger_count")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint TriggerCount;
		[NativeName(NativeNameType.Field, "condition")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Condition;
		[NativeName(NativeNameType.Field, "filename")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Filename;
		[NativeName(NativeNameType.Field, "linenum")]
		[NativeName(NativeNameType.Type, "int")]
		public int Linenum;
		[NativeName(NativeNameType.Field, "function")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Function;
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "const SDL_AssertData*")]
		public unsafe SDLAssertData* Next;

		public unsafe SDLAssertData(int alwaysIgnore = default, uint triggerCount = default, byte* condition = default, byte* filename = default, int linenum = default, byte* function = default, SDLAssertData* next = default)
		{
			AlwaysIgnore = alwaysIgnore;
			TriggerCount = triggerCount;
			Condition = condition;
			Filename = filename;
			Linenum = linenum;
			Function = function;
			Next = next;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_atomic_t")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAtomic
	{
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "int")]
		public int Value;

		public unsafe SDLAtomic(int value = default)
		{
			Value = value;
		}


	}

	/// <summary>
	/// The SDL mutex structure, defined in SDL_sysmutex.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_mutex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMutex
	{


	}

	/// <summary>
	/// The SDL semaphore structure, defined in SDL_syssem.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_semaphore")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSemaphore
	{


	}

	/// <summary>
	/// The SDL condition variable structure, defined in SDL_syscond.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_cond")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLCond
	{


	}

	/// <summary>
	/// The SDL thread structure, defined in SDL_thread.c <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Thread")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLThread
	{


	}

	/// <summary>
	/// This is the read/write operation structure -- very basic.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_RWops")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRWops
	{
		[NativeName(NativeNameType.StructOrClass, "SDL_RWops::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct HiddenUnion
		{
			[NativeName(NativeNameType.StructOrClass, "SDL_RWops::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct WindowsioUnion
			{
				[NativeName(NativeNameType.StructOrClass, "SDL_RWops::::::")]
				[StructLayout(LayoutKind.Sequential)]
				public partial struct BufferUnion
				{
					[NativeName(NativeNameType.Field, "data")]
					[NativeName(NativeNameType.Type, "void*")]
					public unsafe void* Data;
					[NativeName(NativeNameType.Field, "size")]
					[NativeName(NativeNameType.Type, "size_t")]
					public ulong Size;
					[NativeName(NativeNameType.Field, "left")]
					[NativeName(NativeNameType.Type, "size_t")]
					public ulong Left;

					public unsafe BufferUnion(void* data = default, ulong size = default, ulong left = default)
					{
						Data = data;
						Size = size;
						Left = left;
					}


				}

				[NativeName(NativeNameType.Field, "append")]
				[NativeName(NativeNameType.Type, "SDL_bool")]
				public SDLBool Append;
				[NativeName(NativeNameType.Field, "h")]
				[NativeName(NativeNameType.Type, "void*")]
				public unsafe void* H;
				[NativeName(NativeNameType.Field, "buffer")]
				[NativeName(NativeNameType.Type, "")]
				public BufferUnion Buffer;

				public unsafe WindowsioUnion(SDLBool append = default, void* h = default, BufferUnion buffer = default)
				{
					Append = append;
					H = h;
					Buffer = buffer;
				}


			}

			[NativeName(NativeNameType.StructOrClass, "SDL_RWops::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct MemUnion
			{
				[NativeName(NativeNameType.Field, "base")]
				[NativeName(NativeNameType.Type, "Uint8*")]
				public unsafe byte* Base;
				[NativeName(NativeNameType.Field, "here")]
				[NativeName(NativeNameType.Type, "Uint8*")]
				public unsafe byte* Here;
				[NativeName(NativeNameType.Field, "stop")]
				[NativeName(NativeNameType.Type, "Uint8*")]
				public unsafe byte* Stop;

				public unsafe MemUnion(byte* baseValue = default, byte* here = default, byte* stop = default)
				{
					Base = baseValue;
					Here = here;
					Stop = stop;
				}


			}

			[NativeName(NativeNameType.StructOrClass, "SDL_RWops::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct UnknownUnion
			{
				[NativeName(NativeNameType.Field, "data1")]
				[NativeName(NativeNameType.Type, "void*")]
				public unsafe void* Data1;
				[NativeName(NativeNameType.Field, "data2")]
				[NativeName(NativeNameType.Type, "void*")]
				public unsafe void* Data2;

				public unsafe UnknownUnion(void* data1 = default, void* data2 = default)
				{
					Data1 = data1;
					Data2 = data2;
				}


			}

			[NativeName(NativeNameType.Field, "windowsio")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public WindowsioUnion Windowsio;
			[NativeName(NativeNameType.Field, "mem")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public MemUnion Mem;
			[NativeName(NativeNameType.Field, "unknown")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public UnknownUnion Unknown;

			public unsafe HiddenUnion(WindowsioUnion windowsio = default, MemUnion mem = default, UnknownUnion unknown = default)
			{
				Windowsio = windowsio;
				Mem = mem;
				Unknown = unknown;
			}


		}

		/// <summary>
		/// Return the size of the file in this rwops, or -1 if unknown<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "Sint64 (*)(SDL_RWops* context)*")]
		public unsafe void* Size;

		/// <summary>
		/// Seek to <br/>
		/// relative to <br/>
		/// one of stdio's whence values:<br/>
		/// RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "seek")]
		[NativeName(NativeNameType.Type, "Sint64 (*)(SDL_RWops* context, Sint64 offset, int whence)*")]
		public unsafe void* Seek;

		/// <summary>
		/// Read up to <br/>
		/// objects each of size <br/>
		/// from the data<br/>
		/// stream to the area pointed at by <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "read")]
		[NativeName(NativeNameType.Type, "size_t (*)(SDL_RWops* context, void* ptr, size_t size, size_t maxnum)*")]
		public unsafe void* Read;

		/// <summary>
		/// Write exactly <br/>
		/// objects each of size <br/>
		/// from the area<br/>
		/// pointed at by <br/>
		/// to data stream.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "write")]
		[NativeName(NativeNameType.Type, "size_t (*)(SDL_RWops* context, const void* ptr, size_t size, size_t num)*")]
		public unsafe void* Write;

		/// <summary>
		/// Close and free an allocated SDL_RWops structure.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "close")]
		[NativeName(NativeNameType.Type, "int (*)(SDL_RWops* context)*")]
		public unsafe void* Close;

		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;
		[NativeName(NativeNameType.Field, "hidden")]
		[NativeName(NativeNameType.Type, "")]
		public HiddenUnion Hidden;

		public unsafe SDLRWops(delegate*<SDLRWops*, long> size = default, delegate*<SDLRWops*, long, int, long> seek = default, delegate*<SDLRWops*, void*, ulong, ulong, ulong> read = default, delegate*<SDLRWops*, void*, ulong, ulong, ulong> write = default, delegate*<SDLRWops*, int> close = default, uint type = default, HiddenUnion union = default)
		{
			Size = (void*)size;
			Seek = (void*)seek;
			Read = (void*)read;
			Write = (void*)write;
			Close = (void*)close;
			Type = type;
            Hidden = union;
		}


	}

	/// <summary>
	/// The calculated values in this structure are calculated by SDL_OpenAudio().<br/>
	/// For multi-channel audio, the default SDL channel mapping is:<br/>
	/// 2:  FL  FR                          (stereo)<br/>
	/// 3:  FL  FR LFE                      (2.1 surround)<br/>
	/// 4:  FL  FR  BL  BR                  (quad)<br/>
	/// 5:  FL  FR LFE  BL  BR              (4.1 surround)<br/>
	/// 6:  FL  FR  FC LFE  SL  SR          (5.1 surround - last two can also be BL BR)<br/>
	/// 7:  FL  FR  FC LFE  BC  SL  SR      (6.1 surround)<br/>
	/// 8:  FL  FR  FC LFE  BL  BR  SL  SR  (7.1 surround)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_AudioSpec")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAudioSpec
	{
		/// <summary>
		/// DSP frequency -- samples per second <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "freq")]
		[NativeName(NativeNameType.Type, "int")]
		public int Freq;

		/// <summary>
		/// Audio data format <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "SDL_AudioFormat")]
		public ushort Format;

		/// <summary>
		/// Number of channels: 1 mono, 2 stereo <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "channels")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Channels;

		/// <summary>
		/// Audio buffer silence value (calculated) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "silence")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Silence;

		/// <summary>
		/// Audio buffer size in sample FRAMES (total samples divided by channel count) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Samples;

		/// <summary>
		/// Necessary for some compile environments <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Padding;

		/// <summary>
		/// Audio buffer size in bytes (calculated) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "size")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Size;

		/// <summary>
		/// Callback that feeds the audio device (NULL to use SDL_QueueAudio()). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "callback")]
		[NativeName(NativeNameType.Type, "SDL_AudioCallback")]
		public unsafe void* Callback;
		/// <summary>
		/// Userdata passed to callback (ignored for NULL callbacks). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userdata")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Userdata;


		public unsafe SDLAudioSpec(int freq = default, ushort format = default, byte channels = default, byte silence = default, ushort samples = default, ushort padding = default, uint size = default, SDLAudioCallback callback = default, void* userdata = default)
		{
			Freq = freq;
			Format = format;
			Channels = channels;
			Silence = silence;
			Samples = samples;
			Padding = padding;
			Size = size;
			Callback = (void*)Marshal.GetFunctionPointerForDelegate(callback);
			Userdata = userdata;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_AudioCVT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAudioCVT
	{
		/// <summary>
		/// Set to 1 if conversion possible <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "needed")]
		[NativeName(NativeNameType.Type, "int")]
		public int Needed;

		/// <summary>
		/// Source audio format <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "src_format")]
		[NativeName(NativeNameType.Type, "SDL_AudioFormat")]
		public ushort SrcFormat;

		/// <summary>
		/// Target audio format <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dst_format")]
		[NativeName(NativeNameType.Type, "SDL_AudioFormat")]
		public ushort DstFormat;

		/// <summary>
		/// Rate conversion increment <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "rate_incr")]
		[NativeName(NativeNameType.Type, "double")]
		public double RateIncr;

		/// <summary>
		/// Buffer to hold entire audio data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buf")]
		[NativeName(NativeNameType.Type, "Uint8*")]
		public unsafe byte* Buf;

		/// <summary>
		/// Length of original audio buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "len")]
		[NativeName(NativeNameType.Type, "int")]
		public int Len;

		/// <summary>
		/// Length of converted audio buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "len_cvt")]
		[NativeName(NativeNameType.Type, "int")]
		public int LenCvt;

		/// <summary>
		/// buffer must be len*len_mult big <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "len_mult")]
		[NativeName(NativeNameType.Type, "int")]
		public int LenMult;

		/// <summary>
		/// Given len, final size is len*len_ratio <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "len_ratio")]
		[NativeName(NativeNameType.Type, "double")]
		public double LenRatio;

		/// <summary>
		/// NULL-terminated list of filter functions <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "filters")]
		[NativeName(NativeNameType.Type, "void (*)()*[10]")]
		public nint Filters_0;
		public nint Filters_1;
		public nint Filters_2;
		public nint Filters_3;
		public nint Filters_4;
		public nint Filters_5;
		public nint Filters_6;
		public nint Filters_7;
		public nint Filters_8;
		public nint Filters_9;

		/// <summary>
		/// Current audio conversion function <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "filter_index")]
		[NativeName(NativeNameType.Type, "int")]
		public int FilterIndex;


		public unsafe SDLAudioCVT(int needed = default, ushort srcFormat = default, ushort dstFormat = default, double rateIncr = default, byte* buf = default, int len = default, int lenCvt = default, int lenMult = default, double lenRatio = default, nint* filters = default, int filterIndex = default)
		{
			Needed = needed;
			SrcFormat = srcFormat;
			DstFormat = dstFormat;
			RateIncr = rateIncr;
			Buf = buf;
			Len = len;
			LenCvt = lenCvt;
			LenMult = lenMult;
			LenRatio = lenRatio;
			if (filters != default)
			{
				Filters_0 = filters[0];
				Filters_1 = filters[1];
				Filters_2 = filters[2];
				Filters_3 = filters[3];
				Filters_4 = filters[4];
				Filters_5 = filters[5];
				Filters_6 = filters[6];
				Filters_7 = filters[7];
				Filters_8 = filters[8];
				Filters_9 = filters[9];
			}
			FilterIndex = filterIndex;
		}

		public unsafe SDLAudioCVT(int needed = default, ushort srcFormat = default, ushort dstFormat = default, double rateIncr = default, byte* buf = default, int len = default, int lenCvt = default, int lenMult = default, double lenRatio = default, Span<nint> filters = default, int filterIndex = default)
		{
			Needed = needed;
			SrcFormat = srcFormat;
			DstFormat = dstFormat;
			RateIncr = rateIncr;
			Buf = buf;
			Len = len;
			LenCvt = lenCvt;
			LenMult = lenMult;
			LenRatio = lenRatio;
			if (filters != default)
			{
				Filters_0 = filters[0];
				Filters_1 = filters[1];
				Filters_2 = filters[2];
				Filters_3 = filters[3];
				Filters_4 = filters[4];
				Filters_5 = filters[5];
				Filters_6 = filters[6];
				Filters_7 = filters[7];
				Filters_8 = filters[8];
				Filters_9 = filters[9];
			}
			FilterIndex = filterIndex;
		}


		/// <summary>
		/// NULL-terminated list of filter functions <br/>
		/// </summary>
		public unsafe Span<nint> Filters
		
		{
			get
			{
				fixed (nint* p = &this.Filters_0)
				{
					return new Span<nint>(p, 10);
				}
			}
		}
	}

	/// <summary>
	/// SDL_AudioStream is a new audio conversion interface.<br/>
	/// The benefits vs SDL_AudioCVT:<br/>
	/// - it can handle resampling data in chunks without generating<br/>
	/// artifacts, when it doesn't have the complete buffer available.<br/>
	/// - it can handle incoming data in any variable size.<br/>
	/// - You push data as you have it, and pull it when you need it<br/>
	/// this is opaque to the outside world. <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_SDL_AudioStream")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAudioStream
	{


	}

	/// <summary>
	/// The bits of this structure can be directly reinterpreted as an integer-packed<br/>
	/// color which uses the SDL_PIXELFORMAT_RGBA32 format (SDL_PIXELFORMAT_ABGR8888<br/>
	/// on little-endian systems and SDL_PIXELFORMAT_RGBA8888 on big-endian systems).<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Color")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLColor
	{
		[NativeName(NativeNameType.Field, "r")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte R;
		[NativeName(NativeNameType.Field, "g")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte G;
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte B;
		[NativeName(NativeNameType.Field, "a")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte A;

		public unsafe SDLColor(byte r = default, byte g = default, byte b = default, byte a = default)
		{
			R = r;
			G = g;
			B = b;
			A = a;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_Palette")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLPalette
	{
		[NativeName(NativeNameType.Field, "ncolors")]
		[NativeName(NativeNameType.Type, "int")]
		public int Ncolors;
		[NativeName(NativeNameType.Field, "colors")]
		[NativeName(NativeNameType.Type, "SDL_Color*")]
		public unsafe SDLColor* Colors;
		[NativeName(NativeNameType.Field, "version")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Version;
		[NativeName(NativeNameType.Field, "refcount")]
		[NativeName(NativeNameType.Type, "int")]
		public int Refcount;

		public unsafe SDLPalette(int ncolors = default, SDLColor* colors = default, uint version = default, int refcount = default)
		{
			Ncolors = ncolors;
			Colors = colors;
			Version = version;
			Refcount = refcount;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_PixelFormat")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLPixelFormat
	{
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Format;
		[NativeName(NativeNameType.Field, "palette")]
		[NativeName(NativeNameType.Type, "SDL_Palette*")]
		public unsafe SDLPalette* Palette;
		[NativeName(NativeNameType.Field, "BitsPerPixel")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte BitsPerPixel;
		[NativeName(NativeNameType.Field, "BytesPerPixel")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte BytesPerPixel;
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint8[2]")]
		public byte Padding_0;
		public byte Padding_1;
		[NativeName(NativeNameType.Field, "Rmask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Rmask;
		[NativeName(NativeNameType.Field, "Gmask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Gmask;
		[NativeName(NativeNameType.Field, "Bmask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Bmask;
		[NativeName(NativeNameType.Field, "Amask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Amask;
		[NativeName(NativeNameType.Field, "Rloss")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Rloss;
		[NativeName(NativeNameType.Field, "Gloss")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Gloss;
		[NativeName(NativeNameType.Field, "Bloss")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Bloss;
		[NativeName(NativeNameType.Field, "Aloss")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Aloss;
		[NativeName(NativeNameType.Field, "Rshift")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Rshift;
		[NativeName(NativeNameType.Field, "Gshift")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Gshift;
		[NativeName(NativeNameType.Field, "Bshift")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Bshift;
		[NativeName(NativeNameType.Field, "Ashift")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Ashift;
		[NativeName(NativeNameType.Field, "refcount")]
		[NativeName(NativeNameType.Type, "int")]
		public int Refcount;
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "SDL_PixelFormat*")]
		public unsafe SDLPixelFormat* Next;

		public unsafe SDLPixelFormat(uint format = default, SDLPalette* palette = default, byte bitsPerPixel = default, byte bytesPerPixel = default, byte* padding = default, uint rmask = default, uint gmask = default, uint bmask = default, uint amask = default, byte rloss = default, byte gloss = default, byte bloss = default, byte aloss = default, byte rshift = default, byte gshift = default, byte bshift = default, byte ashift = default, int refcount = default, SDLPixelFormat* next = default)
		{
			Format = format;
			Palette = palette;
			BitsPerPixel = bitsPerPixel;
			BytesPerPixel = bytesPerPixel;
			if (padding != default)
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
			}
			Rmask = rmask;
			Gmask = gmask;
			Bmask = bmask;
			Amask = amask;
			Rloss = rloss;
			Gloss = gloss;
			Bloss = bloss;
			Aloss = aloss;
			Rshift = rshift;
			Gshift = gshift;
			Bshift = bshift;
			Ashift = ashift;
			Refcount = refcount;
			Next = next;
		}

		public unsafe SDLPixelFormat(uint format = default, SDLPalette* palette = default, byte bitsPerPixel = default, byte bytesPerPixel = default, Span<byte> padding = default, uint rmask = default, uint gmask = default, uint bmask = default, uint amask = default, byte rloss = default, byte gloss = default, byte bloss = default, byte aloss = default, byte rshift = default, byte gshift = default, byte bshift = default, byte ashift = default, int refcount = default, SDLPixelFormat* next = default)
		{
			Format = format;
			Palette = palette;
			BitsPerPixel = bitsPerPixel;
			BytesPerPixel = bytesPerPixel;
			if (padding != default)
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
			}
			Rmask = rmask;
			Gmask = gmask;
			Bmask = bmask;
			Amask = amask;
			Rloss = rloss;
			Gloss = gloss;
			Bloss = bloss;
			Aloss = aloss;
			Rshift = rshift;
			Gshift = gshift;
			Bshift = bshift;
			Ashift = ashift;
			Refcount = refcount;
			Next = next;
		}


	}

	/// <summary>
	/// The structure that defines a point (integer)<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Point")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLPoint
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "int")]
		public int X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "int")]
		public int Y;

		public unsafe SDLPoint(int x = default, int y = default)
		{
			X = x;
			Y = y;
		}


	}

	/// <summary>
	/// The structure that defines a point (floating point)<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_FPoint")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLFPoint
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		public unsafe SDLFPoint(float x = default, float y = default)
		{
			X = x;
			Y = y;
		}


	}

	/// <summary>
	/// A rectangle, with the origin at the upper left (integer).<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Rect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRect
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "int")]
		public int X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "int")]
		public int Y;
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "int")]
		public int W;
		[NativeName(NativeNameType.Field, "h")]
		[NativeName(NativeNameType.Type, "int")]
		public int H;

		public unsafe SDLRect(int x = default, int y = default, int w = default, int h = default)
		{
			X = x;
			Y = y;
			W = w;
			H = h;
		}


	}

	/// <summary>
	/// A rectangle, with the origin at the upper left (floating point).<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_FRect")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLFRect
	{
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "float")]
		public float W;
		[NativeName(NativeNameType.Field, "h")]
		[NativeName(NativeNameType.Type, "float")]
		public float H;

		public unsafe SDLFRect(float x = default, float y = default, float w = default, float h = default)
		{
			X = x;
			Y = y;
			W = w;
			H = h;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_BlitMap")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLBlitMap
	{


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Surface")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSurface
	{
		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "SDL_PixelFormat*")]
		public unsafe SDLPixelFormat* Format;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "int")]
		public int W;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "h")]
		[NativeName(NativeNameType.Type, "int")]
		public int H;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pitch")]
		[NativeName(NativeNameType.Type, "int")]
		public int Pitch;

		/// <summary>
		/// Read-write <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pixels")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Pixels;

		/// <summary>
		/// Read-write <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userdata")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Userdata;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "locked")]
		[NativeName(NativeNameType.Type, "int")]
		public int Locked;

		/// <summary>
		/// Private <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "list_blitmap")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* ListBlitmap;

		/// <summary>
		/// Read-only <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "clip_rect")]
		[NativeName(NativeNameType.Type, "SDL_Rect")]
		public SDLRect ClipRect;

		/// <summary>
		/// Private <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "map")]
		[NativeName(NativeNameType.Type, "SDL_BlitMap*")]
		public unsafe SDLBlitMap* Map;

		/// <summary>
		/// Read-mostly <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "refcount")]
		[NativeName(NativeNameType.Type, "int")]
		public int Refcount;


		public unsafe SDLSurface(uint flags = default, SDLPixelFormat* format = default, int w = default, int h = default, int pitch = default, void* pixels = default, void* userdata = default, int locked = default, void* listBlitmap = default, SDLRect clipRect = default, SDLBlitMap* map = default, int refcount = default)
		{
			Flags = flags;
			Format = format;
			W = w;
			H = h;
			Pitch = pitch;
			Pixels = pixels;
			Userdata = userdata;
			Locked = locked;
			ListBlitmap = listBlitmap;
			ClipRect = clipRect;
			Map = map;
			Refcount = refcount;
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_DisplayMode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLDisplayMode
	{
		/// <summary>
		/// pixel format <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "format")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Format;

		/// <summary>
		/// width, in screen coordinates <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "int")]
		public int W;

		/// <summary>
		/// height, in screen coordinates <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "h")]
		[NativeName(NativeNameType.Type, "int")]
		public int H;

		/// <summary>
		/// refresh rate (or zero for unspecified) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "refresh_rate")]
		[NativeName(NativeNameType.Type, "int")]
		public int RefreshRate;

		/// <summary>
		/// driver-specific data, initialize to 0 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "driverdata")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Driverdata;


		public unsafe SDLDisplayMode(uint format = default, int w = default, int h = default, int refreshRate = default, void* driverdata = default)
		{
			Format = format;
			W = w;
			H = h;
			RefreshRate = refreshRate;
			Driverdata = driverdata;
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Window")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLWindow
	{


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Keysym")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLKeysym
	{
		/// <summary>
		/// SDL physical key code - see ::SDL_Scancode for details <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "scancode")]
		[NativeName(NativeNameType.Type, "SDL_Scancode")]
		public SDLScancode Scancode;

		/// <summary>
		/// SDL virtual key code - see ::SDL_Keycode for details <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sym")]
		[NativeName(NativeNameType.Type, "SDL_Keycode")]
		public int Sym;

		/// <summary>
		/// current key modifiers <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mod")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Mod;

		[NativeName(NativeNameType.Field, "unused")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Unused;

		public unsafe SDLKeysym(SDLScancode scancode = default, int sym = default, ushort mod = default, uint unused = default)
		{
			Scancode = scancode;
			Sym = sym;
			Mod = mod;
			Unused = unused;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_Cursor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLCursor
	{


	}

	/// <summary>
	/// An SDL_GUID is a 128-bit identifier for an input device that<br/>
	/// identifies that device across runs of SDL programs on the same<br/>
	/// platform.  If the device is detached and then re-attached to a<br/>
	/// different port, or if the base system is rebooted, the device<br/>
	/// should still report the same GUID.<br/>
	/// GUIDs are as precise as possible but are not guaranteed to<br/>
	/// distinguish physically distinct but equivalent devices.  For<br/>
	/// example, two game controllers from the same vendor with the same<br/>
	/// product ID and revision may have the same GUID.<br/>
	/// GUIDs may be platform-dependent (i.e., the same device may report<br/>
	/// different GUIDs on different operating systems).<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_GUID")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SdlGuid
	{
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "Uint8[16]")]
		public byte Data_0;
		public byte Data_1;
		public byte Data_2;
		public byte Data_3;
		public byte Data_4;
		public byte Data_5;
		public byte Data_6;
		public byte Data_7;
		public byte Data_8;
		public byte Data_9;
		public byte Data_10;
		public byte Data_11;
		public byte Data_12;
		public byte Data_13;
		public byte Data_14;
		public byte Data_15;

		public unsafe SdlGuid(byte* data = default)
		{
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
				Data_6 = data[6];
				Data_7 = data[7];
				Data_8 = data[8];
				Data_9 = data[9];
				Data_10 = data[10];
				Data_11 = data[11];
				Data_12 = data[12];
				Data_13 = data[13];
				Data_14 = data[14];
				Data_15 = data[15];
			}
		}

		public unsafe SdlGuid(Span<byte> data = default)
		{
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
				Data_6 = data[6];
				Data_7 = data[7];
				Data_8 = data[8];
				Data_9 = data[9];
				Data_10 = data[10];
				Data_11 = data[11];
				Data_12 = data[12];
				Data_13 = data[13];
				Data_14 = data[14];
				Data_15 = data[15];
			}
		}


	}

	[NativeName(NativeNameType.StructOrClass, "_SDL_Joystick")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoystick
	{


	}

	/// <summary>
	/// The structure that defines an extended virtual joystick description<br/>
	/// The caller must zero the structure and then initialize the version with `SDL_VIRTUAL_JOYSTICK_DESC_VERSION` before passing it to SDL_JoystickAttachVirtualEx()<br/>
	/// All other elements of this structure are optional and can be left 0.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_VirtualJoystickDesc")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLVirtualJoystickDesc
	{
		/// <summary>
		/// `SDL_VIRTUAL_JOYSTICK_DESC_VERSION` <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "version")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Version;

		/// <summary>
		/// `SDL_JoystickType` <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// the number of axes on this joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "naxes")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Naxes;

		/// <summary>
		/// the number of buttons on this joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nbuttons")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Nbuttons;

		/// <summary>
		/// the number of hats on this joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nhats")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Nhats;

		/// <summary>
		/// the USB vendor ID of this joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vendor_id")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort VendorId;

		/// <summary>
		/// the USB product ID of this joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "product_id")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort ProductId;

		/// <summary>
		/// unused <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Padding;

		/// <summary>
		/// A mask of which buttons are valid for this controller<br/>
		/// e.g. (1 <br/>
		/// <<br/>
		/// <<br/>
		/// SDL_CONTROLLER_BUTTON_A) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button_mask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint ButtonMask;

		/// <summary>
		/// A mask of which axes are valid for this controller<br/>
		/// e.g. (1 <br/>
		/// <<br/>
		/// <<br/>
		/// SDL_CONTROLLER_AXIS_LEFTX) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "axis_mask")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint AxisMask;

		/// <summary>
		/// the name of the joystick <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// User data pointer passed to callbacks <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userdata")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Userdata;

		/// <summary>
		/// Called when the joystick state should be updated <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Update")]
		[NativeName(NativeNameType.Type, "void (*)(void* userdata)*")]
		public unsafe void* Update;

		/// <summary>
		/// Called when the player index is set <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetPlayerIndex")]
		[NativeName(NativeNameType.Type, "void (*)(void* userdata, int player_index)*")]
		public unsafe void* SetPlayerIndex;

		/// <summary>
		/// Implements SDL_JoystickRumble() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rumble")]
		[NativeName(NativeNameType.Type, "int (*)(void* userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble)*")]
		public unsafe void* Rumble;

		/// <summary>
		/// Implements SDL_JoystickRumbleTriggers() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RumbleTriggers")]
		[NativeName(NativeNameType.Type, "int (*)(void* userdata, Uint16 left_rumble, Uint16 right_rumble)*")]
		public unsafe void* RumbleTriggers;

		/// <summary>
		/// Implements SDL_JoystickSetLED() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SetLED")]
		[NativeName(NativeNameType.Type, "int (*)(void* userdata, Uint8 red, Uint8 green, Uint8 blue)*")]
		public unsafe void* SetLED;

		/// <summary>
		/// Implements SDL_JoystickSendEffect() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SendEffect")]
		[NativeName(NativeNameType.Type, "int (*)(void* userdata, const void* data, int size)*")]
		public unsafe void* SendEffect;


		public unsafe SDLVirtualJoystickDesc(ushort version = default, ushort type = default, ushort naxes = default, ushort nbuttons = default, ushort nhats = default, ushort vendorId = default, ushort productId = default, ushort padding = default, uint buttonMask = default, uint axisMask = default, byte* name = default, void* userdata = default, delegate*<void*, void> update = default, delegate*<void*, int, void> setPlayerIndex = default, delegate*<void*, ushort, ushort, int> rumble = default, delegate*<void*, ushort, ushort, int> rumbleTriggers = default, delegate*<void*, byte, byte, byte, int> setLed = default, delegate*<void*, void*, int, int> sendEffect = default)
		{
			Version = version;
			Type = type;
			Naxes = naxes;
			Nbuttons = nbuttons;
			Nhats = nhats;
			VendorId = vendorId;
			ProductId = productId;
			Padding = padding;
			ButtonMask = buttonMask;
			AxisMask = axisMask;
			Name = name;
			Userdata = userdata;
			Update = (void*)update;
			SetPlayerIndex = (void*)setPlayerIndex;
			Rumble = (void*)rumble;
			RumbleTriggers = (void*)rumbleTriggers;
			SetLED = (void*)setLed;
			SendEffect = (void*)sendEffect;
		}


	}

	/// <summary>
	/// <br/>
	/// In order to use these functions, SDL_Init() must have been called<br/>
	/// with the ::SDL_INIT_SENSOR flag.  This causes SDL to scan the system<br/>
	/// for sensors, and load appropriate drivers.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_SDL_Sensor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSensor
	{


	}

	/// <summary>
	/// The gamecontroller structure used to identify an SDL game controller<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_SDL_GameController")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGameController
	{


	}

	/// <summary>
	/// Get the SDL joystick layer binding for this controller button/axis mapping<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_GameControllerButtonBind")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGameControllerButtonBind
	{
		[NativeName(NativeNameType.StructOrClass, "SDL_GameControllerButtonBind::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct ValueUnion
		{
			[NativeName(NativeNameType.StructOrClass, "SDL_GameControllerButtonBind::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct HatUnion
			{
				[NativeName(NativeNameType.Field, "hat")]
				[NativeName(NativeNameType.Type, "int")]
				public int Hat;
				[NativeName(NativeNameType.Field, "hat_mask")]
				[NativeName(NativeNameType.Type, "int")]
				public int HatMask;

				public unsafe HatUnion(int hat = default, int hatMask = default)
				{
					Hat = hat;
					HatMask = hatMask;
				}


			}

			[NativeName(NativeNameType.Field, "button")]
			[NativeName(NativeNameType.Type, "int")]
			[FieldOffset(0)]
			public int Button;
			[NativeName(NativeNameType.Field, "axis")]
			[NativeName(NativeNameType.Type, "int")]
			[FieldOffset(0)]
			public int Axis;
			[NativeName(NativeNameType.Field, "hat")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public HatUnion Hat;

			public unsafe ValueUnion(int button = default, int axis = default, HatUnion hat = default)
			{
				Button = button;
				Axis = axis;
				Hat = hat;
			}


		}

		[NativeName(NativeNameType.Field, "bindType")]
		[NativeName(NativeNameType.Type, "SDL_GameControllerBindType")]
		public SDLGameControllerBindType BindType;
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "")]
		public ValueUnion Value;

		public unsafe SDLGameControllerButtonBind(SDLGameControllerBindType bindType = default, ValueUnion value = default)
		{
			BindType = bindType;
            Value = value;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_Finger")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLFinger
	{
		[NativeName(NativeNameType.Field, "id")]
		[NativeName(NativeNameType.Type, "SDL_FingerID")]
		public long Id;
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;
		[NativeName(NativeNameType.Field, "pressure")]
		[NativeName(NativeNameType.Type, "float")]
		public float Pressure;

		public unsafe SDLFinger(long id = default, float x = default, float y = default, float pressure = default)
		{
			Id = id;
			X = x;
			Y = y;
			Pressure = pressure;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_CommonEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLCommonEvent
	{
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;
		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;


		public unsafe SDLCommonEvent(uint type = default, uint timestamp = default)
		{
			Type = type;
			Timestamp = timestamp;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_DisplayEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLDisplayEvent
	{
		/// <summary>
		/// ::SDL_DISPLAYEVENT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The associated display index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Display;

		/// <summary>
		/// ::SDL_DisplayEventID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "event")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Event;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// event dependent data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data1")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Data1;


		public unsafe SDLDisplayEvent(uint type = default, uint timestamp = default, uint display = default, byte evnt = default, byte padding1 = default, byte padding2 = default, byte padding3 = default, int data1 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Display = display;
			Event = evnt;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
			Data1 = data1;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_WindowEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLWindowEvent
	{
		/// <summary>
		/// ::SDL_WINDOWEVENT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The associated window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// ::SDL_WindowEventID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "event")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Event;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// event dependent data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data1")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Data1;

		/// <summary>
		/// event dependent data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data2")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Data2;


		public unsafe SDLWindowEvent(uint type = default, uint timestamp = default, uint windowID = default, byte evnt = default, byte padding1 = default, byte padding2 = default, byte padding3 = default, int data1 = default, int data2 = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Event = evnt;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
			Data1 = data1;
			Data2 = data2;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_KeyboardEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLKeyboardEvent
	{
		/// <summary>
		/// ::SDL_KEYDOWN or ::SDL_KEYUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with keyboard focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// ::SDL_PRESSED or ::SDL_RELEASED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "state")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte State;

		/// <summary>
		/// Non-zero if this is a key repeat <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "repeat")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Repeat;

		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// The key that was pressed or released <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "keysym")]
		[NativeName(NativeNameType.Type, "SDL_Keysym")]
		public SDLKeysym Keysym;


		public unsafe SDLKeyboardEvent(uint type = default, uint timestamp = default, uint windowID = default, byte state = default, byte repeat = default, byte padding2 = default, byte padding3 = default, SDLKeysym keysym = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			State = state;
			Repeat = repeat;
			Padding2 = padding2;
			Padding3 = padding3;
			Keysym = keysym;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_TextEditingEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTextEditingEvent
	{
		/// <summary>
		/// ::SDL_TEXTEDITING <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with keyboard focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The editing text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "char[32]")]
		public byte Text_0;
		public byte Text_1;
		public byte Text_2;
		public byte Text_3;
		public byte Text_4;
		public byte Text_5;
		public byte Text_6;
		public byte Text_7;
		public byte Text_8;
		public byte Text_9;
		public byte Text_10;
		public byte Text_11;
		public byte Text_12;
		public byte Text_13;
		public byte Text_14;
		public byte Text_15;
		public byte Text_16;
		public byte Text_17;
		public byte Text_18;
		public byte Text_19;
		public byte Text_20;
		public byte Text_21;
		public byte Text_22;
		public byte Text_23;
		public byte Text_24;
		public byte Text_25;
		public byte Text_26;
		public byte Text_27;
		public byte Text_28;
		public byte Text_29;
		public byte Text_30;
		public byte Text_31;

		/// <summary>
		/// The start cursor of selected editing text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "start")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Start;

		/// <summary>
		/// The length of selected editing text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Length;


		public unsafe SDLTextEditingEvent(uint type = default, uint timestamp = default, uint windowID = default, byte* text = default, int start = default, int length = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			if (text != default)
			{
				Text_0 = text[0];
				Text_1 = text[1];
				Text_2 = text[2];
				Text_3 = text[3];
				Text_4 = text[4];
				Text_5 = text[5];
				Text_6 = text[6];
				Text_7 = text[7];
				Text_8 = text[8];
				Text_9 = text[9];
				Text_10 = text[10];
				Text_11 = text[11];
				Text_12 = text[12];
				Text_13 = text[13];
				Text_14 = text[14];
				Text_15 = text[15];
				Text_16 = text[16];
				Text_17 = text[17];
				Text_18 = text[18];
				Text_19 = text[19];
				Text_20 = text[20];
				Text_21 = text[21];
				Text_22 = text[22];
				Text_23 = text[23];
				Text_24 = text[24];
				Text_25 = text[25];
				Text_26 = text[26];
				Text_27 = text[27];
				Text_28 = text[28];
				Text_29 = text[29];
				Text_30 = text[30];
				Text_31 = text[31];
			}
			Start = start;
			Length = length;
		}

		public unsafe SDLTextEditingEvent(uint type = default, uint timestamp = default, uint windowID = default, Span<byte> text = default, int start = default, int length = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			if (text != default)
			{
				Text_0 = text[0];
				Text_1 = text[1];
				Text_2 = text[2];
				Text_3 = text[3];
				Text_4 = text[4];
				Text_5 = text[5];
				Text_6 = text[6];
				Text_7 = text[7];
				Text_8 = text[8];
				Text_9 = text[9];
				Text_10 = text[10];
				Text_11 = text[11];
				Text_12 = text[12];
				Text_13 = text[13];
				Text_14 = text[14];
				Text_15 = text[15];
				Text_16 = text[16];
				Text_17 = text[17];
				Text_18 = text[18];
				Text_19 = text[19];
				Text_20 = text[20];
				Text_21 = text[21];
				Text_22 = text[22];
				Text_23 = text[23];
				Text_24 = text[24];
				Text_25 = text[25];
				Text_26 = text[26];
				Text_27 = text[27];
				Text_28 = text[28];
				Text_29 = text[29];
				Text_30 = text[30];
				Text_31 = text[31];
			}
			Start = start;
			Length = length;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_TextEditingExtEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTextEditingExtEvent
	{
		/// <summary>
		/// ::SDL_TEXTEDITING_EXT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with keyboard focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The editing text, which should be freed with SDL_free(), and will not be NULL <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Text;

		/// <summary>
		/// The start cursor of selected editing text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "start")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Start;

		/// <summary>
		/// The length of selected editing text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Length;


		public unsafe SDLTextEditingExtEvent(uint type = default, uint timestamp = default, uint windowID = default, byte* text = default, int start = default, int length = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Text = text;
			Start = start;
			Length = length;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_TextInputEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTextInputEvent
	{
		/// <summary>
		/// ::SDL_TEXTINPUT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with keyboard focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The input text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "char[32]")]
		public byte Text_0;
		public byte Text_1;
		public byte Text_2;
		public byte Text_3;
		public byte Text_4;
		public byte Text_5;
		public byte Text_6;
		public byte Text_7;
		public byte Text_8;
		public byte Text_9;
		public byte Text_10;
		public byte Text_11;
		public byte Text_12;
		public byte Text_13;
		public byte Text_14;
		public byte Text_15;
		public byte Text_16;
		public byte Text_17;
		public byte Text_18;
		public byte Text_19;
		public byte Text_20;
		public byte Text_21;
		public byte Text_22;
		public byte Text_23;
		public byte Text_24;
		public byte Text_25;
		public byte Text_26;
		public byte Text_27;
		public byte Text_28;
		public byte Text_29;
		public byte Text_30;
		public byte Text_31;


		public unsafe SDLTextInputEvent(uint type = default, uint timestamp = default, uint windowID = default, byte* text = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			if (text != default)
			{
				Text_0 = text[0];
				Text_1 = text[1];
				Text_2 = text[2];
				Text_3 = text[3];
				Text_4 = text[4];
				Text_5 = text[5];
				Text_6 = text[6];
				Text_7 = text[7];
				Text_8 = text[8];
				Text_9 = text[9];
				Text_10 = text[10];
				Text_11 = text[11];
				Text_12 = text[12];
				Text_13 = text[13];
				Text_14 = text[14];
				Text_15 = text[15];
				Text_16 = text[16];
				Text_17 = text[17];
				Text_18 = text[18];
				Text_19 = text[19];
				Text_20 = text[20];
				Text_21 = text[21];
				Text_22 = text[22];
				Text_23 = text[23];
				Text_24 = text[24];
				Text_25 = text[25];
				Text_26 = text[26];
				Text_27 = text[27];
				Text_28 = text[28];
				Text_29 = text[29];
				Text_30 = text[30];
				Text_31 = text[31];
			}
		}

		public unsafe SDLTextInputEvent(uint type = default, uint timestamp = default, uint windowID = default, Span<byte> text = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			if (text != default)
			{
				Text_0 = text[0];
				Text_1 = text[1];
				Text_2 = text[2];
				Text_3 = text[3];
				Text_4 = text[4];
				Text_5 = text[5];
				Text_6 = text[6];
				Text_7 = text[7];
				Text_8 = text[8];
				Text_9 = text[9];
				Text_10 = text[10];
				Text_11 = text[11];
				Text_12 = text[12];
				Text_13 = text[13];
				Text_14 = text[14];
				Text_15 = text[15];
				Text_16 = text[16];
				Text_17 = text[17];
				Text_18 = text[18];
				Text_19 = text[19];
				Text_20 = text[20];
				Text_21 = text[21];
				Text_22 = text[22];
				Text_23 = text[23];
				Text_24 = text[24];
				Text_25 = text[25];
				Text_26 = text[26];
				Text_27 = text[27];
				Text_28 = text[28];
				Text_29 = text[29];
				Text_30 = text[30];
				Text_31 = text[31];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MouseMotionEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMouseMotionEvent
	{
		/// <summary>
		/// ::SDL_MOUSEMOTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with mouse focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The mouse instance id, or SDL_TOUCH_MOUSEID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Which;

		/// <summary>
		/// The current button state <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "state")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint State;

		/// <summary>
		/// X coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int X;

		/// <summary>
		/// Y coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Y;

		/// <summary>
		/// The relative motion in the X direction <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "xrel")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Xrel;

		/// <summary>
		/// The relative motion in the Y direction <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "yrel")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Yrel;


		public unsafe SDLMouseMotionEvent(uint type = default, uint timestamp = default, uint windowID = default, uint which = default, uint state = default, int x = default, int y = default, int xrel = default, int yrel = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Which = which;
			State = state;
			X = x;
			Y = y;
			Xrel = xrel;
			Yrel = yrel;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MouseButtonEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMouseButtonEvent
	{
		/// <summary>
		/// ::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with mouse focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The mouse instance id, or SDL_TOUCH_MOUSEID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Which;

		/// <summary>
		/// The mouse button index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Button;

		/// <summary>
		/// ::SDL_PRESSED or ::SDL_RELEASED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "state")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte State;

		/// <summary>
		/// 1 for single-click, 2 for double-click, etc. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "clicks")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Clicks;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		/// <summary>
		/// X coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int X;

		/// <summary>
		/// Y coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Y;


		public unsafe SDLMouseButtonEvent(uint type = default, uint timestamp = default, uint windowID = default, uint which = default, byte button = default, byte state = default, byte clicks = default, byte padding1 = default, int x = default, int y = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Which = which;
			Button = button;
			State = state;
			Clicks = clicks;
			Padding1 = padding1;
			X = x;
			Y = y;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MouseWheelEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMouseWheelEvent
	{
		/// <summary>
		/// ::SDL_MOUSEWHEEL <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The window with mouse focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// The mouse instance id, or SDL_TOUCH_MOUSEID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Which;

		/// <summary>
		/// The amount scrolled horizontally, positive to the right and negative to the left <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int X;

		/// <summary>
		/// The amount scrolled vertically, positive away from the user and negative toward the user <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Y;

		/// <summary>
		/// Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Direction;

		/// <summary>
		/// The amount scrolled horizontally, positive to the right and negative to the left, with float precision (added in 2.0.18) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "preciseX")]
		[NativeName(NativeNameType.Type, "float")]
		public float PreciseX;

		/// <summary>
		/// The amount scrolled vertically, positive away from the user and negative toward the user, with float precision (added in 2.0.18) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "preciseY")]
		[NativeName(NativeNameType.Type, "float")]
		public float PreciseY;

		/// <summary>
		/// X coordinate, relative to window (added in 2.26.0) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mouseX")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int MouseX;

		/// <summary>
		/// Y coordinate, relative to window (added in 2.26.0) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mouseY")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int MouseY;


		public unsafe SDLMouseWheelEvent(uint type = default, uint timestamp = default, uint windowID = default, uint which = default, int x = default, int y = default, uint direction = default, float preciseX = default, float preciseY = default, int mouseX = default, int mouseY = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Which = which;
			X = x;
			Y = y;
			Direction = direction;
			PreciseX = preciseX;
			PreciseY = preciseY;
			MouseX = mouseX;
			MouseY = mouseY;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyAxisEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyAxisEvent
	{
		/// <summary>
		/// ::SDL_JOYAXISMOTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The joystick axis index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "axis")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Axis;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// The axis value (range: -32768 to 32767) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Value;

		[NativeName(NativeNameType.Field, "padding4")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Padding4;

		public unsafe SDLJoyAxisEvent(uint type = default, uint timestamp = default, int which = default, byte axis = default, byte padding1 = default, byte padding2 = default, byte padding3 = default, short value = default, ushort padding4 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Axis = axis;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
			Value = value;
			Padding4 = padding4;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyBallEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyBallEvent
	{
		/// <summary>
		/// ::SDL_JOYBALLMOTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The joystick trackball index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ball")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Ball;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// The relative motion in the X direction <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "xrel")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Xrel;

		/// <summary>
		/// The relative motion in the Y direction <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "yrel")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Yrel;


		public unsafe SDLJoyBallEvent(uint type = default, uint timestamp = default, int which = default, byte ball = default, byte padding1 = default, byte padding2 = default, byte padding3 = default, short xrel = default, short yrel = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Ball = ball;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
			Xrel = xrel;
			Yrel = yrel;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyHatEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyHatEvent
	{
		/// <summary>
		/// ::SDL_JOYHATMOTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The joystick hat index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "hat")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Hat;

		/// <summary>
		/// The hat position value.<br/>
		/// <br/>
		/// Note that zero means the POV is centered.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Value;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;

		public unsafe SDLJoyHatEvent(uint type = default, uint timestamp = default, int which = default, byte hat = default, byte value = default, byte padding1 = default, byte padding2 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Hat = hat;
			Value = value;
			Padding1 = padding1;
			Padding2 = padding2;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyButtonEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyButtonEvent
	{
		/// <summary>
		/// ::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The joystick button index <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Button;

		/// <summary>
		/// ::SDL_PRESSED or ::SDL_RELEASED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "state")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte State;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;

		public unsafe SDLJoyButtonEvent(uint type = default, uint timestamp = default, int which = default, byte button = default, byte state = default, byte padding1 = default, byte padding2 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Button = button;
			State = state;
			Padding1 = padding1;
			Padding2 = padding2;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyDeviceEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyDeviceEvent
	{
		/// <summary>
		/// ::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick device index for the ADDED event, instance id for the REMOVED event <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Which;


		public unsafe SDLJoyDeviceEvent(uint type = default, uint timestamp = default, int which = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_JoyBatteryEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLJoyBatteryEvent
	{
		/// <summary>
		/// ::SDL_JOYBATTERYUPDATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The joystick battery level <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "level")]
		[NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		public SDLJoystickPowerLevel Level;


		public unsafe SDLJoyBatteryEvent(uint type = default, uint timestamp = default, int which = default, SDLJoystickPowerLevel level = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Level = level;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_ControllerAxisEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLControllerAxisEvent
	{
		/// <summary>
		/// ::SDL_CONTROLLERAXISMOTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The controller axis (SDL_GameControllerAxis) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "axis")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Axis;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;
		/// <summary>
		/// The axis value (range: -32768 to 32767) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "value")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Value;

		[NativeName(NativeNameType.Field, "padding4")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Padding4;

		public unsafe SDLControllerAxisEvent(uint type = default, uint timestamp = default, int which = default, byte axis = default, byte padding1 = default, byte padding2 = default, byte padding3 = default, short value = default, ushort padding4 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Axis = axis;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
			Value = value;
			Padding4 = padding4;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_ControllerButtonEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLControllerButtonEvent
	{
		/// <summary>
		/// ::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The controller button (SDL_GameControllerButton) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Button;

		/// <summary>
		/// ::SDL_PRESSED or ::SDL_RELEASED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "state")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte State;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;

		public unsafe SDLControllerButtonEvent(uint type = default, uint timestamp = default, int which = default, byte button = default, byte state = default, byte padding1 = default, byte padding2 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Button = button;
			State = state;
			Padding1 = padding1;
			Padding2 = padding2;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_ControllerDeviceEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLControllerDeviceEvent
	{
		/// <summary>
		/// ::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, ::SDL_CONTROLLERDEVICEREMAPPED, or ::SDL_CONTROLLERSTEAMHANDLEUPDATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Which;


		public unsafe SDLControllerDeviceEvent(uint type = default, uint timestamp = default, int which = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_ControllerTouchpadEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLControllerTouchpadEvent
	{
		/// <summary>
		/// ::SDL_CONTROLLERTOUCHPADDOWN or ::SDL_CONTROLLERTOUCHPADMOTION or ::SDL_CONTROLLERTOUCHPADUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The index of the touchpad <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "touchpad")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Touchpad;

		/// <summary>
		/// The index of the finger on the touchpad <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "finger")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Finger;

		/// <summary>
		/// Normalized in the range 0...1 with 0 being on the left <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;

		/// <summary>
		/// Normalized in the range 0...1 with 0 being at the top <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		/// <summary>
		/// Normalized in the range 0...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pressure")]
		[NativeName(NativeNameType.Type, "float")]
		public float Pressure;


		public unsafe SDLControllerTouchpadEvent(uint type = default, uint timestamp = default, int which = default, int touchpad = default, int finger = default, float x = default, float y = default, float pressure = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Touchpad = touchpad;
			Finger = finger;
			X = x;
			Y = y;
			Pressure = pressure;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_ControllerSensorEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLControllerSensorEvent
	{
		/// <summary>
		/// ::SDL_CONTROLLERSENSORUPDATE <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The joystick instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public int Which;

		/// <summary>
		/// The type of the sensor, one of the values of ::SDL_SensorType <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sensor")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Sensor;

		/// <summary>
		/// Up to 3 values from the sensor, as defined in SDL_sensor.h <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "float[3]")]
		public float Data_0;
		public float Data_1;
		public float Data_2;

		/// <summary>
		/// The timestamp of the sensor reading in microseconds, if the hardware provides this information. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp_us")]
		[NativeName(NativeNameType.Type, "Uint64")]
		public ulong TimestampUs;


		public unsafe SDLControllerSensorEvent(uint type = default, uint timestamp = default, int which = default, int sensor = default, float* data = default, ulong timestampUs = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Sensor = sensor;
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
			}
			TimestampUs = timestampUs;
		}

		public unsafe SDLControllerSensorEvent(uint type = default, uint timestamp = default, int which = default, int sensor = default, Span<float> data = default, ulong timestampUs = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Sensor = sensor;
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
			}
			TimestampUs = timestampUs;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_AudioDeviceEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAudioDeviceEvent
	{
		/// <summary>
		/// ::SDL_AUDIODEVICEADDED, or ::SDL_AUDIODEVICEREMOVED <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The audio device index for the ADDED event (valid until next SDL_GetNumAudioDevices() call), SDL_AudioDeviceID for the REMOVED event <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Which;

		/// <summary>
		/// zero if an output device, non-zero if a capture device. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "iscapture")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Iscapture;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;
		[NativeName(NativeNameType.Field, "padding3")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding3;

		public unsafe SDLAudioDeviceEvent(uint type = default, uint timestamp = default, uint which = default, byte iscapture = default, byte padding1 = default, byte padding2 = default, byte padding3 = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			Iscapture = iscapture;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_TouchFingerEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTouchFingerEvent
	{
		/// <summary>
		/// ::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The touch device id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "touchId")]
		[NativeName(NativeNameType.Type, "SDL_TouchID")]
		public long TouchId;

		[NativeName(NativeNameType.Field, "fingerId")]
		[NativeName(NativeNameType.Type, "SDL_FingerID")]
		public long FingerId;
		/// <summary>
		/// Normalized in the range 0...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;

		/// <summary>
		/// Normalized in the range 0...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		/// <summary>
		/// Normalized in the range -1...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dx")]
		[NativeName(NativeNameType.Type, "float")]
		public float Dx;

		/// <summary>
		/// Normalized in the range -1...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dy")]
		[NativeName(NativeNameType.Type, "float")]
		public float Dy;

		/// <summary>
		/// Normalized in the range 0...1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pressure")]
		[NativeName(NativeNameType.Type, "float")]
		public float Pressure;

		/// <summary>
		/// The window underneath the finger, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;


		public unsafe SDLTouchFingerEvent(uint type = default, uint timestamp = default, long touchId = default, long fingerId = default, float x = default, float y = default, float dx = default, float dy = default, float pressure = default, uint windowID = default)
		{
			Type = type;
			Timestamp = timestamp;
			TouchId = touchId;
			FingerId = fingerId;
			X = x;
			Y = y;
			Dx = dx;
			Dy = dy;
			Pressure = pressure;
			WindowID = windowID;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MultiGestureEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMultiGestureEvent
	{
		/// <summary>
		/// ::SDL_MULTIGESTURE <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The touch device id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "touchId")]
		[NativeName(NativeNameType.Type, "SDL_TouchID")]
		public long TouchId;

		[NativeName(NativeNameType.Field, "dTheta")]
		[NativeName(NativeNameType.Type, "float")]
		public float DTheta;
		[NativeName(NativeNameType.Field, "dDist")]
		[NativeName(NativeNameType.Type, "float")]
		public float DDist;
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;
		[NativeName(NativeNameType.Field, "numFingers")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort NumFingers;
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Padding;

		public unsafe SDLMultiGestureEvent(uint type = default, uint timestamp = default, long touchId = default, float dTheta = default, float dDist = default, float x = default, float y = default, ushort numFingers = default, ushort padding = default)
		{
			Type = type;
			Timestamp = timestamp;
			TouchId = touchId;
			DTheta = dTheta;
			DDist = dDist;
			X = x;
			Y = y;
			NumFingers = numFingers;
			Padding = padding;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_DollarGestureEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLDollarGestureEvent
	{
		/// <summary>
		/// ::SDL_DOLLARGESTURE or ::SDL_DOLLARRECORD <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The touch device id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "touchId")]
		[NativeName(NativeNameType.Type, "SDL_TouchID")]
		public long TouchId;

		[NativeName(NativeNameType.Field, "gestureId")]
		[NativeName(NativeNameType.Type, "SDL_GestureID")]
		public long GestureId;
		[NativeName(NativeNameType.Field, "numFingers")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint NumFingers;
		[NativeName(NativeNameType.Field, "error")]
		[NativeName(NativeNameType.Type, "float")]
		public float Error;
		/// <summary>
		/// Normalized center of gesture <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;

		/// <summary>
		/// Normalized center of gesture <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;


		public unsafe SDLDollarGestureEvent(uint type = default, uint timestamp = default, long touchId = default, long gestureId = default, uint numFingers = default, float error = default, float x = default, float y = default)
		{
			Type = type;
			Timestamp = timestamp;
			TouchId = touchId;
			GestureId = gestureId;
			NumFingers = numFingers;
			Error = error;
			X = x;
			Y = y;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_DropEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLDropEvent
	{
		/// <summary>
		/// ::SDL_DROPBEGIN or ::SDL_DROPFILE or ::SDL_DROPTEXT or ::SDL_DROPCOMPLETE <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The file name, which should be freed with SDL_free(), is NULL on begin/complete <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "file")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* File;

		/// <summary>
		/// The window that was dropped on, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;


		public unsafe SDLDropEvent(uint type = default, uint timestamp = default, byte* file = default, uint windowID = default)
		{
			Type = type;
			Timestamp = timestamp;
			File = file;
			WindowID = windowID;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_SensorEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSensorEvent
	{
		/// <summary>
		/// ::SDL_SENSORUPDATE <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The instance ID of the sensor <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Which;

		/// <summary>
		/// Up to 6 values from the sensor - additional values can be queried using SDL_SensorGetData() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "float[6]")]
		public float Data_0;
		public float Data_1;
		public float Data_2;
		public float Data_3;
		public float Data_4;
		public float Data_5;

		/// <summary>
		/// The timestamp of the sensor reading in microseconds, if the hardware provides this information. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp_us")]
		[NativeName(NativeNameType.Type, "Uint64")]
		public ulong TimestampUs;


		public unsafe SDLSensorEvent(uint type = default, uint timestamp = default, int which = default, float* data = default, ulong timestampUs = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
			}
			TimestampUs = timestampUs;
		}

		public unsafe SDLSensorEvent(uint type = default, uint timestamp = default, int which = default, Span<float> data = default, ulong timestampUs = default)
		{
			Type = type;
			Timestamp = timestamp;
			Which = which;
			if (data != default)
			{
				Data_0 = data[0];
				Data_1 = data[1];
				Data_2 = data[2];
				Data_3 = data[3];
				Data_4 = data[4];
				Data_5 = data[5];
			}
			TimestampUs = timestampUs;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_QuitEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLQuitEvent
	{
		/// <summary>
		/// ::SDL_QUIT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;


		public unsafe SDLQuitEvent(uint type = default, uint timestamp = default)
		{
			Type = type;
			Timestamp = timestamp;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_UserEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLUserEvent
	{
		/// <summary>
		/// ::SDL_USEREVENT through ::SDL_LASTEVENT-1 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// The associated window if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowID;

		/// <summary>
		/// User defined event code <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "code")]
		[NativeName(NativeNameType.Type, "Sint32")]
		public int Code;

		/// <summary>
		/// User defined data pointer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data1")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Data1;

		/// <summary>
		/// User defined data pointer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data2")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Data2;


		public unsafe SDLUserEvent(uint type = default, uint timestamp = default, uint windowID = default, int code = default, void* data1 = default, void* data2 = default)
		{
			Type = type;
			Timestamp = timestamp;
			WindowID = windowID;
			Code = code;
			Data1 = data1;
			Data2 = data2;
		}


	}

	/// <summary>
	/// The custom event structure.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_SysWMmsg")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSysWMmsg
	{
		[NativeName(NativeNameType.StructOrClass, "SDL_SysWMmsg::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct MsgUnion
		{
			[NativeName(NativeNameType.StructOrClass, "SDL_SysWMmsg::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct WinUnion
			{
				/// <summary>
				/// The window for the message <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "hwnd")]
				[NativeName(NativeNameType.Type, "HWND__*")]
				public unsafe Hwnd* Hwnd;

				/// <summary>
				/// The type of message <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "msg")]
				[NativeName(NativeNameType.Type, "unsigned int")]
				public uint Msg;

				/// <summary>
				/// WORD message parameter <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "wParam")]
				[NativeName(NativeNameType.Type, "unsigned long long")]
				public ulong WParam;

				/// <summary>
				/// LONG message parameter <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "lParam")]
				[NativeName(NativeNameType.Type, "long long")]
				public long LParam;


				public unsafe WinUnion(Hwnd* hwnd = default, uint msg = default, ulong wParam = default, long lParam = default)
				{
					Hwnd = hwnd;
					Msg = msg;
					WParam = wParam;
					LParam = lParam;
				}


			}

			[NativeName(NativeNameType.Field, "win")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public WinUnion Win;
			/// <summary>
			/// Can't have an empty union <br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "dummy")]
			[NativeName(NativeNameType.Type, "int")]
			[FieldOffset(0)]
			public int Dummy;


			public unsafe MsgUnion(WinUnion win = default, int dummy = default)
			{
				Win = win;
				Dummy = dummy;
			}


		}

		[NativeName(NativeNameType.Field, "version")]
		[NativeName(NativeNameType.Type, "SDL_version")]
		public SDLVersion Version;
		[NativeName(NativeNameType.Field, "subsystem")]
		[NativeName(NativeNameType.Type, "SDL_SYSWM_TYPE")]
		public SdlSyswmType Subsystem;
		[NativeName(NativeNameType.Field, "msg")]
		[NativeName(NativeNameType.Type, "")]
		public MsgUnion Msg;

		public unsafe SDLSysWMmsg(SDLVersion version = default, SdlSyswmType subsystem = default, MsgUnion msg = default)
		{
			Version = version;
			Subsystem = subsystem;
            Msg = msg;
		}


	}

	/// <summary>
	/// Information about the version of SDL in use.<br/>
	/// Represents the library's version as three levels: major revision<br/>
	/// (increments with massive changes, additions, and enhancements),<br/>
	/// minor revision (increments with backwards-compatible changes to the<br/>
	/// major revision), and patchlevel (increments with fixes to the minor<br/>
	/// revision).<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_version")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLVersion
	{
		/// <summary>
		/// major version <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "major")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Major;

		/// <summary>
		/// minor version <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "minor")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Minor;

		/// <summary>
		/// update version <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "patch")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Patch;


		public unsafe SDLVersion(byte major = default, byte minor = default, byte patch = default)
		{
			Major = major;
			Minor = minor;
			Patch = patch;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "HWND__")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Hwnd
	{
		[NativeName(NativeNameType.Field, "unused")]
		[NativeName(NativeNameType.Type, "int")]
		public int Unused;

		public unsafe Hwnd(int unused = default)
		{
			Unused = unused;
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_SysWMEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSysWMEvent
	{
		/// <summary>
		/// ::SDL_SYSWMEVENT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Type;

		/// <summary>
		/// In milliseconds, populated using SDL_GetTicks() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Timestamp;

		/// <summary>
		/// driver dependent data, defined in SDL_syswm.h <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "msg")]
		[NativeName(NativeNameType.Type, "SDL_SysWMmsg*")]
		public unsafe SDLSysWMmsg* Msg;


		public unsafe SDLSysWMEvent(uint type = default, uint timestamp = default, SDLSysWMmsg* msg = default)
		{
			Type = type;
			Timestamp = timestamp;
			Msg = msg;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Event")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLEvent
	{
		/// <summary>
		/// Event type, shared with all events <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		[FieldOffset(0)]
		public uint Type;

		/// <summary>
		/// Common event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "common")]
		[NativeName(NativeNameType.Type, "SDL_CommonEvent")]
		[FieldOffset(0)]
		public SDLCommonEvent Common;

		/// <summary>
		/// Display event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "SDL_DisplayEvent")]
		[FieldOffset(0)]
		public SDLDisplayEvent Display;

		/// <summary>
		/// Window event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "window")]
		[NativeName(NativeNameType.Type, "SDL_WindowEvent")]
		[FieldOffset(0)]
		public SDLWindowEvent Window;

		/// <summary>
		/// Keyboard event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "key")]
		[NativeName(NativeNameType.Type, "SDL_KeyboardEvent")]
		[FieldOffset(0)]
		public SDLKeyboardEvent Key;

		/// <summary>
		/// Text editing event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "edit")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingEvent")]
		[FieldOffset(0)]
		public SDLTextEditingEvent Edit;

		/// <summary>
		/// Extended text editing event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "editExt")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingExtEvent")]
		[FieldOffset(0)]
		public SDLTextEditingExtEvent EditExt;

		/// <summary>
		/// Text input event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "SDL_TextInputEvent")]
		[FieldOffset(0)]
		public SDLTextInputEvent Text;

		/// <summary>
		/// Mouse motion event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "motion")]
		[NativeName(NativeNameType.Type, "SDL_MouseMotionEvent")]
		[FieldOffset(0)]
		public SDLMouseMotionEvent Motion;

		/// <summary>
		/// Mouse button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "SDL_MouseButtonEvent")]
		[FieldOffset(0)]
		public SDLMouseButtonEvent Button;

		/// <summary>
		/// Mouse wheel event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "wheel")]
		[NativeName(NativeNameType.Type, "SDL_MouseWheelEvent")]
		[FieldOffset(0)]
		public SDLMouseWheelEvent Wheel;

		/// <summary>
		/// Joystick axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jaxis")]
		[NativeName(NativeNameType.Type, "SDL_JoyAxisEvent")]
		[FieldOffset(0)]
		public SDLJoyAxisEvent Jaxis;

		/// <summary>
		/// Joystick ball event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jball")]
		[NativeName(NativeNameType.Type, "SDL_JoyBallEvent")]
		[FieldOffset(0)]
		public SDLJoyBallEvent Jball;

		/// <summary>
		/// Joystick hat event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jhat")]
		[NativeName(NativeNameType.Type, "SDL_JoyHatEvent")]
		[FieldOffset(0)]
		public SDLJoyHatEvent Jhat;

		/// <summary>
		/// Joystick button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbutton")]
		[NativeName(NativeNameType.Type, "SDL_JoyButtonEvent")]
		[FieldOffset(0)]
		public SDLJoyButtonEvent Jbutton;

		/// <summary>
		/// Joystick device change event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jdevice")]
		[NativeName(NativeNameType.Type, "SDL_JoyDeviceEvent")]
		[FieldOffset(0)]
		public SDLJoyDeviceEvent Jdevice;

		/// <summary>
		/// Joystick battery event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbattery")]
		[NativeName(NativeNameType.Type, "SDL_JoyBatteryEvent")]
		[FieldOffset(0)]
		public SDLJoyBatteryEvent Jbattery;

		/// <summary>
		/// Game Controller axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "caxis")]
		[NativeName(NativeNameType.Type, "SDL_ControllerAxisEvent")]
		[FieldOffset(0)]
		public SDLControllerAxisEvent Caxis;

		/// <summary>
		/// Game Controller button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cbutton")]
		[NativeName(NativeNameType.Type, "SDL_ControllerButtonEvent")]
		[FieldOffset(0)]
		public SDLControllerButtonEvent Cbutton;

		/// <summary>
		/// Game Controller device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cdevice")]
		[NativeName(NativeNameType.Type, "SDL_ControllerDeviceEvent")]
		[FieldOffset(0)]
		public SDLControllerDeviceEvent Cdevice;

		/// <summary>
		/// Game Controller touchpad event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ctouchpad")]
		[NativeName(NativeNameType.Type, "SDL_ControllerTouchpadEvent")]
		[FieldOffset(0)]
		public SDLControllerTouchpadEvent Ctouchpad;

		/// <summary>
		/// Game Controller sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "csensor")]
		[NativeName(NativeNameType.Type, "SDL_ControllerSensorEvent")]
		[FieldOffset(0)]
		public SDLControllerSensorEvent Csensor;

		/// <summary>
		/// Audio device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "adevice")]
		[NativeName(NativeNameType.Type, "SDL_AudioDeviceEvent")]
		[FieldOffset(0)]
		public SDLAudioDeviceEvent Adevice;

		/// <summary>
		/// Sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sensor")]
		[NativeName(NativeNameType.Type, "SDL_SensorEvent")]
		[FieldOffset(0)]
		public SDLSensorEvent Sensor;

		/// <summary>
		/// Quit request event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "quit")]
		[NativeName(NativeNameType.Type, "SDL_QuitEvent")]
		[FieldOffset(0)]
		public SDLQuitEvent Quit;

		/// <summary>
		/// Custom event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "user")]
		[NativeName(NativeNameType.Type, "SDL_UserEvent")]
		[FieldOffset(0)]
		public SDLUserEvent User;

		/// <summary>
		/// System dependent window event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "syswm")]
		[NativeName(NativeNameType.Type, "SDL_SysWMEvent")]
		[FieldOffset(0)]
		public SDLSysWMEvent Syswm;

		/// <summary>
		/// Touch finger event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "tfinger")]
		[NativeName(NativeNameType.Type, "SDL_TouchFingerEvent")]
		[FieldOffset(0)]
		public SDLTouchFingerEvent Tfinger;

		/// <summary>
		/// Gesture event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mgesture")]
		[NativeName(NativeNameType.Type, "SDL_MultiGestureEvent")]
		[FieldOffset(0)]
		public SDLMultiGestureEvent Mgesture;

		/// <summary>
		/// Gesture event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dgesture")]
		[NativeName(NativeNameType.Type, "SDL_DollarGestureEvent")]
		[FieldOffset(0)]
		public SDLDollarGestureEvent Dgesture;

		/// <summary>
		/// Drag and drop event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drop")]
		[NativeName(NativeNameType.Type, "SDL_DropEvent")]
		[FieldOffset(0)]
		public SDLDropEvent Drop;

		/// <summary>
		/// This is necessary for ABI compatibility between Visual C++ and GCC.<br/>
		/// Visual C++ will respect the push pack pragma and use 52 bytes (size of<br/>
		/// SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit<br/>
		/// architectures) for this union, and GCC will use the alignment of the<br/>
		/// largest datatype within the union, which is 8 bytes on 64-bit<br/>
		/// architectures.<br/>
		/// So... we'll add padding to force the size to be 56 bytes for both.<br/>
		/// On architectures where pointers are 16 bytes, this needs rounding up to<br/>
		/// the next multiple of 16, 64, and on architectures where pointers are<br/>
		/// even larger the size of SDL_UserEvent will dominate as being 3 pointers.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint8[56]")]
		[FieldOffset(0)]
		public byte Padding_0;
		[FieldOffset(56)]
		public byte Padding_1;
		[FieldOffset(112)]
		public byte Padding_2;
		[FieldOffset(168)]
		public byte Padding_3;
		[FieldOffset(224)]
		public byte Padding_4;
		[FieldOffset(280)]
		public byte Padding_5;
		[FieldOffset(336)]
		public byte Padding_6;
		[FieldOffset(392)]
		public byte Padding_7;
		[FieldOffset(448)]
		public byte Padding_8;
		[FieldOffset(504)]
		public byte Padding_9;
		[FieldOffset(560)]
		public byte Padding_10;
		[FieldOffset(616)]
		public byte Padding_11;
		[FieldOffset(672)]
		public byte Padding_12;
		[FieldOffset(728)]
		public byte Padding_13;
		[FieldOffset(784)]
		public byte Padding_14;
		[FieldOffset(840)]
		public byte Padding_15;
		[FieldOffset(896)]
		public byte Padding_16;
		[FieldOffset(952)]
		public byte Padding_17;
		[FieldOffset(1008)]
		public byte Padding_18;
		[FieldOffset(1064)]
		public byte Padding_19;
		[FieldOffset(1120)]
		public byte Padding_20;
		[FieldOffset(1176)]
		public byte Padding_21;
		[FieldOffset(1232)]
		public byte Padding_22;
		[FieldOffset(1288)]
		public byte Padding_23;
		[FieldOffset(1344)]
		public byte Padding_24;
		[FieldOffset(1400)]
		public byte Padding_25;
		[FieldOffset(1456)]
		public byte Padding_26;
		[FieldOffset(1512)]
		public byte Padding_27;
		[FieldOffset(1568)]
		public byte Padding_28;
		[FieldOffset(1624)]
		public byte Padding_29;
		[FieldOffset(1680)]
		public byte Padding_30;
		[FieldOffset(1736)]
		public byte Padding_31;
		[FieldOffset(1792)]
		public byte Padding_32;
		[FieldOffset(1848)]
		public byte Padding_33;
		[FieldOffset(1904)]
		public byte Padding_34;
		[FieldOffset(1960)]
		public byte Padding_35;
		[FieldOffset(2016)]
		public byte Padding_36;
		[FieldOffset(2072)]
		public byte Padding_37;
		[FieldOffset(2128)]
		public byte Padding_38;
		[FieldOffset(2184)]
		public byte Padding_39;
		[FieldOffset(2240)]
		public byte Padding_40;
		[FieldOffset(2296)]
		public byte Padding_41;
		[FieldOffset(2352)]
		public byte Padding_42;
		[FieldOffset(2408)]
		public byte Padding_43;
		[FieldOffset(2464)]
		public byte Padding_44;
		[FieldOffset(2520)]
		public byte Padding_45;
		[FieldOffset(2576)]
		public byte Padding_46;
		[FieldOffset(2632)]
		public byte Padding_47;
		[FieldOffset(2688)]
		public byte Padding_48;
		[FieldOffset(2744)]
		public byte Padding_49;
		[FieldOffset(2800)]
		public byte Padding_50;
		[FieldOffset(2856)]
		public byte Padding_51;
		[FieldOffset(2912)]
		public byte Padding_52;
		[FieldOffset(2968)]
		public byte Padding_53;
		[FieldOffset(3024)]
		public byte Padding_54;
		[FieldOffset(3080)]
		public byte Padding_55;


		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingExtEvent editExt = default, SDLTextInputEvent text = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyDeviceEvent jdevice = default, SDLJoyBatteryEvent jbattery = default, SDLControllerAxisEvent caxis = default, SDLControllerButtonEvent cbutton = default, SDLControllerDeviceEvent cdevice = default, SDLControllerTouchpadEvent ctouchpad = default, SDLControllerSensorEvent csensor = default, SDLAudioDeviceEvent adevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLSysWMEvent syswm = default, SDLTouchFingerEvent tfinger = default, SDLMultiGestureEvent mgesture = default, SDLDollarGestureEvent dgesture = default, SDLDropEvent drop = default, byte* padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Key = key;
			Edit = edit;
			EditExt = editExt;
			Text = text;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jdevice = jdevice;
			Jbattery = jbattery;
			Caxis = caxis;
			Cbutton = cbutton;
			Cdevice = cdevice;
			Ctouchpad = ctouchpad;
			Csensor = csensor;
			Adevice = adevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Syswm = syswm;
			Tfinger = tfinger;
			Mgesture = mgesture;
			Dgesture = dgesture;
			Drop = drop;
			if (padding != default)
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
			}
		}

		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingExtEvent editExt = default, SDLTextInputEvent text = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyDeviceEvent jdevice = default, SDLJoyBatteryEvent jbattery = default, SDLControllerAxisEvent caxis = default, SDLControllerButtonEvent cbutton = default, SDLControllerDeviceEvent cdevice = default, SDLControllerTouchpadEvent ctouchpad = default, SDLControllerSensorEvent csensor = default, SDLAudioDeviceEvent adevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLSysWMEvent syswm = default, SDLTouchFingerEvent tfinger = default, SDLMultiGestureEvent mgesture = default, SDLDollarGestureEvent dgesture = default, SDLDropEvent drop = default, Span<byte> padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Key = key;
			Edit = edit;
			EditExt = editExt;
			Text = text;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jdevice = jdevice;
			Jbattery = jbattery;
			Caxis = caxis;
			Cbutton = cbutton;
			Cdevice = cdevice;
			Ctouchpad = ctouchpad;
			Csensor = csensor;
			Adevice = adevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Syswm = syswm;
			Tfinger = tfinger;
			Mgesture = mgesture;
			Dgesture = dgesture;
			Drop = drop;
			if (padding != default)
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "_SDL_Haptic")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHaptic
	{


	}

	/// <summary>
	/// <br/>
	/// This is the direction where the force comes from,<br/>
	/// instead of the direction in which the force is exerted.<br/>
	/// Directions can be specified by:<br/>
	/// - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.<br/>
	/// - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.<br/>
	/// - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.<br/>
	/// Cardinal directions of the haptic device are relative to the positioning<br/>
	/// of the device.  North is considered to be away from the user.<br/>
	/// The following diagram represents the cardinal directions:<br/>
	/// <br/>
	/// If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a<br/>
	/// degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses<br/>
	/// the first <br/>
	/// parameter.  The cardinal directions would be:<br/>
	/// - North: 0 (0 degrees)<br/>
	/// - East: 9000 (90 degrees)<br/>
	/// - South: 18000 (180 degrees)<br/>
	/// - West: 27000 (270 degrees)<br/>
	/// If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions<br/>
	/// (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses<br/>
	/// the first three <br/>
	/// parameters.  The cardinal directions would be:<br/>
	/// - North:  0,-1, 0<br/>
	/// - East:   1, 0, 0<br/>
	/// - South:  0, 1, 0<br/>
	/// - West:  -1, 0, 0<br/>
	/// The Z axis represents the height of the effect if supported, otherwise<br/>
	/// it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you<br/>
	/// can use any multiple you want, only the direction matters.<br/>
	/// If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.<br/>
	/// The first two <br/>
	/// parameters are used.  The <br/>
	/// parameters are as<br/>
	/// follows (all values are in hundredths of degrees):<br/>
	/// - Degrees from (1, 0) rotated towards (0, 1).<br/>
	/// - Degrees towards (0, 0, 1) (device needs at least 3 axes).<br/>
	/// Example of force coming from the south with all encodings (force coming<br/>
	/// from the south means the user will have to pull the stick to counteract):<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticDirection")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticDirection
	{
		/// <summary>
		/// The type of encoding. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Type;

		/// <summary>
		/// The encoded direction. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dir")]
		[NativeName(NativeNameType.Type, "Sint32[3]")]
		public int Dir_0;
		public int Dir_1;
		public int Dir_2;


		public unsafe SDLHapticDirection(byte type = default, int* dir = default)
		{
			Type = type;
			if (dir != default)
			{
				Dir_0 = dir[0];
				Dir_1 = dir[1];
				Dir_2 = dir[2];
			}
		}

		public unsafe SDLHapticDirection(byte type = default, Span<int> dir = default)
		{
			Type = type;
			if (dir != default)
			{
				Dir_0 = dir[0];
				Dir_1 = dir[1];
				Dir_2 = dir[2];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.<br/>
	/// A constant effect applies a constant force in the specified direction<br/>
	/// to the joystick.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticConstant")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticConstant
	{
		/// <summary>
		/// ::SDL_HAPTIC_CONSTANT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Strength of the constant effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "level")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Level;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLevel;


		public unsafe SDLHapticConstant(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, short level = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Level = level;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}

	/// <summary>
	/// <br/>
	/// The struct handles the following effects:<br/>
	/// - ::SDL_HAPTIC_SINE<br/>
	/// - ::SDL_HAPTIC_LEFTRIGHT<br/>
	/// - ::SDL_HAPTIC_TRIANGLE<br/>
	/// - ::SDL_HAPTIC_SAWTOOTHUP<br/>
	/// - ::SDL_HAPTIC_SAWTOOTHDOWN<br/>
	/// A periodic effect consists in a wave-shaped effect that repeats itself<br/>
	/// over time.  The type determines the shape of the wave and the parameters<br/>
	/// determine the dimensions of the wave.<br/>
	/// Phase is given by hundredth of a degree meaning that giving the phase a value<br/>
	/// of 9000 will displace it 25% of its period.  Here are sample values:<br/>
	/// -     0: No phase displacement.<br/>
	/// -  9000: Displaced 25% of its period.<br/>
	/// - 18000: Displaced 50% of its period.<br/>
	/// - 27000: Displaced 75% of its period.<br/>
	/// - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.<br/>
	/// Examples:<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticPeriodic")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticPeriodic
	{
		/// <summary>
		/// ::SDL_HAPTIC_SINE, ::SDL_HAPTIC_LEFTRIGHT,<br/>
		/// ::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or<br/>
		/// ::SDL_HAPTIC_SAWTOOTHDOWN <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Period of the wave. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "period")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Period;

		/// <summary>
		/// Peak value; if negative, equivalent to 180 degrees extra phase shift. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "magnitude")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Magnitude;

		/// <summary>
		/// Mean value of the wave. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "offset")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Offset;

		/// <summary>
		/// Positive phase shift given by hundredth of a degree. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "phase")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Phase;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLevel;


		public unsafe SDLHapticPeriodic(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, ushort period = default, short magnitude = default, short offset = default, ushort phase = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Period = period;
			Magnitude = magnitude;
			Offset = offset;
			Phase = phase;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}

	/// <summary>
	/// <br/>
	/// The struct handles the following effects:<br/>
	/// - ::SDL_HAPTIC_SPRING: Effect based on axes position.<br/>
	/// - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.<br/>
	/// - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.<br/>
	/// - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.<br/>
	/// Direction is handled by condition internals instead of a direction member.<br/>
	/// The condition effect specific members have three parameters.  The first<br/>
	/// refers to the X axis, the second refers to the Y axis and the third<br/>
	/// refers to the Z axis.  The right terms refer to the positive side of the<br/>
	/// axis and the left terms refer to the negative side of the axis.  Please<br/>
	/// refer to the ::SDL_HapticDirection diagram for which side is positive and<br/>
	/// which is negative.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticCondition")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticCondition
	{
		/// <summary>
		/// ::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,<br/>
		/// ::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect - Not used ATM. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Level when joystick is to the positive side; max 0xFFFF. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "right_sat")]
		[NativeName(NativeNameType.Type, "Uint16[3]")]
		public ushort RightSat_0;
		public ushort RightSat_1;
		public ushort RightSat_2;

		/// <summary>
		/// Level when joystick is to the negative side; max 0xFFFF. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "left_sat")]
		[NativeName(NativeNameType.Type, "Uint16[3]")]
		public ushort LeftSat_0;
		public ushort LeftSat_1;
		public ushort LeftSat_2;

		/// <summary>
		/// How fast to increase the force towards the positive side. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "right_coeff")]
		[NativeName(NativeNameType.Type, "Sint16[3]")]
		public short RightCoeff_0;
		public short RightCoeff_1;
		public short RightCoeff_2;

		/// <summary>
		/// How fast to increase the force towards the negative side. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "left_coeff")]
		[NativeName(NativeNameType.Type, "Sint16[3]")]
		public short LeftCoeff_0;
		public short LeftCoeff_1;
		public short LeftCoeff_2;

		/// <summary>
		/// Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "deadband")]
		[NativeName(NativeNameType.Type, "Uint16[3]")]
		public ushort Deadband_0;
		public ushort Deadband_1;
		public ushort Deadband_2;

		/// <summary>
		/// Position of the dead zone. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "center")]
		[NativeName(NativeNameType.Type, "Sint16[3]")]
		public short Center_0;
		public short Center_1;
		public short Center_2;


		public unsafe SDLHapticCondition(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, ushort* rightSat = default, ushort* leftSat = default, short* rightCoeff = default, short* leftCoeff = default, ushort* deadband = default, short* center = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			if (rightSat != default)
			{
				RightSat_0 = rightSat[0];
				RightSat_1 = rightSat[1];
				RightSat_2 = rightSat[2];
			}
			if (leftSat != default)
			{
				LeftSat_0 = leftSat[0];
				LeftSat_1 = leftSat[1];
				LeftSat_2 = leftSat[2];
			}
			if (rightCoeff != default)
			{
				RightCoeff_0 = rightCoeff[0];
				RightCoeff_1 = rightCoeff[1];
				RightCoeff_2 = rightCoeff[2];
			}
			if (leftCoeff != default)
			{
				LeftCoeff_0 = leftCoeff[0];
				LeftCoeff_1 = leftCoeff[1];
				LeftCoeff_2 = leftCoeff[2];
			}
			if (deadband != default)
			{
				Deadband_0 = deadband[0];
				Deadband_1 = deadband[1];
				Deadband_2 = deadband[2];
			}
			if (center != default)
			{
				Center_0 = center[0];
				Center_1 = center[1];
				Center_2 = center[2];
			}
		}

		public unsafe SDLHapticCondition(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, Span<ushort> rightSat = default, Span<ushort> leftSat = default, Span<short> rightCoeff = default, Span<short> leftCoeff = default, Span<ushort> deadband = default, Span<short> center = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			if (rightSat != default)
			{
				RightSat_0 = rightSat[0];
				RightSat_1 = rightSat[1];
				RightSat_2 = rightSat[2];
			}
			if (leftSat != default)
			{
				LeftSat_0 = leftSat[0];
				LeftSat_1 = leftSat[1];
				LeftSat_2 = leftSat[2];
			}
			if (rightCoeff != default)
			{
				RightCoeff_0 = rightCoeff[0];
				RightCoeff_1 = rightCoeff[1];
				RightCoeff_2 = rightCoeff[2];
			}
			if (leftCoeff != default)
			{
				LeftCoeff_0 = leftCoeff[0];
				LeftCoeff_1 = leftCoeff[1];
				LeftCoeff_2 = leftCoeff[2];
			}
			if (deadband != default)
			{
				Deadband_0 = deadband[0];
				Deadband_1 = deadband[1];
				Deadband_2 = deadband[2];
			}
			if (center != default)
			{
				Center_0 = center[0];
				Center_1 = center[1];
				Center_2 = center[2];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.<br/>
	/// The ramp effect starts at start strength and ends at end strength.<br/>
	/// It augments in linear fashion.  If you use attack and fade with a ramp<br/>
	/// the effects get added to the ramp effect making the effect become<br/>
	/// quadratic instead of linear.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticRamp")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticRamp
	{
		/// <summary>
		/// ::SDL_HAPTIC_RAMP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Beginning strength level. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "start")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short Start;

		/// <summary>
		/// Ending strength level. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "end")]
		[NativeName(NativeNameType.Type, "Sint16")]
		public short End;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLevel;


		public unsafe SDLHapticRamp(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, short start = default, short end = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Start = start;
			End = end;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}
}
