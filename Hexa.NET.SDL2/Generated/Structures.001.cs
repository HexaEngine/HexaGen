// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{

	/// <summary>
	/// <br/>
	/// This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.<br/>
	/// The Left/Right effect is used to explicitly control the large and small<br/>
	/// motors, commonly found in modern game controllers. The small (right) motor<br/>
	/// is high frequency, and the large (left) motor is low frequency.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticLeftRight")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticLeftRight
	{
		/// <summary>
		/// ::SDL_HAPTIC_LEFTRIGHT <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Duration of the effect in milliseconds. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Control of the large controller motor. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "large_magnitude")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort LargeMagnitude;

		/// <summary>
		/// Control of the small controller motor. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "small_magnitude")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort SmallMagnitude;


		public unsafe SDLHapticLeftRight(ushort type = default, uint length = default, ushort largeMagnitude = default, ushort smallMagnitude = default)
		{
			Type = type;
			Length = length;
			LargeMagnitude = largeMagnitude;
			SmallMagnitude = smallMagnitude;
		}


	}

	/// <summary>
	/// <br/>
	/// This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.<br/>
	/// A custom force feedback effect is much like a periodic effect, where the<br/>
	/// application can define its exact shape.  You will have to allocate the<br/>
	/// data yourself.  Data should consist of channels * samples Uint16 samples.<br/>
	/// If channels is one, the effect is rotated using the defined direction.<br/>
	/// Otherwise it uses the samples in data for the different axes.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticCustom")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticCustom
	{
		/// <summary>
		/// ::SDL_HAPTIC_CUSTOM <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Axes to use, minimum of one. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "channels")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Channels;

		/// <summary>
		/// Sample periods. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "period")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Period;

		/// <summary>
		/// Amount of samples. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Samples;

		/// <summary>
		/// Should contain channels*samples items. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "Uint16*")]
		public unsafe ushort* Data;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLevel;


		public unsafe SDLHapticCustom(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, byte channels = default, ushort period = default, ushort samples = default, ushort* data = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Channels = channels;
			Period = period;
			Samples = samples;
			Data = data;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}

	/// <summary>
	/// <br/>
	/// All values max at 32767 (0x7FFF).  Signed values also can be negative.<br/>
	/// Time values unless specified otherwise are in milliseconds.<br/>
	/// You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767<br/>
	/// value.  Neither delay, interval, attack_length nor fade_length support<br/>
	/// ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.<br/>
	/// Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of<br/>
	/// ::SDL_HAPTIC_INFINITY.<br/>
	/// Button triggers may not be supported on all devices, it is advised to not<br/>
	/// use them if possible.  Buttons start at index 1 instead of index 0 like<br/>
	/// the joystick.<br/>
	/// If both attack_length and fade_level are 0, the envelope is not used,<br/>
	/// otherwise both values are used.<br/>
	/// Common parts:<br/>
	/// <br/>
	/// Here we have an example of a constant effect evolution in time:<br/>
	/// <br/>
	/// Note either the attack_level or the fade_level may be above the actual<br/>
	/// effect level.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticEffect")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLHapticEffect
	{
		/// <summary>
		/// Effect type. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		[FieldOffset(0)]
		public ushort Type;

		/// <summary>
		/// Constant effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "constant")]
		[NativeName(NativeNameType.Type, "SDL_HapticConstant")]
		[FieldOffset(0)]
		public SDLHapticConstant Constant;

		/// <summary>
		/// Periodic effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "periodic")]
		[NativeName(NativeNameType.Type, "SDL_HapticPeriodic")]
		[FieldOffset(0)]
		public SDLHapticPeriodic Periodic;

		/// <summary>
		/// Condition effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "condition")]
		[NativeName(NativeNameType.Type, "SDL_HapticCondition")]
		[FieldOffset(0)]
		public SDLHapticCondition Condition;

		/// <summary>
		/// Ramp effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ramp")]
		[NativeName(NativeNameType.Type, "SDL_HapticRamp")]
		[FieldOffset(0)]
		public SDLHapticRamp Ramp;

		/// <summary>
		/// Left/Right effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leftright")]
		[NativeName(NativeNameType.Type, "SDL_HapticLeftRight")]
		[FieldOffset(0)]
		public SDLHapticLeftRight Leftright;

		/// <summary>
		/// Custom effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "custom")]
		[NativeName(NativeNameType.Type, "SDL_HapticCustom")]
		[FieldOffset(0)]
		public SDLHapticCustom Custom;


		public unsafe SDLHapticEffect(ushort type = default, SDLHapticConstant constant = default, SDLHapticPeriodic periodic = default, SDLHapticCondition condition = default, SDLHapticRamp ramp = default, SDLHapticLeftRight leftright = default, SDLHapticCustom custom = default)
		{
			Type = type;
			Constant = constant;
			Periodic = periodic;
			Condition = condition;
			Ramp = ramp;
			Leftright = leftright;
			Custom = custom;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_hid_device_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHidDevice
	{


	}

	/// <summary>
	/// hidapi info structure <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_hid_device_info")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHidDeviceInfo
	{
		/// <summary>
		/// Platform-specific device path <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "path")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Path;

		/// <summary>
		/// Device Vendor ID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vendor_id")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort VendorId;

		/// <summary>
		/// Device Product ID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "product_id")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort ProductId;

		/// <summary>
		/// Serial Number <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "serial_number")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* SerialNumber;

		/// <summary>
		/// Device Release Number in binary-coded decimal,<br/>
		/// also known as Device Version Number <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "release_number")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort ReleaseNumber;

		/// <summary>
		/// Manufacturer String <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "manufacturer_string")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* ManufacturerString;

		/// <summary>
		/// Product string <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "product_string")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* ProductString;

		/// <summary>
		/// Usage Page for this Device/Interface<br/>
		/// (Windows/Mac only). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "usage_page")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort UsagePage;

		/// <summary>
		/// Usage for this Device/Interface<br/>
		/// (Windows/Mac only).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Usage;

		/// <summary>
		/// The USB interface which this logical device<br/>
		/// represents.<br/>
		/// Valid on both Linux implementations in all cases.<br/>
		/// Valid on the Windows implementation only if the device<br/>
		/// contains more than one interface. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_number")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceNumber;

		/// <summary>
		/// Additional information about the USB interface.<br/>
		/// Valid on libusb and Android implementations. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_class")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceClass;

		[NativeName(NativeNameType.Field, "interface_subclass")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceSubclass;
		[NativeName(NativeNameType.Field, "interface_protocol")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceProtocol;
		/// <summary>
		/// Pointer to the next device <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "SDL_hid_device_info*")]
		public unsafe SDLHidDeviceInfo* Next;


		public unsafe SDLHidDeviceInfo(byte* path = default, ushort vendorId = default, ushort productId = default, char* serialNumber = default, ushort releaseNumber = default, char* manufacturerString = default, char* productString = default, ushort usagePage = default, ushort usage = default, int interfaceNumber = default, int interfaceClass = default, int interfaceSubclass = default, int interfaceProtocol = default, SDLHidDeviceInfo* next = default)
		{
			Path = path;
			VendorId = vendorId;
			ProductId = productId;
			SerialNumber = serialNumber;
			ReleaseNumber = releaseNumber;
			ManufacturerString = manufacturerString;
			ProductString = productString;
			UsagePage = usagePage;
			Usage = usage;
			InterfaceNumber = interfaceNumber;
			InterfaceClass = interfaceClass;
			InterfaceSubclass = interfaceSubclass;
			InterfaceProtocol = interfaceProtocol;
			Next = next;
		}


	}

	/// <summary>
	/// Individual button data.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxButtonData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxButtonData
	{
		/// <summary>
		/// ::SDL_MessageBoxButtonFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// User defined button id (value returned via SDL_ShowMessageBox) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buttonid")]
		[NativeName(NativeNameType.Type, "int")]
		public int Buttonid;

		/// <summary>
		/// The UTF-8 button text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Text;


		public unsafe SDLMessageBoxButtonData(uint flags = default, int buttonid = default, byte* text = default)
		{
			Flags = flags;
			Buttonid = buttonid;
			Text = text;
		}


	}

	/// <summary>
	/// RGB value used in a message box color scheme<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxColor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxColor
	{
		[NativeName(NativeNameType.Field, "r")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte R;
		[NativeName(NativeNameType.Field, "g")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte G;
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte B;

		public unsafe SDLMessageBoxColor(byte r = default, byte g = default, byte b = default)
		{
			R = r;
			G = g;
			B = b;
		}


	}

	/// <summary>
	/// A set of colors to use for message box dialogs<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxColorScheme")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxColorScheme
	{
		[NativeName(NativeNameType.Field, "colors")]
		[NativeName(NativeNameType.Type, "SDL_MessageBoxColor[5]")]
		public SDLMessageBoxColor Colors_0;
		public SDLMessageBoxColor Colors_1;
		public SDLMessageBoxColor Colors_2;
		public SDLMessageBoxColor Colors_3;
		public SDLMessageBoxColor Colors_4;

		public unsafe SDLMessageBoxColorScheme(SDLMessageBoxColor* colors = default)
		{
			if (colors != default)
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
			}
		}

		public unsafe SDLMessageBoxColorScheme(Span<SDLMessageBoxColor> colors = default)
		{
			if (colors != default)
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
			}
		}


		public unsafe Span<SDLMessageBoxColor> Colors
		
		{
			get
			{
				fixed (SDLMessageBoxColor* p = &this.Colors_0)
				{
					return new Span<SDLMessageBoxColor>(p, 5);
				}
			}
		}
	}

	/// <summary>
	/// MessageBox structure containing title, text, window, etc.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxData
	{
		/// <summary>
		/// ::SDL_MessageBoxFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// Parent window, can be NULL <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "window")]
		[NativeName(NativeNameType.Type, "SDL_Window*")]
		public unsafe SDLWindow* Window;

		/// <summary>
		/// UTF-8 title <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "title")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Title;

		/// <summary>
		/// UTF-8 message text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "message")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Message;

		[NativeName(NativeNameType.Field, "numbuttons")]
		[NativeName(NativeNameType.Type, "int")]
		public int Numbuttons;
		[NativeName(NativeNameType.Field, "buttons")]
		[NativeName(NativeNameType.Type, "const SDL_MessageBoxButtonData*")]
		public unsafe SDLMessageBoxButtonData* Buttons;
		/// <summary>
		/// ::SDL_MessageBoxColorScheme, can be NULL to use system settings <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "colorScheme")]
		[NativeName(NativeNameType.Type, "const SDL_MessageBoxColorScheme*")]
		public unsafe SDLMessageBoxColorScheme* ColorScheme;


		public unsafe SDLMessageBoxData(uint flags = default, SDLWindow* window = default, byte* title = default, byte* message = default, int numbuttons = default, SDLMessageBoxButtonData* buttons = default, SDLMessageBoxColorScheme* colorScheme = default)
		{
			Flags = flags;
			Window = window;
			Title = title;
			Message = message;
			Numbuttons = numbuttons;
			Buttons = buttons;
			ColorScheme = colorScheme;
		}


	}

	/// <summary>
	/// Information on the capabilities of a render driver or context.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_RendererInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRendererInfo
	{
		/// <summary>
		/// The name of the renderer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// Supported ::SDL_RendererFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// The number of available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "num_texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint NumTextureFormats;

		/// <summary>
		/// The available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32[16]")]
		public uint TextureFormats_0;
		public uint TextureFormats_1;
		public uint TextureFormats_2;
		public uint TextureFormats_3;
		public uint TextureFormats_4;
		public uint TextureFormats_5;
		public uint TextureFormats_6;
		public uint TextureFormats_7;
		public uint TextureFormats_8;
		public uint TextureFormats_9;
		public uint TextureFormats_10;
		public uint TextureFormats_11;
		public uint TextureFormats_12;
		public uint TextureFormats_13;
		public uint TextureFormats_14;
		public uint TextureFormats_15;

		/// <summary>
		/// The maximum texture width <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_width")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureWidth;

		/// <summary>
		/// The maximum texture height <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_height")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureHeight;


		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, uint* textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default)
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}

		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, Span<uint> textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default)
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}


	}

	/// <summary>
	/// Vertex structure<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Vertex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLVertex
	{
		/// <summary>
		/// Vertex position, in SDL_Renderer coordinates  <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "position")]
		[NativeName(NativeNameType.Type, "SDL_FPoint")]
		public SDLFPoint Position;

		/// <summary>
		/// Vertex color <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "color")]
		[NativeName(NativeNameType.Type, "SDL_Color")]
		public SDLColor Color;

		/// <summary>
		/// Normalized texture coordinates, if needed <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "tex_coord")]
		[NativeName(NativeNameType.Type, "SDL_FPoint")]
		public SDLFPoint TexCoord;


		public unsafe SDLVertex(SDLFPoint position = default, SDLColor color = default, SDLFPoint texCoord = default)
		{
			Position = position;
			Color = color;
			TexCoord = texCoord;
		}


	}

	/// <summary>
	/// A structure representing rendering state<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Renderer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRenderer
	{


	}

	/// <summary>
	/// An efficient driver-specific representation of pixel data<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Texture")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTexture
	{


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_WindowShapeParams")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLWindowShapeParams
	{
		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "binarizationCutoff")]
		[NativeName(NativeNameType.Type, "Uint8")]
		[FieldOffset(0)]
		public byte BinarizationCutoff;

		[NativeName(NativeNameType.Field, "colorKey")]
		[NativeName(NativeNameType.Type, "SDL_Color")]
		[FieldOffset(0)]
		public SDLColor ColorKey;

		public unsafe SDLWindowShapeParams(byte binarizationCutoff = default, SDLColor colorKey = default)
		{
			BinarizationCutoff = binarizationCutoff;
			ColorKey = colorKey;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_WindowShapeMode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLWindowShapeMode
	{
		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "WindowShapeMode")]
		public WindowShapeMode Mode;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "parameters")]
		[NativeName(NativeNameType.Type, "SDL_WindowShapeParams")]
		public SDLWindowShapeParams Parameters;


		public unsafe SDLWindowShapeMode(WindowShapeMode mode = default, SDLWindowShapeParams parameters = default)
		{
			Mode = mode;
			Parameters = parameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "IDirect3DDevice9")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct IDirect3DDevice9
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ID3D11Device")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ID3D11Device
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ID3D12Device")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ID3D12Device
	{


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_Locale")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLLocale
	{
		/// <summary>
		/// A language name, like "en" for English. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "language")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Language;

		/// <summary>
		/// A country, like "US" for America. Can be NULL. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "country")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Country;


		public unsafe SDLLocale(byte* language = default, byte* country = default)
		{
			Language = language;
			Country = country;
		}


	}

	/// <summary>
	/// <br/>
	/// Your application has access to a special type of event ::SDL_SYSWMEVENT,<br/>
	/// which contains window-manager specific information and arrives whenever<br/>
	/// an unhandled window event occurs.  This event is ignored by default, but<br/>
	/// you can enable it with SDL_EventState().<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_SysWMinfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSysWMinfo
	{
		[NativeName(NativeNameType.StructOrClass, "SDL_SysWMinfo::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct InfoUnion
		{
			[NativeName(NativeNameType.StructOrClass, "SDL_SysWMinfo::::")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct WinUnion
			{
				/// <summary>
				/// The window handle <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "window")]
				[NativeName(NativeNameType.Type, "HWND")]
				public nint Window;

				/// <summary>
				/// The window device context <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "hdc")]
				[NativeName(NativeNameType.Type, "HDC")]
				public nint Hdc;

				/// <summary>
				/// The instance handle <br/>
				/// </summary>
				[NativeName(NativeNameType.Field, "hinstance")]
				[NativeName(NativeNameType.Type, "HINSTANCE")]
				public nint Hinstance;


				public unsafe WinUnion(nint window = default, nint hdc = default, nint hinstance = default)
				{
					Window = window;
					Hdc = hdc;
					Hinstance = hinstance;
				}


			}

			[NativeName(NativeNameType.Field, "win")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public WinUnion Win;
			/// <summary>
			/// Make sure this union is always 64 bytes (8 64-bit pointers). <br/>
			/// Be careful not to overflow this if you add a new target! <br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "dummy")]
			[NativeName(NativeNameType.Type, "Uint8[64]")]
			[FieldOffset(0)]
			public byte Dummy_0;
			[FieldOffset(64)]
			public byte Dummy_1;
			[FieldOffset(128)]
			public byte Dummy_2;
			[FieldOffset(192)]
			public byte Dummy_3;
			[FieldOffset(256)]
			public byte Dummy_4;
			[FieldOffset(320)]
			public byte Dummy_5;
			[FieldOffset(384)]
			public byte Dummy_6;
			[FieldOffset(448)]
			public byte Dummy_7;
			[FieldOffset(512)]
			public byte Dummy_8;
			[FieldOffset(576)]
			public byte Dummy_9;
			[FieldOffset(640)]
			public byte Dummy_10;
			[FieldOffset(704)]
			public byte Dummy_11;
			[FieldOffset(768)]
			public byte Dummy_12;
			[FieldOffset(832)]
			public byte Dummy_13;
			[FieldOffset(896)]
			public byte Dummy_14;
			[FieldOffset(960)]
			public byte Dummy_15;
			[FieldOffset(1024)]
			public byte Dummy_16;
			[FieldOffset(1088)]
			public byte Dummy_17;
			[FieldOffset(1152)]
			public byte Dummy_18;
			[FieldOffset(1216)]
			public byte Dummy_19;
			[FieldOffset(1280)]
			public byte Dummy_20;
			[FieldOffset(1344)]
			public byte Dummy_21;
			[FieldOffset(1408)]
			public byte Dummy_22;
			[FieldOffset(1472)]
			public byte Dummy_23;
			[FieldOffset(1536)]
			public byte Dummy_24;
			[FieldOffset(1600)]
			public byte Dummy_25;
			[FieldOffset(1664)]
			public byte Dummy_26;
			[FieldOffset(1728)]
			public byte Dummy_27;
			[FieldOffset(1792)]
			public byte Dummy_28;
			[FieldOffset(1856)]
			public byte Dummy_29;
			[FieldOffset(1920)]
			public byte Dummy_30;
			[FieldOffset(1984)]
			public byte Dummy_31;
			[FieldOffset(2048)]
			public byte Dummy_32;
			[FieldOffset(2112)]
			public byte Dummy_33;
			[FieldOffset(2176)]
			public byte Dummy_34;
			[FieldOffset(2240)]
			public byte Dummy_35;
			[FieldOffset(2304)]
			public byte Dummy_36;
			[FieldOffset(2368)]
			public byte Dummy_37;
			[FieldOffset(2432)]
			public byte Dummy_38;
			[FieldOffset(2496)]
			public byte Dummy_39;
			[FieldOffset(2560)]
			public byte Dummy_40;
			[FieldOffset(2624)]
			public byte Dummy_41;
			[FieldOffset(2688)]
			public byte Dummy_42;
			[FieldOffset(2752)]
			public byte Dummy_43;
			[FieldOffset(2816)]
			public byte Dummy_44;
			[FieldOffset(2880)]
			public byte Dummy_45;
			[FieldOffset(2944)]
			public byte Dummy_46;
			[FieldOffset(3008)]
			public byte Dummy_47;
			[FieldOffset(3072)]
			public byte Dummy_48;
			[FieldOffset(3136)]
			public byte Dummy_49;
			[FieldOffset(3200)]
			public byte Dummy_50;
			[FieldOffset(3264)]
			public byte Dummy_51;
			[FieldOffset(3328)]
			public byte Dummy_52;
			[FieldOffset(3392)]
			public byte Dummy_53;
			[FieldOffset(3456)]
			public byte Dummy_54;
			[FieldOffset(3520)]
			public byte Dummy_55;
			[FieldOffset(3584)]
			public byte Dummy_56;
			[FieldOffset(3648)]
			public byte Dummy_57;
			[FieldOffset(3712)]
			public byte Dummy_58;
			[FieldOffset(3776)]
			public byte Dummy_59;
			[FieldOffset(3840)]
			public byte Dummy_60;
			[FieldOffset(3904)]
			public byte Dummy_61;
			[FieldOffset(3968)]
			public byte Dummy_62;
			[FieldOffset(4032)]
			public byte Dummy_63;


			public unsafe InfoUnion(WinUnion win = default, byte* dummy = default)
			{
				Win = win;
				if (dummy != default)
				{
					Dummy_0 = dummy[0];
					Dummy_1 = dummy[1];
					Dummy_2 = dummy[2];
					Dummy_3 = dummy[3];
					Dummy_4 = dummy[4];
					Dummy_5 = dummy[5];
					Dummy_6 = dummy[6];
					Dummy_7 = dummy[7];
					Dummy_8 = dummy[8];
					Dummy_9 = dummy[9];
					Dummy_10 = dummy[10];
					Dummy_11 = dummy[11];
					Dummy_12 = dummy[12];
					Dummy_13 = dummy[13];
					Dummy_14 = dummy[14];
					Dummy_15 = dummy[15];
					Dummy_16 = dummy[16];
					Dummy_17 = dummy[17];
					Dummy_18 = dummy[18];
					Dummy_19 = dummy[19];
					Dummy_20 = dummy[20];
					Dummy_21 = dummy[21];
					Dummy_22 = dummy[22];
					Dummy_23 = dummy[23];
					Dummy_24 = dummy[24];
					Dummy_25 = dummy[25];
					Dummy_26 = dummy[26];
					Dummy_27 = dummy[27];
					Dummy_28 = dummy[28];
					Dummy_29 = dummy[29];
					Dummy_30 = dummy[30];
					Dummy_31 = dummy[31];
					Dummy_32 = dummy[32];
					Dummy_33 = dummy[33];
					Dummy_34 = dummy[34];
					Dummy_35 = dummy[35];
					Dummy_36 = dummy[36];
					Dummy_37 = dummy[37];
					Dummy_38 = dummy[38];
					Dummy_39 = dummy[39];
					Dummy_40 = dummy[40];
					Dummy_41 = dummy[41];
					Dummy_42 = dummy[42];
					Dummy_43 = dummy[43];
					Dummy_44 = dummy[44];
					Dummy_45 = dummy[45];
					Dummy_46 = dummy[46];
					Dummy_47 = dummy[47];
					Dummy_48 = dummy[48];
					Dummy_49 = dummy[49];
					Dummy_50 = dummy[50];
					Dummy_51 = dummy[51];
					Dummy_52 = dummy[52];
					Dummy_53 = dummy[53];
					Dummy_54 = dummy[54];
					Dummy_55 = dummy[55];
					Dummy_56 = dummy[56];
					Dummy_57 = dummy[57];
					Dummy_58 = dummy[58];
					Dummy_59 = dummy[59];
					Dummy_60 = dummy[60];
					Dummy_61 = dummy[61];
					Dummy_62 = dummy[62];
					Dummy_63 = dummy[63];
				}
			}

			public unsafe InfoUnion(WinUnion win = default, Span<byte> dummy = default)
			{
				Win = win;
				if (dummy != default)
				{
					Dummy_0 = dummy[0];
					Dummy_1 = dummy[1];
					Dummy_2 = dummy[2];
					Dummy_3 = dummy[3];
					Dummy_4 = dummy[4];
					Dummy_5 = dummy[5];
					Dummy_6 = dummy[6];
					Dummy_7 = dummy[7];
					Dummy_8 = dummy[8];
					Dummy_9 = dummy[9];
					Dummy_10 = dummy[10];
					Dummy_11 = dummy[11];
					Dummy_12 = dummy[12];
					Dummy_13 = dummy[13];
					Dummy_14 = dummy[14];
					Dummy_15 = dummy[15];
					Dummy_16 = dummy[16];
					Dummy_17 = dummy[17];
					Dummy_18 = dummy[18];
					Dummy_19 = dummy[19];
					Dummy_20 = dummy[20];
					Dummy_21 = dummy[21];
					Dummy_22 = dummy[22];
					Dummy_23 = dummy[23];
					Dummy_24 = dummy[24];
					Dummy_25 = dummy[25];
					Dummy_26 = dummy[26];
					Dummy_27 = dummy[27];
					Dummy_28 = dummy[28];
					Dummy_29 = dummy[29];
					Dummy_30 = dummy[30];
					Dummy_31 = dummy[31];
					Dummy_32 = dummy[32];
					Dummy_33 = dummy[33];
					Dummy_34 = dummy[34];
					Dummy_35 = dummy[35];
					Dummy_36 = dummy[36];
					Dummy_37 = dummy[37];
					Dummy_38 = dummy[38];
					Dummy_39 = dummy[39];
					Dummy_40 = dummy[40];
					Dummy_41 = dummy[41];
					Dummy_42 = dummy[42];
					Dummy_43 = dummy[43];
					Dummy_44 = dummy[44];
					Dummy_45 = dummy[45];
					Dummy_46 = dummy[46];
					Dummy_47 = dummy[47];
					Dummy_48 = dummy[48];
					Dummy_49 = dummy[49];
					Dummy_50 = dummy[50];
					Dummy_51 = dummy[51];
					Dummy_52 = dummy[52];
					Dummy_53 = dummy[53];
					Dummy_54 = dummy[54];
					Dummy_55 = dummy[55];
					Dummy_56 = dummy[56];
					Dummy_57 = dummy[57];
					Dummy_58 = dummy[58];
					Dummy_59 = dummy[59];
					Dummy_60 = dummy[60];
					Dummy_61 = dummy[61];
					Dummy_62 = dummy[62];
					Dummy_63 = dummy[63];
				}
			}


		}

		[NativeName(NativeNameType.Field, "version")]
		[NativeName(NativeNameType.Type, "SDL_version")]
		public SDLVersion Version;
		[NativeName(NativeNameType.Field, "subsystem")]
		[NativeName(NativeNameType.Type, "SDL_SYSWM_TYPE")]
		public SdlSyswmType Subsystem;
		[NativeName(NativeNameType.Field, "info")]
		[NativeName(NativeNameType.Type, "")]
		public InfoUnion Info;

		public unsafe SDLSysWMinfo(SDLVersion version = default, SdlSyswmType subsystem = default, InfoUnion info = default)
		{
			Version = version;
			Subsystem = subsystem;
            Info = info;
		}


	}

}
