// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{

	/// <summary>
	/// <br/>
	/// This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.<br/>
	/// A custom force feedback effect is much like a periodic effect, where the<br/>
	/// application can define its exact shape.  You will have to allocate the<br/>
	/// data yourself.  Data should consist of channels * samples Uint16 samples.<br/>
	/// If channels is one, the effect is rotated using the defined direction.<br/>
	/// Otherwise it uses the samples in data for the different axes.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticCustom")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticCustom
	{
		/// <summary>
		/// ::SDL_HAPTIC_CUSTOM <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "direction")]
		[NativeName(NativeNameType.Type, "SDL_HapticDirection")]
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "delay")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interval")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Interval;

		/// <summary>
		/// Axes to use, minimum of one. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "channels")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Channels;

		/// <summary>
		/// Sample periods. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "period")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Period;

		/// <summary>
		/// Amount of samples. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "samples")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort Samples;

		/// <summary>
		/// Should contain channels*samples items. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "data")]
		[NativeName(NativeNameType.Type, "Uint16*")]
		public unsafe ushort* Data;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "attack_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_length")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fade_level")]
		[NativeName(NativeNameType.Type, "Uint16")]
		public ushort FadeLevel;


		public unsafe SDLHapticCustom(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, byte channels = default, ushort period = default, ushort samples = default, ushort* data = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Channels = channels;
			Period = period;
			Samples = samples;
			Data = data;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}

	/// <summary>
	/// <br/>
	/// All values max at 32767 (0x7FFF).  Signed values also can be negative.<br/>
	/// Time values unless specified otherwise are in milliseconds.<br/>
	/// You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767<br/>
	/// value.  Neither delay, interval, attack_length nor fade_length support<br/>
	/// ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.<br/>
	/// Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of<br/>
	/// ::SDL_HAPTIC_INFINITY.<br/>
	/// Button triggers may not be supported on all devices, it is advised to not<br/>
	/// use them if possible.  Buttons start at index 1 instead of index 0 like<br/>
	/// the joystick.<br/>
	/// If both attack_length and fade_level are 0, the envelope is not used,<br/>
	/// otherwise both values are used.<br/>
	/// Common parts:<br/>
	/// <br/>
	/// Here we have an example of a constant effect evolution in time:<br/>
	/// <br/>
	/// Note either the attack_level or the fade_level may be above the actual<br/>
	/// effect level.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticEffect")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLHapticEffect
	{
		/// <summary>
		/// Effect type. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		[FieldOffset(0)]
		public ushort Type;

		/// <summary>
		/// Constant effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "constant")]
		[NativeName(NativeNameType.Type, "SDL_HapticConstant")]
		[FieldOffset(0)]
		public SDLHapticConstant Constant;

		/// <summary>
		/// Periodic effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "periodic")]
		[NativeName(NativeNameType.Type, "SDL_HapticPeriodic")]
		[FieldOffset(0)]
		public SDLHapticPeriodic Periodic;

		/// <summary>
		/// Condition effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "condition")]
		[NativeName(NativeNameType.Type, "SDL_HapticCondition")]
		[FieldOffset(0)]
		public SDLHapticCondition Condition;

		/// <summary>
		/// Ramp effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ramp")]
		[NativeName(NativeNameType.Type, "SDL_HapticRamp")]
		[FieldOffset(0)]
		public SDLHapticRamp Ramp;

		/// <summary>
		/// Left/Right effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leftright")]
		[NativeName(NativeNameType.Type, "SDL_HapticLeftRight")]
		[FieldOffset(0)]
		public SDLHapticLeftRight Leftright;

		/// <summary>
		/// Custom effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "custom")]
		[NativeName(NativeNameType.Type, "SDL_HapticCustom")]
		[FieldOffset(0)]
		public SDLHapticCustom Custom;


		public unsafe SDLHapticEffect(ushort type = default, SDLHapticConstant constant = default, SDLHapticPeriodic periodic = default, SDLHapticCondition condition = default, SDLHapticRamp ramp = default, SDLHapticLeftRight leftright = default, SDLHapticCustom custom = default)
		{
			Type = type;
			Constant = constant;
			Periodic = periodic;
			Condition = condition;
			Ramp = ramp;
			Leftright = leftright;
			Custom = custom;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_hid_device_")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHidDevice
	{


	}

	/// <summary>
	/// hidapi info structure <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_hid_device_info")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHidDeviceInfo
	{
		/// <summary>
		/// Platform-specific device path <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "path")]
		[NativeName(NativeNameType.Type, "char*")]
		public unsafe byte* Path;

		/// <summary>
		/// Device Vendor ID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "vendor_id")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort VendorId;

		/// <summary>
		/// Device Product ID <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "product_id")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort ProductId;

		/// <summary>
		/// Serial Number <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "serial_number")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* SerialNumber;

		/// <summary>
		/// Device Release Number in binary-coded decimal,<br/>
		/// also known as Device Version Number <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "release_number")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort ReleaseNumber;

		/// <summary>
		/// Manufacturer String <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "manufacturer_string")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* ManufacturerString;

		/// <summary>
		/// Product string <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "product_string")]
		[NativeName(NativeNameType.Type, "wchar*")]
		public unsafe char* ProductString;

		/// <summary>
		/// Usage Page for this Device/Interface<br/>
		/// (Windows/Mac only). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "usage_page")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort UsagePage;

		/// <summary>
		/// Usage for this Device/Interface<br/>
		/// (Windows/Mac only).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "usage")]
		[NativeName(NativeNameType.Type, "unsigned short")]
		public ushort Usage;

		/// <summary>
		/// The USB interface which this logical device<br/>
		/// represents.<br/>
		/// Valid on both Linux implementations in all cases.<br/>
		/// Valid on the Windows implementation only if the device<br/>
		/// contains more than one interface. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_number")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceNumber;

		/// <summary>
		/// Additional information about the USB interface.<br/>
		/// Valid on libusb and Android implementations. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "interface_class")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceClass;

		[NativeName(NativeNameType.Field, "interface_subclass")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceSubclass;
		[NativeName(NativeNameType.Field, "interface_protocol")]
		[NativeName(NativeNameType.Type, "int")]
		public int InterfaceProtocol;
		/// <summary>
		/// Pointer to the next device <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "next")]
		[NativeName(NativeNameType.Type, "SDL_hid_device_info*")]
		public unsafe SDLHidDeviceInfo* Next;


		public unsafe SDLHidDeviceInfo(byte* path = default, ushort vendorId = default, ushort productId = default, char* serialNumber = default, ushort releaseNumber = default, char* manufacturerString = default, char* productString = default, ushort usagePage = default, ushort usage = default, int interfaceNumber = default, int interfaceClass = default, int interfaceSubclass = default, int interfaceProtocol = default, SDLHidDeviceInfo* next = default)
		{
			Path = path;
			VendorId = vendorId;
			ProductId = productId;
			SerialNumber = serialNumber;
			ReleaseNumber = releaseNumber;
			ManufacturerString = manufacturerString;
			ProductString = productString;
			UsagePage = usagePage;
			Usage = usage;
			InterfaceNumber = interfaceNumber;
			InterfaceClass = interfaceClass;
			InterfaceSubclass = interfaceSubclass;
			InterfaceProtocol = interfaceProtocol;
			Next = next;
		}


	}

	/// <summary>
	/// Individual button data.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxButtonData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxButtonData
	{
		/// <summary>
		/// ::SDL_MessageBoxButtonFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// User defined button id (value returned via SDL_ShowMessageBox) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buttonid")]
		[NativeName(NativeNameType.Type, "int")]
		public int Buttonid;

		/// <summary>
		/// The UTF-8 button text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Text;


		public unsafe SDLMessageBoxButtonData(uint flags = default, int buttonid = default, byte* text = default)
		{
			Flags = flags;
			Buttonid = buttonid;
			Text = text;
		}


	}

	/// <summary>
	/// RGB value used in a message box color scheme<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxColor")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxColor
	{
		[NativeName(NativeNameType.Field, "r")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte R;
		[NativeName(NativeNameType.Field, "g")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte G;
		[NativeName(NativeNameType.Field, "b")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte B;

		public unsafe SDLMessageBoxColor(byte r = default, byte g = default, byte b = default)
		{
			R = r;
			G = g;
			B = b;
		}


	}

	/// <summary>
	/// A set of colors to use for message box dialogs<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxColorScheme")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxColorScheme
	{
		[NativeName(NativeNameType.Field, "colors")]
		[NativeName(NativeNameType.Type, "SDL_MessageBoxColor[5]")]
		public SDLMessageBoxColor Colors_0;
		public SDLMessageBoxColor Colors_1;
		public SDLMessageBoxColor Colors_2;
		public SDLMessageBoxColor Colors_3;
		public SDLMessageBoxColor Colors_4;

		public unsafe SDLMessageBoxColorScheme(SDLMessageBoxColor* colors = default)
		{
			if (colors != default)
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
			}
		}

		public unsafe SDLMessageBoxColorScheme(Span<SDLMessageBoxColor> colors = default)
		{
			if (colors != default)
			{
				Colors_0 = colors[0];
				Colors_1 = colors[1];
				Colors_2 = colors[2];
				Colors_3 = colors[3];
				Colors_4 = colors[4];
			}
		}


		public unsafe Span<SDLMessageBoxColor> Colors
		
		{
			get
			{
				fixed (SDLMessageBoxColor* p = &this.Colors_0)
				{
					return new Span<SDLMessageBoxColor>(p, 5);
				}
			}
		}
	}

	/// <summary>
	/// MessageBox structure containing title, text, window, etc.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_MessageBoxData")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLMessageBoxData
	{
		/// <summary>
		/// ::SDL_MessageBoxFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// Parent window, can be NULL <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "window")]
		[NativeName(NativeNameType.Type, "SDL_Window*")]
		public unsafe SDLWindow* Window;

		/// <summary>
		/// UTF-8 title <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "title")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Title;

		/// <summary>
		/// UTF-8 message text <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "message")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Message;

		[NativeName(NativeNameType.Field, "numbuttons")]
		[NativeName(NativeNameType.Type, "int")]
		public int Numbuttons;
		[NativeName(NativeNameType.Field, "buttons")]
		[NativeName(NativeNameType.Type, "const SDL_MessageBoxButtonData*")]
		public unsafe SDLMessageBoxButtonData* Buttons;
		/// <summary>
		/// ::SDL_MessageBoxColorScheme, can be NULL to use system settings <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "colorScheme")]
		[NativeName(NativeNameType.Type, "const SDL_MessageBoxColorScheme*")]
		public unsafe SDLMessageBoxColorScheme* ColorScheme;


		public unsafe SDLMessageBoxData(uint flags = default, SDLWindow* window = default, byte* title = default, byte* message = default, int numbuttons = default, SDLMessageBoxButtonData* buttons = default, SDLMessageBoxColorScheme* colorScheme = default)
		{
			Flags = flags;
			Window = window;
			Title = title;
			Message = message;
			Numbuttons = numbuttons;
			Buttons = buttons;
			ColorScheme = colorScheme;
		}


	}

	/// <summary>
	/// Information on the capabilities of a render driver or context.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_RendererInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRendererInfo
	{
		/// <summary>
		/// The name of the renderer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// Supported ::SDL_RendererFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// The number of available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "num_texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint NumTextureFormats;

		/// <summary>
		/// The available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32[16]")]
		public uint TextureFormats_0;
		public uint TextureFormats_1;
		public uint TextureFormats_2;
		public uint TextureFormats_3;
		public uint TextureFormats_4;
		public uint TextureFormats_5;
		public uint TextureFormats_6;
		public uint TextureFormats_7;
		public uint TextureFormats_8;
		public uint TextureFormats_9;
		public uint TextureFormats_10;
		public uint TextureFormats_11;
		public uint TextureFormats_12;
		public uint TextureFormats_13;
		public uint TextureFormats_14;
		public uint TextureFormats_15;

		/// <summary>
		/// The maximum texture width <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_width")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureWidth;

		/// <summary>
		/// The maximum texture height <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_height")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureHeight;


		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, uint* textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default)
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}

		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, Span<uint> textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default)
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}


	}

	/// <summary>
	/// Vertex structure<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Vertex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLVertex
	{
		/// <summary>
		/// Vertex position, in SDL_Renderer coordinates  <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "position")]
		[NativeName(NativeNameType.Type, "SDL_FPoint")]
		public SDLFPoint Position;

		/// <summary>
		/// Vertex color <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "color")]
		[NativeName(NativeNameType.Type, "SDL_Color")]
		public SDLColor Color;

		/// <summary>
		/// Normalized texture coordinates, if needed <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "tex_coord")]
		[NativeName(NativeNameType.Type, "SDL_FPoint")]
		public SDLFPoint TexCoord;


		public unsafe SDLVertex(SDLFPoint position = default, SDLColor color = default, SDLFPoint texCoord = default)
		{
			Position = position;
			Color = color;
			TexCoord = texCoord;
		}


	}

	/// <summary>
	/// A structure representing rendering state<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Renderer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRenderer
	{


	}

	/// <summary>
	/// An efficient driver-specific representation of pixel data<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Texture")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTexture
	{


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_WindowShapeParams")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLWindowShapeParams
	{
		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "binarizationCutoff")]
		[NativeName(NativeNameType.Type, "Uint8")]
		[FieldOffset(0)]
		public byte BinarizationCutoff;

		[NativeName(NativeNameType.Field, "colorKey")]
		[NativeName(NativeNameType.Type, "SDL_Color")]
		[FieldOffset(0)]
		public SDLColor ColorKey;

		public unsafe SDLWindowShapeParams(byte binarizationCutoff = default, SDLColor colorKey = default)
		{
			BinarizationCutoff = binarizationCutoff;
			ColorKey = colorKey;
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_WindowShapeMode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLWindowShapeMode
	{
		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mode")]
		[NativeName(NativeNameType.Type, "WindowShapeMode")]
		public WindowShapeMode Mode;

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "parameters")]
		[NativeName(NativeNameType.Type, "SDL_WindowShapeParams")]
		public SDLWindowShapeParams Parameters;


		public unsafe SDLWindowShapeMode(WindowShapeMode mode = default, SDLWindowShapeParams parameters = default)
		{
			Mode = mode;
			Parameters = parameters;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "IDirect3DDevice9")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct IDirect3DDevice9
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ID3D11Device")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ID3D11Device
	{


	}

	[NativeName(NativeNameType.StructOrClass, "ID3D12Device")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ID3D12Device
	{


	}

	[NativeName(NativeNameType.StructOrClass, "SDL_Locale")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLLocale
	{
		/// <summary>
		/// A language name, like "en" for English. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "language")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Language;

		/// <summary>
		/// A country, like "US" for America. Can be NULL. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "country")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Country;


		public unsafe SDLLocale(byte* language = default, byte* country = default)
		{
			Language = language;
			Country = country;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "AHardwareBuffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AHardwareBuffer
	{


	}

	[NativeName(NativeNameType.StructOrClass, "EGLClientPixmapHI")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct EGLClientPixmapHI
	{
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PData;
		[NativeName(NativeNameType.Field, "iWidth")]
		[NativeName(NativeNameType.Type, "EGLint")]
		public int IWidth;
		[NativeName(NativeNameType.Field, "iHeight")]
		[NativeName(NativeNameType.Type, "EGLint")]
		public int IHeight;
		[NativeName(NativeNameType.Field, "iStride")]
		[NativeName(NativeNameType.Type, "EGLint")]
		public int IStride;

		public unsafe EGLClientPixmapHI(void* pData = default, int iWidth = default, int iHeight = default, int iStride = default)
		{
			PData = pData;
			IWidth = iWidth;
			IHeight = iHeight;
			IStride = iStride;
		}


	}

	[NativeName(NativeNameType.StructOrClass, "wl_display")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct WlDisplay
	{


	}

	[NativeName(NativeNameType.StructOrClass, "wl_resource")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct WlResource
	{


	}

	[NativeName(NativeNameType.StructOrClass, "wl_buffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct WlBuffer
	{


	}

	[NativeName(NativeNameType.StructOrClass, "__GLsync")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLsync
	{


	}

	[NativeName(NativeNameType.StructOrClass, "_cl_context")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ClContext
	{


	}

	[NativeName(NativeNameType.StructOrClass, "_cl_event")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ClEvent
	{


	}

	[NativeName(NativeNameType.StructOrClass, "SDLTest_CommonState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestCommonState
	{
		/// <summary>
		/// SDL init flags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "argv")]
		[NativeName(NativeNameType.Type, "char**")]
		public unsafe byte** Argv;

		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "verbose")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Verbose;
		/// <summary>
		/// Video info <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "videodriver")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Videodriver;

		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "int")]
		public int Display;
		[NativeName(NativeNameType.Field, "window_title")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* WindowTitle;
		[NativeName(NativeNameType.Field, "window_icon")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* WindowIcon;
		[NativeName(NativeNameType.Field, "window_flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint WindowFlags;
		[NativeName(NativeNameType.Field, "flash_on_focus_loss")]
		[NativeName(NativeNameType.Type, "SDL_bool")]
		public SDLBool FlashOnFocusLoss;
		[NativeName(NativeNameType.Field, "window_x")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowX;
		[NativeName(NativeNameType.Field, "window_y")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowY;
		[NativeName(NativeNameType.Field, "window_w")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowW;
		[NativeName(NativeNameType.Field, "window_h")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowH;
		[NativeName(NativeNameType.Field, "window_minW")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowMinW;
		[NativeName(NativeNameType.Field, "window_minH")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowMinH;
		[NativeName(NativeNameType.Field, "window_maxW")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowMaxW;
		[NativeName(NativeNameType.Field, "window_maxH")]
		[NativeName(NativeNameType.Type, "int")]
		public int WindowMaxH;
		[NativeName(NativeNameType.Field, "logical_w")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogicalW;
		[NativeName(NativeNameType.Field, "logical_h")]
		[NativeName(NativeNameType.Type, "int")]
		public int LogicalH;
		[NativeName(NativeNameType.Field, "scale")]
		[NativeName(NativeNameType.Type, "float")]
		public float Scale;
		[NativeName(NativeNameType.Field, "depth")]
		[NativeName(NativeNameType.Type, "int")]
		public int Depth;
		[NativeName(NativeNameType.Field, "refresh_rate")]
		[NativeName(NativeNameType.Type, "int")]
		public int RefreshRate;
		[NativeName(NativeNameType.Field, "num_windows")]
		[NativeName(NativeNameType.Type, "int")]
		public int NumWindows;
		[NativeName(NativeNameType.Field, "windows")]
		[NativeName(NativeNameType.Type, "SDL_Window**")]
		public unsafe SDLWindow** Windows;
		/// <summary>
		/// Renderer info <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "renderdriver")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Renderdriver;

		[NativeName(NativeNameType.Field, "render_flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint RenderFlags;
		[NativeName(NativeNameType.Field, "skip_renderer")]
		[NativeName(NativeNameType.Type, "SDL_bool")]
		public SDLBool SkipRenderer;
		[NativeName(NativeNameType.Field, "renderers")]
		[NativeName(NativeNameType.Type, "SDL_Renderer**")]
		public unsafe SDLRenderer** Renderers;
		[NativeName(NativeNameType.Field, "targets")]
		[NativeName(NativeNameType.Type, "SDL_Texture**")]
		public unsafe SDLTexture** Targets;
		/// <summary>
		/// Audio info <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "audiodriver")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Audiodriver;

		[NativeName(NativeNameType.Field, "audiospec")]
		[NativeName(NativeNameType.Type, "SDL_AudioSpec")]
		public SDLAudioSpec Audiospec;
		/// <summary>
		/// GL settings <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gl_red_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlRedSize;

		[NativeName(NativeNameType.Field, "gl_green_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlGreenSize;
		[NativeName(NativeNameType.Field, "gl_blue_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlBlueSize;
		[NativeName(NativeNameType.Field, "gl_alpha_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAlphaSize;
		[NativeName(NativeNameType.Field, "gl_buffer_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlBufferSize;
		[NativeName(NativeNameType.Field, "gl_depth_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlDepthSize;
		[NativeName(NativeNameType.Field, "gl_stencil_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlStencilSize;
		[NativeName(NativeNameType.Field, "gl_double_buffer")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlDoubleBuffer;
		[NativeName(NativeNameType.Field, "gl_accum_red_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAccumRedSize;
		[NativeName(NativeNameType.Field, "gl_accum_green_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAccumGreenSize;
		[NativeName(NativeNameType.Field, "gl_accum_blue_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAccumBlueSize;
		[NativeName(NativeNameType.Field, "gl_accum_alpha_size")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAccumAlphaSize;
		[NativeName(NativeNameType.Field, "gl_stereo")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlStereo;
		[NativeName(NativeNameType.Field, "gl_multisamplebuffers")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlMultisamplebuffers;
		[NativeName(NativeNameType.Field, "gl_multisamplesamples")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlMultisamplesamples;
		[NativeName(NativeNameType.Field, "gl_retained_backing")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlRetainedBacking;
		[NativeName(NativeNameType.Field, "gl_accelerated")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlAccelerated;
		[NativeName(NativeNameType.Field, "gl_major_version")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlMajorVersion;
		[NativeName(NativeNameType.Field, "gl_minor_version")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlMinorVersion;
		[NativeName(NativeNameType.Field, "gl_debug")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlDebug;
		[NativeName(NativeNameType.Field, "gl_profile_mask")]
		[NativeName(NativeNameType.Type, "int")]
		public int GlProfileMask;
		/// <summary>
		/// Additional fields added in 2.0.18 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "confine")]
		[NativeName(NativeNameType.Type, "SDL_Rect")]
		public SDLRect Confine;


		public unsafe SDLTestCommonState(byte** argv = default, uint flags = default, uint verbose = default, byte* videodriver = default, int display = default, byte* windowTitle = default, byte* windowIcon = default, uint windowFlags = default, SDLBool flashOnFocusLoss = default, int windowX = default, int windowY = default, int windowW = default, int windowH = default, int windowMinw = default, int windowMinh = default, int windowMaxw = default, int windowMaxh = default, int logicalW = default, int logicalH = default, float scale = default, int depth = default, int refreshRate = default, int numWindows = default, SDLWindow** windows = default, byte* renderdriver = default, uint renderFlags = default, SDLBool skipRenderer = default, SDLRenderer** renderers = default, SDLTexture** targets = default, byte* audiodriver = default, SDLAudioSpec audiospec = default, int glRedSize = default, int glGreenSize = default, int glBlueSize = default, int glAlphaSize = default, int glBufferSize = default, int glDepthSize = default, int glStencilSize = default, int glDoubleBuffer = default, int glAccumRedSize = default, int glAccumGreenSize = default, int glAccumBlueSize = default, int glAccumAlphaSize = default, int glStereo = default, int glMultisamplebuffers = default, int glMultisamplesamples = default, int glRetainedBacking = default, int glAccelerated = default, int glMajorVersion = default, int glMinorVersion = default, int glDebug = default, int glProfileMask = default, SDLRect confine = default)
		{
			Argv = argv;
			Flags = flags;
			Verbose = verbose;
			Videodriver = videodriver;
			Display = display;
			WindowTitle = windowTitle;
			WindowIcon = windowIcon;
			WindowFlags = windowFlags;
			FlashOnFocusLoss = flashOnFocusLoss;
			WindowX = windowX;
			WindowY = windowY;
			WindowW = windowW;
			WindowH = windowH;
			WindowMinW = windowMinw;
			WindowMinH = windowMinh;
			WindowMaxW = windowMaxw;
			WindowMaxH = windowMaxh;
			LogicalW = logicalW;
			LogicalH = logicalH;
			Scale = scale;
			Depth = depth;
			RefreshRate = refreshRate;
			NumWindows = numWindows;
			Windows = windows;
			Renderdriver = renderdriver;
			RenderFlags = renderFlags;
			SkipRenderer = skipRenderer;
			Renderers = renderers;
			Targets = targets;
			Audiodriver = audiodriver;
			Audiospec = audiospec;
			GlRedSize = glRedSize;
			GlGreenSize = glGreenSize;
			GlBlueSize = glBlueSize;
			GlAlphaSize = glAlphaSize;
			GlBufferSize = glBufferSize;
			GlDepthSize = glDepthSize;
			GlStencilSize = glStencilSize;
			GlDoubleBuffer = glDoubleBuffer;
			GlAccumRedSize = glAccumRedSize;
			GlAccumGreenSize = glAccumGreenSize;
			GlAccumBlueSize = glAccumBlueSize;
			GlAccumAlphaSize = glAccumAlphaSize;
			GlStereo = glStereo;
			GlMultisamplebuffers = glMultisamplebuffers;
			GlMultisamplesamples = glMultisamplesamples;
			GlRetainedBacking = glRetainedBacking;
			GlAccelerated = glAccelerated;
			GlMajorVersion = glMajorVersion;
			GlMinorVersion = glMinorVersion;
			GlDebug = glDebug;
			GlProfileMask = glProfileMask;
			Confine = confine;
		}


	}

	/// <summary>
	/// Type for test images.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_SurfaceImage_s")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestSurfaceImageS
	{
		[NativeName(NativeNameType.Field, "width")]
		[NativeName(NativeNameType.Type, "int")]
		public int Width;
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "int")]
		public int Height;
		/// <summary>
		/// 3:RGB, 4:RGBA <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bytes_per_pixel")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint BytesPerPixel;

		[NativeName(NativeNameType.Field, "pixel_data")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PixelData;

		public unsafe SDLTestSurfaceImageS(int width = default, int height = default, uint bytesPerPixel = default, byte* pixelData = default)
		{
			Width = width;
			Height = height;
			BytesPerPixel = bytesPerPixel;
			PixelData = pixelData;
		}


	}

	/// <summary>
	/// Data structure for CRC32 (checksum) computation<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_Crc32Context")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestCrc32Context
	{
		/// <summary>
		/// CRC table <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "crc32_table")]
		[NativeName(NativeNameType.Type, "unsigned int[256]")]
		public uint Crc32Table_0;
		public uint Crc32Table_1;
		public uint Crc32Table_2;
		public uint Crc32Table_3;
		public uint Crc32Table_4;
		public uint Crc32Table_5;
		public uint Crc32Table_6;
		public uint Crc32Table_7;
		public uint Crc32Table_8;
		public uint Crc32Table_9;
		public uint Crc32Table_10;
		public uint Crc32Table_11;
		public uint Crc32Table_12;
		public uint Crc32Table_13;
		public uint Crc32Table_14;
		public uint Crc32Table_15;
		public uint Crc32Table_16;
		public uint Crc32Table_17;
		public uint Crc32Table_18;
		public uint Crc32Table_19;
		public uint Crc32Table_20;
		public uint Crc32Table_21;
		public uint Crc32Table_22;
		public uint Crc32Table_23;
		public uint Crc32Table_24;
		public uint Crc32Table_25;
		public uint Crc32Table_26;
		public uint Crc32Table_27;
		public uint Crc32Table_28;
		public uint Crc32Table_29;
		public uint Crc32Table_30;
		public uint Crc32Table_31;
		public uint Crc32Table_32;
		public uint Crc32Table_33;
		public uint Crc32Table_34;
		public uint Crc32Table_35;
		public uint Crc32Table_36;
		public uint Crc32Table_37;
		public uint Crc32Table_38;
		public uint Crc32Table_39;
		public uint Crc32Table_40;
		public uint Crc32Table_41;
		public uint Crc32Table_42;
		public uint Crc32Table_43;
		public uint Crc32Table_44;
		public uint Crc32Table_45;
		public uint Crc32Table_46;
		public uint Crc32Table_47;
		public uint Crc32Table_48;
		public uint Crc32Table_49;
		public uint Crc32Table_50;
		public uint Crc32Table_51;
		public uint Crc32Table_52;
		public uint Crc32Table_53;
		public uint Crc32Table_54;
		public uint Crc32Table_55;
		public uint Crc32Table_56;
		public uint Crc32Table_57;
		public uint Crc32Table_58;
		public uint Crc32Table_59;
		public uint Crc32Table_60;
		public uint Crc32Table_61;
		public uint Crc32Table_62;
		public uint Crc32Table_63;
		public uint Crc32Table_64;
		public uint Crc32Table_65;
		public uint Crc32Table_66;
		public uint Crc32Table_67;
		public uint Crc32Table_68;
		public uint Crc32Table_69;
		public uint Crc32Table_70;
		public uint Crc32Table_71;
		public uint Crc32Table_72;
		public uint Crc32Table_73;
		public uint Crc32Table_74;
		public uint Crc32Table_75;
		public uint Crc32Table_76;
		public uint Crc32Table_77;
		public uint Crc32Table_78;
		public uint Crc32Table_79;
		public uint Crc32Table_80;
		public uint Crc32Table_81;
		public uint Crc32Table_82;
		public uint Crc32Table_83;
		public uint Crc32Table_84;
		public uint Crc32Table_85;
		public uint Crc32Table_86;
		public uint Crc32Table_87;
		public uint Crc32Table_88;
		public uint Crc32Table_89;
		public uint Crc32Table_90;
		public uint Crc32Table_91;
		public uint Crc32Table_92;
		public uint Crc32Table_93;
		public uint Crc32Table_94;
		public uint Crc32Table_95;
		public uint Crc32Table_96;
		public uint Crc32Table_97;
		public uint Crc32Table_98;
		public uint Crc32Table_99;
		public uint Crc32Table_100;
		public uint Crc32Table_101;
		public uint Crc32Table_102;
		public uint Crc32Table_103;
		public uint Crc32Table_104;
		public uint Crc32Table_105;
		public uint Crc32Table_106;
		public uint Crc32Table_107;
		public uint Crc32Table_108;
		public uint Crc32Table_109;
		public uint Crc32Table_110;
		public uint Crc32Table_111;
		public uint Crc32Table_112;
		public uint Crc32Table_113;
		public uint Crc32Table_114;
		public uint Crc32Table_115;
		public uint Crc32Table_116;
		public uint Crc32Table_117;
		public uint Crc32Table_118;
		public uint Crc32Table_119;
		public uint Crc32Table_120;
		public uint Crc32Table_121;
		public uint Crc32Table_122;
		public uint Crc32Table_123;
		public uint Crc32Table_124;
		public uint Crc32Table_125;
		public uint Crc32Table_126;
		public uint Crc32Table_127;
		public uint Crc32Table_128;
		public uint Crc32Table_129;
		public uint Crc32Table_130;
		public uint Crc32Table_131;
		public uint Crc32Table_132;
		public uint Crc32Table_133;
		public uint Crc32Table_134;
		public uint Crc32Table_135;
		public uint Crc32Table_136;
		public uint Crc32Table_137;
		public uint Crc32Table_138;
		public uint Crc32Table_139;
		public uint Crc32Table_140;
		public uint Crc32Table_141;
		public uint Crc32Table_142;
		public uint Crc32Table_143;
		public uint Crc32Table_144;
		public uint Crc32Table_145;
		public uint Crc32Table_146;
		public uint Crc32Table_147;
		public uint Crc32Table_148;
		public uint Crc32Table_149;
		public uint Crc32Table_150;
		public uint Crc32Table_151;
		public uint Crc32Table_152;
		public uint Crc32Table_153;
		public uint Crc32Table_154;
		public uint Crc32Table_155;
		public uint Crc32Table_156;
		public uint Crc32Table_157;
		public uint Crc32Table_158;
		public uint Crc32Table_159;
		public uint Crc32Table_160;
		public uint Crc32Table_161;
		public uint Crc32Table_162;
		public uint Crc32Table_163;
		public uint Crc32Table_164;
		public uint Crc32Table_165;
		public uint Crc32Table_166;
		public uint Crc32Table_167;
		public uint Crc32Table_168;
		public uint Crc32Table_169;
		public uint Crc32Table_170;
		public uint Crc32Table_171;
		public uint Crc32Table_172;
		public uint Crc32Table_173;
		public uint Crc32Table_174;
		public uint Crc32Table_175;
		public uint Crc32Table_176;
		public uint Crc32Table_177;
		public uint Crc32Table_178;
		public uint Crc32Table_179;
		public uint Crc32Table_180;
		public uint Crc32Table_181;
		public uint Crc32Table_182;
		public uint Crc32Table_183;
		public uint Crc32Table_184;
		public uint Crc32Table_185;
		public uint Crc32Table_186;
		public uint Crc32Table_187;
		public uint Crc32Table_188;
		public uint Crc32Table_189;
		public uint Crc32Table_190;
		public uint Crc32Table_191;
		public uint Crc32Table_192;
		public uint Crc32Table_193;
		public uint Crc32Table_194;
		public uint Crc32Table_195;
		public uint Crc32Table_196;
		public uint Crc32Table_197;
		public uint Crc32Table_198;
		public uint Crc32Table_199;
		public uint Crc32Table_200;
		public uint Crc32Table_201;
		public uint Crc32Table_202;
		public uint Crc32Table_203;
		public uint Crc32Table_204;
		public uint Crc32Table_205;
		public uint Crc32Table_206;
		public uint Crc32Table_207;
		public uint Crc32Table_208;
		public uint Crc32Table_209;
		public uint Crc32Table_210;
		public uint Crc32Table_211;
		public uint Crc32Table_212;
		public uint Crc32Table_213;
		public uint Crc32Table_214;
		public uint Crc32Table_215;
		public uint Crc32Table_216;
		public uint Crc32Table_217;
		public uint Crc32Table_218;
		public uint Crc32Table_219;
		public uint Crc32Table_220;
		public uint Crc32Table_221;
		public uint Crc32Table_222;
		public uint Crc32Table_223;
		public uint Crc32Table_224;
		public uint Crc32Table_225;
		public uint Crc32Table_226;
		public uint Crc32Table_227;
		public uint Crc32Table_228;
		public uint Crc32Table_229;
		public uint Crc32Table_230;
		public uint Crc32Table_231;
		public uint Crc32Table_232;
		public uint Crc32Table_233;
		public uint Crc32Table_234;
		public uint Crc32Table_235;
		public uint Crc32Table_236;
		public uint Crc32Table_237;
		public uint Crc32Table_238;
		public uint Crc32Table_239;
		public uint Crc32Table_240;
		public uint Crc32Table_241;
		public uint Crc32Table_242;
		public uint Crc32Table_243;
		public uint Crc32Table_244;
		public uint Crc32Table_245;
		public uint Crc32Table_246;
		public uint Crc32Table_247;
		public uint Crc32Table_248;
		public uint Crc32Table_249;
		public uint Crc32Table_250;
		public uint Crc32Table_251;
		public uint Crc32Table_252;
		public uint Crc32Table_253;
		public uint Crc32Table_254;
		public uint Crc32Table_255;


		public unsafe SDLTestCrc32Context(uint* crc32Table = default)
		{
			if (crc32Table != default)
			{
				Crc32Table_0 = crc32Table[0];
				Crc32Table_1 = crc32Table[1];
				Crc32Table_2 = crc32Table[2];
				Crc32Table_3 = crc32Table[3];
				Crc32Table_4 = crc32Table[4];
				Crc32Table_5 = crc32Table[5];
				Crc32Table_6 = crc32Table[6];
				Crc32Table_7 = crc32Table[7];
				Crc32Table_8 = crc32Table[8];
				Crc32Table_9 = crc32Table[9];
				Crc32Table_10 = crc32Table[10];
				Crc32Table_11 = crc32Table[11];
				Crc32Table_12 = crc32Table[12];
				Crc32Table_13 = crc32Table[13];
				Crc32Table_14 = crc32Table[14];
				Crc32Table_15 = crc32Table[15];
				Crc32Table_16 = crc32Table[16];
				Crc32Table_17 = crc32Table[17];
				Crc32Table_18 = crc32Table[18];
				Crc32Table_19 = crc32Table[19];
				Crc32Table_20 = crc32Table[20];
				Crc32Table_21 = crc32Table[21];
				Crc32Table_22 = crc32Table[22];
				Crc32Table_23 = crc32Table[23];
				Crc32Table_24 = crc32Table[24];
				Crc32Table_25 = crc32Table[25];
				Crc32Table_26 = crc32Table[26];
				Crc32Table_27 = crc32Table[27];
				Crc32Table_28 = crc32Table[28];
				Crc32Table_29 = crc32Table[29];
				Crc32Table_30 = crc32Table[30];
				Crc32Table_31 = crc32Table[31];
				Crc32Table_32 = crc32Table[32];
				Crc32Table_33 = crc32Table[33];
				Crc32Table_34 = crc32Table[34];
				Crc32Table_35 = crc32Table[35];
				Crc32Table_36 = crc32Table[36];
				Crc32Table_37 = crc32Table[37];
				Crc32Table_38 = crc32Table[38];
				Crc32Table_39 = crc32Table[39];
				Crc32Table_40 = crc32Table[40];
				Crc32Table_41 = crc32Table[41];
				Crc32Table_42 = crc32Table[42];
				Crc32Table_43 = crc32Table[43];
				Crc32Table_44 = crc32Table[44];
				Crc32Table_45 = crc32Table[45];
				Crc32Table_46 = crc32Table[46];
				Crc32Table_47 = crc32Table[47];
				Crc32Table_48 = crc32Table[48];
				Crc32Table_49 = crc32Table[49];
				Crc32Table_50 = crc32Table[50];
				Crc32Table_51 = crc32Table[51];
				Crc32Table_52 = crc32Table[52];
				Crc32Table_53 = crc32Table[53];
				Crc32Table_54 = crc32Table[54];
				Crc32Table_55 = crc32Table[55];
				Crc32Table_56 = crc32Table[56];
				Crc32Table_57 = crc32Table[57];
				Crc32Table_58 = crc32Table[58];
				Crc32Table_59 = crc32Table[59];
				Crc32Table_60 = crc32Table[60];
				Crc32Table_61 = crc32Table[61];
				Crc32Table_62 = crc32Table[62];
				Crc32Table_63 = crc32Table[63];
				Crc32Table_64 = crc32Table[64];
				Crc32Table_65 = crc32Table[65];
				Crc32Table_66 = crc32Table[66];
				Crc32Table_67 = crc32Table[67];
				Crc32Table_68 = crc32Table[68];
				Crc32Table_69 = crc32Table[69];
				Crc32Table_70 = crc32Table[70];
				Crc32Table_71 = crc32Table[71];
				Crc32Table_72 = crc32Table[72];
				Crc32Table_73 = crc32Table[73];
				Crc32Table_74 = crc32Table[74];
				Crc32Table_75 = crc32Table[75];
				Crc32Table_76 = crc32Table[76];
				Crc32Table_77 = crc32Table[77];
				Crc32Table_78 = crc32Table[78];
				Crc32Table_79 = crc32Table[79];
				Crc32Table_80 = crc32Table[80];
				Crc32Table_81 = crc32Table[81];
				Crc32Table_82 = crc32Table[82];
				Crc32Table_83 = crc32Table[83];
				Crc32Table_84 = crc32Table[84];
				Crc32Table_85 = crc32Table[85];
				Crc32Table_86 = crc32Table[86];
				Crc32Table_87 = crc32Table[87];
				Crc32Table_88 = crc32Table[88];
				Crc32Table_89 = crc32Table[89];
				Crc32Table_90 = crc32Table[90];
				Crc32Table_91 = crc32Table[91];
				Crc32Table_92 = crc32Table[92];
				Crc32Table_93 = crc32Table[93];
				Crc32Table_94 = crc32Table[94];
				Crc32Table_95 = crc32Table[95];
				Crc32Table_96 = crc32Table[96];
				Crc32Table_97 = crc32Table[97];
				Crc32Table_98 = crc32Table[98];
				Crc32Table_99 = crc32Table[99];
				Crc32Table_100 = crc32Table[100];
				Crc32Table_101 = crc32Table[101];
				Crc32Table_102 = crc32Table[102];
				Crc32Table_103 = crc32Table[103];
				Crc32Table_104 = crc32Table[104];
				Crc32Table_105 = crc32Table[105];
				Crc32Table_106 = crc32Table[106];
				Crc32Table_107 = crc32Table[107];
				Crc32Table_108 = crc32Table[108];
				Crc32Table_109 = crc32Table[109];
				Crc32Table_110 = crc32Table[110];
				Crc32Table_111 = crc32Table[111];
				Crc32Table_112 = crc32Table[112];
				Crc32Table_113 = crc32Table[113];
				Crc32Table_114 = crc32Table[114];
				Crc32Table_115 = crc32Table[115];
				Crc32Table_116 = crc32Table[116];
				Crc32Table_117 = crc32Table[117];
				Crc32Table_118 = crc32Table[118];
				Crc32Table_119 = crc32Table[119];
				Crc32Table_120 = crc32Table[120];
				Crc32Table_121 = crc32Table[121];
				Crc32Table_122 = crc32Table[122];
				Crc32Table_123 = crc32Table[123];
				Crc32Table_124 = crc32Table[124];
				Crc32Table_125 = crc32Table[125];
				Crc32Table_126 = crc32Table[126];
				Crc32Table_127 = crc32Table[127];
				Crc32Table_128 = crc32Table[128];
				Crc32Table_129 = crc32Table[129];
				Crc32Table_130 = crc32Table[130];
				Crc32Table_131 = crc32Table[131];
				Crc32Table_132 = crc32Table[132];
				Crc32Table_133 = crc32Table[133];
				Crc32Table_134 = crc32Table[134];
				Crc32Table_135 = crc32Table[135];
				Crc32Table_136 = crc32Table[136];
				Crc32Table_137 = crc32Table[137];
				Crc32Table_138 = crc32Table[138];
				Crc32Table_139 = crc32Table[139];
				Crc32Table_140 = crc32Table[140];
				Crc32Table_141 = crc32Table[141];
				Crc32Table_142 = crc32Table[142];
				Crc32Table_143 = crc32Table[143];
				Crc32Table_144 = crc32Table[144];
				Crc32Table_145 = crc32Table[145];
				Crc32Table_146 = crc32Table[146];
				Crc32Table_147 = crc32Table[147];
				Crc32Table_148 = crc32Table[148];
				Crc32Table_149 = crc32Table[149];
				Crc32Table_150 = crc32Table[150];
				Crc32Table_151 = crc32Table[151];
				Crc32Table_152 = crc32Table[152];
				Crc32Table_153 = crc32Table[153];
				Crc32Table_154 = crc32Table[154];
				Crc32Table_155 = crc32Table[155];
				Crc32Table_156 = crc32Table[156];
				Crc32Table_157 = crc32Table[157];
				Crc32Table_158 = crc32Table[158];
				Crc32Table_159 = crc32Table[159];
				Crc32Table_160 = crc32Table[160];
				Crc32Table_161 = crc32Table[161];
				Crc32Table_162 = crc32Table[162];
				Crc32Table_163 = crc32Table[163];
				Crc32Table_164 = crc32Table[164];
				Crc32Table_165 = crc32Table[165];
				Crc32Table_166 = crc32Table[166];
				Crc32Table_167 = crc32Table[167];
				Crc32Table_168 = crc32Table[168];
				Crc32Table_169 = crc32Table[169];
				Crc32Table_170 = crc32Table[170];
				Crc32Table_171 = crc32Table[171];
				Crc32Table_172 = crc32Table[172];
				Crc32Table_173 = crc32Table[173];
				Crc32Table_174 = crc32Table[174];
				Crc32Table_175 = crc32Table[175];
				Crc32Table_176 = crc32Table[176];
				Crc32Table_177 = crc32Table[177];
				Crc32Table_178 = crc32Table[178];
				Crc32Table_179 = crc32Table[179];
				Crc32Table_180 = crc32Table[180];
				Crc32Table_181 = crc32Table[181];
				Crc32Table_182 = crc32Table[182];
				Crc32Table_183 = crc32Table[183];
				Crc32Table_184 = crc32Table[184];
				Crc32Table_185 = crc32Table[185];
				Crc32Table_186 = crc32Table[186];
				Crc32Table_187 = crc32Table[187];
				Crc32Table_188 = crc32Table[188];
				Crc32Table_189 = crc32Table[189];
				Crc32Table_190 = crc32Table[190];
				Crc32Table_191 = crc32Table[191];
				Crc32Table_192 = crc32Table[192];
				Crc32Table_193 = crc32Table[193];
				Crc32Table_194 = crc32Table[194];
				Crc32Table_195 = crc32Table[195];
				Crc32Table_196 = crc32Table[196];
				Crc32Table_197 = crc32Table[197];
				Crc32Table_198 = crc32Table[198];
				Crc32Table_199 = crc32Table[199];
				Crc32Table_200 = crc32Table[200];
				Crc32Table_201 = crc32Table[201];
				Crc32Table_202 = crc32Table[202];
				Crc32Table_203 = crc32Table[203];
				Crc32Table_204 = crc32Table[204];
				Crc32Table_205 = crc32Table[205];
				Crc32Table_206 = crc32Table[206];
				Crc32Table_207 = crc32Table[207];
				Crc32Table_208 = crc32Table[208];
				Crc32Table_209 = crc32Table[209];
				Crc32Table_210 = crc32Table[210];
				Crc32Table_211 = crc32Table[211];
				Crc32Table_212 = crc32Table[212];
				Crc32Table_213 = crc32Table[213];
				Crc32Table_214 = crc32Table[214];
				Crc32Table_215 = crc32Table[215];
				Crc32Table_216 = crc32Table[216];
				Crc32Table_217 = crc32Table[217];
				Crc32Table_218 = crc32Table[218];
				Crc32Table_219 = crc32Table[219];
				Crc32Table_220 = crc32Table[220];
				Crc32Table_221 = crc32Table[221];
				Crc32Table_222 = crc32Table[222];
				Crc32Table_223 = crc32Table[223];
				Crc32Table_224 = crc32Table[224];
				Crc32Table_225 = crc32Table[225];
				Crc32Table_226 = crc32Table[226];
				Crc32Table_227 = crc32Table[227];
				Crc32Table_228 = crc32Table[228];
				Crc32Table_229 = crc32Table[229];
				Crc32Table_230 = crc32Table[230];
				Crc32Table_231 = crc32Table[231];
				Crc32Table_232 = crc32Table[232];
				Crc32Table_233 = crc32Table[233];
				Crc32Table_234 = crc32Table[234];
				Crc32Table_235 = crc32Table[235];
				Crc32Table_236 = crc32Table[236];
				Crc32Table_237 = crc32Table[237];
				Crc32Table_238 = crc32Table[238];
				Crc32Table_239 = crc32Table[239];
				Crc32Table_240 = crc32Table[240];
				Crc32Table_241 = crc32Table[241];
				Crc32Table_242 = crc32Table[242];
				Crc32Table_243 = crc32Table[243];
				Crc32Table_244 = crc32Table[244];
				Crc32Table_245 = crc32Table[245];
				Crc32Table_246 = crc32Table[246];
				Crc32Table_247 = crc32Table[247];
				Crc32Table_248 = crc32Table[248];
				Crc32Table_249 = crc32Table[249];
				Crc32Table_250 = crc32Table[250];
				Crc32Table_251 = crc32Table[251];
				Crc32Table_252 = crc32Table[252];
				Crc32Table_253 = crc32Table[253];
				Crc32Table_254 = crc32Table[254];
				Crc32Table_255 = crc32Table[255];
			}
		}

		public unsafe SDLTestCrc32Context(Span<uint> crc32Table = default)
		{
			if (crc32Table != default)
			{
				Crc32Table_0 = crc32Table[0];
				Crc32Table_1 = crc32Table[1];
				Crc32Table_2 = crc32Table[2];
				Crc32Table_3 = crc32Table[3];
				Crc32Table_4 = crc32Table[4];
				Crc32Table_5 = crc32Table[5];
				Crc32Table_6 = crc32Table[6];
				Crc32Table_7 = crc32Table[7];
				Crc32Table_8 = crc32Table[8];
				Crc32Table_9 = crc32Table[9];
				Crc32Table_10 = crc32Table[10];
				Crc32Table_11 = crc32Table[11];
				Crc32Table_12 = crc32Table[12];
				Crc32Table_13 = crc32Table[13];
				Crc32Table_14 = crc32Table[14];
				Crc32Table_15 = crc32Table[15];
				Crc32Table_16 = crc32Table[16];
				Crc32Table_17 = crc32Table[17];
				Crc32Table_18 = crc32Table[18];
				Crc32Table_19 = crc32Table[19];
				Crc32Table_20 = crc32Table[20];
				Crc32Table_21 = crc32Table[21];
				Crc32Table_22 = crc32Table[22];
				Crc32Table_23 = crc32Table[23];
				Crc32Table_24 = crc32Table[24];
				Crc32Table_25 = crc32Table[25];
				Crc32Table_26 = crc32Table[26];
				Crc32Table_27 = crc32Table[27];
				Crc32Table_28 = crc32Table[28];
				Crc32Table_29 = crc32Table[29];
				Crc32Table_30 = crc32Table[30];
				Crc32Table_31 = crc32Table[31];
				Crc32Table_32 = crc32Table[32];
				Crc32Table_33 = crc32Table[33];
				Crc32Table_34 = crc32Table[34];
				Crc32Table_35 = crc32Table[35];
				Crc32Table_36 = crc32Table[36];
				Crc32Table_37 = crc32Table[37];
				Crc32Table_38 = crc32Table[38];
				Crc32Table_39 = crc32Table[39];
				Crc32Table_40 = crc32Table[40];
				Crc32Table_41 = crc32Table[41];
				Crc32Table_42 = crc32Table[42];
				Crc32Table_43 = crc32Table[43];
				Crc32Table_44 = crc32Table[44];
				Crc32Table_45 = crc32Table[45];
				Crc32Table_46 = crc32Table[46];
				Crc32Table_47 = crc32Table[47];
				Crc32Table_48 = crc32Table[48];
				Crc32Table_49 = crc32Table[49];
				Crc32Table_50 = crc32Table[50];
				Crc32Table_51 = crc32Table[51];
				Crc32Table_52 = crc32Table[52];
				Crc32Table_53 = crc32Table[53];
				Crc32Table_54 = crc32Table[54];
				Crc32Table_55 = crc32Table[55];
				Crc32Table_56 = crc32Table[56];
				Crc32Table_57 = crc32Table[57];
				Crc32Table_58 = crc32Table[58];
				Crc32Table_59 = crc32Table[59];
				Crc32Table_60 = crc32Table[60];
				Crc32Table_61 = crc32Table[61];
				Crc32Table_62 = crc32Table[62];
				Crc32Table_63 = crc32Table[63];
				Crc32Table_64 = crc32Table[64];
				Crc32Table_65 = crc32Table[65];
				Crc32Table_66 = crc32Table[66];
				Crc32Table_67 = crc32Table[67];
				Crc32Table_68 = crc32Table[68];
				Crc32Table_69 = crc32Table[69];
				Crc32Table_70 = crc32Table[70];
				Crc32Table_71 = crc32Table[71];
				Crc32Table_72 = crc32Table[72];
				Crc32Table_73 = crc32Table[73];
				Crc32Table_74 = crc32Table[74];
				Crc32Table_75 = crc32Table[75];
				Crc32Table_76 = crc32Table[76];
				Crc32Table_77 = crc32Table[77];
				Crc32Table_78 = crc32Table[78];
				Crc32Table_79 = crc32Table[79];
				Crc32Table_80 = crc32Table[80];
				Crc32Table_81 = crc32Table[81];
				Crc32Table_82 = crc32Table[82];
				Crc32Table_83 = crc32Table[83];
				Crc32Table_84 = crc32Table[84];
				Crc32Table_85 = crc32Table[85];
				Crc32Table_86 = crc32Table[86];
				Crc32Table_87 = crc32Table[87];
				Crc32Table_88 = crc32Table[88];
				Crc32Table_89 = crc32Table[89];
				Crc32Table_90 = crc32Table[90];
				Crc32Table_91 = crc32Table[91];
				Crc32Table_92 = crc32Table[92];
				Crc32Table_93 = crc32Table[93];
				Crc32Table_94 = crc32Table[94];
				Crc32Table_95 = crc32Table[95];
				Crc32Table_96 = crc32Table[96];
				Crc32Table_97 = crc32Table[97];
				Crc32Table_98 = crc32Table[98];
				Crc32Table_99 = crc32Table[99];
				Crc32Table_100 = crc32Table[100];
				Crc32Table_101 = crc32Table[101];
				Crc32Table_102 = crc32Table[102];
				Crc32Table_103 = crc32Table[103];
				Crc32Table_104 = crc32Table[104];
				Crc32Table_105 = crc32Table[105];
				Crc32Table_106 = crc32Table[106];
				Crc32Table_107 = crc32Table[107];
				Crc32Table_108 = crc32Table[108];
				Crc32Table_109 = crc32Table[109];
				Crc32Table_110 = crc32Table[110];
				Crc32Table_111 = crc32Table[111];
				Crc32Table_112 = crc32Table[112];
				Crc32Table_113 = crc32Table[113];
				Crc32Table_114 = crc32Table[114];
				Crc32Table_115 = crc32Table[115];
				Crc32Table_116 = crc32Table[116];
				Crc32Table_117 = crc32Table[117];
				Crc32Table_118 = crc32Table[118];
				Crc32Table_119 = crc32Table[119];
				Crc32Table_120 = crc32Table[120];
				Crc32Table_121 = crc32Table[121];
				Crc32Table_122 = crc32Table[122];
				Crc32Table_123 = crc32Table[123];
				Crc32Table_124 = crc32Table[124];
				Crc32Table_125 = crc32Table[125];
				Crc32Table_126 = crc32Table[126];
				Crc32Table_127 = crc32Table[127];
				Crc32Table_128 = crc32Table[128];
				Crc32Table_129 = crc32Table[129];
				Crc32Table_130 = crc32Table[130];
				Crc32Table_131 = crc32Table[131];
				Crc32Table_132 = crc32Table[132];
				Crc32Table_133 = crc32Table[133];
				Crc32Table_134 = crc32Table[134];
				Crc32Table_135 = crc32Table[135];
				Crc32Table_136 = crc32Table[136];
				Crc32Table_137 = crc32Table[137];
				Crc32Table_138 = crc32Table[138];
				Crc32Table_139 = crc32Table[139];
				Crc32Table_140 = crc32Table[140];
				Crc32Table_141 = crc32Table[141];
				Crc32Table_142 = crc32Table[142];
				Crc32Table_143 = crc32Table[143];
				Crc32Table_144 = crc32Table[144];
				Crc32Table_145 = crc32Table[145];
				Crc32Table_146 = crc32Table[146];
				Crc32Table_147 = crc32Table[147];
				Crc32Table_148 = crc32Table[148];
				Crc32Table_149 = crc32Table[149];
				Crc32Table_150 = crc32Table[150];
				Crc32Table_151 = crc32Table[151];
				Crc32Table_152 = crc32Table[152];
				Crc32Table_153 = crc32Table[153];
				Crc32Table_154 = crc32Table[154];
				Crc32Table_155 = crc32Table[155];
				Crc32Table_156 = crc32Table[156];
				Crc32Table_157 = crc32Table[157];
				Crc32Table_158 = crc32Table[158];
				Crc32Table_159 = crc32Table[159];
				Crc32Table_160 = crc32Table[160];
				Crc32Table_161 = crc32Table[161];
				Crc32Table_162 = crc32Table[162];
				Crc32Table_163 = crc32Table[163];
				Crc32Table_164 = crc32Table[164];
				Crc32Table_165 = crc32Table[165];
				Crc32Table_166 = crc32Table[166];
				Crc32Table_167 = crc32Table[167];
				Crc32Table_168 = crc32Table[168];
				Crc32Table_169 = crc32Table[169];
				Crc32Table_170 = crc32Table[170];
				Crc32Table_171 = crc32Table[171];
				Crc32Table_172 = crc32Table[172];
				Crc32Table_173 = crc32Table[173];
				Crc32Table_174 = crc32Table[174];
				Crc32Table_175 = crc32Table[175];
				Crc32Table_176 = crc32Table[176];
				Crc32Table_177 = crc32Table[177];
				Crc32Table_178 = crc32Table[178];
				Crc32Table_179 = crc32Table[179];
				Crc32Table_180 = crc32Table[180];
				Crc32Table_181 = crc32Table[181];
				Crc32Table_182 = crc32Table[182];
				Crc32Table_183 = crc32Table[183];
				Crc32Table_184 = crc32Table[184];
				Crc32Table_185 = crc32Table[185];
				Crc32Table_186 = crc32Table[186];
				Crc32Table_187 = crc32Table[187];
				Crc32Table_188 = crc32Table[188];
				Crc32Table_189 = crc32Table[189];
				Crc32Table_190 = crc32Table[190];
				Crc32Table_191 = crc32Table[191];
				Crc32Table_192 = crc32Table[192];
				Crc32Table_193 = crc32Table[193];
				Crc32Table_194 = crc32Table[194];
				Crc32Table_195 = crc32Table[195];
				Crc32Table_196 = crc32Table[196];
				Crc32Table_197 = crc32Table[197];
				Crc32Table_198 = crc32Table[198];
				Crc32Table_199 = crc32Table[199];
				Crc32Table_200 = crc32Table[200];
				Crc32Table_201 = crc32Table[201];
				Crc32Table_202 = crc32Table[202];
				Crc32Table_203 = crc32Table[203];
				Crc32Table_204 = crc32Table[204];
				Crc32Table_205 = crc32Table[205];
				Crc32Table_206 = crc32Table[206];
				Crc32Table_207 = crc32Table[207];
				Crc32Table_208 = crc32Table[208];
				Crc32Table_209 = crc32Table[209];
				Crc32Table_210 = crc32Table[210];
				Crc32Table_211 = crc32Table[211];
				Crc32Table_212 = crc32Table[212];
				Crc32Table_213 = crc32Table[213];
				Crc32Table_214 = crc32Table[214];
				Crc32Table_215 = crc32Table[215];
				Crc32Table_216 = crc32Table[216];
				Crc32Table_217 = crc32Table[217];
				Crc32Table_218 = crc32Table[218];
				Crc32Table_219 = crc32Table[219];
				Crc32Table_220 = crc32Table[220];
				Crc32Table_221 = crc32Table[221];
				Crc32Table_222 = crc32Table[222];
				Crc32Table_223 = crc32Table[223];
				Crc32Table_224 = crc32Table[224];
				Crc32Table_225 = crc32Table[225];
				Crc32Table_226 = crc32Table[226];
				Crc32Table_227 = crc32Table[227];
				Crc32Table_228 = crc32Table[228];
				Crc32Table_229 = crc32Table[229];
				Crc32Table_230 = crc32Table[230];
				Crc32Table_231 = crc32Table[231];
				Crc32Table_232 = crc32Table[232];
				Crc32Table_233 = crc32Table[233];
				Crc32Table_234 = crc32Table[234];
				Crc32Table_235 = crc32Table[235];
				Crc32Table_236 = crc32Table[236];
				Crc32Table_237 = crc32Table[237];
				Crc32Table_238 = crc32Table[238];
				Crc32Table_239 = crc32Table[239];
				Crc32Table_240 = crc32Table[240];
				Crc32Table_241 = crc32Table[241];
				Crc32Table_242 = crc32Table[242];
				Crc32Table_243 = crc32Table[243];
				Crc32Table_244 = crc32Table[244];
				Crc32Table_245 = crc32Table[245];
				Crc32Table_246 = crc32Table[246];
				Crc32Table_247 = crc32Table[247];
				Crc32Table_248 = crc32Table[248];
				Crc32Table_249 = crc32Table[249];
				Crc32Table_250 = crc32Table[250];
				Crc32Table_251 = crc32Table[251];
				Crc32Table_252 = crc32Table[252];
				Crc32Table_253 = crc32Table[253];
				Crc32Table_254 = crc32Table[254];
				Crc32Table_255 = crc32Table[255];
			}
		}


	}

	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_TextWindow")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestTextWindow
	{
		[NativeName(NativeNameType.Field, "rect")]
		[NativeName(NativeNameType.Type, "SDL_Rect")]
		public SDLRect Rect;
		[NativeName(NativeNameType.Field, "current")]
		[NativeName(NativeNameType.Type, "int")]
		public int Current;
		[NativeName(NativeNameType.Field, "numlines")]
		[NativeName(NativeNameType.Type, "int")]
		public int Numlines;
		[NativeName(NativeNameType.Field, "lines")]
		[NativeName(NativeNameType.Type, "char**")]
		public unsafe byte** Lines;

		public unsafe SDLTestTextWindow(SDLRect rect = default, int current = default, int numlines = default, byte** lines = default)
		{
			Rect = rect;
			Current = current;
			Numlines = numlines;
			Lines = lines;
		}


	}

	/// <summary>
	/// Holds information about a single test case.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_TestCaseReference")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestTestCaseReference
	{
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Func2Stress <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "testCase")]
		[NativeName(NativeNameType.Type, "SDLTest_TestCaseFp")]
		public unsafe void* TestCase;
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Short name (or function name) "Func2Stress" <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Long name or full description "This test pushes func2() to the limit." <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Description;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Set to TEST_ENABLED or TEST_DISABLED (test won't be run) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enabled")]
		[NativeName(NativeNameType.Type, "int")]
		public int Enabled;


		public unsafe SDLTestTestCaseReference(SDLTestTestCaseFp testCase = default, byte* name = default, byte* description = default, int enabled = default)
		{
			TestCase = (void*)Marshal.GetFunctionPointerForDelegate(testCase);
			Name = name;
			Description = description;
			Enabled = enabled;
		}


	}

	/// <summary>
	/// Holds information about a test suite (multiple test cases).<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_TestSuiteReference")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestTestSuiteReference
	{
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// "PlatformSuite" <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// The function that is run before each test. NULL skips. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "testSetUp")]
		[NativeName(NativeNameType.Type, "SDLTest_TestCaseSetUpFp")]
		public unsafe void* TestSetUp;
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// The test cases that are run as part of the suite. Last item should be NULL. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "testCases")]
		[NativeName(NativeNameType.Type, "const SDLTest_TestCaseReference**")]
		public unsafe SDLTestTestCaseReference** TestCases;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// The function that is run after each test. NULL skips. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "testTearDown")]
		[NativeName(NativeNameType.Type, "SDLTest_TestCaseTearDownFp")]
		public unsafe void* TestTearDown;

		public unsafe SDLTestTestSuiteReference(byte* name = default, SDLTestTestCaseSetUpFp testSetUp = default, SDLTestTestCaseReference** testCases = default, SDLTestTestCaseTearDownFp testTearDown = default)
		{
			Name = name;
			TestSetUp = (void*)Marshal.GetFunctionPointerForDelegate(testSetUp);
			TestCases = testCases;
			TestTearDown = (void*)Marshal.GetFunctionPointerForDelegate(testTearDown);
		}


	}

	/// <summary>
	/// Data structure for MD5 (Message-Digest) computation <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_Md5Context")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestMd5Context
	{
		/// <summary>
		/// number of _bits_ handled mod 2^64 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "i")]
		[NativeName(NativeNameType.Type, "MD5UINT4[2]")]
		public uint I_0;
		public uint I_1;

		/// <summary>
		/// scratch buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buf")]
		[NativeName(NativeNameType.Type, "MD5UINT4[4]")]
		public uint Buf_0;
		public uint Buf_1;
		public uint Buf_2;
		public uint Buf_3;

		/// <summary>
		/// input buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "in")]
		[NativeName(NativeNameType.Type, "unsigned char[64]")]
		public byte In_0;
		public byte In_1;
		public byte In_2;
		public byte In_3;
		public byte In_4;
		public byte In_5;
		public byte In_6;
		public byte In_7;
		public byte In_8;
		public byte In_9;
		public byte In_10;
		public byte In_11;
		public byte In_12;
		public byte In_13;
		public byte In_14;
		public byte In_15;
		public byte In_16;
		public byte In_17;
		public byte In_18;
		public byte In_19;
		public byte In_20;
		public byte In_21;
		public byte In_22;
		public byte In_23;
		public byte In_24;
		public byte In_25;
		public byte In_26;
		public byte In_27;
		public byte In_28;
		public byte In_29;
		public byte In_30;
		public byte In_31;
		public byte In_32;
		public byte In_33;
		public byte In_34;
		public byte In_35;
		public byte In_36;
		public byte In_37;
		public byte In_38;
		public byte In_39;
		public byte In_40;
		public byte In_41;
		public byte In_42;
		public byte In_43;
		public byte In_44;
		public byte In_45;
		public byte In_46;
		public byte In_47;
		public byte In_48;
		public byte In_49;
		public byte In_50;
		public byte In_51;
		public byte In_52;
		public byte In_53;
		public byte In_54;
		public byte In_55;
		public byte In_56;
		public byte In_57;
		public byte In_58;
		public byte In_59;
		public byte In_60;
		public byte In_61;
		public byte In_62;
		public byte In_63;

		/// <summary>
		/// actual digest after Md5Final call <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "digest")]
		[NativeName(NativeNameType.Type, "unsigned char[16]")]
		public byte Digest_0;
		public byte Digest_1;
		public byte Digest_2;
		public byte Digest_3;
		public byte Digest_4;
		public byte Digest_5;
		public byte Digest_6;
		public byte Digest_7;
		public byte Digest_8;
		public byte Digest_9;
		public byte Digest_10;
		public byte Digest_11;
		public byte Digest_12;
		public byte Digest_13;
		public byte Digest_14;
		public byte Digest_15;


		public unsafe SDLTestMd5Context(uint* i = default, uint* buf = default, byte* input = default, byte* digest = default)
		{
			if (i != default)
			{
				I_0 = i[0];
				I_1 = i[1];
			}
			if (buf != default)
			{
				Buf_0 = buf[0];
				Buf_1 = buf[1];
				Buf_2 = buf[2];
				Buf_3 = buf[3];
			}
			if (input != default)
			{
				In_0 = input[0];
				In_1 = input[1];
				In_2 = input[2];
				In_3 = input[3];
				In_4 = input[4];
				In_5 = input[5];
				In_6 = input[6];
				In_7 = input[7];
				In_8 = input[8];
				In_9 = input[9];
				In_10 = input[10];
				In_11 = input[11];
				In_12 = input[12];
				In_13 = input[13];
				In_14 = input[14];
				In_15 = input[15];
				In_16 = input[16];
				In_17 = input[17];
				In_18 = input[18];
				In_19 = input[19];
				In_20 = input[20];
				In_21 = input[21];
				In_22 = input[22];
				In_23 = input[23];
				In_24 = input[24];
				In_25 = input[25];
				In_26 = input[26];
				In_27 = input[27];
				In_28 = input[28];
				In_29 = input[29];
				In_30 = input[30];
				In_31 = input[31];
				In_32 = input[32];
				In_33 = input[33];
				In_34 = input[34];
				In_35 = input[35];
				In_36 = input[36];
				In_37 = input[37];
				In_38 = input[38];
				In_39 = input[39];
				In_40 = input[40];
				In_41 = input[41];
				In_42 = input[42];
				In_43 = input[43];
				In_44 = input[44];
				In_45 = input[45];
				In_46 = input[46];
				In_47 = input[47];
				In_48 = input[48];
				In_49 = input[49];
				In_50 = input[50];
				In_51 = input[51];
				In_52 = input[52];
				In_53 = input[53];
				In_54 = input[54];
				In_55 = input[55];
				In_56 = input[56];
				In_57 = input[57];
				In_58 = input[58];
				In_59 = input[59];
				In_60 = input[60];
				In_61 = input[61];
				In_62 = input[62];
				In_63 = input[63];
			}
			if (digest != default)
			{
				Digest_0 = digest[0];
				Digest_1 = digest[1];
				Digest_2 = digest[2];
				Digest_3 = digest[3];
				Digest_4 = digest[4];
				Digest_5 = digest[5];
				Digest_6 = digest[6];
				Digest_7 = digest[7];
				Digest_8 = digest[8];
				Digest_9 = digest[9];
				Digest_10 = digest[10];
				Digest_11 = digest[11];
				Digest_12 = digest[12];
				Digest_13 = digest[13];
				Digest_14 = digest[14];
				Digest_15 = digest[15];
			}
		}

		public unsafe SDLTestMd5Context(Span<uint> i = default, Span<uint> buf = default, Span<byte> input = default, Span<byte> digest = default)
		{
			if (i != default)
			{
				I_0 = i[0];
				I_1 = i[1];
			}
			if (buf != default)
			{
				Buf_0 = buf[0];
				Buf_1 = buf[1];
				Buf_2 = buf[2];
				Buf_3 = buf[3];
			}
			if (input != default)
			{
				In_0 = input[0];
				In_1 = input[1];
				In_2 = input[2];
				In_3 = input[3];
				In_4 = input[4];
				In_5 = input[5];
				In_6 = input[6];
				In_7 = input[7];
				In_8 = input[8];
				In_9 = input[9];
				In_10 = input[10];
				In_11 = input[11];
				In_12 = input[12];
				In_13 = input[13];
				In_14 = input[14];
				In_15 = input[15];
				In_16 = input[16];
				In_17 = input[17];
				In_18 = input[18];
				In_19 = input[19];
				In_20 = input[20];
				In_21 = input[21];
				In_22 = input[22];
				In_23 = input[23];
				In_24 = input[24];
				In_25 = input[25];
				In_26 = input[26];
				In_27 = input[27];
				In_28 = input[28];
				In_29 = input[29];
				In_30 = input[30];
				In_31 = input[31];
				In_32 = input[32];
				In_33 = input[33];
				In_34 = input[34];
				In_35 = input[35];
				In_36 = input[36];
				In_37 = input[37];
				In_38 = input[38];
				In_39 = input[39];
				In_40 = input[40];
				In_41 = input[41];
				In_42 = input[42];
				In_43 = input[43];
				In_44 = input[44];
				In_45 = input[45];
				In_46 = input[46];
				In_47 = input[47];
				In_48 = input[48];
				In_49 = input[49];
				In_50 = input[50];
				In_51 = input[51];
				In_52 = input[52];
				In_53 = input[53];
				In_54 = input[54];
				In_55 = input[55];
				In_56 = input[56];
				In_57 = input[57];
				In_58 = input[58];
				In_59 = input[59];
				In_60 = input[60];
				In_61 = input[61];
				In_62 = input[62];
				In_63 = input[63];
			}
			if (digest != default)
			{
				Digest_0 = digest[0];
				Digest_1 = digest[1];
				Digest_2 = digest[2];
				Digest_3 = digest[3];
				Digest_4 = digest[4];
				Digest_5 = digest[5];
				Digest_6 = digest[6];
				Digest_7 = digest[7];
				Digest_8 = digest[8];
				Digest_9 = digest[9];
				Digest_10 = digest[10];
				Digest_11 = digest[11];
				Digest_12 = digest[12];
				Digest_13 = digest[13];
				Digest_14 = digest[14];
				Digest_15 = digest[15];
			}
		}


	}

	/// <summary>
	/// Context structure for the random number generator state.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_RandomContext")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestRandomContext
	{
		[NativeName(NativeNameType.Field, "a")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint A;
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint X;
		[NativeName(NativeNameType.Field, "c")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint C;
		[NativeName(NativeNameType.Field, "ah")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Ah;
		[NativeName(NativeNameType.Field, "al")]
		[NativeName(NativeNameType.Type, "unsigned int")]
		public uint Al;

		public unsafe SDLTestRandomContext(uint a = default, uint x = default, uint c = default, uint ah = default, uint al = default)
		{
			A = a;
			X = x;
			C = c;
			Ah = ah;
			Al = al;
		}


	}

}
