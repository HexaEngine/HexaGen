// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_CompareSurfaces")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCompareSurfaces([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "referenceSurface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* referenceSurface, [NativeName(NativeNameType.Param, "allowable_error")] [NativeName(NativeNameType.Type, "int")] int allowableError)
		{
			int ret = SDLTestCompareSurfacesNative(surface, referenceSurface, allowableError);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_CompareSurfaces")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCompareSurfaces([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "referenceSurface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* referenceSurface, [NativeName(NativeNameType.Param, "allowable_error")] [NativeName(NativeNameType.Type, "int")] int allowableError)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SDLTestCompareSurfacesNative((SDLSurface*)psurface, referenceSurface, allowableError);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_CompareSurfaces")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCompareSurfaces([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* surface, [NativeName(NativeNameType.Param, "referenceSurface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface referenceSurface, [NativeName(NativeNameType.Param, "allowable_error")] [NativeName(NativeNameType.Type, "int")] int allowableError)
		{
			fixed (SDLSurface* preferenceSurface = &referenceSurface)
			{
				int ret = SDLTestCompareSurfacesNative(surface, (SDLSurface*)preferenceSurface, allowableError);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_CompareSurfaces")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCompareSurfaces([NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface surface, [NativeName(NativeNameType.Param, "referenceSurface")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface referenceSurface, [NativeName(NativeNameType.Param, "allowable_error")] [NativeName(NativeNameType.Type, "int")] int allowableError)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLSurface* preferenceSurface = &referenceSurface)
				{
					int ret = SDLTestCompareSurfacesNative((SDLSurface*)psurface, (SDLSurface*)preferenceSurface, allowableError);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Note: The function initializes the crc table required for all crc calculations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Crc32Init")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32InitNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, int>)vt[1364])(crcContext);
		}
		/// <summary>/// <br/>/// Note: The function initializes the crc table required for all crc calculations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Init")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Init([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext)
		{
			int ret = SDLTestCrc32InitNative(crcContext);
			return ret;
		}

		/// <summary>/// <br/>/// Note: The function initializes the crc table required for all crc calculations.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Init")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Init([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32InitNative((SDLTestCrc32Context*)pcrcContext);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32CalcNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, byte*, uint, uint*, int>)vt[1365])(crcContext, inBuf, inLen, crc32);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			int ret = SDLTestCrc32CalcNative(crcContext, inBuf, inLen, crc32);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, crc32);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				int ret = SDLTestCrc32CalcNative(crcContext, (byte*)pinBuf, inLen, crc32);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					int ret = SDLTestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, crc32);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = SDLTestCrc32CalcNative(crcContext, inBuf, inLen, (uint*)pcrc32);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcNative(crcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Calc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Calc([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					fixed (uint* pcrc32 = &crc32)
					{
						int ret = SDLTestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32CalcStartNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, uint*, int>)vt[1366])(crcContext, crc32);
		}
		/// <summary>/// Same routine broken down into three steps <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcStart([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			int ret = SDLTestCrc32CalcStartNative(crcContext, crc32);
			return ret;
		}

		/// <summary>/// Same routine broken down into three steps <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcStart([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32CalcStartNative((SDLTestCrc32Context*)pcrcContext, crc32);
				return ret;
			}
		}

		/// <summary>/// Same routine broken down into three steps <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcStart([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = SDLTestCrc32CalcStartNative(crcContext, (uint*)pcrc32);
				return ret;
			}
		}

		/// <summary>/// Same routine broken down into three steps <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcStart")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcStart([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcStartNative((SDLTestCrc32Context*)pcrcContext, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32CalcEndNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, uint*, int>)vt[1367])(crcContext, crc32);
		}
		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcEnd([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			int ret = SDLTestCrc32CalcEndNative(crcContext, crc32);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcEnd([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32CalcEndNative((SDLTestCrc32Context*)pcrcContext, crc32);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcEnd([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = SDLTestCrc32CalcEndNative(crcContext, (uint*)pcrc32);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcEnd")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcEnd([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcEndNative((SDLTestCrc32Context*)pcrcContext, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32CalcBufferNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, byte*, uint, uint*, int>)vt[1368])(crcContext, inBuf, inLen, crc32);
		}
		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			int ret = SDLTestCrc32CalcBufferNative(crcContext, inBuf, inLen, crc32);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, crc32);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				int ret = SDLTestCrc32CalcBufferNative(crcContext, (byte*)pinBuf, inLen, crc32);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					int ret = SDLTestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, crc32);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = SDLTestCrc32CalcBufferNative(crcContext, inBuf, inLen, (uint*)pcrc32);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = SDLTestCrc32CalcBufferNative(crcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDLTest_Crc32CalcBuffer")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32CalcBuffer([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen, [NativeName(NativeNameType.Param, "crc32")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					fixed (uint* pcrc32 = &crc32)
					{
						int ret = SDLTestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Crc32Done")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestCrc32DoneNative([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, int>)vt[1369])(crcContext);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Done")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Done([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] SDLTestCrc32Context* crcContext)
		{
			int ret = SDLTestCrc32DoneNative(crcContext);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Crc32Done")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestCrc32Done([NativeName(NativeNameType.Param, "crcContext")] [NativeName(NativeNameType.Type, "SDLTest_Crc32Context*")] ref SDLTestCrc32Context crcContext)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = SDLTestCrc32DoneNative((SDLTestCrc32Context*)pcrcContext);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_DrawCharacter")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestDrawCharacterNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "Uint32")] uint c)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, uint, int>)vt[1370])(renderer, x, y, c);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawCharacter")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawCharacter([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "Uint32")] uint c)
		{
			int ret = SDLTestDrawCharacterNative(renderer, x, y, c);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawCharacter")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawCharacter([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "Uint32")] uint c)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLTestDrawCharacterNative((SDLRenderer*)prenderer, x, y, c);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestDrawStringNative([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] byte* s)
		{
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, byte*, int>)vt[1371])(renderer, x, y, s);
		}
		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] byte* s)
		{
			int ret = SDLTestDrawStringNative(renderer, x, y, s);
			return ret;
		}

		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] byte* s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = SDLTestDrawStringNative((SDLRenderer*)prenderer, x, y, s);
				return ret;
			}
		}

		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] ref byte s)
		{
			fixed (byte* ps = &s)
			{
				int ret = SDLTestDrawStringNative(renderer, x, y, (byte*)ps);
				return ret;
			}
		}

		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] string s)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (s != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(s);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(s, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLTestDrawStringNative(renderer, x, y, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] ref byte s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* ps = &s)
				{
					int ret = SDLTestDrawStringNative((SDLRenderer*)prenderer, x, y, (byte*)ps);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_DrawString")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestDrawString([NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "const char*")] string s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (s != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(s);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(s, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SDLTestDrawStringNative((SDLRenderer*)prenderer, x, y, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowCreate")]
		[return: NativeName(NativeNameType.Type, "SDLTest_TextWindow*")]
		internal static SDLTestTextWindow* SDLTestTextWindowCreateNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, SDLTestTextWindow*>)vt[1372])(x, y, w, h);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowCreate")]
		[return: NativeName(NativeNameType.Type, "SDLTest_TextWindow*")]
		public static SDLTestTextWindow* SDLTestTextWindowCreate([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			SDLTestTextWindow* ret = SDLTestTextWindowCreateNative(x, y, w, h);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDisplay")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestTextWindowDisplayNative([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, SDLRenderer*, void>)vt[1373])(textwin, renderer);
		}
		/// <summary>/// <br/>/// This function should be called every frame to display the text<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDisplay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDisplay([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			SDLTestTextWindowDisplayNative(textwin, renderer);
		}

		/// <summary>/// <br/>/// This function should be called every frame to display the text<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDisplay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDisplay([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] SDLRenderer* renderer)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowDisplayNative((SDLTestTextWindow*)ptextwin, renderer);
			}
		}

		/// <summary>/// <br/>/// This function should be called every frame to display the text<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDisplay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDisplay([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				SDLTestTextWindowDisplayNative(textwin, (SDLRenderer*)prenderer);
			}
		}

		/// <summary>/// <br/>/// This function should be called every frame to display the text<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDisplay")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDisplay([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "renderer")] [NativeName(NativeNameType.Type, "SDL_Renderer*")] ref SDLRenderer renderer)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (SDLRenderer* prenderer = &renderer)
				{
					SDLTestTextWindowDisplayNative((SDLTestTextWindow*)ptextwin, (SDLRenderer*)prenderer);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestTextWindowAddTextNative([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, byte*, void>)vt[1374])(textwin, fmt);
		}
		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			SDLTestTextWindowAddTextNative(textwin, fmt);
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, fmt);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				SDLTestTextWindowAddTextNative(textwin, (byte*)pfmt);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLTestTextWindowAddTextNative(textwin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* pfmt = &fmt)
				{
					SDLTestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, (byte*)pfmt);
				}
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddText([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SDLTestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestTextWindowAddTextWithLengthNative([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, byte*, ulong, void>)vt[1375])(textwin, text, len);
		}
		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			SDLTestTextWindowAddTextWithLengthNative(textwin, text, len);
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, text, len);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			fixed (byte* ptext = &text)
			{
				SDLTestTextWindowAddTextWithLengthNative(textwin, (byte*)ptext, len);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLTestTextWindowAddTextWithLengthNative(textwin, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* ptext = &text)
				{
					SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, (byte*)ptext, len);
				}
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, pStr0, len);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			SDLTestTextWindowAddTextWithLengthNative(textwin, text, len);
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, text, len);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			fixed (byte* ptext = &text)
			{
				SDLTestTextWindowAddTextWithLengthNative(textwin, (byte*)ptext, len);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLTestTextWindowAddTextWithLengthNative(textwin, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* ptext = &text)
				{
					SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, (byte*)ptext, len);
				}
			}
		}

		/// <summary>/// <br/>/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>/// new line of text. The backspace character deletes the last character or, if the<br/>/// line is empty, deletes the line and goes to the end of the previous line.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowAddTextWithLength")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowAddTextWithLength([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SDLTestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, pStr0, len);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestTextWindowClearNative([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin)
		{
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, void>)vt[1376])(textwin);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowClear([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin)
		{
			SDLTestTextWindowClearNative(textwin);
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowClear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowClear([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowClearNative((SDLTestTextWindow*)ptextwin);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDestroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestTextWindowDestroyNative([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin)
		{
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, void>)vt[1377])(textwin);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDestroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDestroy([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] SDLTestTextWindow* textwin)
		{
			SDLTestTextWindowDestroyNative(textwin);
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TextWindowDestroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestTextWindowDestroy([NativeName(NativeNameType.Param, "textwin")] [NativeName(NativeNameType.Type, "SDLTest_TextWindow*")] ref SDLTestTextWindow textwin)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				SDLTestTextWindowDestroyNative((SDLTestTextWindow*)ptextwin);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_CleanupTextDrawing")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestCleanupTextDrawingNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[1378])();
		}
		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_CleanupTextDrawing")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestCleanupTextDrawing()
		{
			SDLTestCleanupTextDrawingNative();
		}

		/// <summary>
		/// Initializes the fuzzer for a test<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_FuzzerInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestFuzzerInitNative([NativeName(NativeNameType.Param, "execKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong execKey)
		{
			((delegate* unmanaged[Cdecl]<ulong, void>)vt[1379])(execKey);
		}
		/// <summary>/// Initializes the fuzzer for a test<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_FuzzerInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestFuzzerInit([NativeName(NativeNameType.Param, "execKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong execKey)
		{
			SDLTestFuzzerInitNative(execKey);
		}

		/// <summary>
		/// Returns a random Uint8<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint8")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		internal static byte SDLTestRandomUint8Native()
		{
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1380])();
		}
		/// <summary>/// Returns a random Uint8<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint8")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLTestRandomUint8()
		{
			byte ret = SDLTestRandomUint8Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Sint8<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint8")]
		[return: NativeName(NativeNameType.Type, "Sint8")]
		internal static sbyte SDLTestRandomSint8Native()
		{
			return ((delegate* unmanaged[Cdecl]<sbyte>)vt[1381])();
		}
		/// <summary>/// Returns a random Sint8<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint8")]
		[return: NativeName(NativeNameType.Type, "Sint8")]
		public static sbyte SDLTestRandomSint8()
		{
			sbyte ret = SDLTestRandomSint8Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Uint16<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLTestRandomUint16Native()
		{
			return ((delegate* unmanaged[Cdecl]<ushort>)vt[1382])();
		}
		/// <summary>/// Returns a random Uint16<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLTestRandomUint16()
		{
			ushort ret = SDLTestRandomUint16Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Sint16<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint16")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		internal static short SDLTestRandomSint16Native()
		{
			return ((delegate* unmanaged[Cdecl]<short>)vt[1383])();
		}
		/// <summary>/// Returns a random Sint16<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint16")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short SDLTestRandomSint16()
		{
			short ret = SDLTestRandomSint16Native();
			return ret;
		}

		/// <summary>
		/// Returns a random integer<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint32")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		internal static int SDLTestRandomSint32Native()
		{
			return ((delegate* unmanaged[Cdecl]<int>)vt[1384])();
		}
		/// <summary>/// Returns a random integer<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint32")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		public static int SDLTestRandomSint32()
		{
			int ret = SDLTestRandomSint32Native();
			return ret;
		}

		/// <summary>
		/// Returns a random positive integer<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		internal static uint SDLTestRandomUint32Native()
		{
			return ((delegate* unmanaged[Cdecl]<uint>)vt[1385])();
		}
		/// <summary>/// Returns a random positive integer<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLTestRandomUint32()
		{
			uint ret = SDLTestRandomUint32Native();
			return ret;
		}

		/// <summary>
		/// Returns random Uint64.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint64")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		internal static ulong SDLTestRandomUint64Native()
		{
			return ((delegate* unmanaged[Cdecl]<ulong>)vt[1386])();
		}
		/// <summary>/// Returns random Uint64.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint64")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLTestRandomUint64()
		{
			ulong ret = SDLTestRandomUint64Native();
			return ret;
		}

		/// <summary>
		/// Returns random Sint64.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint64")]
		[return: NativeName(NativeNameType.Type, "Sint64")]
		internal static long SDLTestRandomSint64Native()
		{
			return ((delegate* unmanaged[Cdecl]<long>)vt[1387])();
		}
		/// <summary>/// Returns random Sint64.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint64")]
		[return: NativeName(NativeNameType.Type, "Sint64")]
		public static long SDLTestRandomSint64()
		{
			long ret = SDLTestRandomSint64Native();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUnitFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float SDLTestRandomUnitFloatNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[1388])();
		}
		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUnitFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SDLTestRandomUnitFloat()
		{
			float ret = SDLTestRandomUnitFloatNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUnitDouble")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double SDLTestRandomUnitDoubleNative()
		{
			return ((delegate* unmanaged[Cdecl]<double>)vt[1389])();
		}
		/// <summary>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUnitDouble")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double SDLTestRandomUnitDouble()
		{
			double ret = SDLTestRandomUnitDoubleNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float SDLTestRandomFloatNative()
		{
			return ((delegate* unmanaged[Cdecl]<float>)vt[1390])();
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SDLTestRandomFloat()
		{
			float ret = SDLTestRandomFloatNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomDouble")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double SDLTestRandomDoubleNative()
		{
			return ((delegate* unmanaged[Cdecl]<double>)vt[1391])();
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomDouble")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double SDLTestRandomDouble()
		{
			double ret = SDLTestRandomDoubleNative();
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint8BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		internal static byte SDLTestRandomUint8BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint8")] byte boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint8")] byte boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<byte, byte, SDLBool, byte>)vt[1392])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Uint8 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>/// RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>/// RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>/// RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint8BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte SDLTestRandomUint8BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint8")] byte boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint8")] byte boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			byte ret = SDLTestRandomUint8BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint16BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		internal static ushort SDLTestRandomUint16BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint16")] ushort boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint16")] ushort boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, SDLBool, ushort>)vt[1393])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Uint16 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>/// RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>/// RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>/// RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint16BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort SDLTestRandomUint16BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint16")] ushort boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint16")] ushort boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			ushort ret = SDLTestRandomUint16BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint32BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		internal static uint SDLTestRandomUint32BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint32")] uint boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint32")] uint boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<uint, uint, SDLBool, uint>)vt[1394])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Uint32 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>/// RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>/// RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>/// RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint32BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLTestRandomUint32BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint32")] uint boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint32")] uint boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			uint ret = SDLTestRandomUint32BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomUint64BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		internal static ulong SDLTestRandomUint64BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint64")] ulong boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint64")] ulong boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<ulong, ulong, SDLBool, ulong>)vt[1395])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Uint64 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>/// RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>/// RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomUint64BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong SDLTestRandomUint64BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Uint64")] ulong boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Uint64")] ulong boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			ulong ret = SDLTestRandomUint64BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint8BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint8")]
		internal static sbyte SDLTestRandomSint8BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint8")] sbyte boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint8")] sbyte boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<sbyte, sbyte, SDLBool, sbyte>)vt[1396])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Sint8 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>/// RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>/// RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100<br/>/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint8BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint8")]
		public static sbyte SDLTestRandomSint8BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint8")] sbyte boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint8")] sbyte boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			sbyte ret = SDLTestRandomSint8BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint16BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		internal static short SDLTestRandomSint16BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint16")] short boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint16")] short boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<short, short, SDLBool, short>)vt[1397])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Sint16 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>/// RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>/// RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100<br/>/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint16BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short SDLTestRandomSint16BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint16")] short boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint16")] short boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			short ret = SDLTestRandomSint16BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint32BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		internal static int SDLTestRandomSint32BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint32")] int boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint32")] int boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, SDLBool, int>)vt[1398])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Sint32 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>/// RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>/// RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100<br/>/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint32BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		public static int SDLTestRandomSint32BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint32")] int boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint32")] int boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			int ret = SDLTestRandomSint32BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomSint64BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint64")]
		internal static long SDLTestRandomSint64BoundaryValueNative([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint64")] long boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint64")] long boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			return ((delegate* unmanaged[Cdecl]<long, long, SDLBool, long>)vt[1399])(boundary1, boundary2, validDomain);
		}
		/// <summary>/// Returns a random boundary value for Sint64 within the given boundaries.<br/>/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>/// is true, the function will only return valid boundaries, otherwise non-valid<br/>/// boundaries are also possible.<br/>/// If boundary1 > boundary2, the values are swapped<br/>/// Usage examples:<br/>/// RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>/// RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>/// RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100<br/>/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomSint64BoundaryValue")]
		[return: NativeName(NativeNameType.Type, "Sint64")]
		public static long SDLTestRandomSint64BoundaryValue([NativeName(NativeNameType.Param, "boundary1")] [NativeName(NativeNameType.Type, "Sint64")] long boundary1, [NativeName(NativeNameType.Param, "boundary2")] [NativeName(NativeNameType.Type, "Sint64")] long boundary2, [NativeName(NativeNameType.Param, "validDomain")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool validDomain)
		{
			long ret = SDLTestRandomSint64BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns integer in range [min, max] (inclusive).<br/>
		/// Min and max values can be negative values.<br/>
		/// If Max in smaller than min, then the values are swapped.<br/>
		/// Min and max are the same value, that value will be returned.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomIntegerInRange")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		internal static int SDLTestRandomIntegerInRangeNative([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "Sint32")] int min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "Sint32")] int max)
		{
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[1400])(min, max);
		}
		/// <summary>/// Returns integer in range [min, max] (inclusive).<br/>/// Min and max values can be negative values.<br/>/// If Max in smaller than min, then the values are swapped.<br/>/// Min and max are the same value, that value will be returned.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomIntegerInRange")]
		[return: NativeName(NativeNameType.Type, "Sint32")]
		public static int SDLTestRandomIntegerInRange([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "Sint32")] int min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "Sint32")] int max)
		{
			int ret = SDLTestRandomIntegerInRangeNative(min, max);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiString")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLTestRandomAsciiStringNative()
		{
			return ((delegate* unmanaged[Cdecl]<byte*>)vt[1401])();
		}
		/// <summary>/// Generates random null-terminated string. The minimum length for<br/>/// the string is 1 character, maximum length for the string is 255<br/>/// characters and it can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiString")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLTestRandomAsciiString()
		{
			byte* ret = SDLTestRandomAsciiStringNative();
			return ret;
		}

		/// <summary>/// Generates random null-terminated string. The minimum length for<br/>/// the string is 1 character, maximum length for the string is 255<br/>/// characters and it can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiString")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLTestRandomAsciiStringS()
		{
			string ret = Utils.DecodeStringUTF8(SDLTestRandomAsciiStringNative());
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringWithMaximumLength")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLTestRandomAsciiStringWithMaximumLengthNative([NativeName(NativeNameType.Param, "maxLength")] [NativeName(NativeNameType.Type, "int")] int maxLength)
		{
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[1402])(maxLength);
		}
		/// <summary>/// Generates random null-terminated string. The maximum length for<br/>/// the string is defined by the maxLength parameter.<br/>/// String can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringWithMaximumLength")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLTestRandomAsciiStringWithMaximumLength([NativeName(NativeNameType.Param, "maxLength")] [NativeName(NativeNameType.Type, "int")] int maxLength)
		{
			byte* ret = SDLTestRandomAsciiStringWithMaximumLengthNative(maxLength);
			return ret;
		}

		/// <summary>/// Generates random null-terminated string. The maximum length for<br/>/// the string is defined by the maxLength parameter.<br/>/// String can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringWithMaximumLength")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLTestRandomAsciiStringWithMaximumLengthS([NativeName(NativeNameType.Param, "maxLength")] [NativeName(NativeNameType.Type, "int")] int maxLength)
		{
			string ret = Utils.DecodeStringUTF8(SDLTestRandomAsciiStringWithMaximumLengthNative(maxLength));
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The length for<br/>
		/// the string is defined by the size parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringOfSize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLTestRandomAsciiStringOfSizeNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[1403])(size);
		}
		/// <summary>/// Generates random null-terminated string. The length for<br/>/// the string is defined by the size parameter.<br/>/// String can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringOfSize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLTestRandomAsciiStringOfSize([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			byte* ret = SDLTestRandomAsciiStringOfSizeNative(size);
			return ret;
		}

		/// <summary>/// Generates random null-terminated string. The length for<br/>/// the string is defined by the size parameter.<br/>/// String can contain ASCII characters from 32 to 126.<br/>/// Note: Returned string needs to be deallocated.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomAsciiStringOfSize")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLTestRandomAsciiStringOfSizeS([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			string ret = Utils.DecodeStringUTF8(SDLTestRandomAsciiStringOfSizeNative(size));
			return ret;
		}

		/// <summary>
		/// Get the invocation count for the fuzzer since last ...FuzzerInit.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_GetFuzzerInvocationCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestGetFuzzerInvocationCountNative()
		{
			return ((delegate* unmanaged[Cdecl]<int>)vt[1404])();
		}
		/// <summary>/// Get the invocation count for the fuzzer since last ...FuzzerInit.<br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_GetFuzzerInvocationCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestGetFuzzerInvocationCount()
		{
			int ret = SDLTestGetFuzzerInvocationCountNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Note: The returned string needs to be deallocated by the caller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_GenerateRunSeed")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* SDLTestGenerateRunSeedNative([NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "const int")] int length)
		{
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[1405])(length);
		}
		/// <summary>/// <br/>/// Note: The returned string needs to be deallocated by the caller.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_GenerateRunSeed")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* SDLTestGenerateRunSeed([NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "const int")] int length)
		{
			byte* ret = SDLTestGenerateRunSeedNative(length);
			return ret;
		}

		/// <summary>/// <br/>/// Note: The returned string needs to be deallocated by the caller.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_GenerateRunSeed")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string SDLTestGenerateRunSeedS([NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "const int")] int length)
		{
			string ret = Utils.DecodeStringUTF8(SDLTestGenerateRunSeedNative(length));
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestRunSuitesNative([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] byte* userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] byte* filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestTestSuiteReference**, byte*, ulong, byte*, int, int>)vt[1406])(testSuites, userRunSeed, userExecKey, filter, testIterations);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] byte* userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] byte* filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			int ret = SDLTestRunSuitesNative(testSuites, userRunSeed, userExecKey, filter, testIterations);
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] ref byte userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] byte* filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			fixed (byte* puserRunSeed = &userRunSeed)
			{
				int ret = SDLTestRunSuitesNative(testSuites, (byte*)puserRunSeed, userExecKey, filter, testIterations);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] string userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] byte* filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (userRunSeed != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(userRunSeed);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(userRunSeed, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLTestRunSuitesNative(testSuites, pStr0, userExecKey, filter, testIterations);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] byte* userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] ref byte filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			fixed (byte* pfilter = &filter)
			{
				int ret = SDLTestRunSuitesNative(testSuites, userRunSeed, userExecKey, (byte*)pfilter, testIterations);
				return ret;
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] byte* userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] string filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filter != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filter);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filter, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLTestRunSuitesNative(testSuites, userRunSeed, userExecKey, pStr0, testIterations);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] ref byte userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] ref byte filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			fixed (byte* puserRunSeed = &userRunSeed)
			{
				fixed (byte* pfilter = &filter)
				{
					int ret = SDLTestRunSuitesNative(testSuites, (byte*)puserRunSeed, userExecKey, (byte*)pfilter, testIterations);
					return ret;
				}
			}
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RunSuites")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestRunSuites([NativeName(NativeNameType.Param, "testSuites")] [NativeName(NativeNameType.Type, "SDLTest_TestSuiteReference*[-1]")] SDLTestTestSuiteReference** testSuites, [NativeName(NativeNameType.Param, "userRunSeed")] [NativeName(NativeNameType.Type, "const char*")] string userRunSeed, [NativeName(NativeNameType.Param, "userExecKey")] [NativeName(NativeNameType.Type, "Uint64")] ulong userExecKey, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "const char*")] string filter, [NativeName(NativeNameType.Param, "testIterations")] [NativeName(NativeNameType.Type, "int")] int testIterations)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (userRunSeed != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(userRunSeed);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(userRunSeed, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (filter != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(filter);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(filter, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SDLTestRunSuitesNative(testSuites, pStr0, userExecKey, pStr1, testIterations);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Log")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestLogNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1407])(fmt);
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Log")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			SDLTestLogNative(fmt);
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Log")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				SDLTestLogNative((byte*)pfmt);
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Log")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLTestLogNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_LogError")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestLogErrorNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1408])(fmt);
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_LogError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLogError([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			SDLTestLogErrorNative(fmt);
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_LogError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLogError([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				SDLTestLogErrorNative((byte*)pfmt);
			}
		}

		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_LogError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLogError([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLTestLogErrorNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// Note: The function initializes the message-digest context<br/>
		/// mdContext. Call before each new use of the context -<br/>
		/// all fields are set to zero.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Md5Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestMd5InitNative([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext)
		{
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, void>)vt[1409])(mdContext);
		}
		/// <summary>/// <br/>/// <br/>/// Note: The function initializes the message-digest context<br/>/// mdContext. Call before each new use of the context -<br/>/// all fields are set to zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Init([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext)
		{
			SDLTestMd5InitNative(mdContext);
		}

		/// <summary>/// <br/>/// <br/>/// Note: The function initializes the message-digest context<br/>/// mdContext. Call before each new use of the context -<br/>/// all fields are set to zero.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Init([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] ref SDLTestMd5Context mdContext)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				SDLTestMd5InitNative((SDLTestMd5Context*)pmdContext);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Md5Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestMd5UpdateNative([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen)
		{
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, byte*, uint, void>)vt[1410])(mdContext, inBuf, inLen);
		}
		/// <summary>/// <br/>/// <br/>/// Note: The function updates the message-digest context to account<br/>/// for the presence of each of the characters inBuf[0..inLen-1]<br/>/// in the message whose digest is being computed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Update([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen)
		{
			SDLTestMd5UpdateNative(mdContext, inBuf, inLen);
		}

		/// <summary>/// <br/>/// <br/>/// Note: The function updates the message-digest context to account<br/>/// for the presence of each of the characters inBuf[0..inLen-1]<br/>/// in the message whose digest is being computed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Update([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] ref SDLTestMd5Context mdContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				SDLTestMd5UpdateNative((SDLTestMd5Context*)pmdContext, inBuf, inLen);
			}
		}

		/// <summary>/// <br/>/// <br/>/// Note: The function updates the message-digest context to account<br/>/// for the presence of each of the characters inBuf[0..inLen-1]<br/>/// in the message whose digest is being computed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Update([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				SDLTestMd5UpdateNative(mdContext, (byte*)pinBuf, inLen);
			}
		}

		/// <summary>/// <br/>/// <br/>/// Note: The function updates the message-digest context to account<br/>/// for the presence of each of the characters inBuf[0..inLen-1]<br/>/// in the message whose digest is being computed.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Update([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] ref SDLTestMd5Context mdContext, [NativeName(NativeNameType.Param, "inBuf")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte inBuf, [NativeName(NativeNameType.Param, "inLen")] [NativeName(NativeNameType.Type, "unsigned int")] uint inLen)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					SDLTestMd5UpdateNative((SDLTestMd5Context*)pmdContext, (byte*)pinBuf, inLen);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// Note: The function terminates the message-digest computation and<br/>
		/// ends with the desired message digest in mdContext.digest[0..15].<br/>
		/// Always call before using the digest[] variable.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Md5Final")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestMd5FinalNative([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext)
		{
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, void>)vt[1411])(mdContext);
		}
		/// <summary>/// <br/>/// <br/>/// Note: The function terminates the message-digest computation and<br/>/// ends with the desired message digest in mdContext.digest[0..15].<br/>/// Always call before using the digest[] variable.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Final")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Final([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] SDLTestMd5Context* mdContext)
		{
			SDLTestMd5FinalNative(mdContext);
		}

		/// <summary>/// <br/>/// <br/>/// Note: The function terminates the message-digest computation and<br/>/// ends with the desired message digest in mdContext.digest[0..15].<br/>/// Always call before using the digest[] variable.<br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Md5Final")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestMd5Final([NativeName(NativeNameType.Param, "mdContext")] [NativeName(NativeNameType.Type, "SDLTest_Md5Context*")] ref SDLTestMd5Context mdContext)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				SDLTestMd5FinalNative((SDLTestMd5Context*)pmdContext);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_TrackAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLTestTrackAllocationsNative()
		{
			return ((delegate* unmanaged[Cdecl]<int>)vt[1412])();
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_TrackAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLTestTrackAllocations()
		{
			int ret = SDLTestTrackAllocationsNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_LogAllocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestLogAllocationsNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[1413])();
		}
		/// <summary>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_LogAllocations")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestLogAllocations()
		{
			SDLTestLogAllocationsNative();
		}

		/// <summary>
		/// <br/>
		/// Note: The random sequence of numbers returned by ...Random() is the<br/>
		/// same for the same two integers and has a period of 2^31.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestRandomInitNative([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext, [NativeName(NativeNameType.Param, "xi")] [NativeName(NativeNameType.Type, "unsigned int")] uint xi, [NativeName(NativeNameType.Param, "ci")] [NativeName(NativeNameType.Type, "unsigned int")] uint ci)
		{
			((delegate* unmanaged[Cdecl]<SDLTestRandomContext*, uint, uint, void>)vt[1414])(rndContext, xi, ci);
		}
		/// <summary>/// <br/>/// Note: The random sequence of numbers returned by ...Random() is the<br/>/// same for the same two integers and has a period of 2^31.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestRandomInit([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext, [NativeName(NativeNameType.Param, "xi")] [NativeName(NativeNameType.Type, "unsigned int")] uint xi, [NativeName(NativeNameType.Param, "ci")] [NativeName(NativeNameType.Type, "unsigned int")] uint ci)
		{
			SDLTestRandomInitNative(rndContext, xi, ci);
		}

		/// <summary>/// <br/>/// Note: The random sequence of numbers returned by ...Random() is the<br/>/// same for the same two integers and has a period of 2^31.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestRandomInit([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] ref SDLTestRandomContext rndContext, [NativeName(NativeNameType.Param, "xi")] [NativeName(NativeNameType.Type, "unsigned int")] uint xi, [NativeName(NativeNameType.Param, "ci")] [NativeName(NativeNameType.Type, "unsigned int")] uint ci)
		{
			fixed (SDLTestRandomContext* prndContext = &rndContext)
			{
				SDLTestRandomInitNative((SDLTestRandomContext*)prndContext, xi, ci);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_RandomInitTime")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLTestRandomInitTimeNative([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext)
		{
			((delegate* unmanaged[Cdecl]<SDLTestRandomContext*, void>)vt[1415])(rndContext);
		}
		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomInitTime")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestRandomInitTime([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext)
		{
			SDLTestRandomInitTimeNative(rndContext);
		}

		/// <summary>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_RandomInitTime")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLTestRandomInitTime([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] ref SDLTestRandomContext rndContext)
		{
			fixed (SDLTestRandomContext* prndContext = &rndContext)
			{
				SDLTestRandomInitTimeNative((SDLTestRandomContext*)prndContext);
			}
		}

		/// <summary>
		/// <br/>
		/// Note: ...RandomInit() or ...RandomInitTime() must have been called<br/>
		/// before using this function.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDLTest_Random")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint SDLTestRandomNative([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext)
		{
			return ((delegate* unmanaged[Cdecl]<SDLTestRandomContext*, uint>)vt[1416])(rndContext);
		}
		/// <summary>/// <br/>/// Note: ...RandomInit() or ...RandomInitTime() must have been called<br/>/// before using this function.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Random")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SDLTestRandom([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] SDLTestRandomContext* rndContext)
		{
			uint ret = SDLTestRandomNative(rndContext);
			return ret;
		}

		/// <summary>/// <br/>/// Note: ...RandomInit() or ...RandomInitTime() must have been called<br/>/// before using this function.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDLTest_Random")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SDLTestRandom([NativeName(NativeNameType.Param, "rndContext")] [NativeName(NativeNameType.Type, "SDLTest_RandomContext*")] ref SDLTestRandomContext rndContext)
		{
			fixed (SDLTestRandomContext* prndContext = &rndContext)
			{
				uint ret = SDLTestRandomNative((SDLTestRandomContext*)prndContext);
				return ret;
			}
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_LoadLibrary")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLVulkanLoadLibraryNative([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path)
		{
			return ((delegate* unmanaged[Cdecl]<byte*, int>)vt[1417])(path);
		}
		/// <summary>/// Dynamically load the Vulkan loader library.<br/>/// This should be called after initializing the video driver, but before<br/>/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>/// default library will be loaded upon creation of the first Vulkan window.<br/>/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>/// of explicitly loading it at run time. This will work with SDL provided the<br/>/// application links to a dynamic library and both it and SDL use the same<br/>/// search path.<br/>/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>/// Vulkan functions it uses from the dynamic library using<br/>/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>/// to the same vulkan loader library the application linked to.<br/>/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>/// process. This is because it is fairly common for Vulkan applications to<br/>/// link with libvulkan (and historically MoltenVK was provided as a static<br/>/// library). If it is not found, on macOS, SDL will attempt to load<br/>/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>/// dynamic framework or .dylib must ensure it is included in its application<br/>/// bundle.<br/>/// On non-Apple devices, application linking with a static libvulkan is not<br/>/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>/// library version.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_LoadLibrary")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVulkanLoadLibrary([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path)
		{
			int ret = SDLVulkanLoadLibraryNative(path);
			return ret;
		}

		/// <summary>/// Dynamically load the Vulkan loader library.<br/>/// This should be called after initializing the video driver, but before<br/>/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>/// default library will be loaded upon creation of the first Vulkan window.<br/>/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>/// of explicitly loading it at run time. This will work with SDL provided the<br/>/// application links to a dynamic library and both it and SDL use the same<br/>/// search path.<br/>/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>/// Vulkan functions it uses from the dynamic library using<br/>/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>/// to the same vulkan loader library the application linked to.<br/>/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>/// process. This is because it is fairly common for Vulkan applications to<br/>/// link with libvulkan (and historically MoltenVK was provided as a static<br/>/// library). If it is not found, on macOS, SDL will attempt to load<br/>/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>/// dynamic framework or .dylib must ensure it is included in its application<br/>/// bundle.<br/>/// On non-Apple devices, application linking with a static libvulkan is not<br/>/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>/// library version.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_LoadLibrary")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVulkanLoadLibrary([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SDLVulkanLoadLibraryNative((byte*)ppath);
				return ret;
			}
		}

		/// <summary>/// Dynamically load the Vulkan loader library.<br/>/// This should be called after initializing the video driver, but before<br/>/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>/// default library will be loaded upon creation of the first Vulkan window.<br/>/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>/// of explicitly loading it at run time. This will work with SDL provided the<br/>/// application links to a dynamic library and both it and SDL use the same<br/>/// search path.<br/>/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>/// Vulkan functions it uses from the dynamic library using<br/>/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>/// to the same vulkan loader library the application linked to.<br/>/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>/// process. This is because it is fairly common for Vulkan applications to<br/>/// link with libvulkan (and historically MoltenVK was provided as a static<br/>/// library). If it is not found, on macOS, SDL will attempt to load<br/>/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>/// dynamic framework or .dylib must ensure it is included in its application<br/>/// bundle.<br/>/// On non-Apple devices, application linking with a static libvulkan is not<br/>/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>/// library version.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_LoadLibrary")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLVulkanLoadLibrary([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDLVulkanLoadLibraryNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the address of the `vkGetInstanceProcAddr` function.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetVkGetInstanceProcAddr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* SDLVulkanGetVkGetInstanceProcAddrNative()
		{
			return ((delegate* unmanaged[Cdecl]<void*>)vt[1418])();
		}
		/// <summary>/// Get the address of the `vkGetInstanceProcAddr` function.<br/>/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetVkGetInstanceProcAddr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLVulkanGetVkGetInstanceProcAddr()
		{
			void* ret = SDLVulkanGetVkGetInstanceProcAddrNative();
			return ret;
		}

		/// <summary>
		/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary()<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_UnloadLibrary")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLVulkanUnloadLibraryNative()
		{
			((delegate* unmanaged[Cdecl]<void>)vt[1419])();
		}
		/// <summary>/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary()<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_UnloadLibrary")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanUnloadLibrary()
		{
			SDLVulkanUnloadLibraryNative();
		}

		/// <summary>
		/// Get the names of the Vulkan instance extensions needed to create a surface<br/>
		/// with SDL_Vulkan_CreateSurface.<br/>
		/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>
		/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>
		/// to the number of elements in the `pNames` array, and on return the variable<br/>
		/// is overwritten with the number of names actually written to `pNames`. If<br/>
		/// `pCount` is less than the number of required extensions, at most `pCount`<br/>
		/// structures will be written. If `pCount` is smaller than the number of<br/>
		/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>
		/// indicate that not all the required extensions were returned.<br/>
		/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>
		/// however, this parameter will likely be removed in future releases<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLVulkanGetInstanceExtensionsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] byte** pNames)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint*, byte**, SDLBool>)vt[1420])(window, pCount, pNames);
		}
		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] byte** pNames)
		{
			SDLBool ret = SDLVulkanGetInstanceExtensionsNative(window, pCount, pNames);
			return ret;
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] byte** pNames)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLVulkanGetInstanceExtensionsNative((SDLWindow*)pwindow, pCount, pNames);
				return ret;
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] byte** pNames)
		{
			fixed (uint* ppCount = &pCount)
			{
				SDLBool ret = SDLVulkanGetInstanceExtensionsNative(window, (uint*)ppCount, pNames);
				return ret;
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] byte** pNames)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (uint* ppCount = &pCount)
				{
					SDLBool ret = SDLVulkanGetInstanceExtensionsNative((SDLWindow*)pwindow, (uint*)ppCount, pNames);
					return ret;
				}
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] ref byte* pNames)
		{
			fixed (byte** ppNames = &pNames)
			{
				SDLBool ret = SDLVulkanGetInstanceExtensionsNative(window, pCount, (byte**)ppNames);
				return ret;
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] ref byte* pNames)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte** ppNames = &pNames)
				{
					SDLBool ret = SDLVulkanGetInstanceExtensionsNative((SDLWindow*)pwindow, pCount, (byte**)ppNames);
					return ret;
				}
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] ref byte* pNames)
		{
			fixed (uint* ppCount = &pCount)
			{
				fixed (byte** ppNames = &pNames)
				{
					SDLBool ret = SDLVulkanGetInstanceExtensionsNative(window, (uint*)ppCount, (byte**)ppNames);
					return ret;
				}
			}
		}

		/// <summary>/// Get the names of the Vulkan instance extensions needed to create a surface<br/>/// with SDL_Vulkan_CreateSurface.<br/>/// If `pNames` is NULL, then the number of required Vulkan instance extensions<br/>/// is returned in `pCount`. Otherwise, `pCount` must point to a variable set<br/>/// to the number of elements in the `pNames` array, and on return the variable<br/>/// is overwritten with the number of names actually written to `pNames`. If<br/>/// `pCount` is less than the number of required extensions, at most `pCount`<br/>/// structures will be written. If `pCount` is smaller than the number of<br/>/// required extensions, SDL_FALSE will be returned instead of SDL_TRUE, to<br/>/// indicate that not all the required extensions were returned.<br/>/// The `window` parameter is currently needed to be valid as of SDL 2.0.8,<br/>/// however, this parameter will likely be removed in future releases<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "pCount")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint pCount, [NativeName(NativeNameType.Param, "pNames")] [NativeName(NativeNameType.Type, "const char**")] ref byte* pNames)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (uint* ppCount = &pCount)
				{
					fixed (byte** ppNames = &pNames)
					{
						SDLBool ret = SDLVulkanGetInstanceExtensionsNative((SDLWindow*)pwindow, (uint*)ppCount, (byte**)ppNames);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLVulkanCreateSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR*")] VkSurfaceKHR* surface)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, VkInstance, VkSurfaceKHR*, SDLBool>)vt[1421])(window, instance, surface);
		}
		/// <summary>/// Create a Vulkan rendering surface for a window.<br/>/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>/// `instance` must have been created with extensions returned by<br/>/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR*")] VkSurfaceKHR* surface)
		{
			SDLBool ret = SDLVulkanCreateSurfaceNative(window, instance, surface);
			return ret;
		}

		/// <summary>/// Create a Vulkan rendering surface for a window.<br/>/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>/// `instance` must have been created with extensions returned by<br/>/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR*")] VkSurfaceKHR* surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLVulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, surface);
				return ret;
			}
		}

		/// <summary>/// Create a Vulkan rendering surface for a window.<br/>/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>/// `instance` must have been created with extensions returned by<br/>/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR*")] ref VkSurfaceKHR surface)
		{
			fixed (VkSurfaceKHR* psurface = &surface)
			{
				SDLBool ret = SDLVulkanCreateSurfaceNative(window, instance, (VkSurfaceKHR*)psurface);
				return ret;
			}
		}

		/// <summary>/// Create a Vulkan rendering surface for a window.<br/>/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>/// `instance` must have been created with extensions returned by<br/>/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLVulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR*")] ref VkSurfaceKHR surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkSurfaceKHR* psurface = &surface)
				{
					SDLBool ret = SDLVulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, (VkSurfaceKHR*)psurface);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of the window's underlying drawable dimensions in pixels.<br/>
		/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>
		/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>
		/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>
		/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLVulkanGetDrawableSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[1422])(window, w, h);
		}
		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLVulkanGetDrawableSizeNative(window, w, h);
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLVulkanGetDrawableSizeNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLVulkanGetDrawableSizeNative(window, (int*)pw, h);
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					SDLVulkanGetDrawableSizeNative((SDLWindow*)pwindow, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLVulkanGetDrawableSizeNative(window, w, (int*)ph);
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					SDLVulkanGetDrawableSizeNative((SDLWindow*)pwindow, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLVulkanGetDrawableSizeNative(window, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of the window's underlying drawable dimensions in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetDrawableSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLVulkanGetDrawableSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLVulkanGetDrawableSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
					}
				}
			}
		}

	}
}
