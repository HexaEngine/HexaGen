// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// Holds information about a single test case.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_TestCaseReference")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestTestCaseReference
	{
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Func2Stress <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "testCase")]
		[NativeName(NativeNameType.Type, "SDLTest_TestCaseFp")]
		public unsafe void* TestCase;
		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Short name (or function name) "Func2Stress" <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Long name or full description "This test pushes func2() to the limit." <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "description")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Description;

		/// <summary>
		/// !<br/>
		/// <<br/>
		/// Set to TEST_ENABLED or TEST_DISABLED (test won't be run) <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enabled")]
		[NativeName(NativeNameType.Type, "int")]
		public int Enabled;


		public unsafe SDLTestTestCaseReference(SDLTestTestCaseFp testCase = default, byte* name = default, byte* description = default, int enabled = default)
		{
			TestCase = (void*)Marshal.GetFunctionPointerForDelegate(testCase);
			Name = name;
			Description = description;
			Enabled = enabled;
		}


	}

}
