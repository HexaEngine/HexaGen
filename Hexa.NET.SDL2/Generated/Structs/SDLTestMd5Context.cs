// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// Data structure for MD5 (Message-Digest) computation <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDLTest_Md5Context")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestMd5Context
	{
		/// <summary>
		/// number of _bits_ handled mod 2^64 <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "i")]
		[NativeName(NativeNameType.Type, "MD5UINT4[2]")]
		public uint I_0;
		public uint I_1;

		/// <summary>
		/// scratch buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "buf")]
		[NativeName(NativeNameType.Type, "MD5UINT4[4]")]
		public uint Buf_0;
		public uint Buf_1;
		public uint Buf_2;
		public uint Buf_3;

		/// <summary>
		/// input buffer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "in")]
		[NativeName(NativeNameType.Type, "unsigned char[64]")]
		public byte In_0;
		public byte In_1;
		public byte In_2;
		public byte In_3;
		public byte In_4;
		public byte In_5;
		public byte In_6;
		public byte In_7;
		public byte In_8;
		public byte In_9;
		public byte In_10;
		public byte In_11;
		public byte In_12;
		public byte In_13;
		public byte In_14;
		public byte In_15;
		public byte In_16;
		public byte In_17;
		public byte In_18;
		public byte In_19;
		public byte In_20;
		public byte In_21;
		public byte In_22;
		public byte In_23;
		public byte In_24;
		public byte In_25;
		public byte In_26;
		public byte In_27;
		public byte In_28;
		public byte In_29;
		public byte In_30;
		public byte In_31;
		public byte In_32;
		public byte In_33;
		public byte In_34;
		public byte In_35;
		public byte In_36;
		public byte In_37;
		public byte In_38;
		public byte In_39;
		public byte In_40;
		public byte In_41;
		public byte In_42;
		public byte In_43;
		public byte In_44;
		public byte In_45;
		public byte In_46;
		public byte In_47;
		public byte In_48;
		public byte In_49;
		public byte In_50;
		public byte In_51;
		public byte In_52;
		public byte In_53;
		public byte In_54;
		public byte In_55;
		public byte In_56;
		public byte In_57;
		public byte In_58;
		public byte In_59;
		public byte In_60;
		public byte In_61;
		public byte In_62;
		public byte In_63;

		/// <summary>
		/// actual digest after Md5Final call <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "digest")]
		[NativeName(NativeNameType.Type, "unsigned char[16]")]
		public byte Digest_0;
		public byte Digest_1;
		public byte Digest_2;
		public byte Digest_3;
		public byte Digest_4;
		public byte Digest_5;
		public byte Digest_6;
		public byte Digest_7;
		public byte Digest_8;
		public byte Digest_9;
		public byte Digest_10;
		public byte Digest_11;
		public byte Digest_12;
		public byte Digest_13;
		public byte Digest_14;
		public byte Digest_15;


		public unsafe SDLTestMd5Context(uint* i = default, uint* buf = default, byte* input = default, byte* digest = default)
		{
			if (i != default(uint*))
			{
				I_0 = i[0];
				I_1 = i[1];
			}
			if (buf != default(uint*))
			{
				Buf_0 = buf[0];
				Buf_1 = buf[1];
				Buf_2 = buf[2];
				Buf_3 = buf[3];
			}
			if (input != default(byte*))
			{
				In_0 = input[0];
				In_1 = input[1];
				In_2 = input[2];
				In_3 = input[3];
				In_4 = input[4];
				In_5 = input[5];
				In_6 = input[6];
				In_7 = input[7];
				In_8 = input[8];
				In_9 = input[9];
				In_10 = input[10];
				In_11 = input[11];
				In_12 = input[12];
				In_13 = input[13];
				In_14 = input[14];
				In_15 = input[15];
				In_16 = input[16];
				In_17 = input[17];
				In_18 = input[18];
				In_19 = input[19];
				In_20 = input[20];
				In_21 = input[21];
				In_22 = input[22];
				In_23 = input[23];
				In_24 = input[24];
				In_25 = input[25];
				In_26 = input[26];
				In_27 = input[27];
				In_28 = input[28];
				In_29 = input[29];
				In_30 = input[30];
				In_31 = input[31];
				In_32 = input[32];
				In_33 = input[33];
				In_34 = input[34];
				In_35 = input[35];
				In_36 = input[36];
				In_37 = input[37];
				In_38 = input[38];
				In_39 = input[39];
				In_40 = input[40];
				In_41 = input[41];
				In_42 = input[42];
				In_43 = input[43];
				In_44 = input[44];
				In_45 = input[45];
				In_46 = input[46];
				In_47 = input[47];
				In_48 = input[48];
				In_49 = input[49];
				In_50 = input[50];
				In_51 = input[51];
				In_52 = input[52];
				In_53 = input[53];
				In_54 = input[54];
				In_55 = input[55];
				In_56 = input[56];
				In_57 = input[57];
				In_58 = input[58];
				In_59 = input[59];
				In_60 = input[60];
				In_61 = input[61];
				In_62 = input[62];
				In_63 = input[63];
			}
			if (digest != default(byte*))
			{
				Digest_0 = digest[0];
				Digest_1 = digest[1];
				Digest_2 = digest[2];
				Digest_3 = digest[3];
				Digest_4 = digest[4];
				Digest_5 = digest[5];
				Digest_6 = digest[6];
				Digest_7 = digest[7];
				Digest_8 = digest[8];
				Digest_9 = digest[9];
				Digest_10 = digest[10];
				Digest_11 = digest[11];
				Digest_12 = digest[12];
				Digest_13 = digest[13];
				Digest_14 = digest[14];
				Digest_15 = digest[15];
			}
		}

		public unsafe SDLTestMd5Context(Span<uint> i = default, Span<uint> buf = default, Span<byte> input = default, Span<byte> digest = default)
		{
			if (i != default(Span<uint>))
			{
				I_0 = i[0];
				I_1 = i[1];
			}
			if (buf != default(Span<uint>))
			{
				Buf_0 = buf[0];
				Buf_1 = buf[1];
				Buf_2 = buf[2];
				Buf_3 = buf[3];
			}
			if (input != default(Span<byte>))
			{
				In_0 = input[0];
				In_1 = input[1];
				In_2 = input[2];
				In_3 = input[3];
				In_4 = input[4];
				In_5 = input[5];
				In_6 = input[6];
				In_7 = input[7];
				In_8 = input[8];
				In_9 = input[9];
				In_10 = input[10];
				In_11 = input[11];
				In_12 = input[12];
				In_13 = input[13];
				In_14 = input[14];
				In_15 = input[15];
				In_16 = input[16];
				In_17 = input[17];
				In_18 = input[18];
				In_19 = input[19];
				In_20 = input[20];
				In_21 = input[21];
				In_22 = input[22];
				In_23 = input[23];
				In_24 = input[24];
				In_25 = input[25];
				In_26 = input[26];
				In_27 = input[27];
				In_28 = input[28];
				In_29 = input[29];
				In_30 = input[30];
				In_31 = input[31];
				In_32 = input[32];
				In_33 = input[33];
				In_34 = input[34];
				In_35 = input[35];
				In_36 = input[36];
				In_37 = input[37];
				In_38 = input[38];
				In_39 = input[39];
				In_40 = input[40];
				In_41 = input[41];
				In_42 = input[42];
				In_43 = input[43];
				In_44 = input[44];
				In_45 = input[45];
				In_46 = input[46];
				In_47 = input[47];
				In_48 = input[48];
				In_49 = input[49];
				In_50 = input[50];
				In_51 = input[51];
				In_52 = input[52];
				In_53 = input[53];
				In_54 = input[54];
				In_55 = input[55];
				In_56 = input[56];
				In_57 = input[57];
				In_58 = input[58];
				In_59 = input[59];
				In_60 = input[60];
				In_61 = input[61];
				In_62 = input[62];
				In_63 = input[63];
			}
			if (digest != default(Span<byte>))
			{
				Digest_0 = digest[0];
				Digest_1 = digest[1];
				Digest_2 = digest[2];
				Digest_3 = digest[3];
				Digest_4 = digest[4];
				Digest_5 = digest[5];
				Digest_6 = digest[6];
				Digest_7 = digest[7];
				Digest_8 = digest[8];
				Digest_9 = digest[9];
				Digest_10 = digest[10];
				Digest_11 = digest[11];
				Digest_12 = digest[12];
				Digest_13 = digest[13];
				Digest_14 = digest[14];
				Digest_15 = digest[15];
			}
		}


	}

}
