// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// <br/>
	/// All values max at 32767 (0x7FFF).  Signed values also can be negative.<br/>
	/// Time values unless specified otherwise are in milliseconds.<br/>
	/// You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767<br/>
	/// value.  Neither delay, interval, attack_length nor fade_length support<br/>
	/// ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.<br/>
	/// Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of<br/>
	/// ::SDL_HAPTIC_INFINITY.<br/>
	/// Button triggers may not be supported on all devices, it is advised to not<br/>
	/// use them if possible.  Buttons start at index 1 instead of index 0 like<br/>
	/// the joystick.<br/>
	/// If both attack_length and fade_level are 0, the envelope is not used,<br/>
	/// otherwise both values are used.<br/>
	/// Common parts:<br/>
	/// <br/>
	/// Here we have an example of a constant effect evolution in time:<br/>
	/// <br/>
	/// Note either the attack_level or the fade_level may be above the actual<br/>
	/// effect level.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_HapticEffect")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLHapticEffect
	{
		/// <summary>
		/// Effect type. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint16")]
		[FieldOffset(0)]
		public ushort Type;

		/// <summary>
		/// Constant effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "constant")]
		[NativeName(NativeNameType.Type, "SDL_HapticConstant")]
		[FieldOffset(0)]
		public SDLHapticConstant Constant;

		/// <summary>
		/// Periodic effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "periodic")]
		[NativeName(NativeNameType.Type, "SDL_HapticPeriodic")]
		[FieldOffset(0)]
		public SDLHapticPeriodic Periodic;

		/// <summary>
		/// Condition effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "condition")]
		[NativeName(NativeNameType.Type, "SDL_HapticCondition")]
		[FieldOffset(0)]
		public SDLHapticCondition Condition;

		/// <summary>
		/// Ramp effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ramp")]
		[NativeName(NativeNameType.Type, "SDL_HapticRamp")]
		[FieldOffset(0)]
		public SDLHapticRamp Ramp;

		/// <summary>
		/// Left/Right effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leftright")]
		[NativeName(NativeNameType.Type, "SDL_HapticLeftRight")]
		[FieldOffset(0)]
		public SDLHapticLeftRight Leftright;

		/// <summary>
		/// Custom effect. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "custom")]
		[NativeName(NativeNameType.Type, "SDL_HapticCustom")]
		[FieldOffset(0)]
		public SDLHapticCustom Custom;


		public unsafe SDLHapticEffect(ushort type = default, SDLHapticConstant constant = default, SDLHapticPeriodic periodic = default, SDLHapticCondition condition = default, SDLHapticRamp ramp = default, SDLHapticLeftRight leftright = default, SDLHapticCustom custom = default)
		{
			Type = type;
			Constant = constant;
			Periodic = periodic;
			Condition = condition;
			Ramp = ramp;
			Leftright = leftright;
			Custom = custom;
		}


	}

}
