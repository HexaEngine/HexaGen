// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Event")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLEvent
	{
		/// <summary>
		/// Event type, shared with all events <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		[FieldOffset(0)]
		public uint Type;

		/// <summary>
		/// Common event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "common")]
		[NativeName(NativeNameType.Type, "SDL_CommonEvent")]
		[FieldOffset(0)]
		public SDLCommonEvent Common;

		/// <summary>
		/// Display event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "SDL_DisplayEvent")]
		[FieldOffset(0)]
		public SDLDisplayEvent Display;

		/// <summary>
		/// Window event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "window")]
		[NativeName(NativeNameType.Type, "SDL_WindowEvent")]
		[FieldOffset(0)]
		public SDLWindowEvent Window;

		/// <summary>
		/// Keyboard event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "key")]
		[NativeName(NativeNameType.Type, "SDL_KeyboardEvent")]
		[FieldOffset(0)]
		public SDLKeyboardEvent Key;

		/// <summary>
		/// Text editing event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "edit")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingEvent")]
		[FieldOffset(0)]
		public SDLTextEditingEvent Edit;

		/// <summary>
		/// Extended text editing event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "editExt")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingExtEvent")]
		[FieldOffset(0)]
		public SDLTextEditingExtEvent EditExt;

		/// <summary>
		/// Text input event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "SDL_TextInputEvent")]
		[FieldOffset(0)]
		public SDLTextInputEvent Text;

		/// <summary>
		/// Mouse motion event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "motion")]
		[NativeName(NativeNameType.Type, "SDL_MouseMotionEvent")]
		[FieldOffset(0)]
		public SDLMouseMotionEvent Motion;

		/// <summary>
		/// Mouse button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "SDL_MouseButtonEvent")]
		[FieldOffset(0)]
		public SDLMouseButtonEvent Button;

		/// <summary>
		/// Mouse wheel event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "wheel")]
		[NativeName(NativeNameType.Type, "SDL_MouseWheelEvent")]
		[FieldOffset(0)]
		public SDLMouseWheelEvent Wheel;

		/// <summary>
		/// Joystick axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jaxis")]
		[NativeName(NativeNameType.Type, "SDL_JoyAxisEvent")]
		[FieldOffset(0)]
		public SDLJoyAxisEvent Jaxis;

		/// <summary>
		/// Joystick ball event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jball")]
		[NativeName(NativeNameType.Type, "SDL_JoyBallEvent")]
		[FieldOffset(0)]
		public SDLJoyBallEvent Jball;

		/// <summary>
		/// Joystick hat event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jhat")]
		[NativeName(NativeNameType.Type, "SDL_JoyHatEvent")]
		[FieldOffset(0)]
		public SDLJoyHatEvent Jhat;

		/// <summary>
		/// Joystick button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbutton")]
		[NativeName(NativeNameType.Type, "SDL_JoyButtonEvent")]
		[FieldOffset(0)]
		public SDLJoyButtonEvent Jbutton;

		/// <summary>
		/// Joystick device change event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jdevice")]
		[NativeName(NativeNameType.Type, "SDL_JoyDeviceEvent")]
		[FieldOffset(0)]
		public SDLJoyDeviceEvent Jdevice;

		/// <summary>
		/// Joystick battery event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbattery")]
		[NativeName(NativeNameType.Type, "SDL_JoyBatteryEvent")]
		[FieldOffset(0)]
		public SDLJoyBatteryEvent Jbattery;

		/// <summary>
		/// Game Controller axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "caxis")]
		[NativeName(NativeNameType.Type, "SDL_ControllerAxisEvent")]
		[FieldOffset(0)]
		public SDLControllerAxisEvent Caxis;

		/// <summary>
		/// Game Controller button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cbutton")]
		[NativeName(NativeNameType.Type, "SDL_ControllerButtonEvent")]
		[FieldOffset(0)]
		public SDLControllerButtonEvent Cbutton;

		/// <summary>
		/// Game Controller device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cdevice")]
		[NativeName(NativeNameType.Type, "SDL_ControllerDeviceEvent")]
		[FieldOffset(0)]
		public SDLControllerDeviceEvent Cdevice;

		/// <summary>
		/// Game Controller touchpad event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ctouchpad")]
		[NativeName(NativeNameType.Type, "SDL_ControllerTouchpadEvent")]
		[FieldOffset(0)]
		public SDLControllerTouchpadEvent Ctouchpad;

		/// <summary>
		/// Game Controller sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "csensor")]
		[NativeName(NativeNameType.Type, "SDL_ControllerSensorEvent")]
		[FieldOffset(0)]
		public SDLControllerSensorEvent Csensor;

		/// <summary>
		/// Audio device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "adevice")]
		[NativeName(NativeNameType.Type, "SDL_AudioDeviceEvent")]
		[FieldOffset(0)]
		public SDLAudioDeviceEvent Adevice;

		/// <summary>
		/// Sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sensor")]
		[NativeName(NativeNameType.Type, "SDL_SensorEvent")]
		[FieldOffset(0)]
		public SDLSensorEvent Sensor;

		/// <summary>
		/// Quit request event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "quit")]
		[NativeName(NativeNameType.Type, "SDL_QuitEvent")]
		[FieldOffset(0)]
		public SDLQuitEvent Quit;

		/// <summary>
		/// Custom event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "user")]
		[NativeName(NativeNameType.Type, "SDL_UserEvent")]
		[FieldOffset(0)]
		public SDLUserEvent User;

		/// <summary>
		/// System dependent window event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "syswm")]
		[NativeName(NativeNameType.Type, "SDL_SysWMEvent")]
		[FieldOffset(0)]
		public SDLSysWMEvent Syswm;

		/// <summary>
		/// Touch finger event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "tfinger")]
		[NativeName(NativeNameType.Type, "SDL_TouchFingerEvent")]
		[FieldOffset(0)]
		public SDLTouchFingerEvent Tfinger;

		/// <summary>
		/// Gesture event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mgesture")]
		[NativeName(NativeNameType.Type, "SDL_MultiGestureEvent")]
		[FieldOffset(0)]
		public SDLMultiGestureEvent Mgesture;

		/// <summary>
		/// Gesture event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dgesture")]
		[NativeName(NativeNameType.Type, "SDL_DollarGestureEvent")]
		[FieldOffset(0)]
		public SDLDollarGestureEvent Dgesture;

		/// <summary>
		/// Drag and drop event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drop")]
		[NativeName(NativeNameType.Type, "SDL_DropEvent")]
		[FieldOffset(0)]
		public SDLDropEvent Drop;

		/// <summary>
		/// This is necessary for ABI compatibility between Visual C++ and GCC.<br/>
		/// Visual C++ will respect the push pack pragma and use 52 bytes (size of<br/>
		/// SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit<br/>
		/// architectures) for this union, and GCC will use the alignment of the<br/>
		/// largest datatype within the union, which is 8 bytes on 64-bit<br/>
		/// architectures.<br/>
		/// So... we'll add padding to force the size to be 56 bytes for both.<br/>
		/// On architectures where pointers are 16 bytes, this needs rounding up to<br/>
		/// the next multiple of 16, 64, and on architectures where pointers are<br/>
		/// even larger the size of SDL_UserEvent will dominate as being 3 pointers.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint8[56]")]
		[FieldOffset(0)]
		public byte Padding_0;
		[FieldOffset(56)]
		public byte Padding_1;
		[FieldOffset(112)]
		public byte Padding_2;
		[FieldOffset(168)]
		public byte Padding_3;
		[FieldOffset(224)]
		public byte Padding_4;
		[FieldOffset(280)]
		public byte Padding_5;
		[FieldOffset(336)]
		public byte Padding_6;
		[FieldOffset(392)]
		public byte Padding_7;
		[FieldOffset(448)]
		public byte Padding_8;
		[FieldOffset(504)]
		public byte Padding_9;
		[FieldOffset(560)]
		public byte Padding_10;
		[FieldOffset(616)]
		public byte Padding_11;
		[FieldOffset(672)]
		public byte Padding_12;
		[FieldOffset(728)]
		public byte Padding_13;
		[FieldOffset(784)]
		public byte Padding_14;
		[FieldOffset(840)]
		public byte Padding_15;
		[FieldOffset(896)]
		public byte Padding_16;
		[FieldOffset(952)]
		public byte Padding_17;
		[FieldOffset(1008)]
		public byte Padding_18;
		[FieldOffset(1064)]
		public byte Padding_19;
		[FieldOffset(1120)]
		public byte Padding_20;
		[FieldOffset(1176)]
		public byte Padding_21;
		[FieldOffset(1232)]
		public byte Padding_22;
		[FieldOffset(1288)]
		public byte Padding_23;
		[FieldOffset(1344)]
		public byte Padding_24;
		[FieldOffset(1400)]
		public byte Padding_25;
		[FieldOffset(1456)]
		public byte Padding_26;
		[FieldOffset(1512)]
		public byte Padding_27;
		[FieldOffset(1568)]
		public byte Padding_28;
		[FieldOffset(1624)]
		public byte Padding_29;
		[FieldOffset(1680)]
		public byte Padding_30;
		[FieldOffset(1736)]
		public byte Padding_31;
		[FieldOffset(1792)]
		public byte Padding_32;
		[FieldOffset(1848)]
		public byte Padding_33;
		[FieldOffset(1904)]
		public byte Padding_34;
		[FieldOffset(1960)]
		public byte Padding_35;
		[FieldOffset(2016)]
		public byte Padding_36;
		[FieldOffset(2072)]
		public byte Padding_37;
		[FieldOffset(2128)]
		public byte Padding_38;
		[FieldOffset(2184)]
		public byte Padding_39;
		[FieldOffset(2240)]
		public byte Padding_40;
		[FieldOffset(2296)]
		public byte Padding_41;
		[FieldOffset(2352)]
		public byte Padding_42;
		[FieldOffset(2408)]
		public byte Padding_43;
		[FieldOffset(2464)]
		public byte Padding_44;
		[FieldOffset(2520)]
		public byte Padding_45;
		[FieldOffset(2576)]
		public byte Padding_46;
		[FieldOffset(2632)]
		public byte Padding_47;
		[FieldOffset(2688)]
		public byte Padding_48;
		[FieldOffset(2744)]
		public byte Padding_49;
		[FieldOffset(2800)]
		public byte Padding_50;
		[FieldOffset(2856)]
		public byte Padding_51;
		[FieldOffset(2912)]
		public byte Padding_52;
		[FieldOffset(2968)]
		public byte Padding_53;
		[FieldOffset(3024)]
		public byte Padding_54;
		[FieldOffset(3080)]
		public byte Padding_55;


		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingExtEvent editExt = default, SDLTextInputEvent text = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyDeviceEvent jdevice = default, SDLJoyBatteryEvent jbattery = default, SDLControllerAxisEvent caxis = default, SDLControllerButtonEvent cbutton = default, SDLControllerDeviceEvent cdevice = default, SDLControllerTouchpadEvent ctouchpad = default, SDLControllerSensorEvent csensor = default, SDLAudioDeviceEvent adevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLSysWMEvent syswm = default, SDLTouchFingerEvent tfinger = default, SDLMultiGestureEvent mgesture = default, SDLDollarGestureEvent dgesture = default, SDLDropEvent drop = default, byte* padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Key = key;
			Edit = edit;
			EditExt = editExt;
			Text = text;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jdevice = jdevice;
			Jbattery = jbattery;
			Caxis = caxis;
			Cbutton = cbutton;
			Cdevice = cdevice;
			Ctouchpad = ctouchpad;
			Csensor = csensor;
			Adevice = adevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Syswm = syswm;
			Tfinger = tfinger;
			Mgesture = mgesture;
			Dgesture = dgesture;
			Drop = drop;
			if (padding != default(byte*))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
			}
		}

		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingExtEvent editExt = default, SDLTextInputEvent text = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyDeviceEvent jdevice = default, SDLJoyBatteryEvent jbattery = default, SDLControllerAxisEvent caxis = default, SDLControllerButtonEvent cbutton = default, SDLControllerDeviceEvent cdevice = default, SDLControllerTouchpadEvent ctouchpad = default, SDLControllerSensorEvent csensor = default, SDLAudioDeviceEvent adevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLSysWMEvent syswm = default, SDLTouchFingerEvent tfinger = default, SDLMultiGestureEvent mgesture = default, SDLDollarGestureEvent dgesture = default, SDLDropEvent drop = default, Span<byte> padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Key = key;
			Edit = edit;
			EditExt = editExt;
			Text = text;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jdevice = jdevice;
			Jbattery = jbattery;
			Caxis = caxis;
			Cbutton = cbutton;
			Cdevice = cdevice;
			Ctouchpad = ctouchpad;
			Csensor = csensor;
			Adevice = adevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Syswm = syswm;
			Tfinger = tfinger;
			Mgesture = mgesture;
			Dgesture = dgesture;
			Drop = drop;
			if (padding != default(Span<byte>))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
			}
		}


	}

}
