// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// Information on the capabilities of a render driver or context.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_RendererInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRendererInfo
	{
		/// <summary>
		/// The name of the renderer <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "name")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* Name;

		/// <summary>
		/// Supported ::SDL_RendererFlags <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "flags")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Flags;

		/// <summary>
		/// The number of available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "num_texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint NumTextureFormats;

		/// <summary>
		/// The available texture formats <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "texture_formats")]
		[NativeName(NativeNameType.Type, "Uint32[16]")]
		public uint TextureFormats_0;
		public uint TextureFormats_1;
		public uint TextureFormats_2;
		public uint TextureFormats_3;
		public uint TextureFormats_4;
		public uint TextureFormats_5;
		public uint TextureFormats_6;
		public uint TextureFormats_7;
		public uint TextureFormats_8;
		public uint TextureFormats_9;
		public uint TextureFormats_10;
		public uint TextureFormats_11;
		public uint TextureFormats_12;
		public uint TextureFormats_13;
		public uint TextureFormats_14;
		public uint TextureFormats_15;

		/// <summary>
		/// The maximum texture width <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_width")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureWidth;

		/// <summary>
		/// The maximum texture height <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "max_texture_height")]
		[NativeName(NativeNameType.Type, "int")]
		public int MaxTextureHeight;


		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, uint* textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default(uint*))
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}

		public unsafe SDLRendererInfo(byte* name = default, uint flags = default, uint numTextureFormats = default, Span<uint> textureFormats = default, int maxTextureWidth = default, int maxTextureHeight = default)
		{
			Name = name;
			Flags = flags;
			NumTextureFormats = numTextureFormats;
			if (textureFormats != default(Span<uint>))
			{
				TextureFormats_0 = textureFormats[0];
				TextureFormats_1 = textureFormats[1];
				TextureFormats_2 = textureFormats[2];
				TextureFormats_3 = textureFormats[3];
				TextureFormats_4 = textureFormats[4];
				TextureFormats_5 = textureFormats[5];
				TextureFormats_6 = textureFormats[6];
				TextureFormats_7 = textureFormats[7];
				TextureFormats_8 = textureFormats[8];
				TextureFormats_9 = textureFormats[9];
				TextureFormats_10 = textureFormats[10];
				TextureFormats_11 = textureFormats[11];
				TextureFormats_12 = textureFormats[12];
				TextureFormats_13 = textureFormats[13];
				TextureFormats_14 = textureFormats[14];
				TextureFormats_15 = textureFormats[15];
			}
			MaxTextureWidth = maxTextureWidth;
			MaxTextureHeight = maxTextureHeight;
		}


	}

}
