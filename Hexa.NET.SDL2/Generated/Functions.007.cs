// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{
		/// <summary>/// Create an SDL window from an existing native window.<br/>/// In some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows)<br/>/// the hint `SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT` needs to be configured<br/>/// before using SDL_CreateWindowFrom().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_CreateWindowFrom")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLCreateWindowFrom([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data)
		{
			SDLWindow* ret = SDLCreateWindowFromNative(data);
			return ret;
		}

		/// <summary>
		/// Get the numeric ID of a window.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		internal static uint SDLGetWindowIDNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint>)vt[368])(window);
		}
		/// <summary>/// Get the numeric ID of a window.<br/>/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>/// these events to specific SDL_Window objects.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			uint ret = SDLGetWindowIDNative(window);
			return ret;
		}

		/// <summary>/// Get the numeric ID of a window.<br/>/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>/// these events to specific SDL_Window objects.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				uint ret = SDLGetWindowIDNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get a window from a stored ID.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		internal static SDLWindow* SDLGetWindowFromIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "Uint32")] uint id)
		{
			return ((delegate* unmanaged[Cdecl]<uint, SDLWindow*>)vt[369])(id);
		}
		/// <summary>/// Get a window from a stored ID.<br/>/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>/// these events to specific SDL_Window objects.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLGetWindowFromID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "Uint32")] uint id)
		{
			SDLWindow* ret = SDLGetWindowFromIDNative(id);
			return ret;
		}

		/// <summary>
		/// Get the window flags.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		internal static uint SDLGetWindowFlagsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint>)vt[370])(window);
		}
		/// <summary>/// Get the window flags.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowFlags([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			uint ret = SDLGetWindowFlagsNative(window);
			return ret;
		}

		/// <summary>/// Get the window flags.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint SDLGetWindowFlags([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				uint ret = SDLGetWindowFlagsNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowTitleNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, byte*, void>)vt[371])(window, title);
		}
		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title)
		{
			SDLSetWindowTitleNative(window, title);
		}

		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] byte* title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowTitleNative((SDLWindow*)pwindow, title);
			}
		}

		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] ref byte title)
		{
			fixed (byte* ptitle = &title)
			{
				SDLSetWindowTitleNative(window, (byte*)ptitle);
			}
		}

		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] string title)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (title != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(title);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLSetWindowTitleNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] ref byte title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte* ptitle = &title)
				{
					SDLSetWindowTitleNative((SDLWindow*)pwindow, (byte*)ptitle);
				}
			}
		}

		/// <summary>/// Set the title of a window.<br/>/// This string is expected to be in UTF-8 encoding.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "const char*")] string title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (title != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(title);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SDLSetWindowTitleNative((SDLWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SDLGetWindowTitleNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte*>)vt[372])(window);
		}
		/// <summary>/// Get the title of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			byte* ret = SDLGetWindowTitleNative(window);
			return ret;
		}

		/// <summary>/// Get the title of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetWindowTitleS([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			string ret = Utils.DecodeStringUTF8(SDLGetWindowTitleNative(window));
			return ret;
		}

		/// <summary>/// Get the title of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SDLGetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* ret = SDLGetWindowTitleNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>/// Get the title of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SDLGetWindowTitleS([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				string ret = Utils.DecodeStringUTF8(SDLGetWindowTitleNative((SDLWindow*)pwindow));
				return ret;
			}
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowIconNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* icon)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLSurface*, void>)vt[373])(window, icon);
		}
		/// <summary>/// Set the icon for a window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* icon)
		{
			SDLSetWindowIconNative(window, icon);
		}

		/// <summary>/// Set the icon for a window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface*")] SDLSurface* icon)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowIconNative((SDLWindow*)pwindow, icon);
			}
		}

		/// <summary>/// Set the icon for a window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface icon)
		{
			fixed (SDLSurface* picon = &icon)
			{
				SDLSetWindowIconNative(window, (SDLSurface*)picon);
			}
		}

		/// <summary>/// Set the icon for a window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface*")] ref SDLSurface icon)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLSurface* picon = &icon)
				{
					SDLSetWindowIconNative((SDLWindow*)pwindow, (SDLSurface*)picon);
				}
			}
		}

		/// <summary>
		/// Associate an arbitrary named pointer with a window.<br/>
		/// `name` is case-sensitive.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* SDLSetWindowDataNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte*, void*, void*>)vt[374])(window, name, userdata);
		}
		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			void* ret = SDLSetWindowDataNative(window, name, userdata);
			return ret;
		}

		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				void* ret = SDLSetWindowDataNative((SDLWindow*)pwindow, name, userdata);
				return ret;
			}
		}

		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			fixed (byte* pname = &name)
			{
				void* ret = SDLSetWindowDataNative(window, (byte*)pname, userdata);
				return ret;
			}
		}

		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = SDLSetWindowDataNative(window, pStr0, userdata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte* pname = &name)
				{
					void* ret = SDLSetWindowDataNative((SDLWindow*)pwindow, (byte*)pname, userdata);
					return ret;
				}
			}
		}

		/// <summary>/// Associate an arbitrary named pointer with a window.<br/>/// `name` is case-sensitive.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLSetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void*")] void* userdata)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				void* ret = SDLSetWindowDataNative((SDLWindow*)pwindow, pStr0, userdata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Retrieve the data pointer associated with a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* SDLGetWindowDataNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte*, void*>)vt[375])(window, name);
		}
		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			void* ret = SDLGetWindowDataNative(window, name);
			return ret;
		}

		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				void* ret = SDLGetWindowDataNative((SDLWindow*)pwindow, name);
				return ret;
			}
		}

		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				void* ret = SDLGetWindowDataNative(window, (byte*)pname);
				return ret;
			}
		}

		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = SDLGetWindowDataNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte* pname = &name)
				{
					void* ret = SDLGetWindowDataNative((SDLWindow*)pwindow, (byte*)pname);
					return ret;
				}
			}
		}

		/// <summary>/// Retrieve the data pointer associated with a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowData")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SDLGetWindowData([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				void* ret = SDLGetWindowDataNative((SDLWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Set the position of a window.<br/>
		/// The window coordinate origin is the upper left of the display.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowPositionNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, void>)vt[376])(window, x, y);
		}
		/// <summary>/// Set the position of a window.<br/>/// The window coordinate origin is the upper left of the display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			SDLSetWindowPositionNative(window, x, y);
		}

		/// <summary>/// Set the position of a window.<br/>/// The window coordinate origin is the upper left of the display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowPositionNative((SDLWindow*)pwindow, x, y);
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetWindowPositionNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[377])(window, x, y);
		}
		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y)
		{
			SDLGetWindowPositionNative(window, x, y);
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLGetWindowPositionNative((SDLWindow*)pwindow, x, y);
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y)
		{
			fixed (int* px = &x)
			{
				SDLGetWindowPositionNative(window, (int*)px, y);
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] int* y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* px = &x)
				{
					SDLGetWindowPositionNative((SDLWindow*)pwindow, (int*)px, y);
				}
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y)
		{
			fixed (int* py = &y)
			{
				SDLGetWindowPositionNative(window, x, (int*)py);
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* py = &y)
				{
					SDLGetWindowPositionNative((SDLWindow*)pwindow, x, (int*)py);
				}
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					SDLGetWindowPositionNative(window, (int*)px, (int*)py);
				}
			}
		}

		/// <summary>/// Get the position of a window.<br/>/// If you do not need the value for one of the positions a NULL may be passed<br/>/// in the `x` or `y` parameter.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int*")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int*")] ref int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						SDLGetWindowPositionNative((SDLWindow*)pwindow, (int*)px, (int*)py);
					}
				}
			}
		}

		/// <summary>
		/// Set the size of a window's client area.<br/>
		/// The window size in screen coordinates may differ from the size in pixels,<br/>
		/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>
		/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize() or<br/>
		/// SDL_GetRendererOutputSize() to get the real client area size in pixels.<br/>
		/// Fullscreen windows automatically match the size of the display mode, and<br/>
		/// you should use SDL_SetWindowDisplayMode() to change their size.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, void>)vt[378])(window, w, h);
		}
		/// <summary>/// Set the size of a window's client area.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize() or<br/>/// SDL_GetRendererOutputSize() to get the real client area size in pixels.<br/>/// Fullscreen windows automatically match the size of the display mode, and<br/>/// you should use SDL_SetWindowDisplayMode() to change their size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			SDLSetWindowSizeNative(window, w, h);
		}

		/// <summary>/// Set the size of a window's client area.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize() or<br/>/// SDL_GetRendererOutputSize() to get the real client area size in pixels.<br/>/// Fullscreen windows automatically match the size of the display mode, and<br/>/// you should use SDL_SetWindowDisplayMode() to change their size.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowSizeNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>
		/// height value is not desired.<br/>
		/// The window size in screen coordinates may differ from the size in pixels,<br/>
		/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>
		/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>
		/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>
		/// real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetWindowSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[379])(window, w, h);
		}
		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLGetWindowSizeNative(window, w, h);
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLGetWindowSizeNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLGetWindowSizeNative(window, (int*)pw, h);
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					SDLGetWindowSizeNative((SDLWindow*)pwindow, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLGetWindowSizeNative(window, w, (int*)ph);
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowSizeNative((SDLWindow*)pwindow, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowSizeNative(window, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of a window's client area.<br/>/// NULL can safely be passed as the `w` or `h` parameter if the width or<br/>/// height value is not desired.<br/>/// The window size in screen coordinates may differ from the size in pixels,<br/>/// if the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a platform<br/>/// with high-dpi support (e.g. iOS or macOS). Use SDL_GL_GetDrawableSize(),<br/>/// SDL_Vulkan_GetDrawableSize(), or SDL_GetRendererOutputSize() to get the<br/>/// real client area size in pixels.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLGetWindowSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetWindowBordersSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int*, int*, int>)vt[380])(window, top, left, bottom, right);
		}
		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			int ret = SDLGetWindowBordersSizeNative(window, top, left, bottom, right);
			return ret;
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, bottom, right);
				return ret;
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* ptop = &top)
			{
				int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, left, bottom, right);
				return ret;
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* pleft = &left)
			{
				int ret = SDLGetWindowBordersSizeNative(window, top, (int*)pleft, bottom, right);
				return ret;
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, bottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* pbottom = &bottom)
			{
				int ret = SDLGetWindowBordersSizeNative(window, top, left, (int*)pbottom, right);
				return ret;
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, left, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = SDLGetWindowBordersSizeNative(window, top, (int*)pleft, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pbottom = &bottom)
						{
							int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, (int*)pbottom, right);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* pright = &right)
			{
				int ret = SDLGetWindowBordersSizeNative(window, top, left, bottom, (int*)pright);
				return ret;
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pright = &right)
				{
					int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pright = &right)
				{
					int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, left, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pright = &right)
				{
					int ret = SDLGetWindowBordersSizeNative(window, top, (int*)pleft, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pright = &right)
						{
							int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, bottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* pbottom = &bottom)
			{
				fixed (int* pright = &right)
				{
					int ret = SDLGetWindowBordersSizeNative(window, top, left, (int*)pbottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, left, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = SDLGetWindowBordersSizeNative(window, top, (int*)pleft, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = SDLGetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>/// Get the size of a window's borders (decorations) around the client area.<br/>/// Note: If this function fails (returns -1), the size values will be<br/>/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>/// window in question was borderless.<br/>/// Note: This function may fail on systems where the window has not yet been<br/>/// decorated by the display server (for example, immediately after calling<br/>/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>/// window has been presented and composited, so that the window system has a<br/>/// chance to decorate the window and provide the border dimensions to SDL.<br/>/// This function also returns -1 if getting the information is not supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int*")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int*")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int*")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int*")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pbottom = &bottom)
						{
							fixed (int* pright = &right)
							{
								int ret = SDLGetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, (int*)pbottom, (int*)pright);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window in pixels.<br/>
		/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>
		/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>
		/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>
		/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetWindowSizeInPixelsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[381])(window, w, h);
		}
		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLGetWindowSizeInPixelsNative(window, w, h);
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLGetWindowSizeInPixelsNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLGetWindowSizeInPixelsNative(window, (int*)pw, h);
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					SDLGetWindowSizeInPixelsNative((SDLWindow*)pwindow, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLGetWindowSizeInPixelsNative(window, w, (int*)ph);
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowSizeInPixelsNative((SDLWindow*)pwindow, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowSizeInPixelsNative(window, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the size of a window in pixels.<br/>/// This may differ from SDL_GetWindowSize() if we're rendering to a high-DPI<br/>/// drawable, i.e. the window was created with `SDL_WINDOW_ALLOW_HIGHDPI` on a<br/>/// platform with high-DPI support (Apple calls this "Retina"), and not<br/>/// disabled by the `SDL_HINT_VIDEO_HIGHDPI_DISABLED` hint.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLGetWindowSizeInPixelsNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
					}
				}
			}
		}

		/// <summary>
		/// Set the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowMinimumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, void>)vt[382])(window, minW, minH);
		}
		/// <summary>/// Set the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			SDLSetWindowMinimumSizeNative(window, minW, minH);
		}

		/// <summary>/// Set the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowMinimumSizeNative((SDLWindow*)pwindow, minW, minH);
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetWindowMinimumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[383])(window, w, h);
		}
		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLGetWindowMinimumSizeNative(window, w, h);
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLGetWindowMinimumSizeNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLGetWindowMinimumSizeNative(window, (int*)pw, h);
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					SDLGetWindowMinimumSizeNative((SDLWindow*)pwindow, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLGetWindowMinimumSizeNative(window, w, (int*)ph);
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowMinimumSizeNative((SDLWindow*)pwindow, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowMinimumSizeNative(window, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the minimum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLGetWindowMinimumSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
					}
				}
			}
		}

		/// <summary>
		/// Set the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowMaximumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, void>)vt[384])(window, maxW, maxH);
		}
		/// <summary>/// Set the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			SDLSetWindowMaximumSizeNative(window, maxW, maxH);
		}

		/// <summary>/// Set the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowMaximumSizeNative((SDLWindow*)pwindow, maxW, maxH);
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLGetWindowMaximumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, void>)vt[385])(window, w, h);
		}
		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			SDLGetWindowMaximumSizeNative(window, w, h);
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLGetWindowMaximumSizeNative((SDLWindow*)pwindow, w, h);
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (int* pw = &w)
			{
				SDLGetWindowMaximumSizeNative(window, (int*)pw, h);
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					SDLGetWindowMaximumSizeNative((SDLWindow*)pwindow, (int*)pw, h);
				}
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* ph = &h)
			{
				SDLGetWindowMaximumSizeNative(window, w, (int*)ph);
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowMaximumSizeNative((SDLWindow*)pwindow, w, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					SDLGetWindowMaximumSizeNative(window, (int*)pw, (int*)ph);
				}
			}
		}

		/// <summary>/// Get the maximum size of a window's client area.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLGetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int*")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int*")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						SDLGetWindowMaximumSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
					}
				}
			}
		}

		/// <summary>
		/// Set the border state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>
		/// or remove the border from the actual window. This is a no-op if the<br/>
		/// window's border already matches the requested state.<br/>
		/// You can't change the border state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowBorderedNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool bordered)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[386])(window, bordered);
		}
		/// <summary>/// Set the border state of a window.<br/>/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>/// or remove the border from the actual window. This is a no-op if the<br/>/// window's border already matches the requested state.<br/>/// You can't change the border state of a fullscreen window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowBordered([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool bordered)
		{
			SDLSetWindowBorderedNative(window, bordered);
		}

		/// <summary>/// Set the border state of a window.<br/>/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>/// or remove the border from the actual window. This is a no-op if the<br/>/// window's border already matches the requested state.<br/>/// You can't change the border state of a fullscreen window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowBordered([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool bordered)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowBorderedNative((SDLWindow*)pwindow, bordered);
			}
		}

		/// <summary>
		/// Set the user-resizable state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>
		/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>
		/// resizable state already matches the requested state.<br/>
		/// You can't change the resizable state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowResizableNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool resizable)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[387])(window, resizable);
		}
		/// <summary>/// Set the user-resizable state of a window.<br/>/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>/// resizable state already matches the requested state.<br/>/// You can't change the resizable state of a fullscreen window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowResizable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool resizable)
		{
			SDLSetWindowResizableNative(window, resizable);
		}

		/// <summary>/// Set the user-resizable state of a window.<br/>/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>/// resizable state already matches the requested state.<br/>/// You can't change the resizable state of a fullscreen window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowResizable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool resizable)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowResizableNative((SDLWindow*)pwindow, resizable);
			}
		}

		/// <summary>
		/// Set the window to always be above the others.<br/>
		/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>
		/// will bring the window to the front and keep the window above the rest.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowAlwaysOnTopNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool onTop)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[388])(window, onTop);
		}
		/// <summary>/// Set the window to always be above the others.<br/>/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>/// will bring the window to the front and keep the window above the rest.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowAlwaysOnTop([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool onTop)
		{
			SDLSetWindowAlwaysOnTopNative(window, onTop);
		}

		/// <summary>/// Set the window to always be above the others.<br/>/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>/// will bring the window to the front and keep the window above the rest.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowAlwaysOnTop([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool onTop)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowAlwaysOnTopNative((SDLWindow*)pwindow, onTop);
			}
		}

		/// <summary>
		/// Show a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLShowWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[389])(window);
		}
		/// <summary>/// Show a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLShowWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLShowWindowNative(window);
		}

		/// <summary>/// Show a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLShowWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLShowWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Hide a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLHideWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[390])(window);
		}
		/// <summary>/// Hide a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLHideWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLHideWindowNative(window);
		}

		/// <summary>/// Hide a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLHideWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLHideWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Raise a window above other windows and set the input focus.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRaiseWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[391])(window);
		}
		/// <summary>/// Raise a window above other windows and set the input focus.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRaiseWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLRaiseWindowNative(window);
		}

		/// <summary>/// Raise a window above other windows and set the input focus.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRaiseWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLRaiseWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Make a window as large as possible.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLMaximizeWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[392])(window);
		}
		/// <summary>/// Make a window as large as possible.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLMaximizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLMaximizeWindowNative(window);
		}

		/// <summary>/// Make a window as large as possible.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLMaximizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLMaximizeWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Minimize a window to an iconic representation.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLMinimizeWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[393])(window);
		}
		/// <summary>/// Minimize a window to an iconic representation.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLMinimizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLMinimizeWindowNative(window);
		}

		/// <summary>/// Minimize a window to an iconic representation.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLMinimizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLMinimizeWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Restore the size and position of a minimized or maximized window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLRestoreWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, void>)vt[394])(window);
		}
		/// <summary>/// Restore the size and position of a minimized or maximized window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRestoreWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLRestoreWindowNative(window);
		}

		/// <summary>/// Restore the size and position of a minimized or maximized window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLRestoreWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLRestoreWindowNative((SDLWindow*)pwindow);
			}
		}

		/// <summary>
		/// Set a window's fullscreen state.<br/>
		/// `flags` may be `SDL_WINDOW_FULLSCREEN`, for "real" fullscreen with a<br/>
		/// videomode change; `SDL_WINDOW_FULLSCREEN_DESKTOP` for "fake" fullscreen<br/>
		/// that takes the size of the desktop; and 0 for windowed mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowFullscreen")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowFullscreenNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint, int>)vt[395])(window, flags);
		}
		/// <summary>/// Set a window's fullscreen state.<br/>/// `flags` may be `SDL_WINDOW_FULLSCREEN`, for "real" fullscreen with a<br/>/// videomode change; `SDL_WINDOW_FULLSCREEN_DESKTOP` for "fake" fullscreen<br/>/// that takes the size of the desktop; and 0 for windowed mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowFullscreen")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowFullscreen([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			int ret = SDLSetWindowFullscreenNative(window, flags);
			return ret;
		}

		/// <summary>/// Set a window's fullscreen state.<br/>/// `flags` may be `SDL_WINDOW_FULLSCREEN`, for "real" fullscreen with a<br/>/// videomode change; `SDL_WINDOW_FULLSCREEN_DESKTOP` for "fake" fullscreen<br/>/// that takes the size of the desktop; and 0 for windowed mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowFullscreen")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowFullscreen([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "Uint32")] uint flags)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowFullscreenNative((SDLWindow*)pwindow, flags);
				return ret;
			}
		}

		/// <summary>
		/// Return whether the window has a surface associated with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLHasWindowSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool>)vt[396])(window);
		}
		/// <summary>/// Return whether the window has a surface associated with it.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLBool ret = SDLHasWindowSurfaceNative(window);
			return ret;
		}

		/// <summary>/// Return whether the window has a surface associated with it.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_HasWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLHasWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLHasWindowSurfaceNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the SDL surface associated with the window.<br/>
		/// A new surface will be created with the optimal format for the window, if<br/>
		/// necessary. This surface will be freed when the window is destroyed. Do not<br/>
		/// free this surface.<br/>
		/// This surface will be invalidated if the window is resized. After resizing a<br/>
		/// window this function must be called again to return a valid surface.<br/>
		/// You may not combine this with 3D or the rendering API on this window.<br/>
		/// This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		internal static SDLSurface* SDLGetWindowSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLSurface*>)vt[397])(window);
		}
		/// <summary>/// Get the SDL surface associated with the window.<br/>/// A new surface will be created with the optimal format for the window, if<br/>/// necessary. This surface will be freed when the window is destroyed. Do not<br/>/// free this surface.<br/>/// This surface will be invalidated if the window is resized. After resizing a<br/>/// window this function must be called again to return a valid surface.<br/>/// You may not combine this with 3D or the rendering API on this window.<br/>/// This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLGetWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLSurface* ret = SDLGetWindowSurfaceNative(window);
			return ret;
		}

		/// <summary>/// Get the SDL surface associated with the window.<br/>/// A new surface will be created with the optimal format for the window, if<br/>/// necessary. This surface will be freed when the window is destroyed. Do not<br/>/// free this surface.<br/>/// This surface will be invalidated if the window is resized. After resizing a<br/>/// window this function must be called again to return a valid surface.<br/>/// You may not combine this with 3D or the rendering API on this window.<br/>/// This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowSurface")]
		[return: NativeName(NativeNameType.Type, "SDL_Surface*")]
		public static SDLSurface* SDLGetWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSurface* ret = SDLGetWindowSurfaceNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Copy the window surface to the screen.<br/>
		/// This is the function you use to reflect any changes to the surface on the<br/>
		/// screen.<br/>
		/// This function is equivalent to the SDL 1.2 API SDL_Flip().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLUpdateWindowSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)vt[398])(window);
		}
		/// <summary>/// Copy the window surface to the screen.<br/>/// This is the function you use to reflect any changes to the surface on the<br/>/// screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_Flip().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			int ret = SDLUpdateWindowSurfaceNative(window);
			return ret;
		}

		/// <summary>/// Copy the window surface to the screen.<br/>/// This is the function you use to reflect any changes to the surface on the<br/>/// screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_Flip().<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLUpdateWindowSurfaceNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Copy areas of the window surface to the screen.<br/>
		/// This is the function you use to reflect changes to portions of the surface<br/>
		/// on the screen.<br/>
		/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().<br/>
		/// Note that this function will update _at least_ the rectangles specified,<br/>
		/// but this is only intended as an optimization; in practice, this might<br/>
		/// update more of the screen (or all of the screen!), depending on what<br/>
		/// method SDL uses to send pixels to the system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurfaceRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLUpdateWindowSurfaceRectsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "numrects")] [NativeName(NativeNameType.Type, "int")] int numrects)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLRect*, int, int>)vt[399])(window, rects, numrects);
		}
		/// <summary>/// Copy areas of the window surface to the screen.<br/>/// This is the function you use to reflect changes to portions of the surface<br/>/// on the screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().<br/>/// Note that this function will update _at least_ the rectangles specified,<br/>/// but this is only intended as an optimization; in practice, this might<br/>/// update more of the screen (or all of the screen!), depending on what<br/>/// method SDL uses to send pixels to the system.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurfaceRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurfaceRects([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "numrects")] [NativeName(NativeNameType.Type, "int")] int numrects)
		{
			int ret = SDLUpdateWindowSurfaceRectsNative(window, rects, numrects);
			return ret;
		}

		/// <summary>/// Copy areas of the window surface to the screen.<br/>/// This is the function you use to reflect changes to portions of the surface<br/>/// on the screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().<br/>/// Note that this function will update _at least_ the rectangles specified,<br/>/// but this is only intended as an optimization; in practice, this might<br/>/// update more of the screen (or all of the screen!), depending on what<br/>/// method SDL uses to send pixels to the system.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurfaceRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurfaceRects([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rects, [NativeName(NativeNameType.Param, "numrects")] [NativeName(NativeNameType.Type, "int")] int numrects)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLUpdateWindowSurfaceRectsNative((SDLWindow*)pwindow, rects, numrects);
				return ret;
			}
		}

		/// <summary>/// Copy areas of the window surface to the screen.<br/>/// This is the function you use to reflect changes to portions of the surface<br/>/// on the screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().<br/>/// Note that this function will update _at least_ the rectangles specified,<br/>/// but this is only intended as an optimization; in practice, this might<br/>/// update more of the screen (or all of the screen!), depending on what<br/>/// method SDL uses to send pixels to the system.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurfaceRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurfaceRects([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "numrects")] [NativeName(NativeNameType.Type, "int")] int numrects)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = SDLUpdateWindowSurfaceRectsNative(window, (SDLRect*)prects, numrects);
				return ret;
			}
		}

		/// <summary>/// Copy areas of the window surface to the screen.<br/>/// This is the function you use to reflect changes to portions of the surface<br/>/// on the screen.<br/>/// This function is equivalent to the SDL 1.2 API SDL_UpdateRects().<br/>/// Note that this function will update _at least_ the rectangles specified,<br/>/// but this is only intended as an optimization; in practice, this might<br/>/// update more of the screen (or all of the screen!), depending on what<br/>/// method SDL uses to send pixels to the system.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_UpdateWindowSurfaceRects")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLUpdateWindowSurfaceRects([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rects, [NativeName(NativeNameType.Param, "numrects")] [NativeName(NativeNameType.Type, "int")] int numrects)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLRect* prects = &rects)
				{
					int ret = SDLUpdateWindowSurfaceRectsNative((SDLWindow*)pwindow, (SDLRect*)prects, numrects);
					return ret;
				}
			}
		}

		/// <summary>
		/// Destroy the surface associated with the window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLDestroyWindowSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)vt[400])(window);
		}
		/// <summary>/// Destroy the surface associated with the window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DestroyWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLDestroyWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			int ret = SDLDestroyWindowSurfaceNative(window);
			return ret;
		}

		/// <summary>/// Destroy the surface associated with the window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_DestroyWindowSurface")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLDestroyWindowSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLDestroyWindowSurfaceNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set a window's input grab mode.<br/>
		/// When input is grabbed, the mouse is confined to the window. This function<br/>
		/// will also grab the keyboard if `SDL_HINT_GRAB_KEYBOARD` is set. To grab the<br/>
		/// keyboard without also grabbing the mouse, use SDL_SetWindowKeyboardGrab().<br/>
		/// If the caller enables a grab while another window is currently grabbed, the<br/>
		/// other window loses its grab in favor of the caller's window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[401])(window, grabbed);
		}
		/// <summary>/// Set a window's input grab mode.<br/>/// When input is grabbed, the mouse is confined to the window. This function<br/>/// will also grab the keyboard if `SDL_HINT_GRAB_KEYBOARD` is set. To grab the<br/>/// keyboard without also grabbing the mouse, use SDL_SetWindowKeyboardGrab().<br/>/// If the caller enables a grab while another window is currently grabbed, the<br/>/// other window loses its grab in favor of the caller's window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			SDLSetWindowGrabNative(window, grabbed);
		}

		/// <summary>/// Set a window's input grab mode.<br/>/// When input is grabbed, the mouse is confined to the window. This function<br/>/// will also grab the keyboard if `SDL_HINT_GRAB_KEYBOARD` is set. To grab the<br/>/// keyboard without also grabbing the mouse, use SDL_SetWindowKeyboardGrab().<br/>/// If the caller enables a grab while another window is currently grabbed, the<br/>/// other window loses its grab in favor of the caller's window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowGrabNative((SDLWindow*)pwindow, grabbed);
			}
		}

		/// <summary>
		/// Set a window's keyboard grab mode.<br/>
		/// Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or<br/>
		/// the Meta/Super key. Note that not all system keyboard shortcuts can be<br/>
		/// captured by applications (one example is Ctrl+Alt+Del on Windows).<br/>
		/// This is primarily intended for specialized applications such as VNC clients<br/>
		/// or VM frontends. Normal games should not use keyboard grab.<br/>
		/// When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the<br/>
		/// window is full-screen to ensure the user is not trapped in your<br/>
		/// application. If you have a custom keyboard shortcut to exit fullscreen<br/>
		/// mode, you may suppress this behavior with<br/>
		/// `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.<br/>
		/// If the caller enables a grab while another window is currently grabbed, the<br/>
		/// other window loses its grab in favor of the caller's window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowKeyboardGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[402])(window, grabbed);
		}
		/// <summary>/// Set a window's keyboard grab mode.<br/>/// Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or<br/>/// the Meta/Super key. Note that not all system keyboard shortcuts can be<br/>/// captured by applications (one example is Ctrl+Alt+Del on Windows).<br/>/// This is primarily intended for specialized applications such as VNC clients<br/>/// or VM frontends. Normal games should not use keyboard grab.<br/>/// When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the<br/>/// window is full-screen to ensure the user is not trapped in your<br/>/// application. If you have a custom keyboard shortcut to exit fullscreen<br/>/// mode, you may suppress this behavior with<br/>/// `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.<br/>/// If the caller enables a grab while another window is currently grabbed, the<br/>/// other window loses its grab in favor of the caller's window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowKeyboardGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			SDLSetWindowKeyboardGrabNative(window, grabbed);
		}

		/// <summary>/// Set a window's keyboard grab mode.<br/>/// Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or<br/>/// the Meta/Super key. Note that not all system keyboard shortcuts can be<br/>/// captured by applications (one example is Ctrl+Alt+Del on Windows).<br/>/// This is primarily intended for specialized applications such as VNC clients<br/>/// or VM frontends. Normal games should not use keyboard grab.<br/>/// When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the<br/>/// window is full-screen to ensure the user is not trapped in your<br/>/// application. If you have a custom keyboard shortcut to exit fullscreen<br/>/// mode, you may suppress this behavior with<br/>/// `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.<br/>/// If the caller enables a grab while another window is currently grabbed, the<br/>/// other window loses its grab in favor of the caller's window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowKeyboardGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowKeyboardGrabNative((SDLWindow*)pwindow, grabbed);
			}
		}

		/// <summary>
		/// Set a window's mouse grab mode.<br/>
		/// Mouse grab confines the mouse cursor to the window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SDLSetWindowMouseGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool, void>)vt[403])(window, grabbed);
		}
		/// <summary>/// Set a window's mouse grab mode.<br/>/// Mouse grab confines the mouse cursor to the window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMouseGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			SDLSetWindowMouseGrabNative(window, grabbed);
		}

		/// <summary>/// Set a window's mouse grab mode.<br/>/// Mouse grab confines the mouse cursor to the window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SDLSetWindowMouseGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "grabbed")] [NativeName(NativeNameType.Type, "SDL_bool")] SDLBool grabbed)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLSetWindowMouseGrabNative((SDLWindow*)pwindow, grabbed);
			}
		}

		/// <summary>
		/// Get a window's input grab mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLGetWindowGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool>)vt[404])(window);
		}
		/// <summary>/// Get a window's input grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLBool ret = SDLGetWindowGrabNative(window);
			return ret;
		}

		/// <summary>/// Get a window's input grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLGetWindowGrabNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get a window's keyboard grab mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLGetWindowKeyboardGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool>)vt[405])(window);
		}
		/// <summary>/// Get a window's keyboard grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowKeyboardGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLBool ret = SDLGetWindowKeyboardGrabNative(window);
			return ret;
		}

		/// <summary>/// Get a window's keyboard grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowKeyboardGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowKeyboardGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLGetWindowKeyboardGrabNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get a window's mouse grab mode.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		internal static SDLBool SDLGetWindowMouseGrabNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLBool>)vt[406])(window);
		}
		/// <summary>/// Get a window's mouse grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowMouseGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLBool ret = SDLGetWindowMouseGrabNative(window);
			return ret;
		}

		/// <summary>/// Get a window's mouse grab mode.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseGrab")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool SDLGetWindowMouseGrab([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = SDLGetWindowMouseGrabNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the window that currently has an input grab enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGrabbedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		internal static SDLWindow* SDLGetGrabbedWindowNative()
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*>)vt[407])();
		}
		/// <summary>/// Get the window that currently has an input grab enabled.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetGrabbedWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window*")]
		public static SDLWindow* SDLGetGrabbedWindow()
		{
			SDLWindow* ret = SDLGetGrabbedWindowNative();
			return ret;
		}

		/// <summary>
		/// Confines the cursor to the specified area of a window.<br/>
		/// Note that this does NOT grab the cursor, it only defines the area a cursor<br/>
		/// is restricted to when the window has mouse focus.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowMouseRectNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLRect*, int>)vt[408])(window, rect);
		}
		/// <summary>/// Confines the cursor to the specified area of a window.<br/>/// Note that this does NOT grab the cursor, it only defines the area a cursor<br/>/// is restricted to when the window has mouse focus.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			int ret = SDLSetWindowMouseRectNative(window, rect);
			return ret;
		}

		/// <summary>/// Confines the cursor to the specified area of a window.<br/>/// Note that this does NOT grab the cursor, it only defines the area a cursor<br/>/// is restricted to when the window has mouse focus.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] SDLRect* rect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowMouseRectNative((SDLWindow*)pwindow, rect);
				return ret;
			}
		}

		/// <summary>/// Confines the cursor to the specified area of a window.<br/>/// Note that this does NOT grab the cursor, it only defines the area a cursor<br/>/// is restricted to when the window has mouse focus.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = SDLSetWindowMouseRectNative(window, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>/// Confines the cursor to the specified area of a window.<br/>/// Note that this does NOT grab the cursor, it only defines the area a cursor<br/>/// is restricted to when the window has mouse focus.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const SDL_Rect*")] ref SDLRect rect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = SDLSetWindowMouseRectNative((SDLWindow*)pwindow, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the mouse confinement rectangle of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "const SDL_Rect*")]
		internal static SDLRect* SDLGetWindowMouseRectNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLRect*>)vt[409])(window);
		}
		/// <summary>/// Get the mouse confinement rectangle of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "const SDL_Rect*")]
		public static SDLRect* SDLGetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			SDLRect* ret = SDLGetWindowMouseRectNative(window);
			return ret;
		}

		/// <summary>/// Get the mouse confinement rectangle of a window.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowMouseRect")]
		[return: NativeName(NativeNameType.Type, "const SDL_Rect*")]
		public static SDLRect* SDLGetWindowMouseRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLRect* ret = SDLGetWindowMouseRectNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the brightness (gamma multiplier) for a given window's display.<br/>
		/// Despite the name and signature, this method sets the brightness of the<br/>
		/// entire display, not an individual window. A window is considered to be<br/>
		/// owned by the display that contains the window's center pixel. (The index of<br/>
		/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The<br/>
		/// brightness set will not follow the window if it is moved to another<br/>
		/// display.<br/>
		/// Many platforms will refuse to set the display brightness in modern times.<br/>
		/// You are better off using a shader to adjust gamma during rendering, or<br/>
		/// something similar.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowBrightnessNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "float")] float brightness)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float, int>)vt[410])(window, brightness);
		}
		/// <summary>/// Set the brightness (gamma multiplier) for a given window's display.<br/>/// Despite the name and signature, this method sets the brightness of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The<br/>/// brightness set will not follow the window if it is moved to another<br/>/// display.<br/>/// Many platforms will refuse to set the display brightness in modern times.<br/>/// You are better off using a shader to adjust gamma during rendering, or<br/>/// something similar.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowBrightness([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "float")] float brightness)
		{
			int ret = SDLSetWindowBrightnessNative(window, brightness);
			return ret;
		}

		/// <summary>/// Set the brightness (gamma multiplier) for a given window's display.<br/>/// Despite the name and signature, this method sets the brightness of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The<br/>/// brightness set will not follow the window if it is moved to another<br/>/// display.<br/>/// Many platforms will refuse to set the display brightness in modern times.<br/>/// You are better off using a shader to adjust gamma during rendering, or<br/>/// something similar.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowBrightness([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "brightness")] [NativeName(NativeNameType.Type, "float")] float brightness)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowBrightnessNative((SDLWindow*)pwindow, brightness);
				return ret;
			}
		}

		/// <summary>
		/// Get the brightness (gamma multiplier) for a given window's display.<br/>
		/// Despite the name and signature, this method retrieves the brightness of the<br/>
		/// entire display, not an individual window. A window is considered to be<br/>
		/// owned by the display that contains the window's center pixel. (The index of<br/>
		/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float SDLGetWindowBrightnessNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float>)vt[411])(window);
		}
		/// <summary>/// Get the brightness (gamma multiplier) for a given window's display.<br/>/// Despite the name and signature, this method retrieves the brightness of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SDLGetWindowBrightness([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			float ret = SDLGetWindowBrightnessNative(window);
			return ret;
		}

		/// <summary>/// Get the brightness (gamma multiplier) for a given window's display.<br/>/// Despite the name and signature, this method retrieves the brightness of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowBrightness")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float SDLGetWindowBrightness([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				float ret = SDLGetWindowBrightnessNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the opacity for a window.<br/>
		/// The parameter `opacity` will be clamped internally between 0.0f<br/>
		/// (transparent) and 1.0f (opaque).<br/>
		/// This function also returns -1 if setting the opacity isn't supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowOpacityNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "opacity")] [NativeName(NativeNameType.Type, "float")] float opacity)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float, int>)vt[412])(window, opacity);
		}
		/// <summary>/// Set the opacity for a window.<br/>/// The parameter `opacity` will be clamped internally between 0.0f<br/>/// (transparent) and 1.0f (opaque).<br/>/// This function also returns -1 if setting the opacity isn't supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "opacity")] [NativeName(NativeNameType.Type, "float")] float opacity)
		{
			int ret = SDLSetWindowOpacityNative(window, opacity);
			return ret;
		}

		/// <summary>/// Set the opacity for a window.<br/>/// The parameter `opacity` will be clamped internally between 0.0f<br/>/// (transparent) and 1.0f (opaque).<br/>/// This function also returns -1 if setting the opacity isn't supported.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "opacity")] [NativeName(NativeNameType.Type, "float")] float opacity)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowOpacityNative((SDLWindow*)pwindow, opacity);
				return ret;
			}
		}

		/// <summary>
		/// Get the opacity of a window.<br/>
		/// If transparency isn't supported on this platform, opacity will be reported<br/>
		/// as 1.0f without error.<br/>
		/// The parameter `opacity` is ignored if it is NULL.<br/>
		/// This function also returns -1 if an invalid window was provided.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetWindowOpacityNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "out_opacity")] [NativeName(NativeNameType.Type, "float*")] float* outOpacity)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float*, int>)vt[413])(window, outOpacity);
		}
		/// <summary>/// Get the opacity of a window.<br/>/// If transparency isn't supported on this platform, opacity will be reported<br/>/// as 1.0f without error.<br/>/// The parameter `opacity` is ignored if it is NULL.<br/>/// This function also returns -1 if an invalid window was provided.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "out_opacity")] [NativeName(NativeNameType.Type, "float*")] float* outOpacity)
		{
			int ret = SDLGetWindowOpacityNative(window, outOpacity);
			return ret;
		}

		/// <summary>/// Get the opacity of a window.<br/>/// If transparency isn't supported on this platform, opacity will be reported<br/>/// as 1.0f without error.<br/>/// The parameter `opacity` is ignored if it is NULL.<br/>/// This function also returns -1 if an invalid window was provided.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "out_opacity")] [NativeName(NativeNameType.Type, "float*")] float* outOpacity)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLGetWindowOpacityNative((SDLWindow*)pwindow, outOpacity);
				return ret;
			}
		}

		/// <summary>/// Get the opacity of a window.<br/>/// If transparency isn't supported on this platform, opacity will be reported<br/>/// as 1.0f without error.<br/>/// The parameter `opacity` is ignored if it is NULL.<br/>/// This function also returns -1 if an invalid window was provided.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "out_opacity")] [NativeName(NativeNameType.Type, "float*")] ref float outOpacity)
		{
			fixed (float* poutOpacity = &outOpacity)
			{
				int ret = SDLGetWindowOpacityNative(window, (float*)poutOpacity);
				return ret;
			}
		}

		/// <summary>/// Get the opacity of a window.<br/>/// If transparency isn't supported on this platform, opacity will be reported<br/>/// as 1.0f without error.<br/>/// The parameter `opacity` is ignored if it is NULL.<br/>/// This function also returns -1 if an invalid window was provided.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowOpacity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowOpacity([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "out_opacity")] [NativeName(NativeNameType.Type, "float*")] ref float outOpacity)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (float* poutOpacity = &outOpacity)
				{
					int ret = SDLGetWindowOpacityNative((SDLWindow*)pwindow, (float*)poutOpacity);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the window as a modal for another window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowModalFor")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowModalForNative([NativeName(NativeNameType.Param, "modal_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* modalWindow, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* parentWindow)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLWindow*, int>)vt[414])(modalWindow, parentWindow);
		}
		/// <summary>/// Set the window as a modal for another window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowModalFor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowModalFor([NativeName(NativeNameType.Param, "modal_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* modalWindow, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* parentWindow)
		{
			int ret = SDLSetWindowModalForNative(modalWindow, parentWindow);
			return ret;
		}

		/// <summary>/// Set the window as a modal for another window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowModalFor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowModalFor([NativeName(NativeNameType.Param, "modal_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow modalWindow, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* parentWindow)
		{
			fixed (SDLWindow* pmodalWindow = &modalWindow)
			{
				int ret = SDLSetWindowModalForNative((SDLWindow*)pmodalWindow, parentWindow);
				return ret;
			}
		}

		/// <summary>/// Set the window as a modal for another window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowModalFor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowModalFor([NativeName(NativeNameType.Param, "modal_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* modalWindow, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow parentWindow)
		{
			fixed (SDLWindow* pparentWindow = &parentWindow)
			{
				int ret = SDLSetWindowModalForNative(modalWindow, (SDLWindow*)pparentWindow);
				return ret;
			}
		}

		/// <summary>/// Set the window as a modal for another window.<br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowModalFor")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowModalFor([NativeName(NativeNameType.Param, "modal_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow modalWindow, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow parentWindow)
		{
			fixed (SDLWindow* pmodalWindow = &modalWindow)
			{
				fixed (SDLWindow* pparentWindow = &parentWindow)
				{
					int ret = SDLSetWindowModalForNative((SDLWindow*)pmodalWindow, (SDLWindow*)pparentWindow);
					return ret;
				}
			}
		}

		/// <summary>
		/// Explicitly set input focus to the window.<br/>
		/// You almost certainly want SDL_RaiseWindow() instead of this function. Use<br/>
		/// this with caution, as you might give focus to a window that is completely<br/>
		/// obscured by other windows.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowInputFocus")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowInputFocusNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)vt[415])(window);
		}
		/// <summary>/// Explicitly set input focus to the window.<br/>/// You almost certainly want SDL_RaiseWindow() instead of this function. Use<br/>/// this with caution, as you might give focus to a window that is completely<br/>/// obscured by other windows.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowInputFocus")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowInputFocus([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window)
		{
			int ret = SDLSetWindowInputFocusNative(window);
			return ret;
		}

		/// <summary>/// Explicitly set input focus to the window.<br/>/// You almost certainly want SDL_RaiseWindow() instead of this function. Use<br/>/// this with caution, as you might give focus to a window that is completely<br/>/// obscured by other windows.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowInputFocus")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowInputFocus([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowInputFocusNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the gamma ramp for the display that owns a given window.<br/>
		/// Set the gamma translation table for the red, green, and blue channels of<br/>
		/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>
		/// representing a mapping between the input and output for that channel. The<br/>
		/// input is the index into the array, and the output is the 16-bit gamma value<br/>
		/// at that index, scaled to the output color precision.<br/>
		/// Despite the name and signature, this method sets the gamma ramp of the<br/>
		/// entire display, not an individual window. A window is considered to be<br/>
		/// owned by the display that contains the window's center pixel. (The index of<br/>
		/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>
		/// ramp set will not follow the window if it is moved to another display.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLSetWindowGammaRampNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, ushort*, ushort*, ushort*, int>)vt[416])(window, red, green, blue);
		}
		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			int ret = SDLSetWindowGammaRampNative(window, red, green, blue);
			return ret;
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, red, green, blue);
				return ret;
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (ushort* pred = &red)
			{
				int ret = SDLSetWindowGammaRampNative(window, (ushort*)pred, green, blue);
				return ret;
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pred = &red)
				{
					int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, (ushort*)pred, green, blue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (ushort* pgreen = &green)
			{
				int ret = SDLSetWindowGammaRampNative(window, red, (ushort*)pgreen, blue);
				return ret;
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pgreen = &green)
				{
					int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, red, (ushort*)pgreen, blue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (ushort* pred = &red)
			{
				fixed (ushort* pgreen = &green)
				{
					int ret = SDLSetWindowGammaRampNative(window, (ushort*)pred, (ushort*)pgreen, blue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pred = &red)
				{
					fixed (ushort* pgreen = &green)
					{
						int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, (ushort*)pred, (ushort*)pgreen, blue);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (ushort* pblue = &blue)
			{
				int ret = SDLSetWindowGammaRampNative(window, red, green, (ushort*)pblue);
				return ret;
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pblue = &blue)
				{
					int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, red, green, (ushort*)pblue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (ushort* pred = &red)
			{
				fixed (ushort* pblue = &blue)
				{
					int ret = SDLSetWindowGammaRampNative(window, (ushort*)pred, green, (ushort*)pblue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pred = &red)
				{
					fixed (ushort* pblue = &blue)
					{
						int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, (ushort*)pred, green, (ushort*)pblue);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (ushort* pgreen = &green)
			{
				fixed (ushort* pblue = &blue)
				{
					int ret = SDLSetWindowGammaRampNative(window, red, (ushort*)pgreen, (ushort*)pblue);
					return ret;
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pgreen = &green)
				{
					fixed (ushort* pblue = &blue)
					{
						int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, red, (ushort*)pgreen, (ushort*)pblue);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (ushort* pred = &red)
			{
				fixed (ushort* pgreen = &green)
				{
					fixed (ushort* pblue = &blue)
					{
						int ret = SDLSetWindowGammaRampNative(window, (ushort*)pred, (ushort*)pgreen, (ushort*)pblue);
						return ret;
					}
				}
			}
		}

		/// <summary>/// Set the gamma ramp for the display that owns a given window.<br/>/// Set the gamma translation table for the red, green, and blue channels of<br/>/// the video hardware. Each table is an array of 256 16-bit quantities,<br/>/// representing a mapping between the input and output for that channel. The<br/>/// input is the index into the array, and the output is the 16-bit gamma value<br/>/// at that index, scaled to the output color precision.<br/>/// Despite the name and signature, this method sets the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().) The gamma<br/>/// ramp set will not follow the window if it is moved to another display.<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_SetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLSetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "const Uint16*")] ref ushort blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (ushort* pred = &red)
				{
					fixed (ushort* pgreen = &green)
					{
						fixed (ushort* pblue = &blue)
						{
							int ret = SDLSetWindowGammaRampNative((SDLWindow*)pwindow, (ushort*)pred, (ushort*)pgreen, (ushort*)pblue);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the gamma ramp for a given window's display.<br/>
		/// Despite the name and signature, this method retrieves the gamma ramp of the<br/>
		/// entire display, not an individual window. A window is considered to be<br/>
		/// owned by the display that contains the window's center pixel. (The index of<br/>
		/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SDLGetWindowGammaRampNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* blue)
		{
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, ushort*, ushort*, ushort*, int>)vt[417])(window, red, green, blue);
		}
		/// <summary>/// Get the gamma ramp for a given window's display.<br/>/// Despite the name and signature, this method retrieves the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] SDLWindow* window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* blue)
		{
			int ret = SDLGetWindowGammaRampNative(window, red, green, blue);
			return ret;
		}

		/// <summary>/// Get the gamma ramp for a given window's display.<br/>/// Despite the name and signature, this method retrieves the gamma ramp of the<br/>/// entire display, not an individual window. A window is considered to be<br/>/// owned by the display that contains the window's center pixel. (The index of<br/>/// this display can be retrieved using SDL_GetWindowDisplayIndex().)<br/>/// <br/>/// <br/>/// <br/>/// </summary>		[NativeName(NativeNameType.Func, "SDL_GetWindowGammaRamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SDLGetWindowGammaRamp([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window*")] ref SDLWindow window, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* blue)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SDLGetWindowGammaRampNative((SDLWindow*)pwindow, red, green, blue);
				return ret;
			}
		}
	}
}
