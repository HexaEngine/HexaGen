// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.DXC
{
	public static unsafe class Extensions
	{
		public static HResult LoadSource(this ComPtr<IDxcIncludeHandler> comObj, char* pFilename, IDxcBlob** ppIncludeSource) 
		{
			IDxcIncludeHandler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcIncludeHandler*, char*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pFilename, ppIncludeSource);
			return ret;
		}

		public static HResult LoadSource(this ComPtr<IDxcIncludeHandler> comObj, char* pFilename, ref IDxcBlob* ppIncludeSource) 
		{
			IDxcIncludeHandler* handle = comObj.Handle;
			fixed (IDxcBlob** pppIncludeSource = &ppIncludeSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcIncludeHandler*, char*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pFilename, (IDxcBlob**)pppIncludeSource);
				return ret;
			}
		}

		public static HResult LoadSource(this ComPtr<IDxcIncludeHandler> comObj, char* pFilename, out ComPtr<IDxcBlob> ppIncludeSource) 
		{
			IDxcIncludeHandler* handle = comObj.Handle;
			ppIncludeSource = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcIncludeHandler*, char*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pFilename, (IDxcBlob**)ppIncludeSource.GetAddressOf());
			return ret;
		}

		public static void* GetBufferPointer(this ComPtr<IDxcBlob> comObj) 
		{
			IDxcBlob* handle = comObj.Handle;
			void* ret = ((delegate* unmanaged[Stdcall]<IDxcBlob*, void*>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static nuint GetBufferSize(this ComPtr<IDxcBlob> comObj) 
		{
			IDxcBlob* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<IDxcBlob*, nuint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		public static HResult GetEncoding(this ComPtr<IDxcBlobEncoding> comObj, bool* pKnown, Uint32* pCodePage) 
		{
			IDxcBlobEncoding* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*handle->LpVtbl))(handle, pKnown, pCodePage);
			return ret;
		}

		public static HResult GetEncoding(this ComPtr<IDxcBlobEncoding> comObj, ref bool pKnown, Uint32* pCodePage) 
		{
			IDxcBlobEncoding* handle = comObj.Handle;
			fixed (bool* ppKnown = &pKnown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*handle->LpVtbl))(handle, (bool*)ppKnown, pCodePage);
				return ret;
			}
		}

		public static HResult GetEncoding(this ComPtr<IDxcBlobEncoding> comObj, bool* pKnown, ref Uint32 pCodePage) 
		{
			IDxcBlobEncoding* handle = comObj.Handle;
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*handle->LpVtbl))(handle, pKnown, (Uint32*)ppCodePage);
				return ret;
			}
		}

		public static HResult GetEncoding(this ComPtr<IDxcBlobEncoding> comObj, ref bool pKnown, ref Uint32 pCodePage) 
		{
			IDxcBlobEncoding* handle = comObj.Handle;
			fixed (bool* ppKnown = &pKnown)
			{
				fixed (Uint32* ppCodePage = &pCodePage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*handle->LpVtbl))(handle, (bool*)ppKnown, (Uint32*)ppCodePage);
					return ret;
				}
			}
		}

		public static char* GetStringPointer(this ComPtr<IDxcBlobUtf16> comObj) 
		{
			IDxcBlobUtf16* handle = comObj.Handle;
			char* ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf16*, char*>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static nuint GetStringLength(this ComPtr<IDxcBlobUtf16> comObj) 
		{
			IDxcBlobUtf16* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf16*, nuint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		public static byte* GetStringPointer(this ComPtr<IDxcBlobUtf8> comObj) 
		{
			IDxcBlobUtf8* handle = comObj.Handle;
			byte* ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf8*, byte*>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static nuint GetStringLength(this ComPtr<IDxcBlobUtf8> comObj) 
		{
			IDxcBlobUtf8* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf8*, nuint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public static char** GetArguments(this ComPtr<IDxcCompilerArgs> comObj) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			char** ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static Uint32 GetCount(this ComPtr<IDxcCompilerArgs> comObj) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, Uint32>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		/// <summary>		/// Add additional arguments or defines here, if desired.<br/>		/// </summary>		public static HResult AddArguments(this ComPtr<IDxcCompilerArgs> comObj, char** pArguments, Uint32 argCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**, Uint32, HResult>)(handle->LpVtbl[2]))(handle, pArguments, argCount);
			return ret;
		}

		/// <summary>		/// Add additional arguments or defines here, if desired.<br/>		/// </summary>		public static HResult AddArguments(this ComPtr<IDxcCompilerArgs> comObj, ref char* pArguments, Uint32 argCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**, Uint32, HResult>)(handle->LpVtbl[2]))(handle, (char**)ppArguments, argCount);
				return ret;
			}
		}

		public static HResult AddArgumentsUtf8(this ComPtr<IDxcCompilerArgs> comObj, byte** pArguments, Uint32 argCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, byte**, Uint32, HResult>)(handle->LpVtbl[3]))(handle, pArguments, argCount);
			return ret;
		}

		public static HResult AddArgumentsUtf8(this ComPtr<IDxcCompilerArgs> comObj, ref byte* pArguments, Uint32 argCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			fixed (byte** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, byte**, Uint32, HResult>)(handle->LpVtbl[3]))(handle, (byte**)ppArguments, argCount);
				return ret;
			}
		}

		public static HResult AddDefines(this ComPtr<IDxcCompilerArgs> comObj, DxcDefine* pDefines, Uint32 defineCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, DxcDefine*, Uint32, HResult>)(handle->LpVtbl[4]))(handle, pDefines, defineCount);
			return ret;
		}

		public static HResult AddDefines(this ComPtr<IDxcCompilerArgs> comObj, ref DxcDefine pDefines, Uint32 defineCount) 
		{
			IDxcCompilerArgs* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, DxcDefine*, Uint32, HResult>)(handle->LpVtbl[4]))(handle, (DxcDefine*)ppDefines, defineCount);
				return ret;
			}
		}

		public static HResult SetMalloc(this ComPtr<IDxcLibrary> comObj, IMalloc* pMalloc) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IMalloc*, HResult>)(*handle->LpVtbl))(handle, pMalloc);
			return ret;
		}

		public static HResult SetMalloc(this ComPtr<IDxcLibrary> comObj, ref IMalloc pMalloc) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IMalloc*, HResult>)(*handle->LpVtbl))(handle, (IMalloc*)ppMalloc);
				return ret;
			}
		}

		public static HResult SetMalloc(this ComPtr<IDxcLibrary> comObj, ComPtr<IMalloc> pMalloc) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IMalloc*, HResult>)(*handle->LpVtbl))(handle, pMalloc);
			return ret;
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, pBlob, offset, length, ppResult);
			return ret;
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppBlob, offset, length, ppResult);
				return ret;
			}
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, pBlob, offset, length, ppResult);
			return ret;
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, pBlob, offset, length, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppBlob, offset, length, (IDxcBlob**)pppResult);
					return ret;
				}
			}
		}

		public static HResult CreateBlobFromBlob(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, Uint32 offset, Uint32 length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, Uint32* codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, codePage, pBlobEncoding);
			return ret;
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, ref Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (Uint32* pcodePage = &codePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, (Uint32*)pcodePage, pBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, Uint32* codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, Uint32* codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, ref Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (Uint32* pcodePage = &codePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, (Uint32*)pcodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public static HResult CreateBlobFromFile(this ComPtr<IDxcLibrary> comObj, char* pFileName, ref Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (Uint32* pcodePage = &codePage)
			{
				pBlobEncoding = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pFileName, (Uint32*)pcodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
				return ret;
			}
		}

		public static HResult CreateBlobWithEncodingFromPinned(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pText, size, codePage, pBlobEncoding);
			return ret;
		}

		public static HResult CreateBlobWithEncodingFromPinned(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pText, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobWithEncodingFromPinned(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pText, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnHeapCopy(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pText, size, codePage, pBlobEncoding);
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnHeapCopy(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pText, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobWithEncodingOnHeapCopy(this ComPtr<IDxcLibrary> comObj, void* pText, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pText, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, ComPtr<IMalloc> pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public static HResult CreateBlobWithEncodingOnMalloc(this ComPtr<IDxcLibrary> comObj, void* pText, ComPtr<IMalloc> pIMalloc, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[5]))(handle, pText, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult CreateIncludeHandler(this ComPtr<IDxcLibrary> comObj, IDxcIncludeHandler** ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, ppResult);
			return ret;
		}

		public static HResult CreateIncludeHandler(this ComPtr<IDxcLibrary> comObj, ref IDxcIncludeHandler* ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		public static HResult CreateIncludeHandler(this ComPtr<IDxcLibrary> comObj, out ComPtr<IDxcIncludeHandler> ppResult) 
		{
			IDxcLibrary* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcIncludeHandler**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, IStream** ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, ppStream);
			return ret;
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, IStream** ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, IStream** ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, ppStream);
			return ret;
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, ref IStream* ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IStream** pppStream = &ppStream)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			ppStream = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, ref IStream* ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		public static HResult CreateStreamFromBlobReadOnly(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcLibrary* handle = comObj.Handle;
			ppStream = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public static HResult GetBlobAsUtf8(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, pBlob, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, pBlob, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, ref IDxcBlob pBlob, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcLibrary> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcLibrary* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[9]))(handle, pBlob, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetStatus(this ComPtr<IDxcOperationResult> comObj, HResult* pStatus) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, HResult*, HResult>)(*handle->LpVtbl))(handle, pStatus);
			return ret;
		}

		public static HResult GetStatus(this ComPtr<IDxcOperationResult> comObj, ref HResult pStatus) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			fixed (HResult* ppStatus = &pStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, HResult*, HResult>)(*handle->LpVtbl))(handle, (HResult*)ppStatus);
				return ret;
			}
		}

		/// <summary>		/// GetResult returns the main result of the operation.<br/>		/// This corresponds to:<br/>		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>		/// DXC_OUT_HLSL - Compile() with -P<br/>		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>		/// </summary>		public static HResult GetResult(this ComPtr<IDxcOperationResult> comObj, IDxcBlob** ppResult) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, ppResult);
			return ret;
		}

		/// <summary>		/// GetResult returns the main result of the operation.<br/>		/// This corresponds to:<br/>		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>		/// DXC_OUT_HLSL - Compile() with -P<br/>		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>		/// </summary>		public static HResult GetResult(this ComPtr<IDxcOperationResult> comObj, ref IDxcBlob* ppResult) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// GetResult returns the main result of the operation.<br/>		/// This corresponds to:<br/>		/// DXC_OUT_OBJECT - Compile() with shader or library target<br/>		/// DXC_OUT_DISASSEMBLY - Disassemble()<br/>		/// DXC_OUT_HLSL - Compile() with -P<br/>		/// DXC_OUT_ROOT_SIGNATURE - Compile() with rootsig_* target<br/>		/// </summary>		public static HResult GetResult(this ComPtr<IDxcOperationResult> comObj, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlob**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>		/// </summary>		public static HResult GetErrorBuffer(this ComPtr<IDxcOperationResult> comObj, IDxcBlobEncoding** ppErrors) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, ppErrors);
			return ret;
		}

		/// <summary>		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>		/// </summary>		public static HResult GetErrorBuffer(this ComPtr<IDxcOperationResult> comObj, ref IDxcBlobEncoding* ppErrors) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppErrors = &ppErrors)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlobEncoding**)pppErrors);
				return ret;
			}
		}

		/// <summary>		/// GetErrorBuffer Corresponds to DXC_OUT_ERRORS.<br/>		/// </summary>		public static HResult GetErrorBuffer(this ComPtr<IDxcOperationResult> comObj, out ComPtr<IDxcBlobEncoding> ppErrors) 
		{
			IDxcOperationResult* handle = comObj.Handle;
			ppErrors = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlobEncoding**)ppErrors.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Preprocess source text<br/>		/// </summary>		public static HResult Preprocess(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pSource, ppDisassembly);
			return ret;
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppSource, ppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, IDxcBlobEncoding** ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pSource, ppDisassembly);
			return ret;
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, ref IDxcBlobEncoding* ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pSource, (IDxcBlobEncoding**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, IDxcBlob* pSource, out ComPtr<IDxcBlobEncoding> ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppDisassembly = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pSource, (IDxcBlobEncoding**)ppDisassembly.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ref IDxcBlob pSource, ref IDxcBlobEncoding* ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppSource, (IDxcBlobEncoding**)pppDisassembly);
					return ret;
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler> comObj, ComPtr<IDxcBlob> pSource, out ComPtr<IDxcBlobEncoding> ppDisassembly) 
		{
			IDxcCompiler* handle = comObj.Handle;
			ppDisassembly = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pSource, (IDxcBlobEncoding**)ppDisassembly.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			ppDebugBlob = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			ppDebugBlob = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			ppDebugBlob = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			ppDebugBlob = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, Lpwstr* ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				ppDebugBlob = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					ppDebugBlob = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						ppDebugBlob = default;
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public static HResult CompileWithDebug(this ComPtr<IDxcCompiler2> comObj, ComPtr<IDxcBlob> pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref ComPtr<IDxcOperationResult> ppResult, ref Lpwstr ppDebugBlobName, out ComPtr<IDxcBlob> ppDebugBlob) 
		{
			IDxcCompiler2* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (ComPtr<IDxcOperationResult>* pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							ppDebugBlob = default;
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)ppDebugBlob.GetAddressOf());
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public static HResult RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, IDxcBlob* pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pLibName, pLib);
			return ret;
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public static HResult RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, ref IDxcBlob pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (IDxcBlob* ppLib = &pLib)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pLibName, (IDxcBlob*)ppLib);
				return ret;
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public static HResult RegisterLibrary(this ComPtr<IDxcLinker> comObj, char* pLibName, ComPtr<IDxcBlob> pLib) 
		{
			IDxcLinker* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pLibName, pLib);
			return ret;
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
			return ret;
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, IDxcOperationResult** ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Links the shader and produces a shader blob that the Direct3D runtime can<br/>		/// use.<br/>		/// </summary>		public static HResult Link(this ComPtr<IDxcLinker> comObj, char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcLinker* handle = comObj.Handle;
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					ppResult = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(handle->LpVtbl[1]))(handle, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)ppResult.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pBlob, offset, length, ppResult);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppBlob, offset, length, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pBlob, offset, length, ppResult);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pBlob, offset, length, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, Uint32 offset, Uint32 length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppBlob, offset, length, (IDxcBlob**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public static HResult CreateBlobFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, Uint32 offset, Uint32 length, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(*handle->LpVtbl))(handle, pBlob, offset, length, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Creates a blob referencing existing memory, with no copy.<br/>		/// User must manage the memory lifetime separately.<br/>		/// (was: CreateBlobWithEncodingFromPinned)<br/>		/// </summary>		public static HResult CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[1]))(handle, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Creates a blob referencing existing memory, with no copy.<br/>		/// User must manage the memory lifetime separately.<br/>		/// (was: CreateBlobWithEncodingFromPinned)<br/>		/// </summary>		public static HResult CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[1]))(handle, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Creates a blob referencing existing memory, with no copy.<br/>		/// User must manage the memory lifetime separately.<br/>		/// (was: CreateBlobWithEncodingFromPinned)<br/>		/// </summary>		public static HResult CreateBlobFromPinned(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[1]))(handle, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ComPtr<IMalloc> pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Create blob, taking ownership of memory allocated with supplied allocator.<br/>		/// (was: CreateBlobWithEncodingOnMalloc)<br/>		/// </summary>		public static HResult MoveToBlob(this ComPtr<IDxcUtils> comObj, void* pData, ComPtr<IMalloc> pIMalloc, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Copy blob contents to memory owned by the new blob.<br/>		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>		/// </summary>		public static HResult CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Copy blob contents to memory owned by the new blob.<br/>		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>		/// </summary>		public static HResult CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Copy blob contents to memory owned by the new blob.<br/>		/// (was: CreateBlobWithEncodingOnHeapCopy)<br/>		/// </summary>		public static HResult CreateBlob(this ComPtr<IDxcUtils> comObj, void* pData, Uint32 size, Uint32 codePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[3]))(handle, pData, size, codePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, Uint32* pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, pCodePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref Uint32 pCodePage, IDxcBlobEncoding** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, (Uint32*)ppCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, Uint32* pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, Uint32* pCodePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, pCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref Uint32 pCodePage, ref IDxcBlobEncoding* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, (Uint32*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// (was: CreateBlobFromFile)<br/>		/// </summary>		public static HResult LoadFile(this ComPtr<IDxcUtils> comObj, char* pFileName, ref Uint32 pCodePage, out ComPtr<IDxcBlobEncoding> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				pBlobEncoding = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[4]))(handle, pFileName, (Uint32*)ppCodePage, (IDxcBlobEncoding**)pBlobEncoding.GetAddressOf());
				return ret;
			}
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppStream);
			return ret;
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IStream** ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, ppStream);
			return ret;
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IStream* ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IStream** pppStream = &ppStream)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppStream = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IStream* ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		public static HResult CreateReadOnlyStreamFromBlob(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IStream> ppStream) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppStream = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(handle->LpVtbl[5]))(handle, pBlob, (IStream**)ppStream.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Create default file-based include handler<br/>		/// </summary>		public static HResult CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, IDxcIncludeHandler** ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, ppResult);
			return ret;
		}

		/// <summary>		/// Create default file-based include handler<br/>		/// </summary>		public static HResult CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, ref IDxcIncludeHandler* ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Create default file-based include handler<br/>		/// </summary>		public static HResult CreateDefaultIncludeHandler(this ComPtr<IDxcUtils> comObj, out ComPtr<IDxcIncludeHandler> ppResult) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, HResult>)(handle->LpVtbl[6]))(handle, (IDxcIncludeHandler**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobUtf8** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IDxcBlobUtf8**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IDxcBlobUtf8* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobUtf8**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Convert or return matching encoded text blobs<br/>		/// </summary>		public static HResult GetBlobAsUtf8(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobUtf8> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(handle->LpVtbl[7]))(handle, pBlob, (IDxcBlobUtf8**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, IDxcBlobUtf16** pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, pBlobEncoding);
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobUtf16**)ppBlobEncoding);
				return ret;
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, IDxcBlob* pBlob, out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pBlob, ref IDxcBlobUtf16* pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, (IDxcBlob*)ppBlob, (IDxcBlobUtf16**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public static HResult GetBlobAsUtf16(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pBlob, out ComPtr<IDxcBlobUtf16> pBlobEncoding) 
		{
			IDxcUtils* handle = comObj.Handle;
			pBlobEncoding = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[8]))(handle, pBlob, (IDxcBlobUtf16**)pBlobEncoding.GetAddressOf());
			return ret;
		}

		public static HResult GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, DxcBuffer* pShader, Uint32 dxcPart, void** ppPartData, Uint32* pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(handle->LpVtbl[9]))(handle, pShader, dxcPart, ppPartData, pPartSizeInBytes);
			return ret;
		}

		public static HResult GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, ref DxcBuffer pShader, Uint32 dxcPart, void** ppPartData, Uint32* pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcBuffer* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(handle->LpVtbl[9]))(handle, (DxcBuffer*)ppShader, dxcPart, ppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		public static HResult GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, DxcBuffer* pShader, Uint32 dxcPart, void** ppPartData, ref Uint32 pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Uint32* ppPartSizeInBytes = &pPartSizeInBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(handle->LpVtbl[9]))(handle, pShader, dxcPart, ppPartData, (Uint32*)ppPartSizeInBytes);
				return ret;
			}
		}

		public static HResult GetDxilContainerPart(this ComPtr<IDxcUtils> comObj, ref DxcBuffer pShader, Uint32 dxcPart, void** ppPartData, ref Uint32 pPartSizeInBytes) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcBuffer* ppShader = &pShader)
			{
				fixed (Uint32* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(handle->LpVtbl[9]))(handle, (DxcBuffer*)ppShader, dxcPart, ppPartData, (Uint32*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>		/// </summary>		public static HResult CreateReflection(this ComPtr<IDxcUtils> comObj, DxcBuffer* pData, Guid* iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[10]))(handle, pData, iid, ppvReflection);
			return ret;
		}

		/// <summary>		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>		/// </summary>		public static HResult CreateReflection(this ComPtr<IDxcUtils> comObj, ref DxcBuffer pData, Guid* iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcBuffer* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[10]))(handle, (DxcBuffer*)ppData, iid, ppvReflection);
				return ret;
			}
		}

		/// <summary>		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>		/// </summary>		public static HResult CreateReflection(this ComPtr<IDxcUtils> comObj, DxcBuffer* pData, ref Guid iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[10]))(handle, pData, (Guid*)piid, ppvReflection);
				return ret;
			}
		}

		/// <summary>		/// Create reflection interface from serialized Dxil container, or DXC_PART_REFLECTION_DATA.<br/>		/// TBD: Require part header for RDAT?  (leaning towards yes)<br/>		/// </summary>		public static HResult CreateReflection(this ComPtr<IDxcUtils> comObj, ref DxcBuffer pData, ref Guid iid, void** ppvReflection) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcBuffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[10]))(handle, (DxcBuffer*)ppData, (Guid*)piid, ppvReflection);
					return ret;
				}
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			return ret;
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				return ret;
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				return ret;
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppArgs = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
			return ret;
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				ppArgs = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				ppArgs = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
				return ret;
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		public static HResult BuildArguments(this ComPtr<IDxcUtils> comObj, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, out ComPtr<IDxcCompilerArgs> ppArgs) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					ppArgs = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(handle->LpVtbl[11]))(handle, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)ppArgs.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, ppHash, ppContainer);
			return ret;
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, (IDxcBlob*)ppPDBBlob, ppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, ppHash, ppContainer);
			return ret;
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref ComPtr<IDxcBlob> ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, ppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, ref ComPtr<IDxcBlob> ppHash, IDxcBlob** ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppContainer = &ppContainer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, ppHash, (IDxcBlob**)pppContainer);
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, IDxcBlob** ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppContainer = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, (IDxcBlob*)ppPDBBlob, ppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, IDxcBlob** ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			ppContainer = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, ppHash, (IDxcBlob**)ppContainer.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, IDxcBlob* pPDBBlob, ref ComPtr<IDxcBlob> ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					fixed (IDxcBlob** pppContainer = &ppContainer)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Takes the shader PDB and returns the hash and the container inside it<br/>		/// </summary>		public static HResult GetPdbContents(this ComPtr<IDxcUtils> comObj, ComPtr<IDxcBlob> pPDBBlob, ref ComPtr<IDxcBlob> ppHash, out ComPtr<IDxcBlob> ppContainer) 
		{
			IDxcUtils* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* pppHash = &ppHash)
			{
				ppContainer = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(handle->LpVtbl[12]))(handle, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)ppContainer.GetAddressOf());
				return ret;
			}
		}

		public static bool HasOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind) 
		{
			IDxcResult* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, int>)(*handle->LpVtbl))(handle, dxcOutKind);
			return ret != 0;
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, iid, ppvObject, ppOutputName);
			return ret;
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, (Guid*)piid, ppvObject, ppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, iid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, Guid* iid, void** ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			ppOutputName = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, iid, ppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
			return ret;
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcResult> comObj, DxcOutKind dxcOutKind, ref Guid iid, void** ppvObject, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcResult* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppOutputName = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, dxcOutKind, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		public static Uint32 GetNumOutputs(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Uint32>)(handle->LpVtbl[2]))(handle);
			return ret;
		}

		public static DxcOutKind GetOutputByIndex(this ComPtr<IDxcResult> comObj, Uint32 index) 
		{
			IDxcResult* handle = comObj.Handle;
			DxcOutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Uint32, DxcOutKind>)(handle->LpVtbl[3]))(handle, index);
			return ret;
		}

		public static DxcOutKind PrimaryOutput(this ComPtr<IDxcResult> comObj) 
		{
			IDxcResult* handle = comObj.Handle;
			DxcOutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind>)(handle->LpVtbl[4]))(handle);
			return ret;
		}

		public static Uint32 GetOutputCount(this ComPtr<IDxcExtraOutputs> comObj) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, ppOutputType, ppOutputName);
			return ret;
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, ppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, IDxcBlobUtf16** ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			ppOutputName = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
			return ret;
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				ppOutputName = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, ppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, Guid* iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
			{
				ppOutputName = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
				return ret;
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
						return ret;
					}
				}
			}
		}

		public static HResult GetOutput(this ComPtr<IDxcExtraOutputs> comObj, Uint32 uIndex, ref Guid iid, void** ppvObject, ref ComPtr<IDxcBlobUtf16> ppOutputType, out ComPtr<IDxcBlobUtf16> ppOutputName) 
		{
			IDxcExtraOutputs* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				fixed (ComPtr<IDxcBlobUtf16>* pppOutputType = &ppOutputType)
				{
					ppOutputName = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(handle->LpVtbl[1]))(handle, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)ppOutputName.GetAddressOf());
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							fixed (void** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public static HResult Compile(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ComPtr<IDxcIncludeHandler> pIncludeHandler, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*handle->LpVtbl))(handle, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pObject, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, pObject, riid, ppResult);
			return ret;
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pObject, Guid* riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, (DxcBuffer*)ppObject, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pObject, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, pObject, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pObject, ref Guid riid, void** ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, (DxcBuffer*)ppObject, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pObject, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, pObject, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pObject, Guid* riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, (DxcBuffer*)ppObject, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, DxcBuffer* pObject, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, pObject, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Disassemble a program.<br/>		/// </summary>		public static HResult Disassemble(this ComPtr<IDxcCompiler3> comObj, ref DxcBuffer pObject, ref Guid riid, ref void* ppResult) 
		{
			IDxcCompiler3* handle = comObj.Handle;
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(handle->LpVtbl[1]))(handle, (DxcBuffer*)ppObject, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, Uint32 flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ref IDxcBlob pShader, Uint32 flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, IDxcOperationResult** ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, Uint32 flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, IDxcBlob* pShader, Uint32 flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ref IDxcBlob pShader, Uint32 flags, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult Validate(this ComPtr<IDxcValidator> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, pOptDebugBitcode, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, pOptDebugBitcode, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, (DxcBuffer*)ppOptDebugBitcode, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, IDxcOperationResult** ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, IDxcBlob* pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ref IDxcBlob pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, ref IDxcOperationResult* ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public static HResult ValidateWithDebug(this ComPtr<IDxcValidator2> comObj, ComPtr<IDxcBlob> pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcValidator2* handle = comObj.Handle;
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				ppResult = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)ppResult.GetAddressOf());
				return ret;
			}
		}

		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, IDxcBlob* pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pDxilContainerHeader);
			return ret;
		}

		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, ref IDxcBlob pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcBlob* ppDxilContainerHeader = &pDxilContainerHeader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppDxilContainerHeader);
				return ret;
			}
		}

		public static HResult Load(this ComPtr<IDxcContainerBuilder> comObj, ComPtr<IDxcBlob> pDxilContainerHeader) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pDxilContainerHeader);
			return ret;
		}

		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, Uint32 fourCC, IDxcBlob* pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, IDxcBlob*, HResult>)(handle->LpVtbl[1]))(handle, fourCC, pSource);
			return ret;
		}

		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, Uint32 fourCC, ref IDxcBlob pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, IDxcBlob*, HResult>)(handle->LpVtbl[1]))(handle, fourCC, (IDxcBlob*)ppSource);
				return ret;
			}
		}

		public static HResult AddPart(this ComPtr<IDxcContainerBuilder> comObj, Uint32 fourCC, ComPtr<IDxcBlob> pSource) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, IDxcBlob*, HResult>)(handle->LpVtbl[1]))(handle, fourCC, pSource);
			return ret;
		}

		public static HResult RemovePart(this ComPtr<IDxcContainerBuilder> comObj, Uint32 fourCC) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, HResult>)(handle->LpVtbl[2]))(handle, fourCC);
			return ret;
		}

		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, IDxcOperationResult** ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, ppResult);
			return ret;
		}

		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, ref IDxcOperationResult* ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		public static HResult SerializeContainer(this ComPtr<IDxcContainerBuilder> comObj, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcContainerBuilder* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(handle->LpVtbl[3]))(handle, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, ppResult);
			return ret;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ref IDxcBlob pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ComPtr<IDxcBlob> pShader, IDxcOperationResult** ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, ppResult);
			return ret;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, ref IDxcOperationResult* ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, IDxcBlob* pShader, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ref IDxcBlob pShader, ref IDxcOperationResult* ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppShader, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public static HResult AssembleToContainer(this ComPtr<IDxcAssembler> comObj, ComPtr<IDxcBlob> pShader, out ComPtr<IDxcOperationResult> ppResult) 
		{
			IDxcAssembler* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*handle->LpVtbl))(handle, pShader, (IDxcOperationResult**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, IDxcBlob* pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pContainer);
			return ret;
		}

		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, ref IDxcBlob pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (IDxcBlob* ppContainer = &pContainer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppContainer);
				return ret;
			}
		}

		public static HResult Load(this ComPtr<IDxcContainerReflection> comObj, ComPtr<IDxcBlob> pContainer) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pContainer);
			return ret;
		}

		public static HResult GetPartCount(this ComPtr<IDxcContainerReflection> comObj, Uint32* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, pResult);
			return ret;
		}

		public static HResult GetPartCount(this ComPtr<IDxcContainerReflection> comObj, ref Uint32 pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, (Uint32*)ppResult);
				return ret;
			}
		}

		public static HResult GetPartKind(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, Uint32* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(handle->LpVtbl[2]))(handle, idx, pResult);
			return ret;
		}

		public static HResult GetPartKind(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, ref Uint32 pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(handle->LpVtbl[2]))(handle, idx, (Uint32*)ppResult);
				return ret;
			}
		}

		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, IDxcBlob** ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[3]))(handle, idx, ppResult);
			return ret;
		}

		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, ref IDxcBlob* ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[3]))(handle, idx, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public static HResult GetPartContent(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, IDxcBlob**, HResult>)(handle->LpVtbl[3]))(handle, idx, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult FindFirstPartKind(this ComPtr<IDxcContainerReflection> comObj, Uint32 kind, Uint32* pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(handle->LpVtbl[4]))(handle, kind, pResult);
			return ret;
		}

		public static HResult FindFirstPartKind(this ComPtr<IDxcContainerReflection> comObj, Uint32 kind, ref Uint32 pResult) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(handle->LpVtbl[4]))(handle, kind, (Uint32*)ppResult);
				return ret;
			}
		}

		public static HResult GetPartReflection(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, Guid* iid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Guid*, void**, HResult>)(handle->LpVtbl[5]))(handle, idx, iid, ppvObject);
			return ret;
		}

		public static HResult GetPartReflection(this ComPtr<IDxcContainerReflection> comObj, Uint32 idx, ref Guid iid, void** ppvObject) 
		{
			IDxcContainerReflection* handle = comObj.Handle;
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Guid*, void**, HResult>)(handle->LpVtbl[5]))(handle, idx, (Guid*)piid, ppvObject);
				return ret;
			}
		}

		public static HResult GetOptionName(this ComPtr<IDxcOptimizerPass> comObj, Lpwstr* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(*handle->LpVtbl))(handle, ppResult);
			return ret;
		}

		public static HResult GetOptionName(this ComPtr<IDxcOptimizerPass> comObj, ref Lpwstr ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(*handle->LpVtbl))(handle, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public static HResult GetDescription(this ComPtr<IDxcOptimizerPass> comObj, Lpwstr* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(handle->LpVtbl[1]))(handle, ppResult);
			return ret;
		}

		public static HResult GetDescription(this ComPtr<IDxcOptimizerPass> comObj, ref Lpwstr ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(handle->LpVtbl[1]))(handle, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public static HResult GetOptionArgCount(this ComPtr<IDxcOptimizerPass> comObj, Uint32* pCount) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32*, HResult>)(handle->LpVtbl[2]))(handle, pCount);
			return ret;
		}

		public static HResult GetOptionArgCount(this ComPtr<IDxcOptimizerPass> comObj, ref Uint32 pCount) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32*, HResult>)(handle->LpVtbl[2]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetOptionArgName(this ComPtr<IDxcOptimizerPass> comObj, Uint32 argIndex, Lpwstr* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(handle->LpVtbl[3]))(handle, argIndex, ppResult);
			return ret;
		}

		public static HResult GetOptionArgName(this ComPtr<IDxcOptimizerPass> comObj, Uint32 argIndex, ref Lpwstr ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(handle->LpVtbl[3]))(handle, argIndex, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public static HResult GetOptionArgDescription(this ComPtr<IDxcOptimizerPass> comObj, Uint32 argIndex, Lpwstr* ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(handle->LpVtbl[4]))(handle, argIndex, ppResult);
			return ret;
		}

		public static HResult GetOptionArgDescription(this ComPtr<IDxcOptimizerPass> comObj, Uint32 argIndex, ref Lpwstr ppResult) 
		{
			IDxcOptimizerPass* handle = comObj.Handle;
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(handle->LpVtbl[4]))(handle, argIndex, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public static HResult GetAvailablePassCount(this ComPtr<IDxcOptimizer> comObj, Uint32* pCount) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32*, HResult>)(*handle->LpVtbl))(handle, pCount);
			return ret;
		}

		public static HResult GetAvailablePassCount(this ComPtr<IDxcOptimizer> comObj, ref Uint32 pCount) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32*, HResult>)(*handle->LpVtbl))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, Uint32 index, IDxcOptimizerPass** ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[1]))(handle, index, ppResult);
			return ret;
		}

		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, Uint32 index, ref IDxcOptimizerPass* ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcOptimizerPass** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[1]))(handle, index, (IDxcOptimizerPass**)pppResult);
				return ret;
			}
		}

		public static HResult GetAvailablePass(this ComPtr<IDxcOptimizer> comObj, Uint32 index, out ComPtr<IDxcOptimizerPass> ppResult) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32, IDxcOptimizerPass**, HResult>)(handle->LpVtbl[1]))(handle, index, (IDxcOptimizerPass**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
			return ret;
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
			return ret;
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
						return ret;
					}
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, IDxcBlobEncoding** ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppOutputText = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
			return ret;
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			ppOutputText = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
			return ret;
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, char** ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
			{
				ppOutputText = default;
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
				return ret;
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					ppOutputText = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
					return ret;
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
							return ret;
						}
					}
				}
			}
		}

		public static HResult RunOptimizer(this ComPtr<IDxcOptimizer> comObj, ComPtr<IDxcBlob> pBlob, ref char* ppOptions, Uint32 optionCount, ref ComPtr<IDxcBlob> pOutputModule, out ComPtr<IDxcBlobEncoding> ppOutputText) 
		{
			IDxcOptimizer* handle = comObj.Handle;
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (ComPtr<IDxcBlob>* ppOutputModule = &pOutputModule)
				{
					ppOutputText = default;
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)ppOutputText.GetAddressOf());
					return ret;
				}
			}
		}

		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, Uint32* pMajor, Uint32* pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*handle->LpVtbl))(handle, pMajor, pMinor);
			return ret;
		}

		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, ref Uint32 pMajor, Uint32* pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Uint32* ppMajor = &pMajor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*handle->LpVtbl))(handle, (Uint32*)ppMajor, pMinor);
				return ret;
			}
		}

		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, Uint32* pMajor, ref Uint32 pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Uint32* ppMinor = &pMinor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*handle->LpVtbl))(handle, pMajor, (Uint32*)ppMinor);
				return ret;
			}
		}

		public static HResult GetVersion(this ComPtr<IDxcVersionInfo> comObj, ref Uint32 pMajor, ref Uint32 pMinor) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Uint32* ppMajor = &pMajor)
			{
				fixed (Uint32* ppMinor = &pMinor)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*handle->LpVtbl))(handle, (Uint32*)ppMajor, (Uint32*)ppMinor);
					return ret;
				}
			}
		}

		public static HResult GetFlags(this ComPtr<IDxcVersionInfo> comObj, Uint32* pFlags) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, pFlags);
			return ret;
		}

		public static HResult GetFlags(this ComPtr<IDxcVersionInfo> comObj, ref Uint32 pFlags) 
		{
			IDxcVersionInfo* handle = comObj.Handle;
			fixed (Uint32* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, (Uint32*)ppFlags);
				return ret;
			}
		}

		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, Uint32* pCommitCount, byte** pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*handle->LpVtbl))(handle, pCommitCount, pCommitHash);
			return ret;
		}

		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, ref Uint32 pCommitCount, byte** pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (Uint32* ppCommitCount = &pCommitCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*handle->LpVtbl))(handle, (Uint32*)ppCommitCount, pCommitHash);
				return ret;
			}
		}

		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, Uint32* pCommitCount, ref byte* pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (byte** ppCommitHash = &pCommitHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*handle->LpVtbl))(handle, pCommitCount, (byte**)ppCommitHash);
				return ret;
			}
		}

		public static HResult GetCommitInfo(this ComPtr<IDxcVersionInfo2> comObj, ref Uint32 pCommitCount, ref byte* pCommitHash) 
		{
			IDxcVersionInfo2* handle = comObj.Handle;
			fixed (Uint32* ppCommitCount = &pCommitCount)
			{
				fixed (byte** ppCommitHash = &pCommitHash)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*handle->LpVtbl))(handle, (Uint32*)ppCommitCount, (byte**)ppCommitHash);
					return ret;
				}
			}
		}

		public static HResult GetCustomVersionString(this ComPtr<IDxcVersionInfo3> comObj, byte** pVersionString) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(*handle->LpVtbl))(handle, pVersionString);
			return ret;
		}

		public static HResult GetCustomVersionString(this ComPtr<IDxcVersionInfo3> comObj, ref byte* pVersionString) 
		{
			IDxcVersionInfo3* handle = comObj.Handle;
			fixed (byte** ppVersionString = &pVersionString)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(*handle->LpVtbl))(handle, (byte**)ppVersionString);
				return ret;
			}
		}

		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob* pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pPdbOrDxil);
			return ret;
		}

		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob* ppPdbOrDxil = &pPdbOrDxil)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, (IDxcBlob*)ppPdbOrDxil);
				return ret;
			}
		}

		public static HResult Load(this ComPtr<IDxcPdbUtils> comObj, ComPtr<IDxcBlob> pPdbOrDxil) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(*handle->LpVtbl))(handle, pPdbOrDxil);
			return ret;
		}

		public static HResult GetSourceCount(this ComPtr<IDxcPdbUtils> comObj, Uint32* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, pCount);
			return ret;
		}

		public static HResult GetSourceCount(this ComPtr<IDxcPdbUtils> comObj, ref Uint32 pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[1]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, IDxcBlobEncoding** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, uIndex, ppResult);
			return ret;
		}

		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref IDxcBlobEncoding* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlobEncoding** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, uIndex, (IDxcBlobEncoding**)pppResult);
				return ret;
			}
		}

		public static HResult GetSource(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, out ComPtr<IDxcBlobEncoding> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, IDxcBlobEncoding**, HResult>)(handle->LpVtbl[2]))(handle, uIndex, (IDxcBlobEncoding**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult GetSourceName(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[3]))(handle, uIndex, pResult);
			return ret;
		}

		public static HResult GetSourceName(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[3]))(handle, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetFlagCount(this ComPtr<IDxcPdbUtils> comObj, Uint32* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[4]))(handle, pCount);
			return ret;
		}

		public static HResult GetFlagCount(this ComPtr<IDxcPdbUtils> comObj, ref Uint32 pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[4]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetFlag(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[5]))(handle, uIndex, pResult);
			return ret;
		}

		public static HResult GetFlag(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[5]))(handle, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetArgCount(this ComPtr<IDxcPdbUtils> comObj, Uint32* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[6]))(handle, pCount);
			return ret;
		}

		public static HResult GetArgCount(this ComPtr<IDxcPdbUtils> comObj, ref Uint32 pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[6]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetArg(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[7]))(handle, uIndex, pResult);
			return ret;
		}

		public static HResult GetArg(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[7]))(handle, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetArgPairCount(this ComPtr<IDxcPdbUtils> comObj, Uint32* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[8]))(handle, pCount);
			return ret;
		}

		public static HResult GetArgPairCount(this ComPtr<IDxcPdbUtils> comObj, ref Uint32 pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[8]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pName, Bstr* pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(handle->LpVtbl[9]))(handle, uIndex, pName, pValue);
			return ret;
		}

		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pName, Bstr* pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppName = &pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(handle->LpVtbl[9]))(handle, uIndex, (Bstr*)ppName, pValue);
				return ret;
			}
		}

		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pName, ref Bstr pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(handle->LpVtbl[9]))(handle, uIndex, pName, (Bstr*)ppValue);
				return ret;
			}
		}

		public static HResult GetArgPair(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pName, ref Bstr pValue) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppName = &pName)
			{
				fixed (Bstr* ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(handle->LpVtbl[9]))(handle, uIndex, (Bstr*)ppName, (Bstr*)ppValue);
					return ret;
				}
			}
		}

		public static HResult GetDefineCount(this ComPtr<IDxcPdbUtils> comObj, Uint32* pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[10]))(handle, pCount);
			return ret;
		}

		public static HResult GetDefineCount(this ComPtr<IDxcPdbUtils> comObj, ref Uint32 pCount) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(handle->LpVtbl[10]))(handle, (Uint32*)ppCount);
				return ret;
			}
		}

		public static HResult GetDefine(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[11]))(handle, uIndex, pResult);
			return ret;
		}

		public static HResult GetDefine(this ComPtr<IDxcPdbUtils> comObj, Uint32 uIndex, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(handle->LpVtbl[11]))(handle, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetTargetProfile(this ComPtr<IDxcPdbUtils> comObj, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[12]))(handle, pResult);
			return ret;
		}

		public static HResult GetTargetProfile(this ComPtr<IDxcPdbUtils> comObj, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[12]))(handle, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetEntryPoint(this ComPtr<IDxcPdbUtils> comObj, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[13]))(handle, pResult);
			return ret;
		}

		public static HResult GetEntryPoint(this ComPtr<IDxcPdbUtils> comObj, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[13]))(handle, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetMainFileName(this ComPtr<IDxcPdbUtils> comObj, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[14]))(handle, pResult);
			return ret;
		}

		public static HResult GetMainFileName(this ComPtr<IDxcPdbUtils> comObj, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[14]))(handle, (Bstr*)ppResult);
				return ret;
			}
		}

		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[15]))(handle, ppResult);
			return ret;
		}

		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[15]))(handle, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public static HResult GetHash(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcBlob> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[15]))(handle, (IDxcBlob**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult GetName(this ComPtr<IDxcPdbUtils> comObj, Bstr* pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[16]))(handle, pResult);
			return ret;
		}

		public static HResult GetName(this ComPtr<IDxcPdbUtils> comObj, ref Bstr pResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(handle->LpVtbl[16]))(handle, (Bstr*)ppResult);
				return ret;
			}
		}

		public static bool IsFullPdb(this ComPtr<IDxcPdbUtils> comObj) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			int ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, int>)(handle->LpVtbl[17]))(handle);
			return ret != 0;
		}

		public static HResult GetFullPdb(this ComPtr<IDxcPdbUtils> comObj, IDxcBlob** ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, ppFullPDB);
			return ret;
		}

		public static HResult GetFullPdb(this ComPtr<IDxcPdbUtils> comObj, ref IDxcBlob* ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcBlob** pppFullPDB = &ppFullPDB)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, (IDxcBlob**)pppFullPDB);
				return ret;
			}
		}

		public static HResult GetFullPdb(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcBlob> ppFullPDB) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppFullPDB = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(handle->LpVtbl[18]))(handle, (IDxcBlob**)ppFullPDB.GetAddressOf());
			return ret;
		}

		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, IDxcVersionInfo** ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[19]))(handle, ppVersionInfo);
			return ret;
		}

		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, ref IDxcVersionInfo* ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcVersionInfo** pppVersionInfo = &ppVersionInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[19]))(handle, (IDxcVersionInfo**)pppVersionInfo);
				return ret;
			}
		}

		public static HResult GetVersionInfo(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcVersionInfo> ppVersionInfo) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppVersionInfo = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(handle->LpVtbl[19]))(handle, (IDxcVersionInfo**)ppVersionInfo.GetAddressOf());
			return ret;
		}

		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, IDxcCompiler3* pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[20]))(handle, pCompiler);
			return ret;
		}

		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, ref IDxcCompiler3 pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcCompiler3* ppCompiler = &pCompiler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[20]))(handle, (IDxcCompiler3*)ppCompiler);
				return ret;
			}
		}

		public static HResult SetCompiler(this ComPtr<IDxcPdbUtils> comObj, ComPtr<IDxcCompiler3> pCompiler) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(handle->LpVtbl[20]))(handle, pCompiler);
			return ret;
		}

		public static HResult CompileForFullPdb(this ComPtr<IDxcPdbUtils> comObj, IDxcResult** ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[21]))(handle, ppResult);
			return ret;
		}

		public static HResult CompileForFullPdb(this ComPtr<IDxcPdbUtils> comObj, ref IDxcResult* ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (IDxcResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[21]))(handle, (IDxcResult**)pppResult);
				return ret;
			}
		}

		public static HResult CompileForFullPdb(this ComPtr<IDxcPdbUtils> comObj, out ComPtr<IDxcResult> ppResult) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			ppResult = default;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(handle->LpVtbl[21]))(handle, (IDxcResult**)ppResult.GetAddressOf());
			return ret;
		}

		public static HResult OverrideArgs(this ComPtr<IDxcPdbUtils> comObj, DxcArgPair* pArgPairs, Uint32 uNumArgPairs) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, DxcArgPair*, Uint32, HResult>)(handle->LpVtbl[22]))(handle, pArgPairs, uNumArgPairs);
			return ret;
		}

		public static HResult OverrideArgs(this ComPtr<IDxcPdbUtils> comObj, ref DxcArgPair pArgPairs, Uint32 uNumArgPairs) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (DxcArgPair* ppArgPairs = &pArgPairs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, DxcArgPair*, Uint32, HResult>)(handle->LpVtbl[22]))(handle, (DxcArgPair*)ppArgPairs, uNumArgPairs);
				return ret;
			}
		}

		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, Wchar* pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Wchar*, HResult>)(handle->LpVtbl[23]))(handle, pRootSignature);
			return ret;
		}

		public static HResult OverrideRootSignature(this ComPtr<IDxcPdbUtils> comObj, ref Wchar pRootSignature) 
		{
			IDxcPdbUtils* handle = comObj.Handle;
			fixed (Wchar* ppRootSignature = &pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Wchar*, HResult>)(handle->LpVtbl[23]))(handle, (Wchar*)ppRootSignature);
				return ret;
			}
		}

	}
}
