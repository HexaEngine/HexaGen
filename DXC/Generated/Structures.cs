// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.DXC
{
	[NativeName("IDxcIncludeHandler")]
	public partial struct IDxcIncludeHandler : IComObject, IComObject<IDxcIncludeHandler>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcIncludeHandler (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult LoadSource(char* pFilename, IDxcBlob** ppIncludeSource)
		{
			IDxcIncludeHandler* ptr = (IDxcIncludeHandler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcIncludeHandler*, char*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pFilename, ppIncludeSource);
			return ret;
		}

		public readonly unsafe HResult LoadSource(char* pFilename, ref IDxcBlob* ppIncludeSource)
		{
			IDxcIncludeHandler* ptr = (IDxcIncludeHandler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppIncludeSource = &ppIncludeSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcIncludeHandler*, char*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pFilename, (IDxcBlob**)pppIncludeSource);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcIncludeHandler value)
		{
			return Unsafe.As<IDxcIncludeHandler, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// Hash digest type for ShaderHash<br/>
	/// </summary>
	[NativeName("DxcShaderHash")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxcShaderHash
	{
		[NativeName("Flags")]
		/// <summary>
		/// DXC_HASHFLAG_*<br/>
		/// </summary>
		public Uint32 Flags;

		[NativeName("HashDigest")]
		public byte HashDigest_0;
		public byte HashDigest_1;
		public byte HashDigest_2;
		public byte HashDigest_3;
		public byte HashDigest_4;
		public byte HashDigest_5;
		public byte HashDigest_6;
		public byte HashDigest_7;
		public byte HashDigest_8;
		public byte HashDigest_9;
		public byte HashDigest_10;
		public byte HashDigest_11;
		public byte HashDigest_12;
		public byte HashDigest_13;
		public byte HashDigest_14;
		public byte HashDigest_15;


	}

	/// <summary>
	/// IDxcBlob is an alias of ID3D10Blob and ID3DBlob<br/>
	/// </summary>
	[NativeName("IDxcBlob")]
	public partial struct IDxcBlob : IComObject, IComObject<IDxcBlob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcBlob (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void* GetBufferPointer()
		{
			IDxcBlob* ptr = (IDxcBlob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			void* ret = ((delegate* unmanaged[Stdcall]<IDxcBlob*, void*>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe nuint GetBufferSize()
		{
			IDxcBlob* ptr = (IDxcBlob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<IDxcBlob*, nuint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcBlob value)
		{
			return Unsafe.As<IDxcBlob, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// IDxcBlob is an alias of ID3D10Blob and ID3DBlob<br/>
	/// </summary>
	[NativeName("IDxcBlobEncoding")]
	public partial struct IDxcBlobEncoding : IComObject, IComObject<IDxcBlobEncoding>, IComObject<IDxcBlob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcBlobEncoding (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetEncoding(bool* pKnown, Uint32* pCodePage)
		{
			IDxcBlobEncoding* ptr = (IDxcBlobEncoding*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*LpVtbl))(ptr, pKnown, pCodePage);
			return ret;
		}

		public readonly unsafe HResult GetEncoding(ref bool pKnown, Uint32* pCodePage)
		{
			IDxcBlobEncoding* ptr = (IDxcBlobEncoding*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (bool* ppKnown = &pKnown)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*LpVtbl))(ptr, (bool*)ppKnown, pCodePage);
				return ret;
			}
		}

		public readonly unsafe HResult GetEncoding(bool* pKnown, ref Uint32 pCodePage)
		{
			IDxcBlobEncoding* ptr = (IDxcBlobEncoding*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*LpVtbl))(ptr, pKnown, (Uint32*)ppCodePage);
				return ret;
			}
		}

		public readonly unsafe HResult GetEncoding(ref bool pKnown, ref Uint32 pCodePage)
		{
			IDxcBlobEncoding* ptr = (IDxcBlobEncoding*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (bool* ppKnown = &pKnown)
			{
				fixed (Uint32* ppCodePage = &pCodePage)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcBlobEncoding*, int, Uint32*, HResult>)(*LpVtbl))(ptr, (bool*)ppKnown, (Uint32*)ppCodePage);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcBlob (IDxcBlobEncoding value)
		{
			return Unsafe.As<IDxcBlobEncoding, IDxcBlob>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcBlobEncoding value)
		{
			return Unsafe.As<IDxcBlobEncoding, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// The API will use this interface for output name strings<br/>
	/// </summary>
	[NativeName("IDxcBlobUtf16")]
	public partial struct IDxcBlobUtf16 : IComObject, IComObject<IDxcBlobUtf16>, IComObject<IDxcBlobEncoding>, IComObject<IDxcBlob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcBlobUtf16 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe char* GetStringPointer()
		{
			IDxcBlobUtf16* ptr = (IDxcBlobUtf16*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char* ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf16*, char*>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe nuint GetStringLength()
		{
			IDxcBlobUtf16* ptr = (IDxcBlobUtf16*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf16*, nuint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcBlobEncoding (IDxcBlobUtf16 value)
		{
			return Unsafe.As<IDxcBlobUtf16, IDxcBlobEncoding>(ref value);
		}

		public unsafe static implicit operator IDxcBlob (IDxcBlobUtf16 value)
		{
			return Unsafe.As<IDxcBlobUtf16, IDxcBlob>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcBlobUtf16 value)
		{
			return Unsafe.As<IDxcBlobUtf16, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// IDxcBlob is an alias of ID3D10Blob and ID3DBlob<br/>
	/// </summary>
	[NativeName("IDxcBlobUtf8")]
	public partial struct IDxcBlobUtf8 : IComObject, IComObject<IDxcBlobUtf8>, IComObject<IDxcBlobEncoding>, IComObject<IDxcBlob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcBlobUtf8 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe byte* GetStringPointer()
		{
			IDxcBlobUtf8* ptr = (IDxcBlobUtf8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* ret = ((delegate* unmanaged[Stdcall]<IDxcBlobUtf8*, byte*>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcBlobEncoding (IDxcBlobUtf8 value)
		{
			return Unsafe.As<IDxcBlobUtf8, IDxcBlobEncoding>(ref value);
		}

		public unsafe static implicit operator IDxcBlob (IDxcBlobUtf8 value)
		{
			return Unsafe.As<IDxcBlobUtf8, IDxcBlob>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcBlobUtf8 value)
		{
			return Unsafe.As<IDxcBlobUtf8, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// Structure for supplying bytes or text input to Dxc APIs.<br/>
	/// Use Encoding = 0 for non-text bytes, ANSI text, or unknown with BOM.<br/>
	/// </summary>
	[NativeName("DxcBuffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxcBuffer
	{
		[NativeName("Ptr")]
		public unsafe void* Ptr;
		[NativeName("Size")]
		public nuint Size;
		[NativeName("Encoding")]
		public uint Encoding;


	}

	[NativeName("DxcDefine")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxcDefine
	{
		[NativeName("Name")]
		public unsafe char* Name;
		[NativeName("Value")]
		public unsafe char* Value;


	}

	[NativeName("IDxcCompilerArgs")]
	public partial struct IDxcCompilerArgs : IComObject, IComObject<IDxcCompilerArgs>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcCompilerArgs (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe char** GetArguments()
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			char** ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**>)(*LpVtbl))(ptr);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe Uint32 GetCount()
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, Uint32>)(LpVtbl[1]))(ptr);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddArguments(char** pArguments, Uint32 argCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**, Uint32, HResult>)(LpVtbl[2]))(ptr, pArguments, argCount);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddArguments(ref char* pArguments, Uint32 argCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, char**, Uint32, HResult>)(LpVtbl[2]))(ptr, (char**)ppArguments, argCount);
				return ret;
			}
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddArgumentsUTF8(byte** pArguments, Uint32 argCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, byte**, Uint32, HResult>)(LpVtbl[3]))(ptr, pArguments, argCount);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddArgumentsUTF8(ref byte* pArguments, Uint32 argCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, byte**, Uint32, HResult>)(LpVtbl[3]))(ptr, (byte**)ppArguments, argCount);
				return ret;
			}
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddDefines(DxcDefine* pDefines, Uint32 defineCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, DxcDefine*, Uint32, HResult>)(LpVtbl[4]))(ptr, pDefines, defineCount);
			return ret;
		}

		/// <summary>		/// Pass GetArguments() and GetCount() to Compile<br/>		/// </summary>		public readonly unsafe HResult AddDefines(ref DxcDefine pDefines, Uint32 defineCount)
		{
			IDxcCompilerArgs* ptr = (IDxcCompilerArgs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompilerArgs*, DxcDefine*, Uint32, HResult>)(LpVtbl[4]))(ptr, (DxcDefine*)ppDefines, defineCount);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcCompilerArgs value)
		{
			return Unsafe.As<IDxcCompilerArgs, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcUtils replaces IDxcLibrary<br/>
	/// </summary>
	[NativeName("IDxcLibrary")]
	public partial struct IDxcLibrary : IComObject, IComObject<IDxcLibrary>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcLibrary (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult SetMalloc(IMalloc* pMalloc)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IMalloc*, HResult>)(*LpVtbl))(ptr, pMalloc);
			return ret;
		}

		public readonly unsafe HResult SetMalloc(ref IMalloc pMalloc)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppMalloc = &pMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IMalloc*, HResult>)(*LpVtbl))(ptr, (IMalloc*)ppMalloc);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobFromBlob(IDxcBlob* pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, pBlob, offset, length, ppResult);
			return ret;
		}

		public readonly unsafe HResult CreateBlobFromBlob(ref IDxcBlob pBlob, Uint32 offset, Uint32 length, IDxcBlob** ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppBlob, offset, length, ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobFromBlob(IDxcBlob* pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, pBlob, offset, length, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobFromBlob(ref IDxcBlob pBlob, Uint32 offset, Uint32 length, ref IDxcBlob* ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, Uint32, Uint32, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppBlob, offset, length, (IDxcBlob**)pppResult);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateBlobFromFile(char* pFileName, Uint32* codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pFileName, codePage, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult CreateBlobFromFile(char* pFileName, ref Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* pcodePage = &codePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pFileName, (Uint32*)pcodePage, pBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobFromFile(char* pFileName, Uint32* codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pFileName, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobFromFile(char* pFileName, ref Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* pcodePage = &codePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pFileName, (Uint32*)pcodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateBlobWithEncodingFromPinned(void* pText, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[3]))(ptr, pText, size, codePage, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult CreateBlobWithEncodingFromPinned(void* pText, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[3]))(ptr, pText, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnHeapCopy(void* pText, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pText, size, codePage, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnHeapCopy(void* pText, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pText, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnMalloc(void* pText, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[5]))(ptr, pText, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnMalloc(void* pText, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[5]))(ptr, pText, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnMalloc(void* pText, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[5]))(ptr, pText, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult CreateBlobWithEncodingOnMalloc(void* pText, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[5]))(ptr, pText, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateIncludeHandler(IDxcIncludeHandler** ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcIncludeHandler**, HResult>)(LpVtbl[6]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult CreateIncludeHandler(ref IDxcIncludeHandler* ppResult)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcIncludeHandler**, HResult>)(LpVtbl[6]))(ptr, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult CreateStreamFromBlobReadOnly(IDxcBlob* pBlob, IStream** ppStream)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(LpVtbl[7]))(ptr, pBlob, ppStream);
			return ret;
		}

		public readonly unsafe HResult CreateStreamFromBlobReadOnly(ref IDxcBlob pBlob, IStream** ppStream)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(LpVtbl[7]))(ptr, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		public readonly unsafe HResult CreateStreamFromBlobReadOnly(IDxcBlob* pBlob, ref IStream* ppStream)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IStream** pppStream = &ppStream)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(LpVtbl[7]))(ptr, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		public readonly unsafe HResult CreateStreamFromBlobReadOnly(ref IDxcBlob pBlob, ref IStream* ppStream)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IStream**, HResult>)(LpVtbl[7]))(ptr, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetBlobAsUtf8(IDxcBlob* pBlob, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[8]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult GetBlobAsUtf8(ref IDxcBlob pBlob, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult GetBlobAsUtf8(IDxcBlob* pBlob, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[8]))(ptr, pBlob, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult GetBlobAsUtf8(ref IDxcBlob pBlob, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetBlobAsUtf16(IDxcBlob* pBlob, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[9]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		public readonly unsafe HResult GetBlobAsUtf16(ref IDxcBlob pBlob, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[9]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult GetBlobAsUtf16(IDxcBlob* pBlob, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[9]))(ptr, pBlob, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		public readonly unsafe HResult GetBlobAsUtf16(ref IDxcBlob pBlob, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcLibrary* ptr = (IDxcLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[9]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcLibrary value)
		{
			return Unsafe.As<IDxcLibrary, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcResult replaces IDxcOperationResult<br/>
	/// </summary>
	[NativeName("IDxcOperationResult")]
	public partial struct IDxcOperationResult : IComObject, IComObject<IDxcOperationResult>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcOperationResult (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetStatus(HResult* pStatus)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, HResult*, HResult>)(*LpVtbl))(ptr, pStatus);
			return ret;
		}

		public readonly unsafe HResult GetStatus(ref HResult pStatus)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (HResult* ppStatus = &pStatus)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, HResult*, HResult>)(*LpVtbl))(ptr, (HResult*)ppStatus);
				return ret;
			}
		}

		public readonly unsafe HResult GetResult(IDxcBlob** ppResult)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetResult(ref IDxcBlob* ppResult)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlob**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetErrorBuffer(IDxcBlobEncoding** ppErrors)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, ppErrors);
			return ret;
		}

		public readonly unsafe HResult GetErrorBuffer(ref IDxcBlobEncoding* ppErrors)
		{
			IDxcOperationResult* ptr = (IDxcOperationResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** pppErrors = &ppErrors)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOperationResult*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlobEncoding**)pppErrors);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcOperationResult value)
		{
			return Unsafe.As<IDxcOperationResult, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcCompiler3 replaces IDxcCompiler and IDxcCompiler2<br/>
	/// </summary>
	[NativeName("IDxcCompiler")]
	public partial struct IDxcCompiler : IComObject, IComObject<IDxcCompiler>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcCompiler (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Compile(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(IDxcBlob* pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Preprocess(ref IDxcBlob pSource, char* pSourceName, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, (IDxcBlob*)ppSource, pSourceName, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Disassemble(IDxcBlob* pSource, IDxcBlobEncoding** ppDisassembly)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pSource, ppDisassembly);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref IDxcBlob pSource, IDxcBlobEncoding** ppDisassembly)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppSource, ppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Disassemble(IDxcBlob* pSource, ref IDxcBlobEncoding* ppDisassembly)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pSource, (IDxcBlobEncoding**)pppDisassembly);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref IDxcBlob pSource, ref IDxcBlobEncoding* ppDisassembly)
		{
			IDxcCompiler* ptr = (IDxcCompiler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcBlobEncoding** pppDisassembly = &ppDisassembly)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler*, IDxcBlob*, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppSource, (IDxcBlobEncoding**)pppDisassembly);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcCompiler value)
		{
			return Unsafe.As<IDxcCompiler, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcCompiler3 replaces IDxcCompiler and IDxcCompiler2<br/>
	/// </summary>
	[NativeName("IDxcCompiler2")]
	public partial struct IDxcCompiler2 : IComObject, IComObject<IDxcCompiler2>, IComObject<IDxcCompiler>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcCompiler2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, IDxcBlob** ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, ppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, Lpwstr* ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, ppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
			{
				fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, IDxcOperationResult** ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, ppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
				{
					fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcIncludeHandler* pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, pIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
					{
						fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
						{
							fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(IDxcBlob* pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (IDxcOperationResult** pppResult = &ppResult)
						{
							fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
							{
								fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, pSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model with debug information.<br/>		/// </summary>		public readonly unsafe HResult CompileWithDebug(ref IDxcBlob pSource, char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcIncludeHandler pIncludeHandler, ref IDxcOperationResult* ppResult, ref Lpwstr ppDebugBlobName, ref IDxcBlob* ppDebugBlob)
		{
			IDxcCompiler2* ptr = (IDxcCompiler2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (DxcDefine* ppDefines = &pDefines)
					{
						fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
						{
							fixed (IDxcOperationResult** pppResult = &ppResult)
							{
								fixed (Lpwstr* pppDebugBlobName = &ppDebugBlobName)
								{
									fixed (IDxcBlob** pppDebugBlob = &ppDebugBlob)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler2*, IDxcBlob*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcIncludeHandler*, IDxcOperationResult**, Lpwstr*, IDxcBlob**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppSource, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcIncludeHandler*)ppIncludeHandler, (IDxcOperationResult**)pppResult, (Lpwstr*)pppDebugBlobName, (IDxcBlob**)pppDebugBlob);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcCompiler (IDxcCompiler2 value)
		{
			return Unsafe.As<IDxcCompiler2, IDxcCompiler>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcCompiler2 value)
		{
			return Unsafe.As<IDxcCompiler2, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcLinker")]
	public partial struct IDxcLinker : IComObject, IComObject<IDxcLinker>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcLinker (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult RegisterLibrary(char* pLibName, IDxcBlob* pLib)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, pLibName, pLib);
			return ret;
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult RegisterLibrary(char* pLibName, ref IDxcBlob pLib)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppLib = &pLib)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, pLibName, (IDxcBlob*)ppLib);
				return ret;
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, IDxcOperationResult** ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, ppResult);
			return ret;
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, IDxcOperationResult** ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppLibNames = &pLibNames)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, IDxcOperationResult** ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, IDxcOperationResult** ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, pLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, char** pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, pArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, char** pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, pLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Register a library with name to ref it later.<br/>		/// </summary>		public readonly unsafe HResult Link(char* pEntryName, char* pTargetProfile, ref char* pLibNames, Uint32 libCount, ref char* pArguments, Uint32 argCount, ref IDxcOperationResult* ppResult)
		{
			IDxcLinker* ptr = (IDxcLinker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppLibNames = &pLibNames)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcLinker*, char*, char*, char**, Uint32, char**, Uint32, IDxcOperationResult**, HResult>)(LpVtbl[1]))(ptr, pEntryName, pTargetProfile, (char**)ppLibNames, libCount, (char**)ppArguments, argCount, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcLinker value)
		{
			return Unsafe.As<IDxcLinker, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcUtils replaces IDxcLibrary<br/>
	/// </summary>
	[NativeName("IDxcUtils")]
	public partial struct IDxcUtils : IComObject, IComObject<IDxcUtils>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcUtils (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateBlobFromPinned(void* pData, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[1]))(ptr, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateBlobFromPinned(void* pData, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[1]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult MoveToBlob(void* pData, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pData, pIMalloc, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult MoveToBlob(void* pData, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pData, (IMalloc*)ppIMalloc, size, codePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult MoveToBlob(void* pData, IMalloc* pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pData, pIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult MoveToBlob(void* pData, ref IMalloc pIMalloc, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IMalloc* ppIMalloc = &pIMalloc)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, IMalloc*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pData, (IMalloc*)ppIMalloc, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateBlob(void* pData, Uint32 size, Uint32 codePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[3]))(ptr, pData, size, codePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateBlob(void* pData, Uint32 size, Uint32 codePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, void*, Uint32, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[3]))(ptr, pData, size, codePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult LoadFile(char* pFileName, Uint32* pCodePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pFileName, pCodePage, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult LoadFile(char* pFileName, ref Uint32 pCodePage, IDxcBlobEncoding** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pFileName, (Uint32*)ppCodePage, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult LoadFile(char* pFileName, Uint32* pCodePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pFileName, pCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult LoadFile(char* pFileName, ref Uint32 pCodePage, ref IDxcBlobEncoding* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCodePage = &pCodePage)
			{
				fixed (IDxcBlobEncoding** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, Uint32*, IDxcBlobEncoding**, HResult>)(LpVtbl[4]))(ptr, pFileName, (Uint32*)ppCodePage, (IDxcBlobEncoding**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReadOnlyStreamFromBlob(IDxcBlob* pBlob, IStream** ppStream)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(LpVtbl[5]))(ptr, pBlob, ppStream);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReadOnlyStreamFromBlob(ref IDxcBlob pBlob, IStream** ppStream)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(LpVtbl[5]))(ptr, (IDxcBlob*)ppBlob, ppStream);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReadOnlyStreamFromBlob(IDxcBlob* pBlob, ref IStream* ppStream)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IStream** pppStream = &ppStream)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(LpVtbl[5]))(ptr, pBlob, (IStream**)pppStream);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReadOnlyStreamFromBlob(ref IDxcBlob pBlob, ref IStream* ppStream)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IStream** pppStream = &ppStream)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IStream**, HResult>)(LpVtbl[5]))(ptr, (IDxcBlob*)ppBlob, (IStream**)pppStream);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateDefaultIncludeHandler(IDxcIncludeHandler** ppResult)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, HResult>)(LpVtbl[6]))(ptr, ppResult);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateDefaultIncludeHandler(ref IDxcIncludeHandler* ppResult)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcIncludeHandler**, HResult>)(LpVtbl[6]))(ptr, (IDxcIncludeHandler**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf8(IDxcBlob* pBlob, IDxcBlobUtf8** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(LpVtbl[7]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf8(ref IDxcBlob pBlob, IDxcBlobUtf8** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(LpVtbl[7]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf8(IDxcBlob* pBlob, ref IDxcBlobUtf8* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(LpVtbl[7]))(ptr, pBlob, (IDxcBlobUtf8**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf8(ref IDxcBlob pBlob, ref IDxcBlobUtf8* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf8** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf8**, HResult>)(LpVtbl[7]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobUtf8**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf16(IDxcBlob* pBlob, IDxcBlobUtf16** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(LpVtbl[8]))(ptr, pBlob, pBlobEncoding);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf16(ref IDxcBlob pBlob, IDxcBlobUtf16** pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, pBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf16(IDxcBlob* pBlob, ref IDxcBlobUtf16* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(LpVtbl[8]))(ptr, pBlob, (IDxcBlobUtf16**)ppBlobEncoding);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetBlobAsUtf16(ref IDxcBlob pBlob, ref IDxcBlobUtf16* pBlobEncoding)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobUtf16** ppBlobEncoding = &pBlobEncoding)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlobUtf16**, HResult>)(LpVtbl[8]))(ptr, (IDxcBlob*)ppBlob, (IDxcBlobUtf16**)ppBlobEncoding);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetDxilContainerPart(DxcBuffer* pShader, Uint32 dxcPart, void** ppPartData, Uint32* pPartSizeInBytes)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(LpVtbl[9]))(ptr, pShader, dxcPart, ppPartData, pPartSizeInBytes);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetDxilContainerPart(ref DxcBuffer pShader, Uint32 dxcPart, void** ppPartData, Uint32* pPartSizeInBytes)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(LpVtbl[9]))(ptr, (DxcBuffer*)ppShader, dxcPart, ppPartData, pPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetDxilContainerPart(DxcBuffer* pShader, Uint32 dxcPart, void** ppPartData, ref Uint32 pPartSizeInBytes)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppPartSizeInBytes = &pPartSizeInBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(LpVtbl[9]))(ptr, pShader, dxcPart, ppPartData, (Uint32*)ppPartSizeInBytes);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetDxilContainerPart(ref DxcBuffer pShader, Uint32 dxcPart, void** ppPartData, ref Uint32 pPartSizeInBytes)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppShader = &pShader)
			{
				fixed (Uint32* ppPartSizeInBytes = &pPartSizeInBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Uint32, void**, Uint32*, HResult>)(LpVtbl[9]))(ptr, (DxcBuffer*)ppShader, dxcPart, ppPartData, (Uint32*)ppPartSizeInBytes);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReflection(DxcBuffer* pData, Guid* iid, void** ppvReflection)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, pData, iid, ppvReflection);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReflection(ref DxcBuffer pData, Guid* iid, void** ppvReflection)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, (DxcBuffer*)ppData, iid, ppvReflection);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReflection(DxcBuffer* pData, ref Guid iid, void** ppvReflection)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, pData, (Guid*)piid, ppvReflection);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult CreateReflection(ref DxcBuffer pData, ref Guid iid, void** ppvReflection)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppData = &pData)
			{
				fixed (Guid* piid = &iid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, (DxcBuffer*)ppData, (Guid*)piid, ppvReflection);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, ppArgs);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, IDxcCompilerArgs** ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, ppArgs);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, DxcDefine* pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, pDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, char** pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcDefine* ppDefines = &pDefines)
			{
				fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, pArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult BuildArguments(char* pSourceName, char* pEntryPoint, char* pTargetProfile, ref char* pArguments, Uint32 argCount, ref DxcDefine pDefines, Uint32 defineCount, ref IDxcCompilerArgs* ppArgs)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (DxcDefine* ppDefines = &pDefines)
				{
					fixed (IDxcCompilerArgs** pppArgs = &ppArgs)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, char*, char*, char*, char**, Uint32, DxcDefine*, Uint32, IDxcCompilerArgs**, HResult>)(LpVtbl[11]))(ptr, pSourceName, pEntryPoint, pTargetProfile, (char**)ppArguments, argCount, (DxcDefine*)ppDefines, defineCount, (IDxcCompilerArgs**)pppArgs);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(IDxcBlob* pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, pPDBBlob, ppHash, ppContainer);
			return ret;
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, IDxcBlob** ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, (IDxcBlob*)ppPDBBlob, ppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, ppContainer);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, IDxcBlob** ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, ppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(IDxcBlob* pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppContainer = &ppContainer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, pPDBBlob, ppHash, (IDxcBlob**)pppContainer);
				return ret;
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(ref IDxcBlob pPDBBlob, IDxcBlob** ppHash, ref IDxcBlob* ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, (IDxcBlob*)ppPDBBlob, ppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(IDxcBlob* pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppHash = &ppHash)
			{
				fixed (IDxcBlob** pppContainer = &ppContainer)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, pPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
					return ret;
				}
			}
		}

		/// <summary>		/// Create a sub-blob that holds a reference to the outer blob and points to its memory.<br/>		/// </summary>		public readonly unsafe HResult GetPDBContents(ref IDxcBlob pPDBBlob, ref IDxcBlob* ppHash, ref IDxcBlob* ppContainer)
		{
			IDxcUtils* ptr = (IDxcUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPDBBlob = &pPDBBlob)
			{
				fixed (IDxcBlob** pppHash = &ppHash)
				{
					fixed (IDxcBlob** pppContainer = &ppContainer)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcUtils*, IDxcBlob*, IDxcBlob**, IDxcBlob**, HResult>)(LpVtbl[12]))(ptr, (IDxcBlob*)ppPDBBlob, (IDxcBlob**)pppHash, (IDxcBlob**)pppContainer);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcUtils value)
		{
			return Unsafe.As<IDxcUtils, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// NOTE: IDxcResult replaces IDxcOperationResult<br/>
	/// </summary>
	[NativeName("IDxcResult")]
	public partial struct IDxcResult : IComObject, IComObject<IDxcResult>, IComObject<IDxcOperationResult>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcResult (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe bool HasOutput(DxcOutKind dxcOutKind)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, int>)(*LpVtbl))(ptr, dxcOutKind);
			return ret != 0;
		}

		public readonly unsafe HResult GetOutput(DxcOutKind dxcOutKind, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputName)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, dxcOutKind, iid, ppvObject, ppOutputName);
			return ret;
		}

		public readonly unsafe HResult GetOutput(DxcOutKind dxcOutKind, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputName)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, dxcOutKind, (Guid*)piid, ppvObject, ppOutputName);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutput(DxcOutKind dxcOutKind, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, dxcOutKind, iid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutput(DxcOutKind dxcOutKind, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind, Guid*, void**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, dxcOutKind, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public readonly unsafe Uint32 GetNumOutputs()
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Uint32>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe DxcOutKind GetOutputByIndex(Uint32 index)
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			DxcOutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, Uint32, DxcOutKind>)(LpVtbl[3]))(ptr, index);
			return ret;
		}

		public readonly unsafe DxcOutKind PrimaryOutput()
		{
			IDxcResult* ptr = (IDxcResult*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			DxcOutKind ret = ((delegate* unmanaged[Stdcall]<IDxcResult*, DxcOutKind>)(LpVtbl[4]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcOperationResult (IDxcResult value)
		{
			return Unsafe.As<IDxcResult, IDxcOperationResult>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcResult value)
		{
			return Unsafe.As<IDxcResult, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcExtraOutputs")]
	public partial struct IDxcExtraOutputs : IComObject, IComObject<IDxcExtraOutputs>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcExtraOutputs (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe Uint32 GetOutputCount()
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Uint32 ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, iid, ppvObject, ppOutputType, ppOutputName);
			return ret;
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, IDxcBlobUtf16** ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, (Guid*)piid, ppvObject, ppOutputType, ppOutputName);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, IDxcBlobUtf16** ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, ppOutputName);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, Guid* iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, iid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
				return ret;
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, ref Guid iid, void** ppvObject, IDxcBlobUtf16** ppOutputType, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, (Guid*)piid, ppvObject, ppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, Guid* iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
			{
				fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, iid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetOutput(Uint32 uIndex, ref Guid iid, void** ppvObject, ref IDxcBlobUtf16* ppOutputType, ref IDxcBlobUtf16* ppOutputName)
		{
			IDxcExtraOutputs* ptr = (IDxcExtraOutputs*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (IDxcBlobUtf16** pppOutputType = &ppOutputType)
				{
					fixed (IDxcBlobUtf16** pppOutputName = &ppOutputName)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcExtraOutputs*, Uint32, Guid*, void**, IDxcBlobUtf16**, IDxcBlobUtf16**, HResult>)(LpVtbl[1]))(ptr, uIndex, (Guid*)piid, ppvObject, (IDxcBlobUtf16**)pppOutputType, (IDxcBlobUtf16**)pppOutputName);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcExtraOutputs value)
		{
			return Unsafe.As<IDxcExtraOutputs, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcCompiler3")]
	public partial struct IDxcCompiler3 : IComObject, IComObject<IDxcCompiler3>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcCompiler3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, ppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, riid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, IDxcIncludeHandler* pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, pIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, char** pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, pArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(DxcBuffer* pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** ppArguments = &pArguments)
			{
				fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
				{
					fixed (Guid* priid = &riid)
					{
						fixed (void** pppResult = &ppResult)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Compile(ref DxcBuffer pSource, ref char* pArguments, Uint32 argCount, ref IDxcIncludeHandler pIncludeHandler, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppSource = &pSource)
			{
				fixed (char** ppArguments = &pArguments)
				{
					fixed (IDxcIncludeHandler* ppIncludeHandler = &pIncludeHandler)
					{
						fixed (Guid* priid = &riid)
						{
							fixed (void** pppResult = &ppResult)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, char**, Uint32, IDxcIncludeHandler*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (DxcBuffer*)ppSource, (char**)ppArguments, argCount, (IDxcIncludeHandler*)ppIncludeHandler, (Guid*)priid, (void**)pppResult);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(DxcBuffer* pObject, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pObject, riid, ppResult);
			return ret;
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref DxcBuffer pObject, Guid* riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (DxcBuffer*)ppObject, riid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(DxcBuffer* pObject, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pObject, (Guid*)priid, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref DxcBuffer pObject, ref Guid riid, void** ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (DxcBuffer*)ppObject, (Guid*)priid, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(DxcBuffer* pObject, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pObject, riid, (void**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref DxcBuffer pObject, Guid* riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (DxcBuffer*)ppObject, riid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(DxcBuffer* pObject, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				fixed (void** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pObject, (Guid*)priid, (void**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Compile a single entry point to the target shader model,<br/>		/// Compile a library to a library target (-T lib_*),<br/>		/// Compile a root signature (-T rootsig_*), or<br/>		/// Preprocess HLSL source (-P)<br/>		/// </summary>		public readonly unsafe HResult Disassemble(ref DxcBuffer pObject, ref Guid riid, ref void* ppResult)
		{
			IDxcCompiler3* ptr = (IDxcCompiler3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppObject = &pObject)
			{
				fixed (Guid* priid = &riid)
				{
					fixed (void** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcCompiler3*, DxcBuffer*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (DxcBuffer*)ppObject, (Guid*)priid, (void**)pppResult);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcCompiler3 value)
		{
			return Unsafe.As<IDxcCompiler3, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcValidator")]
	public partial struct IDxcValidator : IComObject, IComObject<IDxcValidator>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcValidator (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult Validate(IDxcBlob* pShader, Uint32 flags, IDxcOperationResult** ppResult)
		{
			IDxcValidator* ptr = (IDxcValidator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult Validate(ref IDxcBlob pShader, Uint32 flags, IDxcOperationResult** ppResult)
		{
			IDxcValidator* ptr = (IDxcValidator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult Validate(IDxcBlob* pShader, Uint32 flags, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator* ptr = (IDxcValidator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult Validate(ref IDxcBlob pShader, Uint32 flags, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator* ptr = (IDxcValidator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator*, IDxcBlob*, Uint32, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcValidator value)
		{
			return Unsafe.As<IDxcValidator, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcValidator2")]
	public partial struct IDxcValidator2 : IComObject, IComObject<IDxcValidator2>, IComObject<IDxcValidator>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcValidator2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(IDxcBlob* pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, IDxcOperationResult** ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, pOptDebugBitcode, ppResult);
			return ret;
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(ref IDxcBlob pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, IDxcOperationResult** ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(IDxcBlob* pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, IDxcOperationResult** ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(ref IDxcBlob pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, IDxcOperationResult** ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, (DxcBuffer*)ppOptDebugBitcode, ppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(IDxcBlob* pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(ref IDxcBlob pShader, Uint32 flags, DxcBuffer* pOptDebugBitcode, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, pOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(IDxcBlob* pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		/// <summary>		/// Validate a shader.<br/>		/// </summary>		public readonly unsafe HResult ValidateWithDebug(ref IDxcBlob pShader, Uint32 flags, ref DxcBuffer pOptDebugBitcode, ref IDxcOperationResult* ppResult)
		{
			IDxcValidator2* ptr = (IDxcValidator2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (DxcBuffer* ppOptDebugBitcode = &pOptDebugBitcode)
				{
					fixed (IDxcOperationResult** pppResult = &ppResult)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcValidator2*, IDxcBlob*, Uint32, DxcBuffer*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, flags, (DxcBuffer*)ppOptDebugBitcode, (IDxcOperationResult**)pppResult);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcValidator (IDxcValidator2 value)
		{
			return Unsafe.As<IDxcValidator2, IDxcValidator>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcValidator2 value)
		{
			return Unsafe.As<IDxcValidator2, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcContainerBuilder")]
	public partial struct IDxcContainerBuilder : IComObject, IComObject<IDxcContainerBuilder>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcContainerBuilder (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Load(IDxcBlob* pDxilContainerHeader)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, pDxilContainerHeader);
			return ret;
		}

		public readonly unsafe HResult Load(ref IDxcBlob pDxilContainerHeader)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppDxilContainerHeader = &pDxilContainerHeader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppDxilContainerHeader);
				return ret;
			}
		}

		public readonly unsafe HResult AddPart(Uint32 fourCC, IDxcBlob* pSource)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, IDxcBlob*, HResult>)(LpVtbl[1]))(ptr, fourCC, pSource);
			return ret;
		}

		public readonly unsafe HResult AddPart(Uint32 fourCC, ref IDxcBlob pSource)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppSource = &pSource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, IDxcBlob*, HResult>)(LpVtbl[1]))(ptr, fourCC, (IDxcBlob*)ppSource);
				return ret;
			}
		}

		public readonly unsafe HResult RemovePart(Uint32 fourCC)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, Uint32, HResult>)(LpVtbl[2]))(ptr, fourCC);
			return ret;
		}

		public readonly unsafe HResult SerializeContainer(IDxcOperationResult** ppResult)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(LpVtbl[3]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult SerializeContainer(ref IDxcOperationResult* ppResult)
		{
			IDxcContainerBuilder* ptr = (IDxcContainerBuilder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerBuilder*, IDxcOperationResult**, HResult>)(LpVtbl[3]))(ptr, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcContainerBuilder value)
		{
			return Unsafe.As<IDxcContainerBuilder, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcAssembler")]
	public partial struct IDxcAssembler : IComObject, IComObject<IDxcAssembler>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcAssembler (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public readonly unsafe HResult AssembleToContainer(IDxcBlob* pShader, IDxcOperationResult** ppResult)
		{
			IDxcAssembler* ptr = (IDxcAssembler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, ppResult);
			return ret;
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public readonly unsafe HResult AssembleToContainer(ref IDxcBlob pShader, IDxcOperationResult** ppResult)
		{
			IDxcAssembler* ptr = (IDxcAssembler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, ppResult);
				return ret;
			}
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public readonly unsafe HResult AssembleToContainer(IDxcBlob* pShader, ref IDxcOperationResult* ppResult)
		{
			IDxcAssembler* ptr = (IDxcAssembler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOperationResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, pShader, (IDxcOperationResult**)pppResult);
				return ret;
			}
		}

		/// <summary>		/// Assemble dxil in ll or llvm bitcode to DXIL container.<br/>		/// </summary>		public readonly unsafe HResult AssembleToContainer(ref IDxcBlob pShader, ref IDxcOperationResult* ppResult)
		{
			IDxcAssembler* ptr = (IDxcAssembler*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppShader = &pShader)
			{
				fixed (IDxcOperationResult** pppResult = &ppResult)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcAssembler*, IDxcBlob*, IDxcOperationResult**, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppShader, (IDxcOperationResult**)pppResult);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcAssembler value)
		{
			return Unsafe.As<IDxcAssembler, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcContainerReflection")]
	public partial struct IDxcContainerReflection : IComObject, IComObject<IDxcContainerReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcContainerReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Load(IDxcBlob* pContainer)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, pContainer);
			return ret;
		}

		public readonly unsafe HResult Load(ref IDxcBlob pContainer)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppContainer = &pContainer)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppContainer);
				return ret;
			}
		}

		public readonly unsafe HResult GetPartCount(Uint32* pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32*, HResult>)(LpVtbl[1]))(ptr, pResult);
			return ret;
		}

		public readonly unsafe HResult GetPartCount(ref Uint32 pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32*, HResult>)(LpVtbl[1]))(ptr, (Uint32*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetPartKind(Uint32 idx, Uint32* pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(LpVtbl[2]))(ptr, idx, pResult);
			return ret;
		}

		public readonly unsafe HResult GetPartKind(Uint32 idx, ref Uint32 pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(LpVtbl[2]))(ptr, idx, (Uint32*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetPartContent(Uint32 idx, IDxcBlob** ppResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, IDxcBlob**, HResult>)(LpVtbl[3]))(ptr, idx, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetPartContent(Uint32 idx, ref IDxcBlob* ppResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, IDxcBlob**, HResult>)(LpVtbl[3]))(ptr, idx, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult FindFirstPartKind(Uint32 kind, Uint32* pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(LpVtbl[4]))(ptr, kind, pResult);
			return ret;
		}

		public readonly unsafe HResult FindFirstPartKind(Uint32 kind, ref Uint32 pResult)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Uint32*, HResult>)(LpVtbl[4]))(ptr, kind, (Uint32*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetPartReflection(Uint32 idx, Guid* iid, void** ppvObject)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, idx, iid, ppvObject);
			return ret;
		}

		public readonly unsafe HResult GetPartReflection(Uint32 idx, ref Guid iid, void** ppvObject)
		{
			IDxcContainerReflection* ptr = (IDxcContainerReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcContainerReflection*, Uint32, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, idx, (Guid*)piid, ppvObject);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcContainerReflection value)
		{
			return Unsafe.As<IDxcContainerReflection, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcOptimizerPass")]
	public partial struct IDxcOptimizerPass : IComObject, IComObject<IDxcOptimizerPass>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcOptimizerPass (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetOptionName(Lpwstr* ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(*LpVtbl))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetOptionName(ref Lpwstr ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(*LpVtbl))(ptr, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetDescription(Lpwstr* ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(LpVtbl[1]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetDescription(ref Lpwstr ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Lpwstr*, HResult>)(LpVtbl[1]))(ptr, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetOptionArgCount(Uint32* pCount)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32*, HResult>)(LpVtbl[2]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetOptionArgCount(ref Uint32 pCount)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32*, HResult>)(LpVtbl[2]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetOptionArgName(Uint32 argIndex, Lpwstr* ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(LpVtbl[3]))(ptr, argIndex, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetOptionArgName(Uint32 argIndex, ref Lpwstr ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(LpVtbl[3]))(ptr, argIndex, (Lpwstr*)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetOptionArgDescription(Uint32 argIndex, Lpwstr* ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(LpVtbl[4]))(ptr, argIndex, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetOptionArgDescription(Uint32 argIndex, ref Lpwstr ppResult)
		{
			IDxcOptimizerPass* ptr = (IDxcOptimizerPass*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Lpwstr* pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizerPass*, Uint32, Lpwstr*, HResult>)(LpVtbl[4]))(ptr, argIndex, (Lpwstr*)pppResult);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcOptimizerPass value)
		{
			return Unsafe.As<IDxcOptimizerPass, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcOptimizer")]
	public partial struct IDxcOptimizer : IComObject, IComObject<IDxcOptimizer>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcOptimizer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetAvailablePassCount(Uint32* pCount)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32*, HResult>)(*LpVtbl))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetAvailablePassCount(ref Uint32 pCount)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32*, HResult>)(*LpVtbl))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetAvailablePass(Uint32 index, IDxcOptimizerPass** ppResult)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32, IDxcOptimizerPass**, HResult>)(LpVtbl[1]))(ptr, index, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetAvailablePass(Uint32 index, ref IDxcOptimizerPass* ppResult)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcOptimizerPass** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, Uint32, IDxcOptimizerPass**, HResult>)(LpVtbl[1]))(ptr, index, (IDxcOptimizerPass**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
			return ret;
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** pppOptions = &ppOptions)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
				return ret;
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
				return ret;
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, IDxcBlobEncoding** ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, ppOutputText);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
				return ret;
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, ppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, IDxcBlob** pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, pOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** ppOutputModule = &pOutputModule)
			{
				fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
					return ret;
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, char** ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, ppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(IDxcBlob* pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (char** pppOptions = &ppOptions)
			{
				fixed (IDxcBlob** ppOutputModule = &pOutputModule)
				{
					fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, pBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult RunOptimizer(ref IDxcBlob pBlob, ref char* ppOptions, Uint32 optionCount, ref IDxcBlob* pOutputModule, ref IDxcBlobEncoding* ppOutputText)
		{
			IDxcOptimizer* ptr = (IDxcOptimizer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppBlob = &pBlob)
			{
				fixed (char** pppOptions = &ppOptions)
				{
					fixed (IDxcBlob** ppOutputModule = &pOutputModule)
					{
						fixed (IDxcBlobEncoding** pppOutputText = &ppOutputText)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<IDxcOptimizer*, IDxcBlob*, char**, Uint32, IDxcBlob**, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, (IDxcBlob*)ppBlob, (char**)pppOptions, optionCount, (IDxcBlob**)ppOutputModule, (IDxcBlobEncoding**)pppOutputText);
							return ret;
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcOptimizer value)
		{
			return Unsafe.As<IDxcOptimizer, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcVersionInfo")]
	public partial struct IDxcVersionInfo : IComObject, IComObject<IDxcVersionInfo>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcVersionInfo (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetVersion(Uint32* pMajor, Uint32* pMinor)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*LpVtbl))(ptr, pMajor, pMinor);
			return ret;
		}

		public readonly unsafe HResult GetVersion(ref Uint32 pMajor, Uint32* pMinor)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppMajor = &pMajor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*LpVtbl))(ptr, (Uint32*)ppMajor, pMinor);
				return ret;
			}
		}

		public readonly unsafe HResult GetVersion(Uint32* pMajor, ref Uint32 pMinor)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppMinor = &pMinor)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*LpVtbl))(ptr, pMajor, (Uint32*)ppMinor);
				return ret;
			}
		}

		public readonly unsafe HResult GetVersion(ref Uint32 pMajor, ref Uint32 pMinor)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppMajor = &pMajor)
			{
				fixed (Uint32* ppMinor = &pMinor)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, Uint32*, HResult>)(*LpVtbl))(ptr, (Uint32*)ppMajor, (Uint32*)ppMinor);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetFlags(Uint32* pFlags)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, HResult>)(LpVtbl[1]))(ptr, pFlags);
			return ret;
		}

		public readonly unsafe HResult GetFlags(ref Uint32 pFlags)
		{
			IDxcVersionInfo* ptr = (IDxcVersionInfo*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppFlags = &pFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo*, Uint32*, HResult>)(LpVtbl[1]))(ptr, (Uint32*)ppFlags);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcVersionInfo value)
		{
			return Unsafe.As<IDxcVersionInfo, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcVersionInfo2")]
	public partial struct IDxcVersionInfo2 : IComObject, IComObject<IDxcVersionInfo2>, IComObject<IDxcVersionInfo>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcVersionInfo2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCommitInfo(Uint32* pCommitCount, byte** pCommitHash)
		{
			IDxcVersionInfo2* ptr = (IDxcVersionInfo2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*LpVtbl))(ptr, pCommitCount, pCommitHash);
			return ret;
		}

		public readonly unsafe HResult GetCommitInfo(ref Uint32 pCommitCount, byte** pCommitHash)
		{
			IDxcVersionInfo2* ptr = (IDxcVersionInfo2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCommitCount = &pCommitCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*LpVtbl))(ptr, (Uint32*)ppCommitCount, pCommitHash);
				return ret;
			}
		}

		public readonly unsafe HResult GetCommitInfo(Uint32* pCommitCount, ref byte* pCommitHash)
		{
			IDxcVersionInfo2* ptr = (IDxcVersionInfo2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte** ppCommitHash = &pCommitHash)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*LpVtbl))(ptr, pCommitCount, (byte**)ppCommitHash);
				return ret;
			}
		}

		public readonly unsafe HResult GetCommitInfo(ref Uint32 pCommitCount, ref byte* pCommitHash)
		{
			IDxcVersionInfo2* ptr = (IDxcVersionInfo2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCommitCount = &pCommitCount)
			{
				fixed (byte** ppCommitHash = &pCommitHash)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo2*, Uint32*, byte**, HResult>)(*LpVtbl))(ptr, (Uint32*)ppCommitCount, (byte**)ppCommitHash);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IDxcVersionInfo (IDxcVersionInfo2 value)
		{
			return Unsafe.As<IDxcVersionInfo2, IDxcVersionInfo>(ref value);
		}

		public unsafe static implicit operator IUnknown (IDxcVersionInfo2 value)
		{
			return Unsafe.As<IDxcVersionInfo2, IUnknown>(ref value);
		}

	}

	[NativeName("IDxcVersionInfo3")]
	public partial struct IDxcVersionInfo3 : IComObject, IComObject<IDxcVersionInfo3>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcVersionInfo3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCustomVersionString(byte** pVersionString)
		{
			IDxcVersionInfo3* ptr = (IDxcVersionInfo3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(*LpVtbl))(ptr, pVersionString);
			return ret;
		}

		public readonly unsafe HResult GetCustomVersionString(ref byte* pVersionString)
		{
			IDxcVersionInfo3* ptr = (IDxcVersionInfo3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (byte** ppVersionString = &pVersionString)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcVersionInfo3*, byte**, HResult>)(*LpVtbl))(ptr, (byte**)ppVersionString);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcVersionInfo3 value)
		{
			return Unsafe.As<IDxcVersionInfo3, IUnknown>(ref value);
		}

	}

	[NativeName("DxcArgPair")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct DxcArgPair
	{
		[NativeName("pName")]
		public unsafe Wchar* PName;
		[NativeName("pValue")]
		public unsafe Wchar* PValue;


	}

	[NativeName("IDxcPdbUtils")]
	public partial struct IDxcPdbUtils : IComObject, IComObject<IDxcPdbUtils>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe IDxcPdbUtils (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Load(IDxcBlob* pPdbOrDxil)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, pPdbOrDxil);
			return ret;
		}

		public readonly unsafe HResult Load(ref IDxcBlob pPdbOrDxil)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob* ppPdbOrDxil = &pPdbOrDxil)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob*, HResult>)(*LpVtbl))(ptr, (IDxcBlob*)ppPdbOrDxil);
				return ret;
			}
		}

		public readonly unsafe HResult GetSourceCount(Uint32* pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[1]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetSourceCount(ref Uint32 pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[1]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetSource(Uint32 uIndex, IDxcBlobEncoding** ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, uIndex, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetSource(Uint32 uIndex, ref IDxcBlobEncoding* ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlobEncoding** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, IDxcBlobEncoding**, HResult>)(LpVtbl[2]))(ptr, uIndex, (IDxcBlobEncoding**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetSourceName(Uint32 uIndex, Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[3]))(ptr, uIndex, pResult);
			return ret;
		}

		public readonly unsafe HResult GetSourceName(Uint32 uIndex, ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[3]))(ptr, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetFlagCount(Uint32* pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[4]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetFlagCount(ref Uint32 pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[4]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetFlag(Uint32 uIndex, Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[5]))(ptr, uIndex, pResult);
			return ret;
		}

		public readonly unsafe HResult GetFlag(Uint32 uIndex, ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[5]))(ptr, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetArgCount(Uint32* pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[6]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetArgCount(ref Uint32 pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[6]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetArg(Uint32 uIndex, Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[7]))(ptr, uIndex, pResult);
			return ret;
		}

		public readonly unsafe HResult GetArg(Uint32 uIndex, ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[7]))(ptr, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetArgPairCount(Uint32* pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[8]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetArgPairCount(ref Uint32 pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[8]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetArgPair(Uint32 uIndex, Bstr* pName, Bstr* pValue)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(LpVtbl[9]))(ptr, uIndex, pName, pValue);
			return ret;
		}

		public readonly unsafe HResult GetArgPair(Uint32 uIndex, ref Bstr pName, Bstr* pValue)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppName = &pName)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(LpVtbl[9]))(ptr, uIndex, (Bstr*)ppName, pValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetArgPair(Uint32 uIndex, Bstr* pName, ref Bstr pValue)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppValue = &pValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(LpVtbl[9]))(ptr, uIndex, pName, (Bstr*)ppValue);
				return ret;
			}
		}

		public readonly unsafe HResult GetArgPair(Uint32 uIndex, ref Bstr pName, ref Bstr pValue)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppName = &pName)
			{
				fixed (Bstr* ppValue = &pValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, Bstr*, HResult>)(LpVtbl[9]))(ptr, uIndex, (Bstr*)ppName, (Bstr*)ppValue);
					return ret;
				}
			}
		}

		public readonly unsafe HResult GetDefineCount(Uint32* pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[10]))(ptr, pCount);
			return ret;
		}

		public readonly unsafe HResult GetDefineCount(ref Uint32 pCount)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Uint32* ppCount = &pCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32*, HResult>)(LpVtbl[10]))(ptr, (Uint32*)ppCount);
				return ret;
			}
		}

		public readonly unsafe HResult GetDefine(Uint32 uIndex, Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[11]))(ptr, uIndex, pResult);
			return ret;
		}

		public readonly unsafe HResult GetDefine(Uint32 uIndex, ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Uint32, Bstr*, HResult>)(LpVtbl[11]))(ptr, uIndex, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetTargetProfile(Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[12]))(ptr, pResult);
			return ret;
		}

		public readonly unsafe HResult GetTargetProfile(ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[12]))(ptr, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetEntryPoint(Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[13]))(ptr, pResult);
			return ret;
		}

		public readonly unsafe HResult GetEntryPoint(ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[13]))(ptr, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetMainFileName(Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[14]))(ptr, pResult);
			return ret;
		}

		public readonly unsafe HResult GetMainFileName(ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[14]))(ptr, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetHash(IDxcBlob** ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(LpVtbl[15]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult GetHash(ref IDxcBlob* ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(LpVtbl[15]))(ptr, (IDxcBlob**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult GetName(Bstr* pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[16]))(ptr, pResult);
			return ret;
		}

		public readonly unsafe HResult GetName(ref Bstr pResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Bstr* ppResult = &pResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Bstr*, HResult>)(LpVtbl[16]))(ptr, (Bstr*)ppResult);
				return ret;
			}
		}

		public readonly unsafe bool IsFullPDB()
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, int>)(LpVtbl[17]))(ptr);
			return ret != 0;
		}

		public readonly unsafe HResult GetFullPDB(IDxcBlob** ppFullPDB)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(LpVtbl[18]))(ptr, ppFullPDB);
			return ret;
		}

		public readonly unsafe HResult GetFullPDB(ref IDxcBlob* ppFullPDB)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcBlob** pppFullPDB = &ppFullPDB)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcBlob**, HResult>)(LpVtbl[18]))(ptr, (IDxcBlob**)pppFullPDB);
				return ret;
			}
		}

		public readonly unsafe HResult GetVersionInfo(IDxcVersionInfo** ppVersionInfo)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(LpVtbl[19]))(ptr, ppVersionInfo);
			return ret;
		}

		public readonly unsafe HResult GetVersionInfo(ref IDxcVersionInfo* ppVersionInfo)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcVersionInfo** pppVersionInfo = &ppVersionInfo)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcVersionInfo**, HResult>)(LpVtbl[19]))(ptr, (IDxcVersionInfo**)pppVersionInfo);
				return ret;
			}
		}

		public readonly unsafe HResult SetCompiler(IDxcCompiler3* pCompiler)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(LpVtbl[20]))(ptr, pCompiler);
			return ret;
		}

		public readonly unsafe HResult SetCompiler(ref IDxcCompiler3 pCompiler)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcCompiler3* ppCompiler = &pCompiler)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcCompiler3*, HResult>)(LpVtbl[20]))(ptr, (IDxcCompiler3*)ppCompiler);
				return ret;
			}
		}

		public readonly unsafe HResult CompileForFullPDB(IDxcResult** ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(LpVtbl[21]))(ptr, ppResult);
			return ret;
		}

		public readonly unsafe HResult CompileForFullPDB(ref IDxcResult* ppResult)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IDxcResult** pppResult = &ppResult)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, IDxcResult**, HResult>)(LpVtbl[21]))(ptr, (IDxcResult**)pppResult);
				return ret;
			}
		}

		public readonly unsafe HResult OverrideArgs(DxcArgPair* pArgPairs, Uint32 uNumArgPairs)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, DxcArgPair*, Uint32, HResult>)(LpVtbl[22]))(ptr, pArgPairs, uNumArgPairs);
			return ret;
		}

		public readonly unsafe HResult OverrideArgs(ref DxcArgPair pArgPairs, Uint32 uNumArgPairs)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxcArgPair* ppArgPairs = &pArgPairs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, DxcArgPair*, Uint32, HResult>)(LpVtbl[22]))(ptr, (DxcArgPair*)ppArgPairs, uNumArgPairs);
				return ret;
			}
		}

		public readonly unsafe HResult OverrideRootSignature(Wchar* pRootSignature)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Wchar*, HResult>)(LpVtbl[23]))(ptr, pRootSignature);
			return ret;
		}

		public readonly unsafe HResult OverrideRootSignature(ref Wchar pRootSignature)
		{
			IDxcPdbUtils* ptr = (IDxcPdbUtils*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Wchar* ppRootSignature = &pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<IDxcPdbUtils*, Wchar*, HResult>)(LpVtbl[23]))(ptr, (Wchar*)ppRootSignature);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (IDxcPdbUtils value)
		{
			return Unsafe.As<IDxcPdbUtils, IUnknown>(ref value);
		}

	}

}
