// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Numerics;

namespace HexaEngine.ImGuiNET
{
	public enum ImGuiMouseSource
	{
		/// <summary>
		/// Input is coming from an actual mouse.<br/>
		/// </summary>
		Source = unchecked(0),

		/// <summary>
		/// Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).<br/>
		/// </summary>
		TouchScreen = unchecked(1),

		/// <summary>
		/// Input is coming from a pressuremagnetic pen (often used in conjunction with high-sampling rates).<br/>
		/// </summary>
		Pen = unchecked(2),

		Count = unchecked(3),
	}

	public enum ImGuiInputEventType
	{
		None = unchecked(0),
		MousePos = unchecked(1),
		MouseWheel = unchecked(2),
		MouseButton = unchecked(3),
		MouseViewport = unchecked(4),
		Key = unchecked(5),
		Text = unchecked(6),
		Focus = unchecked(7),
		Count = unchecked(8),
	}

	public enum ImGuiInputSource
	{
		None = unchecked(0),
		/// <summary>
		/// Note: may be Mouse or TouchScreen or Pen. See io.MouseSource to distinguish them.<br/>
		/// </summary>
		Mouse = unchecked(1),

		Keyboard = unchecked(2),
		Gamepad = unchecked(3),
		/// <summary>
		/// Currently only used by InputText()<br/>
		/// </summary>
		Clipboard = unchecked(4),

		Count = unchecked(5),
	}

	public enum ImGuiKey
	{
		None = unchecked(0),
		/// <summary>
		/// == ImGuiKey_NamedKey_BEGIN<br/>
		/// </summary>
		Tab = unchecked(512),

		LeftArrow = unchecked(513),
		RightArrow = unchecked(514),
		UpArrow = unchecked(515),
		DownArrow = unchecked(516),
		PageUp = unchecked(517),
		PageDown = unchecked(518),
		Home = unchecked(519),
		End = unchecked(520),
		Insert = unchecked(521),
		Delete = unchecked(522),
		Backspace = unchecked(523),
		Space = unchecked(524),
		Enter = unchecked(525),
		Escape = unchecked(526),
		LeftCtrl = unchecked(527),
		LeftShift = unchecked(528),
		LeftAlt = unchecked(529),
		LeftSuper = unchecked(530),
		RightCtrl = unchecked(531),
		RightShift = unchecked(532),
		RightAlt = unchecked(533),
		RightSuper = unchecked(534),
		Menu = unchecked(535),
		Key0 = unchecked(536),
		Key1 = unchecked(537),
		Key2 = unchecked(538),
		Key3 = unchecked(539),
		Key4 = unchecked(540),
		Key5 = unchecked(541),
		Key6 = unchecked(542),
		Key7 = unchecked(543),
		Key8 = unchecked(544),
		Key9 = unchecked(545),
		Keya = unchecked(546),
		Keyb = unchecked(547),
		Keyc = unchecked(548),
		Keyd = unchecked(549),
		Keye = unchecked(550),
		Keyf = unchecked(551),
		Keyg = unchecked(552),
		Keyh = unchecked(553),
		Keyi = unchecked(554),
		Keyj = unchecked(555),
		Keyk = unchecked(556),
		Keyl = unchecked(557),
		Keym = unchecked(558),
		Keyn = unchecked(559),
		Keyo = unchecked(560),
		Keyp = unchecked(561),
		Keyq = unchecked(562),
		Keyr = unchecked(563),
		Keys = unchecked(564),
		Keyt = unchecked(565),
		Keyu = unchecked(566),
		Keyv = unchecked(567),
		Keyw = unchecked(568),
		Keyx = unchecked(569),
		Keyy = unchecked(570),
		Keyz = unchecked(571),
		Keyf1 = unchecked(572),
		Keyf2 = unchecked(573),
		Keyf3 = unchecked(574),
		Keyf4 = unchecked(575),
		Keyf5 = unchecked(576),
		Keyf6 = unchecked(577),
		Keyf7 = unchecked(578),
		Keyf8 = unchecked(579),
		Keyf9 = unchecked(580),
		Keyf10 = unchecked(581),
		Keyf11 = unchecked(582),
		Keyf12 = unchecked(583),
		/// <summary>
		/// '<br/>
		/// </summary>
		Apostrophe = unchecked(584),

		/// <summary>
		/// ,<br/>
		/// </summary>
		Comma = unchecked(585),

		/// <summary>
		/// -<br/>
		/// </summary>
		Minus = unchecked(586),

		/// <summary>
		/// .<br/>
		/// </summary>
		Period = unchecked(587),

		/// <summary>
		/// </summary>
		Slash = unchecked(588),

		/// <summary>
		/// ;<br/>
		/// </summary>
		Semicolon = unchecked(589),

		/// <summary>
		/// =<br/>
		/// </summary>
		Equal = unchecked(590),

		/// <summary>
		/// [<br/>
		/// </summary>
		LeftBracket = unchecked(591),

		/// <summary>
		/// \ (this text inhibit multiline comment caused by backslash)<br/>
		/// </summary>
		Backslash = unchecked(592),

		/// <summary>
		/// ]<br/>
		/// </summary>
		RightBracket = unchecked(593),

		/// <summary>
		/// `<br/>
		/// </summary>
		GraveAccent = unchecked(594),

		CapsLock = unchecked(595),
		ScrollLock = unchecked(596),
		NumLock = unchecked(597),
		PrintScreen = unchecked(598),
		Pause = unchecked(599),
		Keypad0 = unchecked(600),
		Keypad1 = unchecked(601),
		Keypad2 = unchecked(602),
		Keypad3 = unchecked(603),
		Keypad4 = unchecked(604),
		Keypad5 = unchecked(605),
		Keypad6 = unchecked(606),
		Keypad7 = unchecked(607),
		Keypad8 = unchecked(608),
		Keypad9 = unchecked(609),
		KeypadDecimal = unchecked(610),
		KeypadDivide = unchecked(611),
		KeypadMultiply = unchecked(612),
		KeypadSubtract = unchecked(613),
		KeypadAdd = unchecked(614),
		KeypadEnter = unchecked(615),
		KeypadEqual = unchecked(616),
		/// <summary>
		/// Menu (Xbox)      + (Switch)   StartOptions (PS)<br/>
		/// </summary>
		GamepadStart = unchecked(617),

		/// <summary>
		/// View (Xbox)      - (Switch)   Share (PS)<br/>
		/// </summary>
		GamepadBack = unchecked(618),

		/// <summary>
		/// X (Xbox)         Y (Switch)   Square (PS)         Tap: Toggle Menu. Hold: Windowing mode (FocusMoveResize windows)<br/>
		/// </summary>
		GamepadFaceLeft = unchecked(619),

		/// <summary>
		/// B (Xbox)         A (Switch)   Circle (PS)         Cancel  Close  Exit<br/>
		/// </summary>
		GamepadFaceRight = unchecked(620),

		/// <summary>
		/// Y (Xbox)         X (Switch)   Triangle (PS)       Text Input  On-screen Keyboard<br/>
		/// </summary>
		GamepadFaceUp = unchecked(621),

		/// <summary>
		/// A (Xbox)         B (Switch)   Cross (PS)          Activate  Open  Toggle  Tweak<br/>
		/// </summary>
		GamepadFaceDown = unchecked(622),

		/// <summary>
		/// D-pad Left                                        Move  Tweak  Resize Window (in Windowing mode)<br/>
		/// </summary>
		GamepadDpadLeft = unchecked(623),

		/// <summary>
		/// D-pad Right                                       Move  Tweak  Resize Window (in Windowing mode)<br/>
		/// </summary>
		GamepadDpadRight = unchecked(624),

		/// <summary>
		/// D-pad Up                                          Move  Tweak  Resize Window (in Windowing mode)<br/>
		/// </summary>
		GamepadDpadUp = unchecked(625),

		/// <summary>
		/// D-pad Down                                        Move  Tweak  Resize Window (in Windowing mode)<br/>
		/// </summary>
		GamepadDpadDown = unchecked(626),

		/// <summary>
		/// L Bumper (Xbox)  L (Switch)   L1 (PS)             Tweak Slower  Focus Previous (in Windowing mode)<br/>
		/// </summary>
		Gamepadl1 = unchecked(627),

		/// <summary>
		/// R Bumper (Xbox)  R (Switch)   R1 (PS)             Tweak Faster  Focus Next (in Windowing mode)<br/>
		/// </summary>
		Gamepadr1 = unchecked(628),

		/// <summary>
		/// L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]<br/>
		/// </summary>
		Gamepadl2 = unchecked(629),

		/// <summary>
		/// R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]<br/>
		/// </summary>
		Gamepadr2 = unchecked(630),

		/// <summary>
		/// L Stick (Xbox)   L3 (Switch)  L3 (PS)<br/>
		/// </summary>
		Gamepadl3 = unchecked(631),

		/// <summary>
		/// R Stick (Xbox)   R3 (Switch)  R3 (PS)<br/>
		/// </summary>
		Gamepadr3 = unchecked(632),

		/// <summary>
		/// [Analog]                                          Move Window (in Windowing mode)<br/>
		/// </summary>
		GamepadlStickLeft = unchecked(633),

		/// <summary>
		/// [Analog]                                          Move Window (in Windowing mode)<br/>
		/// </summary>
		GamepadlStickRight = unchecked(634),

		/// <summary>
		/// [Analog]                                          Move Window (in Windowing mode)<br/>
		/// </summary>
		GamepadlStickUp = unchecked(635),

		/// <summary>
		/// [Analog]                                          Move Window (in Windowing mode)<br/>
		/// </summary>
		GamepadlStickDown = unchecked(636),

		/// <summary>
		/// [Analog]<br/>
		/// </summary>
		GamepadrStickLeft = unchecked(637),

		/// <summary>
		/// [Analog]<br/>
		/// </summary>
		GamepadrStickRight = unchecked(638),

		/// <summary>
		/// [Analog]<br/>
		/// </summary>
		GamepadrStickUp = unchecked(639),

		/// <summary>
		/// [Analog]<br/>
		/// </summary>
		GamepadrStickDown = unchecked(640),

		MouseLeft = unchecked(641),
		MouseRight = unchecked(642),
		MouseMiddle = unchecked(643),
		Mousex1 = unchecked(644),
		Mousex2 = unchecked(645),
		MouseWheelx = unchecked(646),
		MouseWheely = unchecked(647),
		ReservedForModCtrl = unchecked(648),
		ReservedForModShift = unchecked(649),
		ReservedForModAlt = unchecked(650),
		ReservedForModSuper = unchecked(651),
		Count = unchecked(652),
		ModNone = unchecked(0),
		/// <summary>
		/// Ctrl<br/>
		/// </summary>
		ModCtrl = unchecked(4096),

		/// <summary>
		/// Shift<br/>
		/// </summary>
		ModShift = unchecked(8192),

		/// <summary>
		/// OptionMenu<br/>
		/// </summary>
		ModAlt = unchecked(16384),

		/// <summary>
		/// CmdSuperWindows<br/>
		/// </summary>
		ModSuper = unchecked(32768),

		/// <summary>
		/// Alias for Ctrl (non-macOS) _or_ Super (macOS).<br/>
		/// </summary>
		ModShortcut = unchecked(2048),

		/// <summary>
		/// 5-bits<br/>
		/// </summary>
		ModMask = unchecked(63488),

		NamedKeyBegin = unchecked(512),
		NamedKeyEnd = Count,
		NamedKeyCount = unchecked(140),
		/// <summary>
		/// Size of KeysData[]: hold legacy 0..512 keycodes + named keys<br/>
		/// </summary>
		KeysDataSize = Count,

		/// <summary>
		/// Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.<br/>
		/// </summary>
		KeysDataOffset = unchecked(0),

	}

	public enum ImGuiNavLayer
	{
		/// <summary>
		/// Main scrolling layer<br/>
		/// </summary>
		Main = unchecked(0),

		/// <summary>
		/// Menu layer (access with Alt)<br/>
		/// </summary>
		Menu = unchecked(1),

		Count = unchecked(2),
	}

	public enum ImGuiDockNodeState
	{
		Unknown = unchecked(0),
		HostWindowHiddenBecauseSingleWindow = unchecked(1),
		HostWindowHiddenBecauseWindowsAreResizing = unchecked(2),
		HostWindowVisible = unchecked(3),
	}

	public enum ImGuiAxis
	{
		None = unchecked(-1),
		Axisx = unchecked(0),
		Axisy = unchecked(1),
	}

	public enum ImGuiContextHookType
	{
		NewFramePre = unchecked(0),
		NewFramePost = unchecked(1),
		EndFramePre = unchecked(2),
		EndFramePost = unchecked(3),
		RenderPre = unchecked(4),
		RenderPost = unchecked(5),
		Shutdown = unchecked(6),
		PendingRemoval = unchecked(7),
	}

	public enum ImGuiLogType
	{
		None = unchecked(0),
		Tty = unchecked(1),
		File = unchecked(2),
		Buffer = unchecked(3),
		Clipboard = unchecked(4),
	}

	public enum ImGuiLocKey
	{
		Version = unchecked(0),
		TableSizeOne = unchecked(1),
		TableSizeAllFit = unchecked(2),
		TableSizeAllDefault = unchecked(3),
		TableResetOrder = unchecked(4),
		WindowingMainMenuBar = unchecked(5),
		WindowingPopup = unchecked(6),
		WindowingUntitled = unchecked(7),
		DockingHideTabBar = unchecked(8),
		Count = unchecked(9),
	}

	public enum ImGuiWindowFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Disable title-bar<br/>
		/// </summary>
		NoTitleBar = unchecked(1),

		/// <summary>
		/// Disable user resizing with the lower-right grip<br/>
		/// </summary>
		NoResize = unchecked(2),

		/// <summary>
		/// Disable user moving the window<br/>
		/// </summary>
		NoMove = unchecked(4),

		/// <summary>
		/// Disable scrollbars (window can still scroll with mouse or programmatically)<br/>
		/// </summary>
		NoScrollbar = unchecked(8),

		/// <summary>
		/// Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.<br/>
		/// </summary>
		NoScrollWithMouse = unchecked(16),

		/// <summary>
		/// Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).<br/>
		/// </summary>
		NoCollapse = unchecked(32),

		/// <summary>
		/// Resize every window to its content every frame<br/>
		/// </summary>
		AlwaysAutoResize = unchecked(64),

		/// <summary>
		/// Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).<br/>
		/// </summary>
		NoBackground = unchecked(128),

		/// <summary>
		/// Never loadsave settings in .ini file<br/>
		/// </summary>
		NoSavedSettings = unchecked(256),

		/// <summary>
		/// Disable catching mouse, hovering test with pass through.<br/>
		/// </summary>
		NoMouseInputs = unchecked(512),

		/// <summary>
		/// Has a menu-bar<br/>
		/// </summary>
		MenuBar = unchecked(1024),

		/// <summary>
		/// Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.<br/>
		/// </summary>
		HorizontalScrollbar = unchecked(2048),

		/// <summary>
		/// Disable taking focus when transitioning from hidden to visible state<br/>
		/// </summary>
		NoFocusOnAppearing = unchecked(4096),

		/// <summary>
		/// Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)<br/>
		/// </summary>
		NoBringToFrontOnFocus = unchecked(8192),

		/// <summary>
		/// Always show vertical scrollbar (even if ContentSize.y &lt; Size.y)<br/>
		/// </summary>
		AlwaysVerticalScrollbar = unchecked(16384),

		/// <summary>
		/// Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x)<br/>
		/// </summary>
		AlwaysHorizontalScrollbar = unchecked(32768),

		/// <summary>
		/// Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)<br/>
		/// </summary>
		AlwaysUseWindowPadding = unchecked(65536),

		/// <summary>
		/// No gamepadkeyboard navigation within the window<br/>
		/// </summary>
		NoNavInputs = unchecked(262144),

		/// <summary>
		/// No focusing toward this window with gamepadkeyboard navigation (e.g. skipped by CTRL+TAB)<br/>
		/// </summary>
		NoNavFocus = unchecked(524288),

		/// <summary>
		/// Display a dot next to the title. When used in a tabdocking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.<br/>
		/// </summary>
		UnsavedDocument = unchecked(1048576),

		/// <summary>
		/// Disable docking of this window<br/>
		/// </summary>
		NoDocking = unchecked(2097152),

		NoNav = unchecked(786432),
		NoDecoration = unchecked(43),
		NoInputs = unchecked(786944),
		/// <summary>
		/// [BETA] On child window: allow gamepadkeyboard navigation to cross over parent border to this child or between sibling child windows.<br/>
		/// </summary>
		NavFlattened = unchecked(8388608),

		/// <summary>
		/// Don't use! For internal use by BeginChild()<br/>
		/// </summary>
		ChildWindow = unchecked(16777216),

		/// <summary>
		/// Don't use! For internal use by BeginTooltip()<br/>
		/// </summary>
		Tooltip = unchecked(33554432),

		/// <summary>
		/// Don't use! For internal use by BeginPopup()<br/>
		/// </summary>
		Popup = unchecked(67108864),

		/// <summary>
		/// Don't use! For internal use by BeginPopupModal()<br/>
		/// </summary>
		Modal = unchecked(134217728),

		/// <summary>
		/// Don't use! For internal use by BeginMenu()<br/>
		/// </summary>
		ChildMenu = unchecked(268435456),

		/// <summary>
		/// Don't use! For internal use by Begin()NewFrame()<br/>
		/// </summary>
		DockNodeHost = unchecked(536870912),

	}

	public enum ImGuiInputTextFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Allow 0123456789.+-*<br/>
		/// </summary>
		CharsDecimal = unchecked(1),

		/// <summary>
		/// Allow 0123456789ABCDEFabcdef<br/>
		/// </summary>
		CharsHexadecimal = unchecked(2),

		/// <summary>
		/// Turn a..z into A..Z<br/>
		/// </summary>
		CharsUppercase = unchecked(4),

		/// <summary>
		/// Filter out spaces, tabs<br/>
		/// </summary>
		CharsNoBlank = unchecked(8),

		/// <summary>
		/// Select entire text when first taking mouse focus<br/>
		/// </summary>
		AutoSelectAll = unchecked(16),

		/// <summary>
		/// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.<br/>
		/// </summary>
		EnterReturnsTrue = unchecked(32),

		/// <summary>
		/// Callback on pressing TAB (for completion handling)<br/>
		/// </summary>
		CallbackCompletion = unchecked(64),

		/// <summary>
		/// Callback on pressing UpDown arrows (for history handling)<br/>
		/// </summary>
		CallbackHistory = unchecked(128),

		/// <summary>
		/// Callback on each iteration. User code may query cursor position, modify text buffer.<br/>
		/// </summary>
		CallbackAlways = unchecked(256),

		/// <summary>
		/// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.<br/>
		/// </summary>
		CallbackCharFilter = unchecked(512),

		/// <summary>
		/// Pressing TAB input a '\t' character into the text field<br/>
		/// </summary>
		AllowTabInput = unchecked(1024),

		/// <summary>
		/// In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).<br/>
		/// </summary>
		CtrlEnterForNewLine = unchecked(2048),

		/// <summary>
		/// Disable following the cursor horizontally<br/>
		/// </summary>
		NoHorizontalScroll = unchecked(4096),

		/// <summary>
		/// Overwrite mode<br/>
		/// </summary>
		AlwaysOverwrite = unchecked(8192),

		/// <summary>
		/// Read-only mode<br/>
		/// </summary>
		ReadOnly = unchecked(16384),

		/// <summary>
		/// Password mode, display all characters as '*'<br/>
		/// </summary>
		Password = unchecked(32768),

		/// <summary>
		/// Disable undoredo. Note that input text owns the text data while active, if you want to provide your own undoredo stack you need e.g. to call ClearActiveID().<br/>
		/// </summary>
		NoUndoRedo = unchecked(65536),

		/// <summary>
		/// Allow 0123456789.+-*eE (Scientific notation input)<br/>
		/// </summary>
		CharsScientific = unchecked(131072),

		/// <summary>
		/// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misccppimgui_stdlib.h for an example of using this)<br/>
		/// </summary>
		CallbackResize = unchecked(262144),

		/// <summary>
		/// Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)<br/>
		/// </summary>
		CallbackEdit = unchecked(524288),

		/// <summary>
		/// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)<br/>
		/// </summary>
		EscapeClearsAll = unchecked(1048576),

	}

	public enum ImGuiTreeNodeFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Draw as selected<br/>
		/// </summary>
		Selected = unchecked(1),

		/// <summary>
		/// Draw frame with background (e.g. for CollapsingHeader)<br/>
		/// </summary>
		Framed = unchecked(2),

		/// <summary>
		/// Hit testing to allow subsequent widgets to overlap this one<br/>
		/// </summary>
		AllowOverlap = unchecked(4),

		/// <summary>
		/// Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack<br/>
		/// </summary>
		NoTreePushOnOpen = unchecked(8),

		/// <summary>
		/// Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)<br/>
		/// </summary>
		NoAutoOpenOnLog = unchecked(16),

		/// <summary>
		/// Default node to be open<br/>
		/// </summary>
		DefaultOpen = unchecked(32),

		/// <summary>
		/// Need double-click to open node<br/>
		/// </summary>
		OpenOnDoubleClick = unchecked(64),

		/// <summary>
		/// Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.<br/>
		/// </summary>
		OpenOnArrow = unchecked(128),

		/// <summary>
		/// No collapsing, no arrow (use as a convenience for leaf nodes).<br/>
		/// </summary>
		Leaf = unchecked(256),

		/// <summary>
		/// Display a bullet instead of arrow<br/>
		/// </summary>
		Bullet = unchecked(512),

		/// <summary>
		/// Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().<br/>
		/// </summary>
		FramePadding = unchecked(1024),

		/// <summary>
		/// Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.<br/>
		/// </summary>
		SpanAvailWidth = unchecked(2048),

		/// <summary>
		/// Extend hit box to the left-most and right-most edges (bypass the indented area).<br/>
		/// </summary>
		SpanFullWidth = unchecked(4096),

		/// <summary>
		/// (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)<br/>
		/// </summary>
		NavLeftJumpsBackHere = unchecked(8192),

		CollapsingHeader = unchecked(26),
	}

	public enum ImGuiPopupFlags
	{
		None = unchecked(0),
		/// <summary>
		/// For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)<br/>
		/// </summary>
		MouseButtonLeft = unchecked(0),

		/// <summary>
		/// For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)<br/>
		/// </summary>
		MouseButtonRight = unchecked(1),

		/// <summary>
		/// For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)<br/>
		/// </summary>
		MouseButtonMiddle = unchecked(2),

		MouseButtonMask = unchecked(31),
		MouseButtonDefault = unchecked(1),
		/// <summary>
		/// For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack<br/>
		/// </summary>
		NoOpenOverExistingPopup = unchecked(32),

		/// <summary>
		/// For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space<br/>
		/// </summary>
		NoOpenOverItems = unchecked(64),

		/// <summary>
		/// For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.<br/>
		/// </summary>
		AnyPopupId = unchecked(128),

		/// <summary>
		/// For IsPopupOpen(): searchtest at any level of the popup stack (default test in the current level)<br/>
		/// </summary>
		AnyPopupLevel = unchecked(256),

		AnyPopup = unchecked(384),
	}

	public enum ImGuiSelectableFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Clicking this doesn't close parent popup window<br/>
		/// </summary>
		DontClosePopups = unchecked(1),

		/// <summary>
		/// Selectable frame can span all columns (text will still fit in current column)<br/>
		/// </summary>
		SpanAllColumns = unchecked(2),

		/// <summary>
		/// Generate press events on double clicks too<br/>
		/// </summary>
		AllowDoubleClick = unchecked(4),

		/// <summary>
		/// Cannot be selected, display grayed out text<br/>
		/// </summary>
		Disabled = unchecked(8),

		/// <summary>
		/// (WIP) Hit testing to allow subsequent widgets to overlap this one<br/>
		/// </summary>
		AllowOverlap = unchecked(16),

	}

	public enum ImGuiComboFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Align the popup toward the left by default<br/>
		/// </summary>
		PopupAlignLeft = unchecked(1),

		/// <summary>
		/// Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()<br/>
		/// </summary>
		HeightSmall = unchecked(2),

		/// <summary>
		/// Max ~8 items visible (default)<br/>
		/// </summary>
		HeightRegular = unchecked(4),

		/// <summary>
		/// Max ~20 items visible<br/>
		/// </summary>
		HeightLarge = unchecked(8),

		/// <summary>
		/// As many fitting items as possible<br/>
		/// </summary>
		HeightLargest = unchecked(16),

		/// <summary>
		/// Display on the preview box without the square arrow button<br/>
		/// </summary>
		NoArrowButton = unchecked(32),

		/// <summary>
		/// Display only a square arrow button<br/>
		/// </summary>
		NoPreview = unchecked(64),

		HeightMask = unchecked(30),
	}

	public enum ImGuiTabBarFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Allow manually dragging tabs to re-order them + New tabs are appended at the end of list<br/>
		/// </summary>
		Reorderable = unchecked(1),

		/// <summary>
		/// Automatically select new tabs when they appear<br/>
		/// </summary>
		AutoSelectNewTabs = unchecked(2),

		/// <summary>
		/// Disable buttons to open the tab list popup<br/>
		/// </summary>
		ListPopupButton = unchecked(4),

		/// <summary>
		/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() &amp;&amp; IsMouseClicked(2)) *p_open = false.<br/>
		/// </summary>
		NoCloseWithMiddleMouseButton = unchecked(8),

		/// <summary>
		/// Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)<br/>
		/// </summary>
		NoTabListScrollingButtons = unchecked(16),

		/// <summary>
		/// Disable tooltips when hovering a tab<br/>
		/// </summary>
		NoTooltip = unchecked(32),

		/// <summary>
		/// Resize tabs when they don't fit<br/>
		/// </summary>
		FittingPolicyResizeDown = unchecked(64),

		/// <summary>
		/// Add scroll buttons when tabs don't fit<br/>
		/// </summary>
		FittingPolicyScroll = unchecked(128),

		FittingPolicyMask = unchecked(192),
		FittingPolicyDefault = FittingPolicyResizeDown,
	}

	public enum ImGuiTabItemFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.<br/>
		/// </summary>
		UnsavedDocument = unchecked(1),

		/// <summary>
		/// Trigger flag to programmatically make the tab selected when calling BeginTabItem()<br/>
		/// </summary>
		SetSelected = unchecked(2),

		/// <summary>
		/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() &amp;&amp; IsMouseClicked(2)) *p_open = false.<br/>
		/// </summary>
		NoCloseWithMiddleMouseButton = unchecked(4),

		/// <summary>
		/// Don't call PushID(tab-&gt;ID)PopID() on BeginTabItem()EndTabItem()<br/>
		/// </summary>
		NoPushId = unchecked(8),

		/// <summary>
		/// Disable tooltip for the given tab<br/>
		/// </summary>
		NoTooltip = unchecked(16),

		/// <summary>
		/// Disable reordering this tab or having another tab cross over this tab<br/>
		/// </summary>
		NoReorder = unchecked(32),

		/// <summary>
		/// Enforce the tab position to the left of the tab bar (after the tab list popup button)<br/>
		/// </summary>
		Leading = unchecked(64),

		/// <summary>
		/// Enforce the tab position to the right of the tab bar (before the scrolling buttons)<br/>
		/// </summary>
		Trailing = unchecked(128),

	}

	public enum ImGuiTableFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Enable resizing columns.<br/>
		/// </summary>
		Resizable = unchecked(1),

		/// <summary>
		/// Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)<br/>
		/// </summary>
		Reorderable = unchecked(2),

		/// <summary>
		/// Enable hidingdisabling columns in context menu.<br/>
		/// </summary>
		Hideable = unchecked(4),

		/// <summary>
		/// Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.<br/>
		/// </summary>
		Sortable = unchecked(8),

		/// <summary>
		/// Disable persisting columns order, width and sort settings in the .ini file.<br/>
		/// </summary>
		NoSavedSettings = unchecked(16),

		/// <summary>
		/// Right-click on columns bodycontents will display table context menu. By default it is available in TableHeadersRow().<br/>
		/// </summary>
		ContextMenuInBody = unchecked(32),

		/// <summary>
		/// Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)<br/>
		/// </summary>
		RowBg = unchecked(64),

		/// <summary>
		/// Draw horizontal borders between rows.<br/>
		/// </summary>
		BordersInnerh = unchecked(128),

		/// <summary>
		/// Draw horizontal borders at the top and bottom.<br/>
		/// </summary>
		BordersOuterh = unchecked(256),

		/// <summary>
		/// Draw vertical borders between columns.<br/>
		/// </summary>
		BordersInnerv = unchecked(512),

		/// <summary>
		/// Draw vertical borders on the left and right sides.<br/>
		/// </summary>
		BordersOuterv = unchecked(1024),

		/// <summary>
		/// Draw horizontal borders.<br/>
		/// </summary>
		Bordersh = unchecked(384),

		/// <summary>
		/// Draw vertical borders.<br/>
		/// </summary>
		Bordersv = unchecked(1536),

		/// <summary>
		/// Draw inner borders.<br/>
		/// </summary>
		BordersInner = unchecked(640),

		/// <summary>
		/// Draw outer borders.<br/>
		/// </summary>
		BordersOuter = unchecked(1280),

		/// <summary>
		/// Draw all borders.<br/>
		/// </summary>
		Borders = unchecked(1920),

		/// <summary>
		/// [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -&gt; May move to style<br/>
		/// </summary>
		NoBordersInBody = unchecked(2048),

		/// <summary>
		/// [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -&gt; May move to style<br/>
		/// </summary>
		NoBordersInBodyUntilResize = unchecked(4096),

		/// <summary>
		/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.<br/>
		/// </summary>
		SizingFixedFit = unchecked(8192),

		/// <summary>
		/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.<br/>
		/// </summary>
		SizingFixedSame = unchecked(16384),

		/// <summary>
		/// Columns default to _WidthStretch with default weights proportional to each columns contents widths.<br/>
		/// </summary>
		SizingStretchProp = unchecked(24576),

		/// <summary>
		/// Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().<br/>
		/// </summary>
		SizingStretchSame = unchecked(32768),

		/// <summary>
		/// Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollXScrollY are disabled and Stretch columns are not used.<br/>
		/// </summary>
		NoHostExtendx = unchecked(65536),

		/// <summary>
		/// Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollXScrollY are disabled. Data below the limit will be clipped and not visible.<br/>
		/// </summary>
		NoHostExtendy = unchecked(131072),

		/// <summary>
		/// Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.<br/>
		/// </summary>
		NoKeepColumnsVisible = unchecked(262144),

		/// <summary>
		/// Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.<br/>
		/// </summary>
		PreciseWidths = unchecked(524288),

		/// <summary>
		/// Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().<br/>
		/// </summary>
		NoClip = unchecked(1048576),

		/// <summary>
		/// Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.<br/>
		/// </summary>
		PadOuterx = unchecked(2097152),

		/// <summary>
		/// Default if BordersOuterV is off. Disable outermost padding.<br/>
		/// </summary>
		NoPadOuterx = unchecked(4194304),

		/// <summary>
		/// Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).<br/>
		/// </summary>
		NoPadInnerx = unchecked(8388608),

		/// <summary>
		/// Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.<br/>
		/// </summary>
		Scrollx = unchecked(16777216),

		/// <summary>
		/// Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.<br/>
		/// </summary>
		Scrolly = unchecked(33554432),

		/// <summary>
		/// Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount &gt; 1).<br/>
		/// </summary>
		SortMulti = unchecked(67108864),

		/// <summary>
		/// Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).<br/>
		/// </summary>
		SortTristate = unchecked(134217728),

		SizingMask = unchecked(57344),
	}

	public enum ImGuiTableColumnFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Overridingmaster disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)<br/>
		/// </summary>
		Disabled = unchecked(1),

		/// <summary>
		/// Default as a hiddendisabled column.<br/>
		/// </summary>
		DefaultHide = unchecked(2),

		/// <summary>
		/// Default as a sorting column.<br/>
		/// </summary>
		DefaultSort = unchecked(4),

		/// <summary>
		/// Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).<br/>
		/// </summary>
		WidthStretch = unchecked(8),

		/// <summary>
		/// Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).<br/>
		/// </summary>
		WidthFixed = unchecked(16),

		/// <summary>
		/// Disable manual resizing.<br/>
		/// </summary>
		NoResize = unchecked(32),

		/// <summary>
		/// Disable manual reordering this column, this will also prevent other columns from crossing over this column.<br/>
		/// </summary>
		NoReorder = unchecked(64),

		/// <summary>
		/// Disable ability to hidedisable this column.<br/>
		/// </summary>
		NoHide = unchecked(128),

		/// <summary>
		/// Disable clipping for this column (all NoClip columns will render in a same draw command).<br/>
		/// </summary>
		NoClip = unchecked(256),

		/// <summary>
		/// Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).<br/>
		/// </summary>
		NoSort = unchecked(512),

		/// <summary>
		/// Disable ability to sort in the ascending direction.<br/>
		/// </summary>
		NoSortAscending = unchecked(1024),

		/// <summary>
		/// Disable ability to sort in the descending direction.<br/>
		/// </summary>
		NoSortDescending = unchecked(2048),

		/// <summary>
		/// TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.<br/>
		/// </summary>
		NoHeaderLabel = unchecked(4096),

		/// <summary>
		/// Disable header text width contribution to automatic column width.<br/>
		/// </summary>
		NoHeaderWidth = unchecked(8192),

		/// <summary>
		/// Make the initial sort direction Ascending when first sorting on this column (default).<br/>
		/// </summary>
		PreferSortAscending = unchecked(16384),

		/// <summary>
		/// Make the initial sort direction Descending when first sorting on this column.<br/>
		/// </summary>
		PreferSortDescending = unchecked(32768),

		/// <summary>
		/// Use current Indent value when entering cell (default for column 0).<br/>
		/// </summary>
		IndentEnable = unchecked(65536),

		/// <summary>
		/// Ignore current Indent value when entering cell (default for columns &gt; 0). Indentation changes _within_ the cell will still be honored.<br/>
		/// </summary>
		IndentDisable = unchecked(131072),

		/// <summary>
		/// Status: is enabled == not hidden by userapi (referred to as "Hide" in _DefaultHide and _NoHide) flags.<br/>
		/// </summary>
		IsEnabled = unchecked(16777216),

		/// <summary>
		/// Status: is visible == is enabled AND not clipped by scrolling.<br/>
		/// </summary>
		IsVisible = unchecked(33554432),

		/// <summary>
		/// Status: is currently part of the sort specs<br/>
		/// </summary>
		IsSorted = unchecked(67108864),

		/// <summary>
		/// Status: is hovered by mouse<br/>
		/// </summary>
		IsHovered = unchecked(134217728),

		WidthMask = unchecked(24),
		IndentMask = unchecked(196608),
		StatusMask = unchecked(251658240),
		/// <summary>
		/// [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)<br/>
		/// </summary>
		NoDirectResize = unchecked(1073741824),

	}

	public enum ImGuiTableRowFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Identify header row (set default background color + width of its contents accounted differently for auto column width)<br/>
		/// </summary>
		Headers = unchecked(1),

	}

	public enum ImGuiTableBgTarget
	{
		None = unchecked(0),
		/// <summary>
		/// Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)<br/>
		/// </summary>
		RowBg0 = unchecked(1),

		/// <summary>
		/// Set row background color 1 (generally used for selection marking)<br/>
		/// </summary>
		RowBg1 = unchecked(2),

		/// <summary>
		/// Set cell background color (top-most color)<br/>
		/// </summary>
		CellBg = unchecked(3),

	}

	public enum ImGuiFocusedFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Return true if any children of the window is focused<br/>
		/// </summary>
		ChildWindows = unchecked(1),

		/// <summary>
		/// Test from root window (top most parent of the current hierarchy)<br/>
		/// </summary>
		RootWindow = unchecked(2),

		/// <summary>
		/// Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!<br/>
		/// </summary>
		AnyWindow = unchecked(4),

		/// <summary>
		/// Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)<br/>
		/// </summary>
		NoPopupHierarchy = unchecked(8),

		/// <summary>
		/// Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)<br/>
		/// </summary>
		DockHierarchy = unchecked(16),

		RootAndChildWindows = unchecked(3),
	}

	public enum ImGuiHoveredFlags
	{
		/// <summary>
		/// Return true if directly over the itemwindow, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.<br/>
		/// </summary>
		None = unchecked(0),

		/// <summary>
		/// IsWindowHovered() only: Return true if any children of the window is hovered<br/>
		/// </summary>
		ChildWindows = unchecked(1),

		/// <summary>
		/// IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)<br/>
		/// </summary>
		RootWindow = unchecked(2),

		/// <summary>
		/// IsWindowHovered() only: Return true if any window is hovered<br/>
		/// </summary>
		AnyWindow = unchecked(4),

		/// <summary>
		/// IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)<br/>
		/// </summary>
		NoPopupHierarchy = unchecked(8),

		/// <summary>
		/// IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)<br/>
		/// </summary>
		DockHierarchy = unchecked(16),

		/// <summary>
		/// Return true even if a popup window is normally blocking access to this itemwindow<br/>
		/// </summary>
		AllowWhenBlockedByPopup = unchecked(32),

		/// <summary>
		/// Return true even if an active item is blocking access to this itemwindow. Useful for Drag and Drop patterns.<br/>
		/// </summary>
		AllowWhenBlockedByActiveItem = unchecked(128),

		/// <summary>
		/// IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.<br/>
		/// </summary>
		AllowWhenOverlappedByItem = unchecked(256),

		/// <summary>
		/// IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.<br/>
		/// </summary>
		AllowWhenOverlappedByWindow = unchecked(512),

		/// <summary>
		/// IsItemHovered() only: Return true even if the item is disabled<br/>
		/// </summary>
		AllowWhenDisabled = unchecked(1024),

		/// <summary>
		/// IsItemHovered() only: Disable using gamepadkeyboard navigation state when active, always query mouse<br/>
		/// </summary>
		NoNavOverride = unchecked(2048),

		AllowWhenOverlapped = unchecked(768),
		RectOnly = unchecked(928),
		RootAndChildWindows = unchecked(3),
		/// <summary>
		/// Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.<br/>
		/// </summary>
		ForTooltip = unchecked(2048),

		/// <summary>
		/// Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same itemwindow. Using the stationary test tends to reduces the need for a long delay.<br/>
		/// </summary>
		Stationary = unchecked(4096),

		/// <summary>
		/// IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.<br/>
		/// </summary>
		DelayNone = unchecked(8192),

		/// <summary>
		/// IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).<br/>
		/// </summary>
		DelayShort = unchecked(16384),

		/// <summary>
		/// IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).<br/>
		/// </summary>
		DelayNormal = unchecked(32768),

		/// <summary>
		/// IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)<br/>
		/// </summary>
		NoSharedDelay = unchecked(65536),

	}

	public enum ImGuiDockNodeFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Shared        Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.<br/>
		/// </summary>
		KeepAliveOnly = unchecked(1),

		/// <summary>
		/// Shared        Disable docking inside the Central Node, which will be always kept empty.<br/>
		/// </summary>
		NoDockingInCentralNode = unchecked(4),

		/// <summary>
		/// Shared        Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.<br/>
		/// </summary>
		PassthruCentralNode = unchecked(8),

		/// <summary>
		/// SharedLocal  Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved.<br/>
		/// </summary>
		NoSplit = unchecked(16),

		/// <summary>
		/// SharedLocal  Disable resizing node using the splitterseparators. Useful with programmatically setup dockspaces.<br/>
		/// </summary>
		NoResize = unchecked(32),

		/// <summary>
		/// SharedLocal  Tab bar will automatically hide when there is a single window in the dock node.<br/>
		/// </summary>
		AutoHideTabBar = unchecked(64),

	}

	public enum ImGuiDragDropFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.<br/>
		/// </summary>
		SourceNoPreviewTooltip = unchecked(1),

		/// <summary>
		/// By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.<br/>
		/// </summary>
		SourceNoDisableHover = unchecked(2),

		/// <summary>
		/// Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.<br/>
		/// </summary>
		SourceNoHoldToOpenOthers = unchecked(4),

		/// <summary>
		/// Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.<br/>
		/// </summary>
		SourceAllowNullId = unchecked(8),

		/// <summary>
		/// External source (from outside of dear imgui), won't attempt to read current itemwindow info. Will always return true. Only one Extern source can be active simultaneously.<br/>
		/// </summary>
		SourceExtern = unchecked(16),

		/// <summary>
		/// Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)<br/>
		/// </summary>
		SourceAutoExpirePayload = unchecked(32),

		/// <summary>
		/// AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.<br/>
		/// </summary>
		AcceptBeforeDelivery = unchecked(1024),

		/// <summary>
		/// Do not draw the default highlight rectangle when hovering over target.<br/>
		/// </summary>
		AcceptNoDrawDefaultRect = unchecked(2048),

		/// <summary>
		/// Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.<br/>
		/// </summary>
		AcceptNoPreviewTooltip = unchecked(4096),

		/// <summary>
		/// For peeking ahead and inspecting the payload before delivery.<br/>
		/// </summary>
		AcceptPeekOnly = unchecked(3072),

	}

	public enum ImGuiDataType
	{
		/// <summary>
		/// signed char  char (with sensible compilers)<br/>
		/// </summary>
		Types8 = unchecked(0),

		/// <summary>
		/// unsigned char<br/>
		/// </summary>
		Typeu8 = unchecked(1),

		/// <summary>
		/// short<br/>
		/// </summary>
		Types16 = unchecked(2),

		/// <summary>
		/// unsigned short<br/>
		/// </summary>
		Typeu16 = unchecked(3),

		/// <summary>
		/// int<br/>
		/// </summary>
		Types32 = unchecked(4),

		/// <summary>
		/// unsigned int<br/>
		/// </summary>
		Typeu32 = unchecked(5),

		/// <summary>
		/// long long  __int64<br/>
		/// </summary>
		Types64 = unchecked(6),

		/// <summary>
		/// unsigned long long  unsigned __int64<br/>
		/// </summary>
		Typeu64 = unchecked(7),

		/// <summary>
		/// float<br/>
		/// </summary>
		Float = unchecked(8),

		/// <summary>
		/// double<br/>
		/// </summary>
		Double = unchecked(9),

		Count = unchecked(10),
	}

	public enum ImGuiDir
	{
		None = unchecked(-1),
		Left = unchecked(0),
		Right = unchecked(1),
		Up = unchecked(2),
		Down = unchecked(3),
		Count = unchecked(4),
	}

	public enum ImGuiSortDirection
	{
		None = unchecked(0),
		/// <summary>
		/// Ascending = 0-&gt;9, A-&gt;Z etc.<br/>
		/// </summary>
		Ascending = unchecked(1),

		/// <summary>
		/// Descending = 9-&gt;0, Z-&gt;A etc.<br/>
		/// </summary>
		Descending = unchecked(2),

	}

	public enum ImGuiNavInput
	{
		Activate = unchecked(0),
		Cancel = unchecked(1),
		Input = unchecked(2),
		Menu = unchecked(3),
		DpadLeft = unchecked(4),
		DpadRight = unchecked(5),
		DpadUp = unchecked(6),
		DpadDown = unchecked(7),
		InputlStickLeft = unchecked(8),
		InputlStickRight = unchecked(9),
		InputlStickUp = unchecked(10),
		InputlStickDown = unchecked(11),
		FocusPrev = unchecked(12),
		FocusNext = unchecked(13),
		TweakSlow = unchecked(14),
		TweakFast = unchecked(15),
		Count = unchecked(16),
	}

	public enum ImGuiConfigFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Master keyboard navigation enable flag. Enable full Tabbing + directional arrows + spaceenter to activate.<br/>
		/// </summary>
		NavEnableKeyboard = unchecked(1),

		/// <summary>
		/// Master gamepad navigation enable flag. Backend also needs to set ImGuiBackendFlags_HasGamepad.<br/>
		/// </summary>
		NavEnableGamepad = unchecked(2),

		/// <summary>
		/// Instruct navigation to move the mouse cursor. May be useful on TVconsole systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.<br/>
		/// </summary>
		NavEnableSetMousePos = unchecked(4),

		/// <summary>
		/// Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.<br/>
		/// </summary>
		NavNoCaptureKeyboard = unchecked(8),

		/// <summary>
		/// Instruct imgui to clear mouse positionbuttons in NewFrame(). This allows ignoring the mouse information set by the backend.<br/>
		/// </summary>
		NoMouse = unchecked(16),

		/// <summary>
		/// Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.<br/>
		/// </summary>
		NoMouseCursorChange = unchecked(32),

		/// <summary>
		/// Docking enable flags.<br/>
		/// </summary>
		DockingEnable = unchecked(64),

		/// <summary>
		/// Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)<br/>
		/// </summary>
		ViewportsEnable = unchecked(1024),

		/// <summary>
		/// [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.<br/>
		/// </summary>
		DpiEnableScaleViewports = unchecked(16384),

		/// <summary>
		/// [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas andor fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.<br/>
		/// </summary>
		DpiEnableScaleFonts = unchecked(32768),

		/// <summary>
		/// Application is SRGB-aware.<br/>
		/// </summary>
		IsSrgb = unchecked(1048576),

		/// <summary>
		/// Application is using a touch screen instead of a mouse.<br/>
		/// </summary>
		IsTouchScreen = unchecked(2097152),

	}

	public enum ImGuiBackendFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Backend Platform supports gamepad and currently has one connected.<br/>
		/// </summary>
		HasGamepad = unchecked(1),

		/// <summary>
		/// Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.<br/>
		/// </summary>
		HasMouseCursors = unchecked(2),

		/// <summary>
		/// Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).<br/>
		/// </summary>
		HasSetMousePos = unchecked(4),

		/// <summary>
		/// Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.<br/>
		/// </summary>
		RendererHasVtxOffset = unchecked(8),

		/// <summary>
		/// Backend Platform supports multiple viewports.<br/>
		/// </summary>
		PlatformHasViewports = unchecked(1024),

		/// <summary>
		/// Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.<br/>
		/// </summary>
		HasMouseHoveredViewport = unchecked(2048),

		/// <summary>
		/// Backend Renderer supports multiple viewports.<br/>
		/// </summary>
		RendererHasViewports = unchecked(4096),

	}

	public enum ImGuiCol
	{
		Text = unchecked(0),
		TextDisabled = unchecked(1),
		/// <summary>
		/// Background of normal windows<br/>
		/// </summary>
		WindowBg = unchecked(2),

		/// <summary>
		/// Background of child windows<br/>
		/// </summary>
		ChildBg = unchecked(3),

		/// <summary>
		/// Background of popups, menus, tooltips windows<br/>
		/// </summary>
		PopupBg = unchecked(4),

		Border = unchecked(5),
		BorderShadow = unchecked(6),
		/// <summary>
		/// Background of checkbox, radio button, plot, slider, text input<br/>
		/// </summary>
		FrameBg = unchecked(7),

		FrameBgHovered = unchecked(8),
		FrameBgActive = unchecked(9),
		TitleBg = unchecked(10),
		TitleBgActive = unchecked(11),
		TitleBgCollapsed = unchecked(12),
		MenuBarBg = unchecked(13),
		ScrollbarBg = unchecked(14),
		ScrollbarGrab = unchecked(15),
		ScrollbarGrabHovered = unchecked(16),
		ScrollbarGrabActive = unchecked(17),
		CheckMark = unchecked(18),
		SliderGrab = unchecked(19),
		SliderGrabActive = unchecked(20),
		Button = unchecked(21),
		ButtonHovered = unchecked(22),
		ButtonActive = unchecked(23),
		/// <summary>
		/// Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem<br/>
		/// </summary>
		Header = unchecked(24),

		HeaderHovered = unchecked(25),
		HeaderActive = unchecked(26),
		Separator = unchecked(27),
		SeparatorHovered = unchecked(28),
		SeparatorActive = unchecked(29),
		/// <summary>
		/// Resize grip in lower-right and lower-left corners of windows.<br/>
		/// </summary>
		ResizeGrip = unchecked(30),

		ResizeGripHovered = unchecked(31),
		ResizeGripActive = unchecked(32),
		/// <summary>
		/// TabItem in a TabBar<br/>
		/// </summary>
		Tab = unchecked(33),

		TabHovered = unchecked(34),
		TabActive = unchecked(35),
		TabUnfocused = unchecked(36),
		TabUnfocusedActive = unchecked(37),
		/// <summary>
		/// Preview overlay color when about to docking something<br/>
		/// </summary>
		DockingPreview = unchecked(38),

		/// <summary>
		/// Background color for empty node (e.g. CentralNode with no window docked into it)<br/>
		/// </summary>
		DockingEmptyBg = unchecked(39),

		PlotLines = unchecked(40),
		PlotLinesHovered = unchecked(41),
		PlotHistogram = unchecked(42),
		PlotHistogramHovered = unchecked(43),
		/// <summary>
		/// Table header background<br/>
		/// </summary>
		TableHeaderBg = unchecked(44),

		/// <summary>
		/// Table outer and header borders (prefer using Alpha=1.0 here)<br/>
		/// </summary>
		TableBorderStrong = unchecked(45),

		/// <summary>
		/// Table inner borders (prefer using Alpha=1.0 here)<br/>
		/// </summary>
		TableBorderLight = unchecked(46),

		/// <summary>
		/// Table row background (even rows)<br/>
		/// </summary>
		TableRowBg = unchecked(47),

		/// <summary>
		/// Table row background (odd rows)<br/>
		/// </summary>
		TableRowBgAlt = unchecked(48),

		TextSelectedBg = unchecked(49),
		/// <summary>
		/// Rectangle highlighting a drop target<br/>
		/// </summary>
		DragDropTarget = unchecked(50),

		/// <summary>
		/// Gamepadkeyboard: current highlighted item<br/>
		/// </summary>
		NavHighlight = unchecked(51),

		/// <summary>
		/// Highlight window when using CTRL+TAB<br/>
		/// </summary>
		NavWindowingHighlight = unchecked(52),

		/// <summary>
		/// Darkencolorize entire screen behind the CTRL+TAB window list, when active<br/>
		/// </summary>
		NavWindowingDimBg = unchecked(53),

		/// <summary>
		/// Darkencolorize entire screen behind a modal window, when one is active<br/>
		/// </summary>
		ModalWindowDimBg = unchecked(54),

		Count = unchecked(55),
	}

	public enum ImGuiStyleVar
	{
		/// <summary>
		/// float     Alpha<br/>
		/// </summary>
		Alpha = unchecked(0),

		/// <summary>
		/// float     DisabledAlpha<br/>
		/// </summary>
		DisabledAlpha = unchecked(1),

		/// <summary>
		/// ImVec2    WindowPadding<br/>
		/// </summary>
		WindowPadding = unchecked(2),

		/// <summary>
		/// float     WindowRounding<br/>
		/// </summary>
		WindowRounding = unchecked(3),

		/// <summary>
		/// float     WindowBorderSize<br/>
		/// </summary>
		WindowBorderSize = unchecked(4),

		/// <summary>
		/// ImVec2    WindowMinSize<br/>
		/// </summary>
		WindowMinSize = unchecked(5),

		/// <summary>
		/// ImVec2    WindowTitleAlign<br/>
		/// </summary>
		WindowTitleAlign = unchecked(6),

		/// <summary>
		/// float     ChildRounding<br/>
		/// </summary>
		ChildRounding = unchecked(7),

		/// <summary>
		/// float     ChildBorderSize<br/>
		/// </summary>
		ChildBorderSize = unchecked(8),

		/// <summary>
		/// float     PopupRounding<br/>
		/// </summary>
		PopupRounding = unchecked(9),

		/// <summary>
		/// float     PopupBorderSize<br/>
		/// </summary>
		PopupBorderSize = unchecked(10),

		/// <summary>
		/// ImVec2    FramePadding<br/>
		/// </summary>
		FramePadding = unchecked(11),

		/// <summary>
		/// float     FrameRounding<br/>
		/// </summary>
		FrameRounding = unchecked(12),

		/// <summary>
		/// float     FrameBorderSize<br/>
		/// </summary>
		FrameBorderSize = unchecked(13),

		/// <summary>
		/// ImVec2    ItemSpacing<br/>
		/// </summary>
		ItemSpacing = unchecked(14),

		/// <summary>
		/// ImVec2    ItemInnerSpacing<br/>
		/// </summary>
		ItemInnerSpacing = unchecked(15),

		/// <summary>
		/// float     IndentSpacing<br/>
		/// </summary>
		IndentSpacing = unchecked(16),

		/// <summary>
		/// ImVec2    CellPadding<br/>
		/// </summary>
		CellPadding = unchecked(17),

		/// <summary>
		/// float     ScrollbarSize<br/>
		/// </summary>
		ScrollbarSize = unchecked(18),

		/// <summary>
		/// float     ScrollbarRounding<br/>
		/// </summary>
		ScrollbarRounding = unchecked(19),

		/// <summary>
		/// float     GrabMinSize<br/>
		/// </summary>
		GrabMinSize = unchecked(20),

		/// <summary>
		/// float     GrabRounding<br/>
		/// </summary>
		GrabRounding = unchecked(21),

		/// <summary>
		/// float     TabRounding<br/>
		/// </summary>
		TabRounding = unchecked(22),

		/// <summary>
		/// ImVec2    ButtonTextAlign<br/>
		/// </summary>
		ButtonTextAlign = unchecked(23),

		/// <summary>
		/// ImVec2    SelectableTextAlign<br/>
		/// </summary>
		SelectableTextAlign = unchecked(24),

		/// <summary>
		/// float  SeparatorTextBorderSize<br/>
		/// </summary>
		SeparatorTextBorderSize = unchecked(25),

		/// <summary>
		/// ImVec2    SeparatorTextAlign<br/>
		/// </summary>
		SeparatorTextAlign = unchecked(26),

		/// <summary>
		/// ImVec2    SeparatorTextPadding<br/>
		/// </summary>
		SeparatorTextPadding = unchecked(27),

		Count = unchecked(28),
	}

	public enum ImGuiButtonFlags
	{
		None = unchecked(0),
		/// <summary>
		/// React on left mouse button (default)<br/>
		/// </summary>
		MouseButtonLeft = unchecked(1),

		/// <summary>
		/// React on right mouse button<br/>
		/// </summary>
		MouseButtonRight = unchecked(2),

		/// <summary>
		/// React on center mouse button<br/>
		/// </summary>
		MouseButtonMiddle = unchecked(4),

		MouseButtonMask = unchecked(7),
		MouseButtonDefault = MouseButtonLeft,
	}

	public enum ImGuiColorEditFlags
	{
		None = unchecked(0),
		/// <summary>
		/// ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).<br/>
		/// </summary>
		NoAlpha = unchecked(2),

		/// <summary>
		/// ColorEdit: disable picker when clicking on color square.<br/>
		/// </summary>
		NoPicker = unchecked(4),

		/// <summary>
		/// ColorEdit: disable toggling options menu when right-clicking on inputssmall preview.<br/>
		/// </summary>
		NoOptions = unchecked(8),

		/// <summary>
		/// ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)<br/>
		/// </summary>
		NoSmallPreview = unchecked(16),

		/// <summary>
		/// ColorEdit, ColorPicker: disable inputs sliderstext widgets (e.g. to show only the small preview color square).<br/>
		/// </summary>
		NoInputs = unchecked(32),

		/// <summary>
		/// ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.<br/>
		/// </summary>
		NoTooltip = unchecked(64),

		/// <summary>
		/// ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).<br/>
		/// </summary>
		NoLabel = unchecked(128),

		/// <summary>
		/// ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.<br/>
		/// </summary>
		NoSidePreview = unchecked(256),

		/// <summary>
		/// ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.<br/>
		/// </summary>
		NoDragDrop = unchecked(512),

		/// <summary>
		/// ColorButton: disable border (which is enforced by default)<br/>
		/// </summary>
		NoBorder = unchecked(1024),

		/// <summary>
		/// ColorEdit, ColorPicker: show vertical alpha bargradient in picker.<br/>
		/// </summary>
		AlphaBar = unchecked(65536),

		/// <summary>
		/// ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.<br/>
		/// </summary>
		AlphaPreview = unchecked(131072),

		/// <summary>
		/// ColorEdit, ColorPicker, ColorButton: display half opaque  half checkerboard, instead of opaque.<br/>
		/// </summary>
		AlphaPreviewHalf = unchecked(262144),

		/// <summary>
		/// (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).<br/>
		/// </summary>
		Hdr = unchecked(524288),

		/// <summary>
		/// [Display]     ColorEdit: override _display_ type among RGBHSVHex. ColorPicker: select any combination using one or more of RGBHSVHex.<br/>
		/// </summary>
		DisplayRgb = unchecked(1048576),

		/// <summary>
		/// [Display]     "<br/>
		/// </summary>
		DisplayHsv = unchecked(2097152),

		/// <summary>
		/// [Display]     "<br/>
		/// </summary>
		DisplayHex = unchecked(4194304),

		/// <summary>
		/// [DataType]    ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.<br/>
		/// </summary>
		Uint8 = unchecked(8388608),

		/// <summary>
		/// [DataType]    ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.<br/>
		/// </summary>
		Float = unchecked(16777216),

		/// <summary>
		/// [Picker]      ColorPicker: bar for Hue, rectangle for SatValue.<br/>
		/// </summary>
		PickerHueBar = unchecked(33554432),

		/// <summary>
		/// [Picker]      ColorPicker: wheel for Hue, triangle for SatValue.<br/>
		/// </summary>
		PickerHueWheel = unchecked(67108864),

		/// <summary>
		/// [Input]       ColorEdit, ColorPicker: input and output data in RGB format.<br/>
		/// </summary>
		InputRgb = unchecked(134217728),

		/// <summary>
		/// [Input]       ColorEdit, ColorPicker: input and output data in HSV format.<br/>
		/// </summary>
		InputHsv = unchecked(268435456),

		DefaultOptions = unchecked(177209344),
		DisplayMask = unchecked(7340032),
		DataTypeMask = unchecked(25165824),
		PickerMask = unchecked(100663296),
		InputMask = unchecked(402653184),
	}

	public enum ImGuiSliderFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Clamp value to minmax bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.<br/>
		/// </summary>
		AlwaysClamp = unchecked(16),

		/// <summary>
		/// Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.<br/>
		/// </summary>
		Logarithmic = unchecked(32),

		/// <summary>
		/// Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)<br/>
		/// </summary>
		NoRoundToFormat = unchecked(64),

		/// <summary>
		/// Disable CTRL+Click or Enter key allowing to input text directly into the widget<br/>
		/// </summary>
		NoInput = unchecked(128),

		/// <summary>
		/// [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.<br/>
		/// </summary>
		InvalidMask = unchecked(1879048207),

	}

	public enum ImGuiMouseButton
	{
		Left = unchecked(0),
		Right = unchecked(1),
		Middle = unchecked(2),
		Count = unchecked(5),
	}

	public enum ImGuiMouseCursor
	{
		None = unchecked(-1),
		Arrow = unchecked(0),
		/// <summary>
		/// When hovering over InputText, etc.<br/>
		/// </summary>
		TextInput = unchecked(1),

		/// <summary>
		/// (Unused by Dear ImGui functions)<br/>
		/// </summary>
		ResizeAll = unchecked(2),

		/// <summary>
		/// When hovering over a horizontal border<br/>
		/// </summary>
		ResizeNs = unchecked(3),

		/// <summary>
		/// When hovering over a vertical border or a column<br/>
		/// </summary>
		ResizeEw = unchecked(4),

		/// <summary>
		/// When hovering over the bottom-left corner of a window<br/>
		/// </summary>
		ResizeNesw = unchecked(5),

		/// <summary>
		/// When hovering over the bottom-right corner of a window<br/>
		/// </summary>
		ResizeNwse = unchecked(6),

		/// <summary>
		/// (Unused by Dear ImGui functions. Use for e.g. hyperlinks)<br/>
		/// </summary>
		Hand = unchecked(7),

		/// <summary>
		/// When hovering something with disallowed interaction. Usually a crossed circle.<br/>
		/// </summary>
		NotAllowed = unchecked(8),

		Count = unchecked(9),
	}

	public enum ImGuiCond
	{
		/// <summary>
		/// No condition (always set the variable), same as _Always<br/>
		/// </summary>
		None = unchecked(0),

		/// <summary>
		/// No condition (always set the variable), same as _None<br/>
		/// </summary>
		Always = unchecked(1),

		/// <summary>
		/// Set the variable once per runtime session (only the first call will succeed)<br/>
		/// </summary>
		Once = unchecked(2),

		/// <summary>
		/// Set the variable if the objectwindow has no persistently saved data (no entry in .ini file)<br/>
		/// </summary>
		FirstUseEver = unchecked(4),

		/// <summary>
		/// Set the variable if the objectwindow is appearing after being hiddeninactive (or the first time)<br/>
		/// </summary>
		Appearing = unchecked(8),

	}

	public enum ImDrawFlags
	{
		None = unchecked(0),
		/// <summary>
		/// PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)<br/>
		/// </summary>
		Closed = unchecked(1),

		/// <summary>
		/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x01.<br/>
		/// </summary>
		RoundCornersTopLeft = unchecked(16),

		/// <summary>
		/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x02.<br/>
		/// </summary>
		RoundCornersTopRight = unchecked(32),

		/// <summary>
		/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding &gt; 0.0f, we default to all corners). Was 0x04.<br/>
		/// </summary>
		RoundCornersBottomLeft = unchecked(64),

		/// <summary>
		/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding &gt; 0.0f, we default to all corners). Wax 0x08.<br/>
		/// </summary>
		RoundCornersBottomRight = unchecked(128),

		/// <summary>
		/// AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding &gt; 0.0f). This is NOT zero, NOT an implicit flag!<br/>
		/// </summary>
		RoundCornersNone = unchecked(256),

		RoundCornersTop = unchecked(48),
		RoundCornersBottom = unchecked(192),
		RoundCornersLeft = unchecked(80),
		RoundCornersRight = unchecked(160),
		RoundCornersAll = unchecked(240),
		/// <summary>
		/// Default to ALL corners if none of the _RoundCornersXX flags are specified.<br/>
		/// </summary>
		RoundCornersDefault = RoundCornersAll,

		RoundCornersMask = unchecked(496),
	}

	public enum ImDrawListFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Enable anti-aliased linesborders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)<br/>
		/// </summary>
		AntiAliasedLines = unchecked(1),

		/// <summary>
		/// Enable anti-aliased linesborders using textures when possible. Require backend to render with bilinear filtering (NOT pointnearest filtering).<br/>
		/// </summary>
		AntiAliasedLinesUseTex = unchecked(2),

		/// <summary>
		/// Enable anti-aliased edge around filled shapes (rounded rectangles, circles).<br/>
		/// </summary>
		AntiAliasedFill = unchecked(4),

		/// <summary>
		/// Can emit 'VtxOffset &gt; 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.<br/>
		/// </summary>
		AllowVtxOffset = unchecked(8),

	}

	public enum ImFontAtlasFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Don't round the height to next power of two<br/>
		/// </summary>
		NoPowerOfTwoHeight = unchecked(1),

		/// <summary>
		/// Don't build software mouse cursors into the atlas (save a little texture memory)<br/>
		/// </summary>
		NoMouseCursors = unchecked(2),

		/// <summary>
		/// Don't build thick line textures into the atlas (save a little texture memory, allow support for pointnearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPUGPU).<br/>
		/// </summary>
		NoBakedLines = unchecked(4),

	}

	public enum ImGuiViewportFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Represent a Platform Window<br/>
		/// </summary>
		IsPlatformWindow = unchecked(1),

		/// <summary>
		/// Represent a Platform Monitor (unused yet)<br/>
		/// </summary>
		IsPlatformMonitor = unchecked(2),

		/// <summary>
		/// Platform Window: Was createdmanaged by the user application? (rather than our backend)<br/>
		/// </summary>
		OwnedByApp = unchecked(4),

		/// <summary>
		/// Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popupstooltips)<br/>
		/// </summary>
		NoDecoration = unchecked(8),

		/// <summary>
		/// Platform Window: Disable platform task bar icon (generally set on popupstooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)<br/>
		/// </summary>
		NoTaskBarIcon = unchecked(16),

		/// <summary>
		/// Platform Window: Don't take focus when created.<br/>
		/// </summary>
		NoFocusOnAppearing = unchecked(32),

		/// <summary>
		/// Platform Window: Don't take focus when clicked on.<br/>
		/// </summary>
		NoFocusOnClick = unchecked(64),

		/// <summary>
		/// Platform Window: Make mouse pass through so we can drag this window while peaking behind it.<br/>
		/// </summary>
		NoInputs = unchecked(128),

		/// <summary>
		/// Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).<br/>
		/// </summary>
		NoRendererClear = unchecked(256),

		/// <summary>
		/// Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).<br/>
		/// </summary>
		NoAutoMerge = unchecked(512),

		/// <summary>
		/// Platform Window: Display on top (for tooltips only).<br/>
		/// </summary>
		TopMost = unchecked(1024),

		/// <summary>
		/// Viewport can host multiple imgui windows (secondary viewports are associated to a single window).  FIXME: In practice there's still probably code making the assumption that this is always and only on the MainViewport. Will fix once we add support for "no main viewport".<br/>
		/// </summary>
		CanHostOtherWindows = unchecked(2048),

		/// <summary>
		/// Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport possize for clipping window or testing if they are contained in the viewport.<br/>
		/// </summary>
		IsMinimized = unchecked(4096),

		/// <summary>
		/// Platform Window: Window is focused (last call to Platform_GetWindowFocus() returned true)<br/>
		/// </summary>
		IsFocused = unchecked(8192),

	}

	public enum ImGuiItemFlags
	{
		None = unchecked(0),
		/// <summary>
		/// false      Disable keyboard tabbing. This is a "lighter" version of ImGuiItemFlags_NoNav.<br/>
		/// </summary>
		NoTabStop = unchecked(1),

		/// <summary>
		/// false      Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings.<br/>
		/// </summary>
		ButtonRepeat = unchecked(2),

		/// <summary>
		/// false      Disable interactions but doesn't affect visuals. See BeginDisabled()EndDisabled(). See github.comocornutimguiissues211<br/>
		/// </summary>
		Disabled = unchecked(4),

		/// <summary>
		/// false      Disable any form of focusing (keyboardgamepad directional navigation and SetKeyboardFocusHere() calls)<br/>
		/// </summary>
		NoNav = unchecked(8),

		/// <summary>
		/// false      Disable item being a candidate for default focus (e.g. used by title bar items)<br/>
		/// </summary>
		NoNavDefaultFocus = unchecked(16),

		/// <summary>
		/// false      Disable MenuItemSelectable() automatically closing their popup window<br/>
		/// </summary>
		SelectableDontClosePopup = unchecked(32),

		/// <summary>
		/// false      [BETA] Represent a mixedindeterminate value, generally multi-selection where values differ. Currently only supported by Checkbox() (later should support all sorts of widgets)<br/>
		/// </summary>
		MixedValue = unchecked(64),

		/// <summary>
		/// false      [ALPHA] Allow hovering interactions but underlying value is not changed.<br/>
		/// </summary>
		ReadOnly = unchecked(128),

		/// <summary>
		/// false      Disable hoverable check in ItemHoverable()<br/>
		/// </summary>
		NoWindowHoverableCheck = unchecked(256),

		/// <summary>
		/// false      Allow being overlapped by another widget. Not-hovered to Hovered transition deferred by a frame.<br/>
		/// </summary>
		ItemflagsAllowOverlap = unchecked(512),

		/// <summary>
		/// false      [WIP] Auto-activate input mode when tab focused. Currently only used and supported by a few items before it becomes a generic feature.<br/>
		/// </summary>
		Inputable = unchecked(1024),

	}

	public enum ImGuiItemStatusFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Mouse position is within item rectangle (does NOT mean that the window is in correct z-order and can be hovered!, this is only one part of the most-common IsItemHovered test)<br/>
		/// </summary>
		HoveredRect = unchecked(1),

		/// <summary>
		/// g.LastItemData.DisplayRect is valid<br/>
		/// </summary>
		HasDisplayRect = unchecked(2),

		/// <summary>
		/// Value exposed by item was edited in the current frame (should match the bool return value of most widgets)<br/>
		/// </summary>
		Edited = unchecked(4),

		/// <summary>
		/// Set when Selectable(), TreeNode() reports toggling a selection. We can't report "Selected", only state changes, in order to easily handle clipping with less issues.<br/>
		/// </summary>
		ToggledSelection = unchecked(8),

		/// <summary>
		/// Set when TreeNode() reports toggling their open state.<br/>
		/// </summary>
		ToggledOpen = unchecked(16),

		/// <summary>
		/// Set if the widgetgroup is able to provide data for the ImGuiItemStatusFlags_Deactivated flag.<br/>
		/// </summary>
		HasDeactivated = unchecked(32),

		/// <summary>
		/// Only valid if ImGuiItemStatusFlags_HasDeactivated is set.<br/>
		/// </summary>
		Deactivated = unchecked(64),

		/// <summary>
		/// Override the HoveredWindow test to allow cross-window hover testing.<br/>
		/// </summary>
		HoveredWindow = unchecked(128),

		/// <summary>
		/// Set when the Focusable item just got focused by Tabbing (FIXME: to be removed soon)<br/>
		/// </summary>
		FocusedByTabbing = unchecked(256),

		/// <summary>
		/// [WIP] Set when item is overlapping the current clipping rectangle (Used internally. Please don't use yet: APIsystem will change as we refactor Itemadd()).<br/>
		/// </summary>
		Visible = unchecked(512),

	}

	public enum ImGuiHoveredFlagsPrivate
	{
		DelayMask = unchecked(122880),
		AllowedMaskForIsWindowHovered = unchecked(6335),
		AllowedMaskForIsItemHovered = unchecked(130976),
	}

	public enum ImGuiInputTextFlagsPrivate
	{
		/// <summary>
		/// For internal use by InputTextMultiline()<br/>
		/// </summary>
		Multiline = unchecked(67108864),

		/// <summary>
		/// For internal use by functions using InputText() before reformatting data<br/>
		/// </summary>
		NoMarkEdited = unchecked(134217728),

		/// <summary>
		/// For internal use by TempInputText(), will skip calling ItemAdd(). Require bounding-box to strictly match.<br/>
		/// </summary>
		MergedItem = unchecked(268435456),

	}

	public enum ImGuiButtonFlagsPrivate
	{
		/// <summary>
		/// return true on click (mouse down event)<br/>
		/// </summary>
		PressedOnClick = unchecked(16),

		/// <summary>
		/// [Default] return true on click + release on same item &lt;-- this is what the majority of Button are using<br/>
		/// </summary>
		PressedOnClickRelease = unchecked(32),

		/// <summary>
		/// return true on click + release even if the release event is not done while hovering the item<br/>
		/// </summary>
		PressedOnClickReleaseAnywhere = unchecked(64),

		/// <summary>
		/// return true on release (default requires click+release)<br/>
		/// </summary>
		PressedOnRelease = unchecked(128),

		/// <summary>
		/// return true on double-click (default requires click+release)<br/>
		/// </summary>
		PressedOnDoubleClick = unchecked(256),

		/// <summary>
		/// return true when held into while we are drag and dropping another item (used by e.g. tree nodes, collapsing headers)<br/>
		/// </summary>
		PressedOnDragDropHold = unchecked(512),

		/// <summary>
		/// hold to repeat<br/>
		/// </summary>
		Repeat = unchecked(1024),

		/// <summary>
		/// allow interactions even if a child window is overlapping<br/>
		/// </summary>
		FlattenChildren = unchecked(2048),

		/// <summary>
		/// require previous frame HoveredId to either match id or be null before being usable.<br/>
		/// </summary>
		AllowOverlap = unchecked(4096),

		/// <summary>
		/// disable automatically closing parent popup on press  [UNUSED]<br/>
		/// </summary>
		DontClosePopups = unchecked(8192),

		/// <summary>
		/// vertically align button to match text baseline - ButtonEx() only  FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine<br/>
		/// </summary>
		AlignTextBaseLine = unchecked(32768),

		/// <summary>
		/// disable mouse interaction if a key modifier is held<br/>
		/// </summary>
		NoKeyModifiers = unchecked(65536),

		/// <summary>
		/// don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)<br/>
		/// </summary>
		NoHoldingActiveId = unchecked(131072),

		/// <summary>
		/// don't override navigation focus when activated (FIXME: this is essentially used everytime an item uses ImGuiItemFlags_NoNav, but because legacy specs don't requires LastItemData to be set ButtonBehavior(), we can't poll g.LastItemData.InFlags)<br/>
		/// </summary>
		NoNavFocus = unchecked(262144),

		/// <summary>
		/// don't report as hovered when nav focus is on this item<br/>
		/// </summary>
		NoHoveredOnFocus = unchecked(524288),

		/// <summary>
		/// don't set keyinput owner on the initial click (note: mouse buttons are keys! often, the key in question will be ImGuiKey_MouseLeft!)<br/>
		/// </summary>
		NoSetKeyOwner = unchecked(1048576),

		/// <summary>
		/// don't test keyinput owner when polling the key (note: mouse buttons are keys! often, the key in question will be ImGuiKey_MouseLeft!)<br/>
		/// </summary>
		NoTestKeyOwner = unchecked(2097152),

		PressedOnMask = unchecked(1008),
		PressedOnDefault = PressedOnClickRelease,
	}

	public enum ImGuiComboFlagsPrivate
	{
		/// <summary>
		/// enable BeginComboPreview()<br/>
		/// </summary>
		CustomPreview = unchecked(1048576),

	}

	public enum ImGuiSliderFlagsPrivate
	{
		/// <summary>
		/// Should this slider be orientated vertically?<br/>
		/// </summary>
		Vertical = unchecked(1048576),

		ReadOnly = unchecked(2097152),
	}

	public enum ImGuiSelectableFlagsPrivate
	{
		NoHoldingActiveId = unchecked(1048576),
		/// <summary>
		/// (WIP) Auto-select when moved into. This is not exposed in public API as to handle multi-select and modifiers we will need user to explicitly control focus scope. May be replaced with a BeginSelection() API.<br/>
		/// </summary>
		SelectOnNav = unchecked(2097152),

		/// <summary>
		/// Override button behavior to react on Click (default is Click+Release)<br/>
		/// </summary>
		SelectOnClick = unchecked(4194304),

		/// <summary>
		/// Override button behavior to react on Release (default is Click+Release)<br/>
		/// </summary>
		SelectOnRelease = unchecked(8388608),

		/// <summary>
		/// Span all avail width even if we declared less for layout purpose. FIXME: We may be able to remove this (added in 6251d379, 2bcafc86 for menus)<br/>
		/// </summary>
		SpanAvailWidth = unchecked(16777216),

		/// <summary>
		/// Set NavFocus ID on mouse hover (used by MenuItem)<br/>
		/// </summary>
		SetNavIdOnHover = unchecked(33554432),

		/// <summary>
		/// Disable padding each side with ItemSpacing * 0.5f<br/>
		/// </summary>
		NoPadWithHalfSpacing = unchecked(67108864),

		/// <summary>
		/// Don't set keyinput owner on the initial click (note: mouse buttons are keys! often, the key in question will be ImGuiKey_MouseLeft!)<br/>
		/// </summary>
		NoSetKeyOwner = unchecked(134217728),

	}

	public enum ImGuiTreeNodeFlagsPrivate
	{
		ClipLabelForTrailingButton = unchecked(1048576),
		/// <summary>
		/// (FIXME-WIP) Turn Down arrow into an Up arrow, but reversed trees (#6517)<br/>
		/// </summary>
		UpsideDownArrow = unchecked(2097152),

	}

	public enum ImGuiSeparatorFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar<br/>
		/// </summary>
		Horizontal = unchecked(1),

		Vertical = unchecked(2),
		/// <summary>
		/// Make separator cover all columns of a legacy Columns() set.<br/>
		/// </summary>
		SpanAllColumns = unchecked(4),

	}

	public enum ImGuiFocusRequestFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Find last focused child (if any) and focus it instead.<br/>
		/// </summary>
		RestoreFocusedChild = unchecked(1),

		/// <summary>
		/// Do not set focus if the window is below a modal.<br/>
		/// </summary>
		UnlessBelowModal = unchecked(2),

	}

	public enum ImGuiTextFlags
	{
		None = unchecked(0),
		NoWidthForLargeClippedText = unchecked(1),
	}

	public enum ImGuiTooltipFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Clearignore previously submitted tooltip (defaults to append)<br/>
		/// </summary>
		OverridePrevious = unchecked(2),

	}

	public enum ImGuiLayoutType
	{
		Horizontal = unchecked(0),
		Vertical = unchecked(1),
	}

	public enum ImGuiPlotType
	{
		Lines = unchecked(0),
		Histogram = unchecked(1),
	}

	public enum ImGuiPopupPositionPolicy
	{
		Default = unchecked(0),
		ComboBox = unchecked(1),
		Tooltip = unchecked(2),
	}

	public enum ImGuiDataTypePrivate
	{
		String = unchecked(11),
		Pointer = unchecked(12),
		Id = unchecked(13),
	}

	public enum ImGuiNextWindowDataFlags
	{
		None = unchecked(0),
		HasPos = unchecked(1),
		HasSize = unchecked(2),
		HasContentSize = unchecked(4),
		HasCollapsed = unchecked(8),
		HasSizeConstraint = unchecked(16),
		HasFocus = unchecked(32),
		HasBgAlpha = unchecked(64),
		HasScroll = unchecked(128),
		HasViewport = unchecked(256),
		HasDock = unchecked(512),
		HasWindowClass = unchecked(1024),
	}

	public enum ImGuiNextItemDataFlags
	{
		None = unchecked(0),
		HasWidth = unchecked(1),
		HasOpen = unchecked(2),
	}

	public enum ImGuiInputFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.<br/>
		/// </summary>
		Repeat = unchecked(1),

		/// <summary>
		/// Repeat rate: Regular (default)<br/>
		/// </summary>
		RepeatRateDefault = unchecked(2),

		/// <summary>
		/// Repeat rate: Fast<br/>
		/// </summary>
		RepeatRateNavMove = unchecked(4),

		/// <summary>
		/// Repeat rate: Faster<br/>
		/// </summary>
		RepeatRateNavTweak = unchecked(8),

		RepeatRateMask = unchecked(14),
		/// <summary>
		/// Only set if item is hovered (default to both)<br/>
		/// </summary>
		CondHovered = unchecked(16),

		/// <summary>
		/// Only set if item is active (default to both)<br/>
		/// </summary>
		CondActive = unchecked(32),

		CondDefault = unchecked(48),
		CondMask = unchecked(48),
		/// <summary>
		/// Access to key data will require EXPLICIT owner ID (ImGuiKeyOwner_Any0 will NOT accepted for polling). Cleared at end of frame. This is useful to make input-owner-aware code steal keys from non-input-owner-aware code.<br/>
		/// </summary>
		LockThisFrame = unchecked(64),

		/// <summary>
		/// Access to key data will require EXPLICIT owner ID (ImGuiKeyOwner_Any0 will NOT accepted for polling). Cleared when the key is released or at end of each frame if key is released. This is useful to make input-owner-aware code steal keys from non-input-owner-aware code.<br/>
		/// </summary>
		LockUntilRelease = unchecked(128),

		/// <summary>
		/// (Default) Register focused route: Accept inputs if window is in focus stack. Deep-most focused window takes inputs. ActiveId takes inputs over deep-most focused window.<br/>
		/// </summary>
		RouteFocused = unchecked(256),

		/// <summary>
		/// Register route globally (lowest priority: unless a focused window or active item registered the route) -&gt; recommended Global priority.<br/>
		/// </summary>
		RouteGlobalLow = unchecked(512),

		/// <summary>
		/// Register route globally (medium priority: unless an active item registered the route, e.g. CTRL+A registered by InputText).<br/>
		/// </summary>
		RouteGlobal = unchecked(1024),

		/// <summary>
		/// Register route globally (highest priority: unlikely you need to use that: will interfere with every active items)<br/>
		/// </summary>
		RouteGlobalHigh = unchecked(2048),

		/// <summary>
		/// _Always not part of this!<br/>
		/// </summary>
		RouteMask = unchecked(3840),

		/// <summary>
		/// Do not register route, poll keys directly.<br/>
		/// </summary>
		RouteAlways = unchecked(4096),

		/// <summary>
		/// Global routes will not be applied if underlying backgroundvoid is focused (== no Dear ImGui windows are focused). Useful for overlay applications.<br/>
		/// </summary>
		RouteUnlessBgFocused = unchecked(8192),

		RouteExtraMask = unchecked(12288),
		SupportedByIsKeyPressed = unchecked(15),
		SupportedByShortcut = unchecked(16143),
		SupportedBySetKeyOwner = unchecked(192),
		SupportedBySetItemKeyOwner = unchecked(240),
	}

	public enum ImGuiActivateFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Favor activation that requires keyboard text input (e.g. for SliderDrag). Default for Enter key.<br/>
		/// </summary>
		PreferInput = unchecked(1),

		/// <summary>
		/// Favor activation for tweaking with arrows or gamepad (e.g. for SliderDrag). Default for Space key and if keyboard is not used.<br/>
		/// </summary>
		PreferTweak = unchecked(2),

		/// <summary>
		/// Request widget to preserve state if it can (e.g. InputText will try to preserve cursorselection)<br/>
		/// </summary>
		TryToPreserveState = unchecked(4),

	}

	public enum ImGuiScrollFlags
	{
		None = unchecked(0),
		/// <summary>
		/// If item is not visible: scroll as little as possible on X axis to bring item back into view [default for X axis]<br/>
		/// </summary>
		KeepVisibleEdgex = unchecked(1),

		/// <summary>
		/// If item is not visible: scroll as little as possible on Y axis to bring item back into view [default for Y axis for windows that are already visible]<br/>
		/// </summary>
		KeepVisibleEdgey = unchecked(2),

		/// <summary>
		/// If item is not visible: scroll to make the item centered on X axis [rarely used]<br/>
		/// </summary>
		KeepVisibleCenterx = unchecked(4),

		/// <summary>
		/// If item is not visible: scroll to make the item centered on Y axis<br/>
		/// </summary>
		KeepVisibleCentery = unchecked(8),

		/// <summary>
		/// Always center the result item on X axis [rarely used]<br/>
		/// </summary>
		AlwaysCenterx = unchecked(16),

		/// <summary>
		/// Always center the result item on Y axis [default for Y axis for appearing window)<br/>
		/// </summary>
		AlwaysCentery = unchecked(32),

		/// <summary>
		/// Disable forwarding scrolling to parent window if required to keep itemrect visible (only scroll window the function was applied to).<br/>
		/// </summary>
		NoScrollParent = unchecked(64),

		Maskx = unchecked(21),
		Masky = unchecked(42),
	}

	public enum ImGuiNavHighlightFlags
	{
		None = unchecked(0),
		TypeDefault = unchecked(1),
		TypeThin = unchecked(2),
		/// <summary>
		/// Draw rectangular highlight if (g.NavId == id) _even_ when using the mouse.<br/>
		/// </summary>
		AlwaysDraw = unchecked(4),

		NoRounding = unchecked(8),
	}

	public enum ImGuiNavMoveFlags
	{
		None = unchecked(0),
		/// <summary>
		/// On failed request, restart from opposite side<br/>
		/// </summary>
		Loopx = unchecked(1),

		Loopy = unchecked(2),
		/// <summary>
		/// On failed request, request from opposite side one line down (when NavDir==right) or one line up (when NavDir==left)<br/>
		/// </summary>
		Wrapx = unchecked(4),

		/// <summary>
		/// This is not super useful but provided for completeness<br/>
		/// </summary>
		Wrapy = unchecked(8),

		WrapMask = unchecked(15),
		/// <summary>
		/// Allow scoring and considering the current NavId as a move target candidate. This is used when the move source is offset (e.g. pressing PageDown actually needs to send a Up move request, if we are pressing PageDown from the bottom-most item we need to stay in place)<br/>
		/// </summary>
		AllowCurrentNavId = unchecked(16),

		/// <summary>
		/// Store alternate result in NavMoveResultLocalVisible that only comprise elements that are already fully visible (used by PageUpPageDown)<br/>
		/// </summary>
		AlsoScoreVisibleSet = unchecked(32),

		/// <summary>
		/// Force scrolling to minmax (used by HomeEnd)  FIXME-NAV: Aim to remove or reword, probably unnecessary<br/>
		/// </summary>
		ScrollToEdgey = unchecked(64),

		Forwarded = unchecked(128),
		/// <summary>
		/// Dummy scoring for debug purpose, don't apply result<br/>
		/// </summary>
		DebugNoResult = unchecked(256),

		/// <summary>
		/// Requests from focus API can landfocusactivate items even if they are marked with _NoTabStop (see NavProcessItemForTabbingRequest() for details)<br/>
		/// </summary>
		FocusApi = unchecked(512),

		/// <summary>
		/// == Focus + Activate if item is Inputable + DontChangeNavHighlight<br/>
		/// </summary>
		Tabbing = unchecked(1024),

		/// <summary>
		/// Activateselect target item.<br/>
		/// </summary>
		Activate = unchecked(2048),

		/// <summary>
		/// Don't trigger selection by not setting g.NavJustMovedTo<br/>
		/// </summary>
		NoSelect = unchecked(4096),

		/// <summary>
		/// Do not alter the visible state of keyboard vs mouse nav highlight<br/>
		/// </summary>
		NoSetNavHighlight = unchecked(8192),

	}

	public enum ImGuiOldColumnFlags
	{
		None = unchecked(0),
		/// <summary>
		/// Disable column dividers<br/>
		/// </summary>
		NoBorder = unchecked(1),

		/// <summary>
		/// Disable resizing columns when clicking on the dividers<br/>
		/// </summary>
		NoResize = unchecked(2),

		/// <summary>
		/// Disable column width preservation when adjusting columns<br/>
		/// </summary>
		NoPreserveWidths = unchecked(4),

		/// <summary>
		/// Disable forcing columns to fit within window<br/>
		/// </summary>
		NoForceWithinWindow = unchecked(8),

		/// <summary>
		/// (WIP) Restore pre-1.51 behavior of extending the parent window contents size but _without affecting the columns width at all_. Will eventually remove.<br/>
		/// </summary>
		GrowParentContentsSize = unchecked(16),

	}

	public enum ImGuiDockNodeFlagsPrivate
	{
		/// <summary>
		/// Local, Saved   A dockspace is a node that occupy space within an existing user window. Otherwise the node is floating and create its own window.<br/>
		/// </summary>
		Space = unchecked(1024),

		/// <summary>
		/// Local, Saved   The central node has 2 main properties: stay visible when empty, only use "remaining" spaces from its neighbor.<br/>
		/// </summary>
		CentralNode = unchecked(2048),

		/// <summary>
		/// Local, Saved   Tab bar is completely unavailable. No triangle in the corner to enable it back.<br/>
		/// </summary>
		NoTabBar = unchecked(4096),

		/// <summary>
		/// Local, Saved   Tab bar is hidden, with a triangle in the corner to show it again (NB: actual tab-bar instance may be destroyed as this is only used for single-window tab bar)<br/>
		/// </summary>
		HiddenTabBar = unchecked(8192),

		/// <summary>
		/// Local, Saved   Disable windowdocking menu (that one that appears instead of the collapse button)<br/>
		/// </summary>
		NoWindowMenuButton = unchecked(16384),

		/// <summary>
		/// Local, Saved<br/>
		/// </summary>
		NoCloseButton = unchecked(32768),

		/// <summary>
		/// Local, Saved   Disable any form of docking in this dockspace or individual node. (On a whole dockspace, this pretty much defeat the purpose of using a dockspace at all). Note: when turned on, existing docked nodes will be preserved.<br/>
		/// </summary>
		NoDocking = unchecked(65536),

		/// <summary>
		/// [EXPERIMENTAL] Prevent another windownode from splitting this node.<br/>
		/// </summary>
		NoDockingSplitMe = unchecked(131072),

		/// <summary>
		/// [EXPERIMENTAL] Prevent this node from splitting another windownode.<br/>
		/// </summary>
		NoDockingSplitOther = unchecked(262144),

		/// <summary>
		/// [EXPERIMENTAL] Prevent another windownode to be docked over this node.<br/>
		/// </summary>
		NoDockingOverMe = unchecked(524288),

		/// <summary>
		/// [EXPERIMENTAL] Prevent this node to be docked over another window or non-empty node.<br/>
		/// </summary>
		NoDockingOverOther = unchecked(1048576),

		/// <summary>
		/// [EXPERIMENTAL] Prevent this node to be docked over an empty node (e.g. DockSpace with no other windows)<br/>
		/// </summary>
		NoDockingOverEmpty = unchecked(2097152),

		/// <summary>
		/// [EXPERIMENTAL]<br/>
		/// </summary>
		NoResizex = unchecked(4194304),

		/// <summary>
		/// [EXPERIMENTAL]<br/>
		/// </summary>
		NoResizey = unchecked(8388608),

		SharedFlagsInheritMask = unchecked(-1),
		NoResizeFlagsMask = unchecked(12582944),
		LocalFlagsMask = unchecked(12713072),
		/// <summary>
		/// When splitting those flags are moved to the inheriting child, never duplicated<br/>
		/// </summary>
		LocalFlagsTransferMask = unchecked(12712048),

		SavedFlagsMask = unchecked(12712992),
	}

	public enum ImGuiDataAuthority
	{
		Auto = unchecked(0),
		DockNode = unchecked(1),
		Window = unchecked(2),
	}

	public enum ImGuiWindowDockStyleCol
	{
		Text = unchecked(0),
		Tab = unchecked(1),
		TabHovered = unchecked(2),
		TabActive = unchecked(3),
		TabUnfocused = unchecked(4),
		TabUnfocusedActive = unchecked(5),
		Count = unchecked(6),
	}

	public enum ImGuiDebugLogFlags
	{
		None = unchecked(0),
		EventActiveId = unchecked(1),
		EventFocus = unchecked(2),
		EventPopup = unchecked(4),
		EventNav = unchecked(8),
		EventClipper = unchecked(16),
		EventSelection = unchecked(32),
		EventIo = unchecked(64),
		EventDocking = unchecked(128),
		EventViewport = unchecked(256),
		EventMask = unchecked(511),
		/// <summary>
		/// Also send output to TTY<br/>
		/// </summary>
		OutputToTty = unchecked(1024),

	}

	public enum ImGuiTabBarFlagsPrivate
	{
		/// <summary>
		/// Part of a dock node [we don't use this in the master branch but it facilitate branch syncing to keep this around]<br/>
		/// </summary>
		DockNode = unchecked(1048576),

		IsFocused = unchecked(2097152),
		/// <summary>
		/// FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs<br/>
		/// </summary>
		SaveSettings = unchecked(4194304),

	}

	public enum ImGuiTabItemFlagsPrivate
	{
		SectionMask = unchecked(192),
		/// <summary>
		/// Track whether p_open was set or not (we'll need this info on the next frame to recompute ContentWidth during layout)<br/>
		/// </summary>
		NoCloseButton = unchecked(1048576),

		/// <summary>
		/// Used by TabItemButton, change the tab item behavior to mimic a button<br/>
		/// </summary>
		Button = unchecked(2097152),

		/// <summary>
		/// [Docking] Trailing tabs with the _Unsorted flag will be sorted based on the DockOrder of their Window.<br/>
		/// </summary>
		Unsorted = unchecked(4194304),

		/// <summary>
		/// [Docking] Display tab shape for docking preview (height is adjusted slightly to compensate for the yet missing tab bar)<br/>
		/// </summary>
		Preview = unchecked(8388608),

	}

}
