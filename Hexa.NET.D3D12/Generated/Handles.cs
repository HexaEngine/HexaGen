// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using Hexa.NET.DXGI;
using Hexa.NET.D3DCommon;
using HexaGen.Runtime.COM;

namespace Hexa.NET.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONTYPE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Shaderreflectiontype : IEquatable<Lpd3D12Shaderreflectiontype>
	{
		public Lpd3D12Shaderreflectiontype(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Shaderreflectiontype Null => new Lpd3D12Shaderreflectiontype(0);
		public static implicit operator Lpd3D12Shaderreflectiontype(nint handle) => new Lpd3D12Shaderreflectiontype(handle);
		public static bool operator ==(Lpd3D12Shaderreflectiontype left, Lpd3D12Shaderreflectiontype right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Shaderreflectiontype left, Lpd3D12Shaderreflectiontype right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Shaderreflectiontype left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Shaderreflectiontype left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Shaderreflectiontype other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Shaderreflectiontype handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Shaderreflectiontype [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONVARIABLE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Shaderreflectionvariable : IEquatable<Lpd3D12Shaderreflectionvariable>
	{
		public Lpd3D12Shaderreflectionvariable(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Shaderreflectionvariable Null => new Lpd3D12Shaderreflectionvariable(0);
		public static implicit operator Lpd3D12Shaderreflectionvariable(nint handle) => new Lpd3D12Shaderreflectionvariable(handle);
		public static bool operator ==(Lpd3D12Shaderreflectionvariable left, Lpd3D12Shaderreflectionvariable right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Shaderreflectionvariable left, Lpd3D12Shaderreflectionvariable right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Shaderreflectionvariable left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Shaderreflectionvariable left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Shaderreflectionvariable other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Shaderreflectionvariable handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Shaderreflectionvariable [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONCONSTANTBUFFER")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Shaderreflectionconstantbuffer : IEquatable<Lpd3D12Shaderreflectionconstantbuffer>
	{
		public Lpd3D12Shaderreflectionconstantbuffer(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Shaderreflectionconstantbuffer Null => new Lpd3D12Shaderreflectionconstantbuffer(0);
		public static implicit operator Lpd3D12Shaderreflectionconstantbuffer(nint handle) => new Lpd3D12Shaderreflectionconstantbuffer(handle);
		public static bool operator ==(Lpd3D12Shaderreflectionconstantbuffer left, Lpd3D12Shaderreflectionconstantbuffer right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Shaderreflectionconstantbuffer left, Lpd3D12Shaderreflectionconstantbuffer right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Shaderreflectionconstantbuffer left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Shaderreflectionconstantbuffer left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Shaderreflectionconstantbuffer other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Shaderreflectionconstantbuffer handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Shaderreflectionconstantbuffer [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Shaderreflection : IEquatable<Lpd3D12Shaderreflection>
	{
		public Lpd3D12Shaderreflection(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Shaderreflection Null => new Lpd3D12Shaderreflection(0);
		public static implicit operator Lpd3D12Shaderreflection(nint handle) => new Lpd3D12Shaderreflection(handle);
		public static bool operator ==(Lpd3D12Shaderreflection left, Lpd3D12Shaderreflection right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Shaderreflection left, Lpd3D12Shaderreflection right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Shaderreflection left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Shaderreflection left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Shaderreflection other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Shaderreflection handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Shaderreflection [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12LIBRARYREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Libraryreflection : IEquatable<Lpd3D12Libraryreflection>
	{
		public Lpd3D12Libraryreflection(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Libraryreflection Null => new Lpd3D12Libraryreflection(0);
		public static implicit operator Lpd3D12Libraryreflection(nint handle) => new Lpd3D12Libraryreflection(handle);
		public static bool operator ==(Lpd3D12Libraryreflection left, Lpd3D12Libraryreflection right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Libraryreflection left, Lpd3D12Libraryreflection right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Libraryreflection left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Libraryreflection left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Libraryreflection other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Libraryreflection handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Libraryreflection [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12FUNCTIONREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Functionreflection : IEquatable<Lpd3D12Functionreflection>
	{
		public Lpd3D12Functionreflection(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Functionreflection Null => new Lpd3D12Functionreflection(0);
		public static implicit operator Lpd3D12Functionreflection(nint handle) => new Lpd3D12Functionreflection(handle);
		public static bool operator ==(Lpd3D12Functionreflection left, Lpd3D12Functionreflection right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Functionreflection left, Lpd3D12Functionreflection right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Functionreflection left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Functionreflection left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Functionreflection other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Functionreflection handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Functionreflection [0x{0}]", Handle.ToString("X"));
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	[NativeName(NativeNameType.Typedef, "LPD3D12FUNCTIONPARAMETERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct Lpd3D12Functionparameterreflection : IEquatable<Lpd3D12Functionparameterreflection>
	{
		public Lpd3D12Functionparameterreflection(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static Lpd3D12Functionparameterreflection Null => new Lpd3D12Functionparameterreflection(0);
		public static implicit operator Lpd3D12Functionparameterreflection(nint handle) => new Lpd3D12Functionparameterreflection(handle);
		public static bool operator ==(Lpd3D12Functionparameterreflection left, Lpd3D12Functionparameterreflection right) => left.Handle == right.Handle;
		public static bool operator !=(Lpd3D12Functionparameterreflection left, Lpd3D12Functionparameterreflection right) => left.Handle != right.Handle;
		public static bool operator ==(Lpd3D12Functionparameterreflection left, nint right) => left.Handle == right;
		public static bool operator !=(Lpd3D12Functionparameterreflection left, nint right) => left.Handle != right;
		public bool Equals(Lpd3D12Functionparameterreflection other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is Lpd3D12Functionparameterreflection handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("Lpd3D12Functionparameterreflection [0x{0}]", Handle.ToString("X"));
	}

}
