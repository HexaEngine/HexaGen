// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaEngine.DXGI;
using HexaEngine.D3DCommon;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3D12
{
	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONTYPE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12SHADERREFLECTIONTYPE : IEquatable<LPD3D12SHADERREFLECTIONTYPE>
	{
		public LPD3D12SHADERREFLECTIONTYPE(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12SHADERREFLECTIONTYPE Null => new LPD3D12SHADERREFLECTIONTYPE(0);
		public static implicit operator LPD3D12SHADERREFLECTIONTYPE(nint handle) => new LPD3D12SHADERREFLECTIONTYPE(handle);
		public static bool operator ==(LPD3D12SHADERREFLECTIONTYPE left, LPD3D12SHADERREFLECTIONTYPE right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12SHADERREFLECTIONTYPE left, LPD3D12SHADERREFLECTIONTYPE right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12SHADERREFLECTIONTYPE left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12SHADERREFLECTIONTYPE left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12SHADERREFLECTIONTYPE other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12SHADERREFLECTIONTYPE handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12SHADERREFLECTIONTYPE [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONVARIABLE")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12SHADERREFLECTIONVARIABLE : IEquatable<LPD3D12SHADERREFLECTIONVARIABLE>
	{
		public LPD3D12SHADERREFLECTIONVARIABLE(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12SHADERREFLECTIONVARIABLE Null => new LPD3D12SHADERREFLECTIONVARIABLE(0);
		public static implicit operator LPD3D12SHADERREFLECTIONVARIABLE(nint handle) => new LPD3D12SHADERREFLECTIONVARIABLE(handle);
		public static bool operator ==(LPD3D12SHADERREFLECTIONVARIABLE left, LPD3D12SHADERREFLECTIONVARIABLE right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12SHADERREFLECTIONVARIABLE left, LPD3D12SHADERREFLECTIONVARIABLE right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12SHADERREFLECTIONVARIABLE left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12SHADERREFLECTIONVARIABLE left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12SHADERREFLECTIONVARIABLE other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12SHADERREFLECTIONVARIABLE handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12SHADERREFLECTIONVARIABLE [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTIONCONSTANTBUFFER")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12SHADERREFLECTIONCONSTANTBUFFER : IEquatable<LPD3D12SHADERREFLECTIONCONSTANTBUFFER>
	{
		public LPD3D12SHADERREFLECTIONCONSTANTBUFFER(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12SHADERREFLECTIONCONSTANTBUFFER Null => new LPD3D12SHADERREFLECTIONCONSTANTBUFFER(0);
		public static implicit operator LPD3D12SHADERREFLECTIONCONSTANTBUFFER(nint handle) => new LPD3D12SHADERREFLECTIONCONSTANTBUFFER(handle);
		public static bool operator ==(LPD3D12SHADERREFLECTIONCONSTANTBUFFER left, LPD3D12SHADERREFLECTIONCONSTANTBUFFER right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12SHADERREFLECTIONCONSTANTBUFFER left, LPD3D12SHADERREFLECTIONCONSTANTBUFFER right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12SHADERREFLECTIONCONSTANTBUFFER left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12SHADERREFLECTIONCONSTANTBUFFER left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12SHADERREFLECTIONCONSTANTBUFFER other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12SHADERREFLECTIONCONSTANTBUFFER handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12SHADERREFLECTIONCONSTANTBUFFER [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12SHADERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12SHADERREFLECTION : IEquatable<LPD3D12SHADERREFLECTION>
	{
		public LPD3D12SHADERREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12SHADERREFLECTION Null => new LPD3D12SHADERREFLECTION(0);
		public static implicit operator LPD3D12SHADERREFLECTION(nint handle) => new LPD3D12SHADERREFLECTION(handle);
		public static bool operator ==(LPD3D12SHADERREFLECTION left, LPD3D12SHADERREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12SHADERREFLECTION left, LPD3D12SHADERREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12SHADERREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12SHADERREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12SHADERREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12SHADERREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12SHADERREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12LIBRARYREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12LIBRARYREFLECTION : IEquatable<LPD3D12LIBRARYREFLECTION>
	{
		public LPD3D12LIBRARYREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12LIBRARYREFLECTION Null => new LPD3D12LIBRARYREFLECTION(0);
		public static implicit operator LPD3D12LIBRARYREFLECTION(nint handle) => new LPD3D12LIBRARYREFLECTION(handle);
		public static bool operator ==(LPD3D12LIBRARYREFLECTION left, LPD3D12LIBRARYREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12LIBRARYREFLECTION left, LPD3D12LIBRARYREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12LIBRARYREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12LIBRARYREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12LIBRARYREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12LIBRARYREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12LIBRARYREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12FUNCTIONREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12FUNCTIONREFLECTION : IEquatable<LPD3D12FUNCTIONREFLECTION>
	{
		public LPD3D12FUNCTIONREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12FUNCTIONREFLECTION Null => new LPD3D12FUNCTIONREFLECTION(0);
		public static implicit operator LPD3D12FUNCTIONREFLECTION(nint handle) => new LPD3D12FUNCTIONREFLECTION(handle);
		public static bool operator ==(LPD3D12FUNCTIONREFLECTION left, LPD3D12FUNCTIONREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12FUNCTIONREFLECTION left, LPD3D12FUNCTIONREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12FUNCTIONREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12FUNCTIONREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12FUNCTIONREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12FUNCTIONREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12FUNCTIONREFLECTION [0x{0}]", Handle.ToString("X"));
	}

	[NativeName(NativeNameType.Typedef, "LPD3D12FUNCTIONPARAMETERREFLECTION")]
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	public readonly partial struct LPD3D12FUNCTIONPARAMETERREFLECTION : IEquatable<LPD3D12FUNCTIONPARAMETERREFLECTION>
	{
		public LPD3D12FUNCTIONPARAMETERREFLECTION(nint handle) { Handle = handle; }
		public nint Handle { get; }
		public bool IsNull => Handle == 0;
		public static LPD3D12FUNCTIONPARAMETERREFLECTION Null => new LPD3D12FUNCTIONPARAMETERREFLECTION(0);
		public static implicit operator LPD3D12FUNCTIONPARAMETERREFLECTION(nint handle) => new LPD3D12FUNCTIONPARAMETERREFLECTION(handle);
		public static bool operator ==(LPD3D12FUNCTIONPARAMETERREFLECTION left, LPD3D12FUNCTIONPARAMETERREFLECTION right) => left.Handle == right.Handle;
		public static bool operator !=(LPD3D12FUNCTIONPARAMETERREFLECTION left, LPD3D12FUNCTIONPARAMETERREFLECTION right) => left.Handle != right.Handle;
		public static bool operator ==(LPD3D12FUNCTIONPARAMETERREFLECTION left, nint right) => left.Handle == right;
		public static bool operator !=(LPD3D12FUNCTIONPARAMETERREFLECTION left, nint right) => left.Handle != right;
		public bool Equals(LPD3D12FUNCTIONPARAMETERREFLECTION other) => Handle == other.Handle;
		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is LPD3D12FUNCTIONPARAMETERREFLECTION handle && Equals(handle);
		/// <inheritdoc/>
		public override int GetHashCode() => Handle.GetHashCode();
		private string DebuggerDisplay => string.Format("LPD3D12FUNCTIONPARAMETERREFLECTION [0x{0}]", Handle.ToString("X"));
	}

}
