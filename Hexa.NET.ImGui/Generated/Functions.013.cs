// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>/// To be documented./// </summary>		public static void ImGuiListClipperDataReset( ImGuiListClipperData* self,  ref ImGuiListClipper clipper)
		{
			fixed (ImGuiListClipper* pclipper = &clipper)
			{
				ImGuiListClipperDataResetNative(self, (ImGuiListClipper*)pclipper);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_ImGuiNavItemData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiNavItemData* ImGuiNavItemDataImGuiNavItemDataNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiNavItemData* ImGuiNavItemDataImGuiNavItemData()
		{
			ImGuiNavItemData* ret = ImGuiNavItemDataImGuiNavItemDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNavItemDataDestroyNative(ImGuiNavItemData* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiNavItemDataDestroy( ImGuiNavItemData* self)
		{
			ImGuiNavItemDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiNavItemData_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiNavItemDataClearNative(ImGuiNavItemData* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiNavItemDataClear( ImGuiNavItemData* self)
		{
			ImGuiNavItemDataClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTypingSelectState_ImGuiTypingSelectState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTypingSelectState* ImGuiTypingSelectStateImGuiTypingSelectStateNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTypingSelectState* ImGuiTypingSelectStateImGuiTypingSelectState()
		{
			ImGuiTypingSelectState* ret = ImGuiTypingSelectStateImGuiTypingSelectStateNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTypingSelectState_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTypingSelectStateDestroyNative(ImGuiTypingSelectState* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTypingSelectStateDestroy( ImGuiTypingSelectState* self)
		{
			ImGuiTypingSelectStateDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTypingSelectState_Clear")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTypingSelectStateClearNative(ImGuiTypingSelectState* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTypingSelectStateClear( ImGuiTypingSelectState* self)
		{
			ImGuiTypingSelectStateClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumnData_ImGuiOldColumnData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiOldColumnData* ImGuiOldColumnDataImGuiOldColumnDataNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiOldColumnData* ImGuiOldColumnDataImGuiOldColumnData()
		{
			ImGuiOldColumnData* ret = ImGuiOldColumnDataImGuiOldColumnDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumnData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiOldColumnDataDestroyNative(ImGuiOldColumnData* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiOldColumnDataDestroy( ImGuiOldColumnData* self)
		{
			ImGuiOldColumnDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumns_ImGuiOldColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiOldColumns* ImGuiOldColumnsImGuiOldColumnsNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiOldColumns* ImGuiOldColumnsImGuiOldColumns()
		{
			ImGuiOldColumns* ret = ImGuiOldColumnsImGuiOldColumnsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiOldColumns_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiOldColumnsDestroyNative(ImGuiOldColumns* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiOldColumnsDestroy( ImGuiOldColumns* self)
		{
			ImGuiOldColumnsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_ImGuiDockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* ImGuiDockNodeImGuiDockNodeNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* ImGuiDockNodeImGuiDockNode( uint id)
		{
			ImGuiDockNode* ret = ImGuiDockNodeImGuiDockNodeNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeDestroyNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockNodeDestroy( ImGuiDockNode* self)
		{
			ImGuiDockNodeDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsRootNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsRootNodeNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsRootNode( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsRootNodeNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsDockSpace")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsDockSpaceNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsDockSpace( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsDockSpaceNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsFloatingNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsFloatingNodeNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsFloatingNode( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsFloatingNodeNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsCentralNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsCentralNodeNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsCentralNode( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsCentralNodeNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsHiddenTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsHiddenTabBarNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsHiddenTabBar( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsHiddenTabBarNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsNoTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsNoTabBarNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsNoTabBar( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsNoTabBarNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsSplitNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsSplitNodeNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsSplitNode( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsSplitNodeNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsLeafNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsLeafNodeNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsLeafNode( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsLeafNodeNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_IsEmpty")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImGuiDockNodeIsEmptyNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static bool ImGuiDockNodeIsEmpty( ImGuiDockNode* self)
		{
			byte ret = ImGuiDockNodeIsEmptyNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeRectNative(ImRect* pOut, ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockNodeRect( ImRect* pOut,  ImGuiDockNode* self)
		{
			ImGuiDockNodeRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockNodeRect( ImRect* pOut,  ref ImGuiDockNode self)
		{
			fixed (ImGuiDockNode* pself = &self)
			{
				ImGuiDockNodeRectNative(pOut, (ImGuiDockNode*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_SetLocalFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeSetLocalFlagsNative(ImGuiDockNode* self, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockNodeSetLocalFlags( ImGuiDockNode* self,  int flags)
		{
			ImGuiDockNodeSetLocalFlagsNative(self, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockNode_UpdateMergedFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockNodeUpdateMergedFlagsNative(ImGuiDockNode* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockNodeUpdateMergedFlags( ImGuiDockNode* self)
		{
			ImGuiDockNodeUpdateMergedFlagsNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockContext_ImGuiDockContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockContext* ImGuiDockContextImGuiDockContextNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockContext* ImGuiDockContextImGuiDockContext()
		{
			ImGuiDockContext* ret = ImGuiDockContextImGuiDockContextNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDockContext_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDockContextDestroyNative(ImGuiDockContext* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDockContextDestroy( ImGuiDockContext* self)
		{
			ImGuiDockContextDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_ImGuiViewportP")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiViewportP* ImGuiViewportPImGuiViewportPNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiViewportP* ImGuiViewportPImGuiViewportP()
		{
			ImGuiViewportP* ret = ImGuiViewportPImGuiViewportPNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPDestroyNative(ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPDestroy( ImGuiViewportP* self)
		{
			ImGuiViewportPDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_ClearRequestFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPClearRequestFlagsNative(ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPClearRequestFlags( ImGuiViewportP* self)
		{
			ImGuiViewportPClearRequestFlagsNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_CalcWorkRectPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPCalcWorkRectPosNative(Vector2* pOut, ImGuiViewportP* self, Vector2 offMin);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPCalcWorkRectPos( Vector2* pOut,  ImGuiViewportP* self,  Vector2 offMin)
		{
			ImGuiViewportPCalcWorkRectPosNative(pOut, self, offMin);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPCalcWorkRectPos( Vector2* pOut,  ref ImGuiViewportP self,  Vector2 offMin)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectPosNative(pOut, (ImGuiViewportP*)pself, offMin);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_CalcWorkRectSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPCalcWorkRectSizeNative(Vector2* pOut, ImGuiViewportP* self, Vector2 offMin, Vector2 offMax);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPCalcWorkRectSize( Vector2* pOut,  ImGuiViewportP* self,  Vector2 offMin,  Vector2 offMax)
		{
			ImGuiViewportPCalcWorkRectSizeNative(pOut, self, offMin, offMax);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPCalcWorkRectSize( Vector2* pOut,  ref ImGuiViewportP self,  Vector2 offMin,  Vector2 offMax)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPCalcWorkRectSizeNative(pOut, (ImGuiViewportP*)pself, offMin, offMax);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_UpdateWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPUpdateWorkRectNative(ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPUpdateWorkRect( ImGuiViewportP* self)
		{
			ImGuiViewportPUpdateWorkRectNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetMainRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetMainRectNative(ImRect* pOut, ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetMainRect( ImRect* pOut,  ImGuiViewportP* self)
		{
			ImGuiViewportPGetMainRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetMainRect( ImRect* pOut,  ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetMainRectNative(pOut, (ImGuiViewportP*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetWorkRectNative(ImRect* pOut, ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetWorkRect( ImRect* pOut,  ImGuiViewportP* self)
		{
			ImGuiViewportPGetWorkRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetWorkRect( ImRect* pOut,  ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetWorkRectNative(pOut, (ImGuiViewportP*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiViewportP_GetBuildWorkRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiViewportPGetBuildWorkRectNative(ImRect* pOut, ImGuiViewportP* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetBuildWorkRect( ImRect* pOut,  ImGuiViewportP* self)
		{
			ImGuiViewportPGetBuildWorkRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiViewportPGetBuildWorkRect( ImRect* pOut,  ref ImGuiViewportP self)
		{
			fixed (ImGuiViewportP* pself = &self)
			{
				ImGuiViewportPGetBuildWorkRectNative(pOut, (ImGuiViewportP*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_ImGuiWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindowSettings* ImGuiWindowSettingsImGuiWindowSettingsNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindowSettings* ImGuiWindowSettingsImGuiWindowSettings()
		{
			ImGuiWindowSettings* ret = ImGuiWindowSettingsImGuiWindowSettingsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowSettingsDestroyNative(ImGuiWindowSettings* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowSettingsDestroy( ImGuiWindowSettings* self)
		{
			ImGuiWindowSettingsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindowSettings_GetName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* ImGuiWindowSettingsGetNameNative(ImGuiWindowSettings* self);

		/// <summary>/// To be documented./// </summary>		public static byte* ImGuiWindowSettingsGetName( ImGuiWindowSettings* self)
		{
			byte* ret = ImGuiWindowSettingsGetNameNative(self);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string ImGuiWindowSettingsGetNameS( ImGuiWindowSettings* self)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiWindowSettingsGetNameNative(self));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiSettingsHandler_ImGuiSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiSettingsHandler* ImGuiSettingsHandlerImGuiSettingsHandlerNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiSettingsHandler* ImGuiSettingsHandlerImGuiSettingsHandler()
		{
			ImGuiSettingsHandler* ret = ImGuiSettingsHandlerImGuiSettingsHandlerNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiSettingsHandler_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiSettingsHandlerDestroyNative(ImGuiSettingsHandler* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiSettingsHandlerDestroy( ImGuiSettingsHandler* self)
		{
			ImGuiSettingsHandlerDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDebugAllocInfo_ImGuiDebugAllocInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDebugAllocInfo* ImGuiDebugAllocInfoImGuiDebugAllocInfoNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiDebugAllocInfo* ImGuiDebugAllocInfoImGuiDebugAllocInfo()
		{
			ImGuiDebugAllocInfo* ret = ImGuiDebugAllocInfoImGuiDebugAllocInfoNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiDebugAllocInfo_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiDebugAllocInfoDestroyNative(ImGuiDebugAllocInfo* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiDebugAllocInfoDestroy( ImGuiDebugAllocInfo* self)
		{
			ImGuiDebugAllocInfoDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiStackLevelInfo_ImGuiStackLevelInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiStackLevelInfo* ImGuiStackLevelInfoImGuiStackLevelInfoNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiStackLevelInfo* ImGuiStackLevelInfoImGuiStackLevelInfo()
		{
			ImGuiStackLevelInfo* ret = ImGuiStackLevelInfoImGuiStackLevelInfoNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiStackLevelInfo_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiStackLevelInfoDestroyNative(ImGuiStackLevelInfo* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiStackLevelInfoDestroy( ImGuiStackLevelInfo* self)
		{
			ImGuiStackLevelInfoDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiIDStackTool_ImGuiIDStackTool")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiIDStackTool* ImGuiIDStackToolImGuiIDStackToolNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiIDStackTool* ImGuiIDStackToolImGuiIDStackTool()
		{
			ImGuiIDStackTool* ret = ImGuiIDStackToolImGuiIDStackToolNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiIDStackTool_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiIDStackToolDestroyNative(ImGuiIDStackTool* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiIDStackToolDestroy( ImGuiIDStackTool* self)
		{
			ImGuiIDStackToolDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiContextHook_ImGuiContextHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiContextHook* ImGuiContextHookImGuiContextHookNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiContextHook* ImGuiContextHookImGuiContextHook()
		{
			ImGuiContextHook* ret = ImGuiContextHookImGuiContextHookNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiContextHook_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiContextHookDestroyNative(ImGuiContextHook* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiContextHookDestroy( ImGuiContextHook* self)
		{
			ImGuiContextHookDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiContext_ImGuiContext")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiContext* ImGuiContextImGuiContextNative(ImFontAtlas* sharedFontAtlas);

		/// <summary>/// To be documented./// </summary>		public static ImGuiContext* ImGuiContextImGuiContext( ImFontAtlas* sharedFontAtlas)
		{
			ImGuiContext* ret = ImGuiContextImGuiContextNative(sharedFontAtlas);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiContext_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiContextDestroyNative(ImGuiContext* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiContextDestroy( ImGuiContext* self)
		{
			ImGuiContextDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_ImGuiWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* ImGuiWindowImGuiWindowNative(ImGuiContext* context, byte* name);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* ImGuiWindowImGuiWindow( ImGuiContext* context,  byte* name)
		{
			ImGuiWindow* ret = ImGuiWindowImGuiWindowNative(context, name);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* ImGuiWindowImGuiWindow( ImGuiContext* context,  ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindow* ret = ImGuiWindowImGuiWindowNative(context, (byte*)pname);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* ImGuiWindowImGuiWindow( ImGuiContext* context,  string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindow* ret = ImGuiWindowImGuiWindowNative(context, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowDestroyNative(ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowDestroy( ImGuiWindow* self)
		{
			ImGuiWindowDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint ImGuiWindowGetIDNative(ImGuiWindow* self, byte* str, byte* strEnd);

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  byte* str,  byte* strEnd)
		{
			uint ret = ImGuiWindowGetIDNative(self, str, strEnd);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  ref byte str,  byte* strEnd)
		{
			fixed (byte* pstr = &str)
			{
				uint ret = ImGuiWindowGetIDNative(self, (byte*)pstr, strEnd);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  string str,  byte* strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = ImGuiWindowGetIDNative(self, pStr0, strEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  byte* str,  ref byte strEnd)
		{
			fixed (byte* pstrEnd = &strEnd)
			{
				uint ret = ImGuiWindowGetIDNative(self, str, (byte*)pstrEnd);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  byte* str,  string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = ImGuiWindowGetIDNative(self, str, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  ref byte str,  ref byte strEnd)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					uint ret = ImGuiWindowGetIDNative(self, (byte*)pstr, (byte*)pstrEnd);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetID( ImGuiWindow* self,  string str,  string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = ImGuiWindowGetIDNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint ImGuiWindowGetIDPtrNative(ImGuiWindow* self, void* ptr);

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetIDPtr( ImGuiWindow* self,  void* ptr)
		{
			uint ret = ImGuiWindowGetIDPtrNative(self, ptr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetID_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint ImGuiWindowGetIDIntNative(ImGuiWindow* self, int n);

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetIDInt( ImGuiWindow* self,  int n)
		{
			uint ret = ImGuiWindowGetIDIntNative(self, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_GetIDFromRectangle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint ImGuiWindowGetIDFromRectangleNative(ImGuiWindow* self, ImRect rAbs);

		/// <summary>/// To be documented./// </summary>		public static uint ImGuiWindowGetIDFromRectangle( ImGuiWindow* self,  ImRect rAbs)
		{
			uint ret = ImGuiWindowGetIDFromRectangleNative(self, rAbs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowRectNative(ImRect* pOut, ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowRect( ImRect* pOut,  ImGuiWindow* self)
		{
			ImGuiWindowRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowRect( ImRect* pOut,  ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowRectNative(pOut, (ImGuiWindow*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_CalcFontSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowCalcFontSizeNative(ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static float ImGuiWindowCalcFontSize( ImGuiWindow* self)
		{
			float ret = ImGuiWindowCalcFontSizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_TitleBarHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowTitleBarHeightNative(ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static float ImGuiWindowTitleBarHeight( ImGuiWindow* self)
		{
			float ret = ImGuiWindowTitleBarHeightNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_TitleBarRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowTitleBarRectNative(ImRect* pOut, ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowTitleBarRect( ImRect* pOut,  ImGuiWindow* self)
		{
			ImGuiWindowTitleBarRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowTitleBarRect( ImRect* pOut,  ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowTitleBarRectNative(pOut, (ImGuiWindow*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_MenuBarHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float ImGuiWindowMenuBarHeightNative(ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static float ImGuiWindowMenuBarHeight( ImGuiWindow* self)
		{
			float ret = ImGuiWindowMenuBarHeightNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiWindow_MenuBarRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiWindowMenuBarRectNative(ImRect* pOut, ImGuiWindow* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowMenuBarRect( ImRect* pOut,  ImGuiWindow* self)
		{
			ImGuiWindowMenuBarRectNative(pOut, self);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImGuiWindowMenuBarRect( ImRect* pOut,  ref ImGuiWindow self)
		{
			fixed (ImGuiWindow* pself = &self)
			{
				ImGuiWindowMenuBarRectNative(pOut, (ImGuiWindow*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTabItem_ImGuiTabItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* ImGuiTabItemImGuiTabItemNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabItem* ImGuiTabItemImGuiTabItem()
		{
			ImGuiTabItem* ret = ImGuiTabItemImGuiTabItemNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTabItem_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTabItemDestroyNative(ImGuiTabItem* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTabItemDestroy( ImGuiTabItem* self)
		{
			ImGuiTabItemDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTabBar_ImGuiTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabBar* ImGuiTabBarImGuiTabBarNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabBar* ImGuiTabBarImGuiTabBar()
		{
			ImGuiTabBar* ret = ImGuiTabBarImGuiTabBarNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTabBar_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTabBarDestroyNative(ImGuiTabBar* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTabBarDestroy( ImGuiTabBar* self)
		{
			ImGuiTabBarDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumn_ImGuiTableColumn")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumn* ImGuiTableColumnImGuiTableColumnNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableColumn* ImGuiTableColumnImGuiTableColumn()
		{
			ImGuiTableColumn* ret = ImGuiTableColumnImGuiTableColumnNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumn_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableColumnDestroyNative(ImGuiTableColumn* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableColumnDestroy( ImGuiTableColumn* self)
		{
			ImGuiTableColumnDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableInstanceData_ImGuiTableInstanceData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceDataNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceData()
		{
			ImGuiTableInstanceData* ret = ImGuiTableInstanceDataImGuiTableInstanceDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableInstanceData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableInstanceDataDestroyNative(ImGuiTableInstanceData* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableInstanceDataDestroy( ImGuiTableInstanceData* self)
		{
			ImGuiTableInstanceDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTable_ImGuiTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTable* ImGuiTableImGuiTableNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTable* ImGuiTableImGuiTable()
		{
			ImGuiTable* ret = ImGuiTableImGuiTableNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTable_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableDestroyNative(ImGuiTable* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableDestroy( ImGuiTable* self)
		{
			ImGuiTableDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableTempData_ImGuiTableTempData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempDataNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempData()
		{
			ImGuiTableTempData* ret = ImGuiTableTempDataImGuiTableTempDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableTempData_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableTempDataDestroyNative(ImGuiTableTempData* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableTempDataDestroy( ImGuiTableTempData* self)
		{
			ImGuiTableTempDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumnSettings_ImGuiTableColumnSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettings()
		{
			ImGuiTableColumnSettings* ret = ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableColumnSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableColumnSettingsDestroyNative(ImGuiTableColumnSettings* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableColumnSettingsDestroy( ImGuiTableColumnSettings* self)
		{
			ImGuiTableColumnSettingsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_ImGuiTableSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettingsNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettings()
		{
			ImGuiTableSettings* ret = ImGuiTableSettingsImGuiTableSettingsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImGuiTableSettingsDestroyNative(ImGuiTableSettings* self);

		/// <summary>/// To be documented./// </summary>		public static void ImGuiTableSettingsDestroy( ImGuiTableSettings* self)
		{
			ImGuiTableSettingsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTableSettings_GetColumnSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettingsNative(ImGuiTableSettings* self);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettings( ImGuiTableSettings* self)
		{
			ImGuiTableColumnSettings* ret = ImGuiTableSettingsGetColumnSettingsNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetCurrentWindowRead")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetCurrentWindowReadNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* GetCurrentWindowRead()
		{
			ImGuiWindow* ret = GetCurrentWindowReadNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetCurrentWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetCurrentWindowNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* GetCurrentWindow()
		{
			ImGuiWindow* ret = GetCurrentWindowNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindWindowByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindWindowByIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* FindWindowByID( uint id)
		{
			ImGuiWindow* ret = FindWindowByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindWindowByName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindWindowByNameNative(byte* name);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* FindWindowByName( byte* name)
		{
			ImGuiWindow* ret = FindWindowByNameNative(name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igUpdateWindowParentAndRootLinks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateWindowParentAndRootLinksNative(ImGuiWindow* window, int flags, ImGuiWindow* parentWindow);

		/// <summary>/// To be documented./// </summary>		public static void UpdateWindowParentAndRootLinks( ImGuiWindow* window,  int flags,  ImGuiWindow* parentWindow)
		{
			UpdateWindowParentAndRootLinksNative(window, flags, parentWindow);
		}

		/// <summary>/// To be documented./// </summary>		public static void UpdateWindowParentAndRootLinks( ImGuiWindow* window,  int flags,  ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				UpdateWindowParentAndRootLinksNative(window, flags, (ImGuiWindow*)pparentWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCalcWindowNextAutoFitSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CalcWindowNextAutoFitSizeNative(Vector2* pOut, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void CalcWindowNextAutoFitSize( Vector2* pOut,  ImGuiWindow* window)
		{
			CalcWindowNextAutoFitSizeNative(pOut, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void CalcWindowNextAutoFitSize( Vector2* pOut,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				CalcWindowNextAutoFitSizeNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsWindowChildOf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowChildOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent, byte popupHierarchy, byte dockHierarchy);

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowChildOf( ImGuiWindow* window,  ImGuiWindow* potentialParent,  bool popupHierarchy,  bool dockHierarchy)
		{
			byte ret = IsWindowChildOfNative(window, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowChildOf( ImGuiWindow* window,  ref ImGuiWindow potentialParent,  bool popupHierarchy,  bool dockHierarchy)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowChildOfNative(window, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsWindowWithinBeginStackOf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowWithinBeginStackOfNative(ImGuiWindow* window, ImGuiWindow* potentialParent);

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowWithinBeginStackOf( ImGuiWindow* window,  ImGuiWindow* potentialParent)
		{
			byte ret = IsWindowWithinBeginStackOfNative(window, potentialParent);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowWithinBeginStackOf( ImGuiWindow* window,  ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowWithinBeginStackOfNative(window, (ImGuiWindow*)ppotentialParent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsWindowAbove")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowAboveNative(ImGuiWindow* potentialAbove, ImGuiWindow* potentialBelow);

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowAbove( ImGuiWindow* potentialAbove,  ImGuiWindow* potentialBelow)
		{
			byte ret = IsWindowAboveNative(potentialAbove, potentialBelow);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowAbove( ImGuiWindow* potentialAbove,  ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
			{
				byte ret = IsWindowAboveNative(potentialAbove, (ImGuiWindow*)ppotentialBelow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsWindowNavFocusable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowNavFocusableNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowNavFocusable( ImGuiWindow* window)
		{
			byte ret = IsWindowNavFocusableNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowPos_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowPosWindowPtrNative(ImGuiWindow* window, Vector2 pos, int cond);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowPosWindowPtr( ImGuiWindow* window,  Vector2 pos,  int cond)
		{
			SetWindowPosWindowPtrNative(window, pos, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowSize_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowSizeWindowPtrNative(ImGuiWindow* window, Vector2 size, int cond);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowSizeWindowPtr( ImGuiWindow* window,  Vector2 size,  int cond)
		{
			SetWindowSizeWindowPtrNative(window, size, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowCollapsed_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowCollapsedWindowPtrNative(ImGuiWindow* window, byte collapsed, int cond);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowCollapsedWindowPtr( ImGuiWindow* window,  bool collapsed,  int cond)
		{
			SetWindowCollapsedWindowPtrNative(window, collapsed ? (byte)1 : (byte)0, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowHitTestHole")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowHitTestHoleNative(ImGuiWindow* window, Vector2 pos, Vector2 size);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowHitTestHole( ImGuiWindow* window,  Vector2 pos,  Vector2 size)
		{
			SetWindowHitTestHoleNative(window, pos, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowHiddendAndSkipItemsForCurrentFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowHiddendAndSkipItemsForCurrentFrameNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowHiddendAndSkipItemsForCurrentFrame( ImGuiWindow* window)
		{
			SetWindowHiddendAndSkipItemsForCurrentFrameNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igWindowRectAbsToRel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowRectAbsToRelNative(ImRect* pOut, ImGuiWindow* window, ImRect r);

		/// <summary>/// To be documented./// </summary>		public static void WindowRectAbsToRel( ImRect* pOut,  ImGuiWindow* window,  ImRect r)
		{
			WindowRectAbsToRelNative(pOut, window, r);
		}

		/// <summary>/// To be documented./// </summary>		public static void WindowRectAbsToRel( ImRect* pOut,  ref ImGuiWindow window,  ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectAbsToRelNative(pOut, (ImGuiWindow*)pwindow, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igWindowRectRelToAbs")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowRectRelToAbsNative(ImRect* pOut, ImGuiWindow* window, ImRect r);

		/// <summary>/// To be documented./// </summary>		public static void WindowRectRelToAbs( ImRect* pOut,  ImGuiWindow* window,  ImRect r)
		{
			WindowRectRelToAbsNative(pOut, window, r);
		}

		/// <summary>/// To be documented./// </summary>		public static void WindowRectRelToAbs( ImRect* pOut,  ref ImGuiWindow window,  ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectRelToAbsNative(pOut, (ImGuiWindow*)pwindow, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igWindowPosRelToAbs")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void WindowPosRelToAbsNative(Vector2* pOut, ImGuiWindow* window, Vector2 p);

		/// <summary>/// To be documented./// </summary>		public static void WindowPosRelToAbs( Vector2* pOut,  ImGuiWindow* window,  Vector2 p)
		{
			WindowPosRelToAbsNative(pOut, window, p);
		}

		/// <summary>/// To be documented./// </summary>		public static void WindowPosRelToAbs( Vector2* pOut,  ref ImGuiWindow window,  Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosRelToAbsNative(pOut, (ImGuiWindow*)pwindow, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFocusWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FocusWindowNative(ImGuiWindow* window, int flags);

		/// <summary>/// To be documented./// </summary>		public static void FocusWindow( ImGuiWindow* window,  int flags)
		{
			FocusWindowNative(window, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFocusTopMostWindowUnderOne")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FocusTopMostWindowUnderOneNative(ImGuiWindow* underThisWindow, ImGuiWindow* ignoreWindow, ImGuiViewport* filterViewport, int flags);

		/// <summary>/// To be documented./// </summary>		public static void FocusTopMostWindowUnderOne( ImGuiWindow* underThisWindow,  ImGuiWindow* ignoreWindow,  ImGuiViewport* filterViewport,  int flags)
		{
			FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, filterViewport, flags);
		}

		/// <summary>/// To be documented./// </summary>		public static void FocusTopMostWindowUnderOne( ImGuiWindow* underThisWindow,  ref ImGuiWindow ignoreWindow,  ImGuiViewport* filterViewport,  int flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void FocusTopMostWindowUnderOne( ImGuiWindow* underThisWindow,  ImGuiWindow* ignoreWindow,  ref ImGuiViewport filterViewport,  int flags)
		{
			fixed (ImGuiViewport* pfilterViewport = &filterViewport)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void FocusTopMostWindowUnderOne( ImGuiWindow* underThisWindow,  ref ImGuiWindow ignoreWindow,  ref ImGuiViewport filterViewport,  int flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBringWindowToFocusFront")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToFocusFrontNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void BringWindowToFocusFront( ImGuiWindow* window)
		{
			BringWindowToFocusFrontNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBringWindowToDisplayFront")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToDisplayFrontNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void BringWindowToDisplayFront( ImGuiWindow* window)
		{
			BringWindowToDisplayFrontNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBringWindowToDisplayBack")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToDisplayBackNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void BringWindowToDisplayBack( ImGuiWindow* window)
		{
			BringWindowToDisplayBackNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBringWindowToDisplayBehind")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BringWindowToDisplayBehindNative(ImGuiWindow* window, ImGuiWindow* aboveWindow);

		/// <summary>/// To be documented./// </summary>		public static void BringWindowToDisplayBehind( ImGuiWindow* window,  ImGuiWindow* aboveWindow)
		{
			BringWindowToDisplayBehindNative(window, aboveWindow);
		}

		/// <summary>/// To be documented./// </summary>		public static void BringWindowToDisplayBehind( ImGuiWindow* window,  ref ImGuiWindow aboveWindow)
		{
			fixed (ImGuiWindow* paboveWindow = &aboveWindow)
			{
				BringWindowToDisplayBehindNative(window, (ImGuiWindow*)paboveWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindWindowDisplayIndex")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int FindWindowDisplayIndexNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static int FindWindowDisplayIndex( ImGuiWindow* window)
		{
			int ret = FindWindowDisplayIndexNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindBottomMostVisibleWindowWithinBeginStack")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStackNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStack( ImGuiWindow* window)
		{
			ImGuiWindow* ret = FindBottomMostVisibleWindowWithinBeginStackNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetCurrentFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetCurrentFontNative(ImFont* font);

		/// <summary>/// To be documented./// </summary>		public static void SetCurrentFont( ImFont* font)
		{
			SetCurrentFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetDefaultFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFont* GetDefaultFontNative();

		/// <summary>/// To be documented./// </summary>		public static ImFont* GetDefaultFont()
		{
			ImFont* ret = GetDefaultFontNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetForegroundDrawList_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImDrawList* GetForegroundDrawListWindowPtrNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static ImDrawList* GetForegroundDrawListWindowPtr( ImGuiWindow* window)
		{
			ImDrawList* ret = GetForegroundDrawListWindowPtrNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igAddDrawListToDrawDataEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddDrawListToDrawDataExNative(ImDrawData* drawData, ImVectorImDrawListPtr* outList, ImDrawList* drawList);

		/// <summary>/// To be documented./// </summary>		public static void AddDrawListToDrawDataEx( ImDrawData* drawData,  ImVectorImDrawListPtr* outList,  ImDrawList* drawList)
		{
			AddDrawListToDrawDataExNative(drawData, outList, drawList);
		}

		/// <summary>/// To be documented./// </summary>		public static void AddDrawListToDrawDataEx( ImDrawData* drawData,  ref ImVectorImDrawListPtr outList,  ImDrawList* drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, drawList);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void AddDrawListToDrawDataEx( ImDrawData* drawData,  ImVectorImDrawListPtr* outList,  ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				AddDrawListToDrawDataExNative(drawData, outList, (ImDrawList*)pdrawList);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void AddDrawListToDrawDataEx( ImDrawData* drawData,  ref ImVectorImDrawListPtr outList,  ref ImDrawList drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInitialize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void InitializeNative();

		/// <summary>/// To be documented./// </summary>		public static void Initialize()
		{
			InitializeNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShutdown")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShutdownNative();

		/// <summary>/// To be documented./// </summary>		public static void Shutdown()
		{
			ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igUpdateInputEvents")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateInputEventsNative(byte trickleFastInputs);

		/// <summary>/// To be documented./// </summary>		public static void UpdateInputEvents( bool trickleFastInputs)
		{
			UpdateInputEventsNative(trickleFastInputs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igUpdateHoveredWindowAndCaptureFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateHoveredWindowAndCaptureFlagsNative();

		/// <summary>/// To be documented./// </summary>		public static void UpdateHoveredWindowAndCaptureFlags()
		{
			UpdateHoveredWindowAndCaptureFlagsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igStartMouseMovingWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StartMouseMovingWindowNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void StartMouseMovingWindow( ImGuiWindow* window)
		{
			StartMouseMovingWindowNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igStartMouseMovingWindowOrNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void StartMouseMovingWindowOrNodeNative(ImGuiWindow* window, ImGuiDockNode* node, byte undock);

		/// <summary>/// To be documented./// </summary>		public static void StartMouseMovingWindowOrNode( ImGuiWindow* window,  ImGuiDockNode* node,  bool undock)
		{
			StartMouseMovingWindowOrNodeNative(window, node, undock ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void StartMouseMovingWindowOrNode( ImGuiWindow* window,  ref ImGuiDockNode node,  bool undock)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				StartMouseMovingWindowOrNodeNative(window, (ImGuiDockNode*)pnode, undock ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igUpdateMouseMovingWindowNewFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateMouseMovingWindowNewFrameNative();

		/// <summary>/// To be documented./// </summary>		public static void UpdateMouseMovingWindowNewFrame()
		{
			UpdateMouseMovingWindowNewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igUpdateMouseMovingWindowEndFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void UpdateMouseMovingWindowEndFrameNative();

		/// <summary>/// To be documented./// </summary>		public static void UpdateMouseMovingWindowEndFrame()
		{
			UpdateMouseMovingWindowEndFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igAddContextHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint AddContextHookNative(ImGuiContext* context, ImGuiContextHook* hook);

		/// <summary>/// To be documented./// </summary>		public static uint AddContextHook( ImGuiContext* context,  ImGuiContextHook* hook)
		{
			uint ret = AddContextHookNative(context, hook);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint AddContextHook( ImGuiContext* context,  ref ImGuiContextHook hook)
		{
			fixed (ImGuiContextHook* phook = &hook)
			{
				uint ret = AddContextHookNative(context, (ImGuiContextHook*)phook);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRemoveContextHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RemoveContextHookNative(ImGuiContext* context, uint hookToRemove);

		/// <summary>/// To be documented./// </summary>		public static void RemoveContextHook( ImGuiContext* context,  uint hookToRemove)
		{
			RemoveContextHookNative(context, hookToRemove);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCallContextHooks")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CallContextHooksNative(ImGuiContext* context, ImGuiContextHookType type);

		/// <summary>/// To be documented./// </summary>		public static void CallContextHooks( ImGuiContext* context,  ImGuiContextHookType type)
		{
			CallContextHooksNative(context, type);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTranslateWindowsInViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TranslateWindowsInViewportNative(ImGuiViewportP* viewport, Vector2 oldPos, Vector2 newPos);

		/// <summary>/// To be documented./// </summary>		public static void TranslateWindowsInViewport( ImGuiViewportP* viewport,  Vector2 oldPos,  Vector2 newPos)
		{
			TranslateWindowsInViewportNative(viewport, oldPos, newPos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScaleWindowsInViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScaleWindowsInViewportNative(ImGuiViewportP* viewport, float scale);

		/// <summary>/// To be documented./// </summary>		public static void ScaleWindowsInViewport( ImGuiViewportP* viewport,  float scale)
		{
			ScaleWindowsInViewportNative(viewport, scale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDestroyPlatformWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DestroyPlatformWindowNative(ImGuiViewportP* viewport);

		/// <summary>/// To be documented./// </summary>		public static void DestroyPlatformWindow( ImGuiViewportP* viewport)
		{
			DestroyPlatformWindowNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowViewportNative(ImGuiWindow* window, ImGuiViewportP* viewport);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowViewport( ImGuiWindow* window,  ImGuiViewportP* viewport)
		{
			SetWindowViewportNative(window, viewport);
		}

		/// <summary>/// To be documented./// </summary>		public static void SetWindowViewport( ImGuiWindow* window,  ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetWindowViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetCurrentViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetCurrentViewportNative(ImGuiWindow* window, ImGuiViewportP* viewport);

		/// <summary>/// To be documented./// </summary>		public static void SetCurrentViewport( ImGuiWindow* window,  ImGuiViewportP* viewport)
		{
			SetCurrentViewportNative(window, viewport);
		}

		/// <summary>/// To be documented./// </summary>		public static void SetCurrentViewport( ImGuiWindow* window,  ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetCurrentViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetViewportPlatformMonitor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiPlatformMonitor* GetViewportPlatformMonitorNative(ImGuiViewport* viewport);

		/// <summary>/// To be documented./// </summary>		public static ImGuiPlatformMonitor* GetViewportPlatformMonitor( ImGuiViewport* viewport)
		{
			ImGuiPlatformMonitor* ret = GetViewportPlatformMonitorNative(viewport);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindHoveredViewportFromPlatformWindowStack")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiViewportP* FindHoveredViewportFromPlatformWindowStackNative(Vector2 mousePlatformPos);

		/// <summary>/// To be documented./// </summary>		public static ImGuiViewportP* FindHoveredViewportFromPlatformWindowStack( Vector2 mousePlatformPos)
		{
			ImGuiViewportP* ret = FindHoveredViewportFromPlatformWindowStackNative(mousePlatformPos);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igMarkIniSettingsDirty_Nil")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void MarkIniSettingsDirtyNilNative();

		/// <summary>/// To be documented./// </summary>		public static void MarkIniSettingsDirtyNil()
		{
			MarkIniSettingsDirtyNilNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igMarkIniSettingsDirty_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void MarkIniSettingsDirtyWindowPtrNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void MarkIniSettingsDirtyWindowPtr( ImGuiWindow* window)
		{
			MarkIniSettingsDirtyWindowPtrNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClearIniSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearIniSettingsNative();

		/// <summary>/// To be documented./// </summary>		public static void ClearIniSettings()
		{
			ClearIniSettingsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igAddSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void AddSettingsHandlerNative(ImGuiSettingsHandler* handler);

		/// <summary>/// To be documented./// </summary>		public static void AddSettingsHandler( ImGuiSettingsHandler* handler)
		{
			AddSettingsHandlerNative(handler);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRemoveSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RemoveSettingsHandlerNative(byte* typeName);

		/// <summary>/// To be documented./// </summary>		public static void RemoveSettingsHandler( byte* typeName)
		{
			RemoveSettingsHandlerNative(typeName);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiSettingsHandler* FindSettingsHandlerNative(byte* typeName);

		/// <summary>/// To be documented./// </summary>		public static ImGuiSettingsHandler* FindSettingsHandler( byte* typeName)
		{
			ImGuiSettingsHandler* ret = FindSettingsHandlerNative(typeName);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCreateNewWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindowSettings* CreateNewWindowSettingsNative(byte* name);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindowSettings* CreateNewWindowSettings( byte* name)
		{
			ImGuiWindowSettings* ret = CreateNewWindowSettingsNative(name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindWindowSettingsByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindowSettings* FindWindowSettingsByIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindowSettings* FindWindowSettingsByID( uint id)
		{
			ImGuiWindowSettings* ret = FindWindowSettingsByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindWindowSettingsByWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindowSettings* FindWindowSettingsByWindowNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindowSettings* FindWindowSettingsByWindow( ImGuiWindow* window)
		{
			ImGuiWindowSettings* ret = FindWindowSettingsByWindowNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClearWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearWindowSettingsNative(byte* name);

		/// <summary>/// To be documented./// </summary>		public static void ClearWindowSettings( byte* name)
		{
			ClearWindowSettingsNative(name);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLocalizeRegisterEntries")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LocalizeRegisterEntriesNative(ImGuiLocEntry* entries, int count);

		/// <summary>/// To be documented./// </summary>		public static void LocalizeRegisterEntries( ImGuiLocEntry* entries,  int count)
		{
			LocalizeRegisterEntriesNative(entries, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLocalizeGetMsg")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* LocalizeGetMsgNative(ImGuiLocKey key);

		/// <summary>/// To be documented./// </summary>		public static byte* LocalizeGetMsg( ImGuiLocKey key)
		{
			byte* ret = LocalizeGetMsgNative(key);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string LocalizeGetMsgS( ImGuiLocKey key)
		{
			string ret = Utils.DecodeStringUTF8(LocalizeGetMsgNative(key));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetScrollX_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetScrollXWindowPtrNative(ImGuiWindow* window, float scrollX);

		/// <summary>/// To be documented./// </summary>		public static void SetScrollXWindowPtr( ImGuiWindow* window,  float scrollX)
		{
			SetScrollXWindowPtrNative(window, scrollX);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetScrollY_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetScrollYWindowPtrNative(ImGuiWindow* window, float scrollY);

		/// <summary>/// To be documented./// </summary>		public static void SetScrollYWindowPtr( ImGuiWindow* window,  float scrollY)
		{
			SetScrollYWindowPtrNative(window, scrollY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetScrollFromPosX_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetScrollFromPosXWindowPtrNative(ImGuiWindow* window, float localX, float centerXRatio);

		/// <summary>/// To be documented./// </summary>		public static void SetScrollFromPosXWindowPtr( ImGuiWindow* window,  float localX,  float centerXRatio)
		{
			SetScrollFromPosXWindowPtrNative(window, localX, centerXRatio);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetScrollFromPosY_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetScrollFromPosYWindowPtrNative(ImGuiWindow* window, float localY, float centerYRatio);

		/// <summary>/// To be documented./// </summary>		public static void SetScrollFromPosYWindowPtr( ImGuiWindow* window,  float localY,  float centerYRatio)
		{
			SetScrollFromPosYWindowPtrNative(window, localY, centerYRatio);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollToItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScrollToItemNative(int flags);

		/// <summary>/// To be documented./// </summary>		public static void ScrollToItem( int flags)
		{
			ScrollToItemNative(flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollToRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScrollToRectNative(ImGuiWindow* window, ImRect rect, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ScrollToRect( ImGuiWindow* window,  ImRect rect,  int flags)
		{
			ScrollToRectNative(window, rect, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollToRectEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScrollToRectExNative(Vector2* pOut, ImGuiWindow* window, ImRect rect, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ScrollToRectEx( Vector2* pOut,  ImGuiWindow* window,  ImRect rect,  int flags)
		{
			ScrollToRectExNative(pOut, window, rect, flags);
		}

		/// <summary>/// To be documented./// </summary>		public static void ScrollToRectEx( Vector2* pOut,  ref ImGuiWindow window,  ImRect rect,  int flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToRectExNative(pOut, (ImGuiWindow*)pwindow, rect, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollToBringRectIntoView")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScrollToBringRectIntoViewNative(ImGuiWindow* window, ImRect rect);

		/// <summary>/// To be documented./// </summary>		public static void ScrollToBringRectIntoView( ImGuiWindow* window,  ImRect rect)
		{
			ScrollToBringRectIntoViewNative(window, rect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetItemStatusFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int GetItemStatusFlagsNative();

		/// <summary>/// To be documented./// </summary>		public static int GetItemStatusFlags()
		{
			int ret = GetItemStatusFlagsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetItemFlags")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int GetItemFlagsNative();

		/// <summary>/// To be documented./// </summary>		public static int GetItemFlags()
		{
			int ret = GetItemFlagsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetActiveID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetActiveIDNative();

		/// <summary>/// To be documented./// </summary>		public static uint GetActiveID()
		{
			uint ret = GetActiveIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetFocusID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetFocusIDNative();

		/// <summary>/// To be documented./// </summary>		public static uint GetFocusID()
		{
			uint ret = GetFocusIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetActiveID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetActiveIDNative(uint id, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void SetActiveID( uint id,  ImGuiWindow* window)
		{
			SetActiveIDNative(id, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void SetActiveID( uint id,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetActiveIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetFocusID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetFocusIDNative(uint id, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void SetFocusID( uint id,  ImGuiWindow* window)
		{
			SetFocusIDNative(id, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void SetFocusID( uint id,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetFocusIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClearActiveID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearActiveIDNative();

		/// <summary>/// To be documented./// </summary>		public static void ClearActiveID()
		{
			ClearActiveIDNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetHoveredID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetHoveredIDNative();

		/// <summary>/// To be documented./// </summary>		public static uint GetHoveredID()
		{
			uint ret = GetHoveredIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetHoveredID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetHoveredIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void SetHoveredID( uint id)
		{
			SetHoveredIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igKeepAliveID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void KeepAliveIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void KeepAliveID( uint id)
		{
			KeepAliveIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igMarkItemEdited")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void MarkItemEditedNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void MarkItemEdited( uint id)
		{
			MarkItemEditedNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushOverrideID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushOverrideIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void PushOverrideID( uint id)
		{
			PushOverrideIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetIDWithSeed_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetIDWithSeedNative(byte* strIdBegin, byte* strIdEnd, uint seed);

		/// <summary>/// To be documented./// </summary>		public static uint GetIDWithSeed( byte* strIdBegin,  byte* strIdEnd,  uint seed)
		{
			uint ret = GetIDWithSeedNative(strIdBegin, strIdEnd, seed);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint GetIDWithSeed( byte* strIdBegin,  ref byte strIdEnd,  uint seed)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				uint ret = GetIDWithSeedNative(strIdBegin, (byte*)pstrIdEnd, seed);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint GetIDWithSeed( byte* strIdBegin,  string strIdEnd,  uint seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDWithSeedNative(strIdBegin, pStr0, seed);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetIDWithSeed_Int")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetIDWithSeedIntNative(int n, uint seed);

		/// <summary>/// To be documented./// </summary>		public static uint GetIDWithSeedInt( int n,  uint seed)
		{
			uint ret = GetIDWithSeedIntNative(n, seed);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igItemSize_Vec2")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ItemSizeVec2Native(Vector2 size, float textBaselineY);

		/// <summary>/// To be documented./// </summary>		public static void ItemSizeVec2( Vector2 size,  float textBaselineY)
		{
			ItemSizeVec2Native(size, textBaselineY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igItemSize_Rect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ItemSizeRectNative(ImRect bb, float textBaselineY);

		/// <summary>/// To be documented./// </summary>		public static void ItemSizeRect( ImRect bb,  float textBaselineY)
		{
			ItemSizeRectNative(bb, textBaselineY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igItemAdd")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ItemAddNative(ImRect bb, uint id, ImRect* navBb, int extraFlags);

		/// <summary>/// To be documented./// </summary>		public static bool ItemAdd( ImRect bb,  uint id,  ImRect* navBb,  int extraFlags)
		{
			byte ret = ItemAddNative(bb, id, navBb, extraFlags);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool ItemAdd( ImRect bb,  uint id,  ref ImRect navBb,  int extraFlags)
		{
			fixed (ImRect* pnavBb = &navBb)
			{
				byte ret = ItemAddNative(bb, id, (ImRect*)pnavBb, extraFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igItemHoverable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ItemHoverableNative(ImRect bb, uint id, int itemFlags);

		/// <summary>/// To be documented./// </summary>		public static bool ItemHoverable( ImRect bb,  uint id,  int itemFlags)
		{
			byte ret = ItemHoverableNative(bb, id, itemFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsWindowContentHoverable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsWindowContentHoverableNative(ImGuiWindow* window, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool IsWindowContentHoverable( ImGuiWindow* window,  int flags)
		{
			byte ret = IsWindowContentHoverableNative(window, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsClippedEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsClippedExNative(ImRect bb, uint id);

		/// <summary>/// To be documented./// </summary>		public static bool IsClippedEx( ImRect bb,  uint id)
		{
			byte ret = IsClippedExNative(bb, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetLastItemData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetLastItemDataNative(uint itemId, int inFlags, int statusFlags, ImRect itemRect);

		/// <summary>/// To be documented./// </summary>		public static void SetLastItemData( uint itemId,  int inFlags,  int statusFlags,  ImRect itemRect)
		{
			SetLastItemDataNative(itemId, inFlags, statusFlags, itemRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCalcItemSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void CalcItemSizeNative(Vector2* pOut, Vector2 size, float defaultW, float defaultH);

		/// <summary>/// To be documented./// </summary>		public static void CalcItemSize( Vector2* pOut,  Vector2 size,  float defaultW,  float defaultH)
		{
			CalcItemSizeNative(pOut, size, defaultW, defaultH);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCalcWrapWidthForPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float CalcWrapWidthForPosNative(Vector2 pos, float wrapPosX);

		/// <summary>/// To be documented./// </summary>		public static float CalcWrapWidthForPos( Vector2 pos,  float wrapPosX)
		{
			float ret = CalcWrapWidthForPosNative(pos, wrapPosX);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushMultiItemsWidths")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushMultiItemsWidthsNative(int components, float widthFull);

		/// <summary>/// To be documented./// </summary>		public static void PushMultiItemsWidths( int components,  float widthFull)
		{
			PushMultiItemsWidthsNative(components, widthFull);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsItemToggledSelection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsItemToggledSelectionNative();

		/// <summary>/// To be documented./// </summary>		public static bool IsItemToggledSelection()
		{
			byte ret = IsItemToggledSelectionNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetContentRegionMaxAbs")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetContentRegionMaxAbsNative(Vector2* pOut);

		/// <summary>/// To be documented./// </summary>		public static void GetContentRegionMaxAbs( Vector2* pOut)
		{
			GetContentRegionMaxAbsNative(pOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShrinkWidths")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShrinkWidthsNative(ImGuiShrinkWidthItem* items, int count, float widthExcess);

		/// <summary>/// To be documented./// </summary>		public static void ShrinkWidths( ImGuiShrinkWidthItem* items,  int count,  float widthExcess)
		{
			ShrinkWidthsNative(items, count, widthExcess);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushItemFlag")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushItemFlagNative(int option, byte enabled);

		/// <summary>/// To be documented./// </summary>		public static void PushItemFlag( int option,  bool enabled)
		{
			PushItemFlagNative(option, enabled ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPopItemFlag")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopItemFlagNative();

		/// <summary>/// To be documented./// </summary>		public static void PopItemFlag()
		{
			PopItemFlagNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetStyleVarInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDataVarInfo* GetStyleVarInfoNative(int idx);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDataVarInfo* GetStyleVarInfo( int idx)
		{
			ImGuiDataVarInfo* ret = GetStyleVarInfoNative(idx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogBegin")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogBeginNative(ImGuiLogType type, int autoOpenDepth);

		/// <summary>/// To be documented./// </summary>		public static void LogBegin( ImGuiLogType type,  int autoOpenDepth)
		{
			LogBeginNative(type, autoOpenDepth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogToBuffer")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogToBufferNative(int autoOpenDepth);

		/// <summary>/// To be documented./// </summary>		public static void LogToBuffer( int autoOpenDepth)
		{
			LogToBufferNative(autoOpenDepth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogRenderedText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogRenderedTextNative(Vector2* refPos, byte* text, byte* textEnd);

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  byte* text,  byte* textEnd)
		{
			LogRenderedTextNative(refPos, text, textEnd);
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  ref byte text,  byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				LogRenderedTextNative(refPos, (byte*)ptext, textEnd);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  string text,  byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  byte* text,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				LogRenderedTextNative(refPos, text, (byte*)ptextEnd);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  byte* text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  ref byte text,  ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					LogRenderedTextNative(refPos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogRenderedText( Vector2* refPos,  string text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogSetNextTextDecoration")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogSetNextTextDecorationNative(byte* prefix, byte* suffix);

		/// <summary>/// To be documented./// </summary>		public static void LogSetNextTextDecoration( byte* prefix,  byte* suffix)
		{
			LogSetNextTextDecorationNative(prefix, suffix);
		}

		/// <summary>/// To be documented./// </summary>		public static void LogSetNextTextDecoration( byte* prefix,  ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				LogSetNextTextDecorationNative(prefix, (byte*)psuffix);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void LogSetNextTextDecoration( byte* prefix,  string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (suffix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(suffix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogSetNextTextDecorationNative(prefix, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginChildEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginChildExNative(byte* name, uint id, Vector2 sizeArg, byte border, int windowFlags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginChildEx( byte* name,  uint id,  Vector2 sizeArg,  bool border,  int windowFlags)
		{
			byte ret = BeginChildExNative(name, id, sizeArg, border ? (byte)1 : (byte)0, windowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igOpenPopupEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void OpenPopupExNative(uint id, int popupFlags);

		/// <summary>/// To be documented./// </summary>		public static void OpenPopupEx( uint id,  int popupFlags)
		{
			OpenPopupExNative(id, popupFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClosePopupToLevel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClosePopupToLevelNative(int remaining, byte restoreFocusToWindowUnderPopup);

		/// <summary>/// To be documented./// </summary>		public static void ClosePopupToLevel( int remaining,  bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupToLevelNative(remaining, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClosePopupsOverWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClosePopupsOverWindowNative(ImGuiWindow* refWindow, byte restoreFocusToWindowUnderPopup);

		/// <summary>/// To be documented./// </summary>		public static void ClosePopupsOverWindow( ImGuiWindow* refWindow,  bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupsOverWindowNative(refWindow, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClosePopupsExceptModals")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClosePopupsExceptModalsNative();

		/// <summary>/// To be documented./// </summary>		public static void ClosePopupsExceptModals()
		{
			ClosePopupsExceptModalsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsPopupOpen_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsPopupOpenIDNative(uint id, int popupFlags);

		/// <summary>/// To be documented./// </summary>		public static bool IsPopupOpenID( uint id,  int popupFlags)
		{
			byte ret = IsPopupOpenIDNative(id, popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginPopupEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginPopupExNative(uint id, int extraFlags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginPopupEx( uint id,  int extraFlags)
		{
			byte ret = BeginPopupExNative(id, extraFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginTooltipEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginTooltipExNative(int tooltipFlags, int extraWindowFlags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginTooltipEx( int tooltipFlags,  int extraWindowFlags)
		{
			byte ret = BeginTooltipExNative(tooltipFlags, extraWindowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginTooltipHidden")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginTooltipHiddenNative();

		/// <summary>/// To be documented./// </summary>		public static bool BeginTooltipHidden()
		{
			byte ret = BeginTooltipHiddenNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetPopupAllowedExtentRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetPopupAllowedExtentRectNative(ImRect* pOut, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void GetPopupAllowedExtentRect( ImRect* pOut,  ImGuiWindow* window)
		{
			GetPopupAllowedExtentRectNative(pOut, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void GetPopupAllowedExtentRect( ImRect* pOut,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GetPopupAllowedExtentRectNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetTopMostPopupModal")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetTopMostPopupModalNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* GetTopMostPopupModal()
		{
			ImGuiWindow* ret = GetTopMostPopupModalNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetTopMostAndVisiblePopupModal")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* GetTopMostAndVisiblePopupModalNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* GetTopMostAndVisiblePopupModal()
		{
			ImGuiWindow* ret = GetTopMostAndVisiblePopupModalNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindBlockingModal")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiWindow* FindBlockingModalNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static ImGuiWindow* FindBlockingModal( ImGuiWindow* window)
		{
			ImGuiWindow* ret = FindBlockingModalNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindBestWindowPosForPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FindBestWindowPosForPopupNative(Vector2* pOut, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void FindBestWindowPosForPopup( Vector2* pOut,  ImGuiWindow* window)
		{
			FindBestWindowPosForPopupNative(pOut, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void FindBestWindowPosForPopup( Vector2* pOut,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FindBestWindowPosForPopupNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindBestWindowPosForPopupEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FindBestWindowPosForPopupExNative(Vector2* pOut, Vector2 refPos, Vector2 size, int* lastDir, ImRect rOuter, ImRect rAvoid, ImGuiPopupPositionPolicy policy);

		/// <summary>/// To be documented./// </summary>		public static void FindBestWindowPosForPopupEx( Vector2* pOut,  Vector2 refPos,  Vector2 size,  int* lastDir,  ImRect rOuter,  ImRect rAvoid,  ImGuiPopupPositionPolicy policy)
		{
			FindBestWindowPosForPopupExNative(pOut, refPos, size, lastDir, rOuter, rAvoid, policy);
		}

		/// <summary>/// To be documented./// </summary>		public static void FindBestWindowPosForPopupEx( Vector2* pOut,  Vector2 refPos,  Vector2 size,  ref int lastDir,  ImRect rOuter,  ImRect rAvoid,  ImGuiPopupPositionPolicy policy)
		{
			fixed (int* plastDir = &lastDir)
			{
				FindBestWindowPosForPopupExNative(pOut, refPos, size, (int*)plastDir, rOuter, rAvoid, policy);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginViewportSideBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginViewportSideBarNative(byte* name, ImGuiViewport* viewport, int dir, float size, int windowFlags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginViewportSideBar( byte* name,  ImGuiViewport* viewport,  int dir,  float size,  int windowFlags)
		{
			byte ret = BeginViewportSideBarNative(name, viewport, dir, size, windowFlags);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool BeginViewportSideBar( byte* name,  ref ImGuiViewport viewport,  int dir,  float size,  int windowFlags)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				byte ret = BeginViewportSideBarNative(name, (ImGuiViewport*)pviewport, dir, size, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginMenuEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginMenuExNative(byte* label, byte* icon, byte enabled);

		/// <summary>/// To be documented./// </summary>		public static bool BeginMenuEx( byte* label,  byte* icon,  bool enabled)
		{
			byte ret = BeginMenuExNative(label, icon, enabled ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool BeginMenuEx( byte* label,  ref byte icon,  bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				byte ret = BeginMenuExNative(label, (byte*)picon, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool BeginMenuEx( byte* label,  string icon,  bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginMenuExNative(label, pStr0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igMenuItemEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte MenuItemExNative(byte* label, byte* icon, byte* shortcut, byte selected, byte enabled);

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  byte* icon,  byte* shortcut,  bool selected,  bool enabled)
		{
			byte ret = MenuItemExNative(label, icon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  ref byte icon,  byte* shortcut,  bool selected,  bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				byte ret = MenuItemExNative(label, (byte*)picon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  string icon,  byte* shortcut,  bool selected,  bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = MenuItemExNative(label, pStr0, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  byte* icon,  ref byte shortcut,  bool selected,  bool enabled)
		{
			fixed (byte* pshortcut = &shortcut)
			{
				byte ret = MenuItemExNative(label, icon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  byte* icon,  string shortcut,  bool selected,  bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shortcut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shortcut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = MenuItemExNative(label, icon, pStr0, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  ref byte icon,  ref byte shortcut,  bool selected,  bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				fixed (byte* pshortcut = &shortcut)
				{
					byte ret = MenuItemExNative(label, (byte*)picon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool MenuItemEx( byte* label,  string icon,  string shortcut,  bool selected,  bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (shortcut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(shortcut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = MenuItemExNative(label, pStr0, pStr1, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginComboPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginComboPopupNative(uint popupId, ImRect bb, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginComboPopup( uint popupId,  ImRect bb,  int flags)
		{
			byte ret = BeginComboPopupNative(popupId, bb, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginComboPreview")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginComboPreviewNative();

		/// <summary>/// To be documented./// </summary>		public static bool BeginComboPreview()
		{
			byte ret = BeginComboPreviewNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igEndComboPreview")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndComboPreviewNative();

		/// <summary>/// To be documented./// </summary>		public static void EndComboPreview()
		{
			EndComboPreviewNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavInitWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavInitWindowNative(ImGuiWindow* window, byte forceReinit);

		/// <summary>/// To be documented./// </summary>		public static void NavInitWindow( ImGuiWindow* window,  bool forceReinit)
		{
			NavInitWindowNative(window, forceReinit ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavInitRequestApplyResult")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavInitRequestApplyResultNative();

		/// <summary>/// To be documented./// </summary>		public static void NavInitRequestApplyResult()
		{
			NavInitRequestApplyResultNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestButNoResultYet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte NavMoveRequestButNoResultYetNative();

		/// <summary>/// To be documented./// </summary>		public static bool NavMoveRequestButNoResultYet()
		{
			byte ret = NavMoveRequestButNoResultYetNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestSubmit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestSubmitNative(int moveDir, int clipDir, int moveFlags, int scrollFlags);

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestSubmit( int moveDir,  int clipDir,  int moveFlags,  int scrollFlags)
		{
			NavMoveRequestSubmitNative(moveDir, clipDir, moveFlags, scrollFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestForward")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestForwardNative(int moveDir, int clipDir, int moveFlags, int scrollFlags);

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestForward( int moveDir,  int clipDir,  int moveFlags,  int scrollFlags)
		{
			NavMoveRequestForwardNative(moveDir, clipDir, moveFlags, scrollFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestResolveWithLastItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestResolveWithLastItemNative(ImGuiNavItemData* result);

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestResolveWithLastItem( ImGuiNavItemData* result)
		{
			NavMoveRequestResolveWithLastItemNative(result);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestResolveWithPastTreeNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestResolveWithPastTreeNodeNative(ImGuiNavItemData* result, ImGuiNavTreeNodeData* treeNodeData);

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestResolveWithPastTreeNode( ImGuiNavItemData* result,  ImGuiNavTreeNodeData* treeNodeData)
		{
			NavMoveRequestResolveWithPastTreeNodeNative(result, treeNodeData);
		}

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestResolveWithPastTreeNode( ImGuiNavItemData* result,  ref ImGuiNavTreeNodeData treeNodeData)
		{
			fixed (ImGuiNavTreeNodeData* ptreeNodeData = &treeNodeData)
			{
				NavMoveRequestResolveWithPastTreeNodeNative(result, (ImGuiNavTreeNodeData*)ptreeNodeData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestCancel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestCancelNative();

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestCancel()
		{
			NavMoveRequestCancelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestApplyResult")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestApplyResultNative();

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestApplyResult()
		{
			NavMoveRequestApplyResultNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavMoveRequestTryWrapping")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavMoveRequestTryWrappingNative(ImGuiWindow* window, int moveFlags);

		/// <summary>/// To be documented./// </summary>		public static void NavMoveRequestTryWrapping( ImGuiWindow* window,  int moveFlags)
		{
			NavMoveRequestTryWrappingNative(window, moveFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavClearPreferredPosForAxis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavClearPreferredPosForAxisNative(ImGuiAxis axis);

		/// <summary>/// To be documented./// </summary>		public static void NavClearPreferredPosForAxis( ImGuiAxis axis)
		{
			NavClearPreferredPosForAxisNative(axis);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavRestoreHighlightAfterMove")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavRestoreHighlightAfterMoveNative();

		/// <summary>/// To be documented./// </summary>		public static void NavRestoreHighlightAfterMove()
		{
			NavRestoreHighlightAfterMoveNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igNavUpdateCurrentWindowIsScrollPushableX")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void NavUpdateCurrentWindowIsScrollPushableXNative();

		/// <summary>/// To be documented./// </summary>		public static void NavUpdateCurrentWindowIsScrollPushableX()
		{
			NavUpdateCurrentWindowIsScrollPushableXNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetNavWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNavWindowNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void SetNavWindow( ImGuiWindow* window)
		{
			SetNavWindowNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetNavID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNavIDNative(uint id, ImGuiNavLayer navLayer, uint focusScopeId, ImRect rectRel);

		/// <summary>/// To be documented./// </summary>		public static void SetNavID( uint id,  ImGuiNavLayer navLayer,  uint focusScopeId,  ImRect rectRel)
		{
			SetNavIDNative(id, navLayer, focusScopeId, rectRel);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFocusItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void FocusItemNative();

		/// <summary>/// To be documented./// </summary>		public static void FocusItem()
		{
			FocusItemNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igActivateItemByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ActivateItemByIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void ActivateItemByID( uint id)
		{
			ActivateItemByIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsNamedKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsNamedKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsNamedKey( ImGuiKey key)
		{
			byte ret = IsNamedKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsNamedKeyOrModKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsNamedKeyOrModKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsNamedKeyOrModKey( ImGuiKey key)
		{
			byte ret = IsNamedKeyOrModKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsLegacyKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsLegacyKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsLegacyKey( ImGuiKey key)
		{
			byte ret = IsLegacyKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyboardKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyboardKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyboardKey( ImGuiKey key)
		{
			byte ret = IsKeyboardKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsGamepadKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsGamepadKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsGamepadKey( ImGuiKey key)
		{
			byte ret = IsGamepadKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsMouseKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsMouseKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsMouseKey( ImGuiKey key)
		{
			byte ret = IsMouseKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsAliasKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsAliasKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static bool IsAliasKey( ImGuiKey key)
		{
			byte ret = IsAliasKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igConvertShortcutMod")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int ConvertShortcutModNative(int keyChord);

		/// <summary>/// To be documented./// </summary>		public static int ConvertShortcutMod( int keyChord)
		{
			int ret = ConvertShortcutModNative(keyChord);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igConvertSingleModFlagToKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKey ConvertSingleModFlagToKeyNative(ImGuiContext* ctx, ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKey ConvertSingleModFlagToKey( ImGuiContext* ctx,  ImGuiKey key)
		{
			ImGuiKey ret = ConvertSingleModFlagToKeyNative(ctx, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetKeyData_ContextPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyData* GetKeyDataContextPtrNative(ImGuiContext* ctx, ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKeyData* GetKeyDataContextPtr( ImGuiContext* ctx,  ImGuiKey key)
		{
			ImGuiKeyData* ret = GetKeyDataContextPtrNative(ctx, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetKeyData_Key")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyData* GetKeyDataKeyNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKeyData* GetKeyDataKey( ImGuiKey key)
		{
			ImGuiKeyData* ret = GetKeyDataKeyNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igMouseButtonToKey")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKey MouseButtonToKeyNative(int button);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKey MouseButtonToKey( int button)
		{
			ImGuiKey ret = MouseButtonToKeyNative(button);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsMouseDragPastThreshold")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsMouseDragPastThresholdNative(int button, float lockThreshold);

		/// <summary>/// To be documented./// </summary>		public static bool IsMouseDragPastThreshold( int button,  float lockThreshold)
		{
			byte ret = IsMouseDragPastThresholdNative(button, lockThreshold);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetKeyMagnitude2d")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetKeyMagnitude2DNative(Vector2* pOut, ImGuiKey keyLeft, ImGuiKey keyRight, ImGuiKey keyUp, ImGuiKey keyDown);

		/// <summary>/// To be documented./// </summary>		public static void GetKeyMagnitude2D( Vector2* pOut,  ImGuiKey keyLeft,  ImGuiKey keyRight,  ImGuiKey keyUp,  ImGuiKey keyDown)
		{
			GetKeyMagnitude2DNative(pOut, keyLeft, keyRight, keyUp, keyDown);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetNavTweakPressedAmount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GetNavTweakPressedAmountNative(ImGuiAxis axis);

		/// <summary>/// To be documented./// </summary>		public static float GetNavTweakPressedAmount( ImGuiAxis axis)
		{
			float ret = GetNavTweakPressedAmountNative(axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCalcTypematicRepeatAmount")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int CalcTypematicRepeatAmountNative(float t0, float t1, float repeatDelay, float repeatRate);

		/// <summary>/// To be documented./// </summary>		public static int CalcTypematicRepeatAmount( float t0,  float t1,  float repeatDelay,  float repeatRate)
		{
			int ret = CalcTypematicRepeatAmountNative(t0, t1, repeatDelay, repeatRate);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetTypematicRepeatRate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetTypematicRepeatRateNative(int flags, float* repeatDelay, float* repeatRate);

		/// <summary>/// To be documented./// </summary>		public static void GetTypematicRepeatRate( int flags,  float* repeatDelay,  float* repeatRate)
		{
			GetTypematicRepeatRateNative(flags, repeatDelay, repeatRate);
		}

		/// <summary>/// To be documented./// </summary>		public static void GetTypematicRepeatRate( int flags,  ref float repeatDelay,  float* repeatRate)
		{
			fixed (float* prepeatDelay = &repeatDelay)
			{
				GetTypematicRepeatRateNative(flags, (float*)prepeatDelay, repeatRate);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void GetTypematicRepeatRate( int flags,  float* repeatDelay,  ref float repeatRate)
		{
			fixed (float* prepeatRate = &repeatRate)
			{
				GetTypematicRepeatRateNative(flags, repeatDelay, (float*)prepeatRate);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void GetTypematicRepeatRate( int flags,  ref float repeatDelay,  ref float repeatRate)
		{
			fixed (float* prepeatDelay = &repeatDelay)
			{
				fixed (float* prepeatRate = &repeatRate)
				{
					GetTypematicRepeatRateNative(flags, (float*)prepeatDelay, (float*)prepeatRate);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTeleportMousePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TeleportMousePosNative(Vector2 pos);

		/// <summary>/// To be documented./// </summary>		public static void TeleportMousePos( Vector2 pos)
		{
			TeleportMousePosNative(pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetActiveIdUsingAllKeyboardKeys")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetActiveIdUsingAllKeyboardKeysNative();

		/// <summary>/// To be documented./// </summary>		public static void SetActiveIdUsingAllKeyboardKeys()
		{
			SetActiveIdUsingAllKeyboardKeysNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsActiveIdUsingNavDir")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsActiveIdUsingNavDirNative(int dir);

		/// <summary>/// To be documented./// </summary>		public static bool IsActiveIdUsingNavDir( int dir)
		{
			byte ret = IsActiveIdUsingNavDirNative(dir);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetKeyOwner")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetKeyOwnerNative(ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static uint GetKeyOwner( ImGuiKey key)
		{
			uint ret = GetKeyOwnerNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetKeyOwner")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetKeyOwnerNative(ImGuiKey key, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static void SetKeyOwner( ImGuiKey key,  uint ownerId,  int flags)
		{
			SetKeyOwnerNative(key, ownerId, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetKeyOwnersForKeyChord")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetKeyOwnersForKeyChordNative(int key, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static void SetKeyOwnersForKeyChord( int key,  uint ownerId,  int flags)
		{
			SetKeyOwnersForKeyChordNative(key, ownerId, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetItemKeyOwner")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetItemKeyOwnerNative(ImGuiKey key, int flags);

		/// <summary>/// To be documented./// </summary>		public static void SetItemKeyOwner( ImGuiKey key,  int flags)
		{
			SetItemKeyOwnerNative(key, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTestKeyOwner")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TestKeyOwnerNative(ImGuiKey key, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool TestKeyOwner( ImGuiKey key,  uint ownerId)
		{
			byte ret = TestKeyOwnerNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetKeyOwnerData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyOwnerData* GetKeyOwnerDataNative(ImGuiContext* ctx, ImGuiKey key);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKeyOwnerData* GetKeyOwnerData( ImGuiContext* ctx,  ImGuiKey key)
		{
			ImGuiKeyOwnerData* ret = GetKeyOwnerDataNative(ctx, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyDown_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyDownIDNative(ImGuiKey key, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyDownID( ImGuiKey key,  uint ownerId)
		{
			byte ret = IsKeyDownIDNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyPressed_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyPressedIDNative(ImGuiKey key, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyPressedID( ImGuiKey key,  uint ownerId,  int flags)
		{
			byte ret = IsKeyPressedIDNative(key, ownerId, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyReleased_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyReleasedIDNative(ImGuiKey key, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyReleasedID( ImGuiKey key,  uint ownerId)
		{
			byte ret = IsKeyReleasedIDNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsMouseDown_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsMouseDownIDNative(int button, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool IsMouseDownID( int button,  uint ownerId)
		{
			byte ret = IsMouseDownIDNative(button, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsMouseClicked_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsMouseClickedIDNative(int button, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool IsMouseClickedID( int button,  uint ownerId,  int flags)
		{
			byte ret = IsMouseClickedIDNative(button, ownerId, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsMouseReleased_ID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsMouseReleasedIDNative(int button, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool IsMouseReleasedID( int button,  uint ownerId)
		{
			byte ret = IsMouseReleasedIDNative(button, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyChordPressed")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyChordPressedNative(int keyChord, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyChordPressed( int keyChord,  uint ownerId,  int flags)
		{
			byte ret = IsKeyChordPressedNative(keyChord, ownerId, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShortcut")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ShortcutNative(int keyChord, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool Shortcut( int keyChord,  uint ownerId,  int flags)
		{
			byte ret = ShortcutNative(keyChord, ownerId, flags);
			return ret != 0;
		}
	}
}
