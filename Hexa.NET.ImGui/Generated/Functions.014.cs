// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetShortcutRouting")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SetShortcutRoutingNative(int keyChord, uint ownerId, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool SetShortcutRouting( int keyChord,  uint ownerId,  int flags)
		{
			byte ret = SetShortcutRoutingNative(keyChord, ownerId, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTestShortcutRouting")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TestShortcutRoutingNative(int keyChord, uint ownerId);

		/// <summary>/// To be documented./// </summary>		public static bool TestShortcutRouting( int keyChord,  uint ownerId)
		{
			byte ret = TestShortcutRoutingNative(keyChord, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetShortcutRoutingData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiKeyRoutingData* GetShortcutRoutingDataNative(int keyChord);

		/// <summary>/// To be documented./// </summary>		public static ImGuiKeyRoutingData* GetShortcutRoutingData( int keyChord)
		{
			ImGuiKeyRoutingData* ret = GetShortcutRoutingDataNative(keyChord);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextInitialize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextInitializeNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextInitialize( ImGuiContext* ctx)
		{
			DockContextInitializeNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextShutdown")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextShutdownNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextShutdown( ImGuiContext* ctx)
		{
			DockContextShutdownNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextClearNodes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextClearNodesNative(ImGuiContext* ctx, uint rootId, byte clearSettingsRefs);

		/// <summary>/// To be documented./// </summary>		public static void DockContextClearNodes( ImGuiContext* ctx,  uint rootId,  bool clearSettingsRefs)
		{
			DockContextClearNodesNative(ctx, rootId, clearSettingsRefs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextRebuildNodes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextRebuildNodesNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextRebuildNodes( ImGuiContext* ctx)
		{
			DockContextRebuildNodesNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextNewFrameUpdateUndocking")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextNewFrameUpdateUndockingNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextNewFrameUpdateUndocking( ImGuiContext* ctx)
		{
			DockContextNewFrameUpdateUndockingNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextNewFrameUpdateDocking")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextNewFrameUpdateDockingNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextNewFrameUpdateDocking( ImGuiContext* ctx)
		{
			DockContextNewFrameUpdateDockingNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextEndFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextEndFrameNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static void DockContextEndFrame( ImGuiContext* ctx)
		{
			DockContextEndFrameNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextGenNodeID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint DockContextGenNodeIDNative(ImGuiContext* ctx);

		/// <summary>/// To be documented./// </summary>		public static uint DockContextGenNodeID( ImGuiContext* ctx)
		{
			uint ret = DockContextGenNodeIDNative(ctx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextQueueDock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextQueueDockNative(ImGuiContext* ctx, ImGuiWindow* target, ImGuiDockNode* targetNode, ImGuiWindow* payload, int splitDir, float splitRatio, byte splitOuter);

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ImGuiWindow* target,  ImGuiDockNode* targetNode,  ImGuiWindow* payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			DockContextQueueDockNative(ctx, target, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ref ImGuiWindow target,  ImGuiDockNode* targetNode,  ImGuiWindow* payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				DockContextQueueDockNative(ctx, target, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ref ImGuiWindow target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ImGuiWindow* target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiWindow* ppayload = &payload)
			{
				DockContextQueueDockNative(ctx, target, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ref ImGuiWindow target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayload = &payload)
				{
					DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayload = &payload)
				{
					DockContextQueueDockNative(ctx, target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueDock( ImGuiContext* ctx,  ref ImGuiWindow target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payload,  int splitDir,  float splitRatio,  bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayload = &payload)
					{
						DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextQueueUndockWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextQueueUndockWindowNative(ImGuiContext* ctx, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueUndockWindow( ImGuiContext* ctx,  ImGuiWindow* window)
		{
			DockContextQueueUndockWindowNative(ctx, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueUndockWindow( ImGuiContext* ctx,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextQueueUndockWindowNative(ctx, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextQueueUndockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextQueueUndockNodeNative(ImGuiContext* ctx, ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueUndockNode( ImGuiContext* ctx,  ImGuiDockNode* node)
		{
			DockContextQueueUndockNodeNative(ctx, node);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextQueueUndockNode( ImGuiContext* ctx,  ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextQueueUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextProcessUndockWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextProcessUndockWindowNative(ImGuiContext* ctx, ImGuiWindow* window, byte clearPersistentDockingRef);

		/// <summary>/// To be documented./// </summary>		public static void DockContextProcessUndockWindow( ImGuiContext* ctx,  ImGuiWindow* window,  bool clearPersistentDockingRef)
		{
			DockContextProcessUndockWindowNative(ctx, window, clearPersistentDockingRef ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextProcessUndockWindow( ImGuiContext* ctx,  ref ImGuiWindow window,  bool clearPersistentDockingRef)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextProcessUndockWindowNative(ctx, (ImGuiWindow*)pwindow, clearPersistentDockingRef ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextProcessUndockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockContextProcessUndockNodeNative(ImGuiContext* ctx, ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static void DockContextProcessUndockNode( ImGuiContext* ctx,  ImGuiDockNode* node)
		{
			DockContextProcessUndockNodeNative(ctx, node);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockContextProcessUndockNode( ImGuiContext* ctx,  ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextProcessUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextCalcDropPosForDocking")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DockContextCalcDropPosForDockingNative(ImGuiWindow* target, ImGuiDockNode* targetNode, ImGuiWindow* payloadWindow, ImGuiDockNode* payloadNode, int splitDir, byte splitOuter, Vector2* outPos);

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ImGuiWindow* payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ImGuiWindow* payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ImGuiWindow* payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (Vector2* poutPos = &outPos)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payloadWindow,  ImGuiDockNode* payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ImGuiWindow* payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ImGuiWindow* payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ImGuiDockNode* targetNode,  ref ImGuiWindow payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockContextCalcDropPosForDocking( ImGuiWindow* target,  ref ImGuiDockNode targetNode,  ref ImGuiWindow payloadWindow,  ref ImGuiDockNode payloadNode,  int splitDir,  bool splitOuter,  ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						fixed (Vector2* poutPos = &outPos)
						{
							byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockContextFindNodeByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* DockContextFindNodeByIDNative(ImGuiContext* ctx, uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* DockContextFindNodeByID( ImGuiContext* ctx,  uint id)
		{
			ImGuiDockNode* ret = DockContextFindNodeByIDNative(ctx, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeWindowMenuHandler_Default")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockNodeWindowMenuHandlerDefaultNative(ImGuiContext* ctx, ImGuiDockNode* node, ImGuiTabBar* tabBar);

		/// <summary>/// To be documented./// </summary>		public static void DockNodeWindowMenuHandlerDefault( ImGuiContext* ctx,  ImGuiDockNode* node,  ImGuiTabBar* tabBar)
		{
			DockNodeWindowMenuHandlerDefaultNative(ctx, node, tabBar);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockNodeWindowMenuHandlerDefault( ImGuiContext* ctx,  ref ImGuiDockNode node,  ImGuiTabBar* tabBar)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockNodeWindowMenuHandlerDefaultNative(ctx, (ImGuiDockNode*)pnode, tabBar);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockNodeWindowMenuHandlerDefault( ImGuiContext* ctx,  ImGuiDockNode* node,  ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DockNodeWindowMenuHandlerDefaultNative(ctx, node, (ImGuiTabBar*)ptabBar);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockNodeWindowMenuHandlerDefault( ImGuiContext* ctx,  ref ImGuiDockNode node,  ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (ImGuiTabBar* ptabBar = &tabBar)
				{
					DockNodeWindowMenuHandlerDefaultNative(ctx, (ImGuiDockNode*)pnode, (ImGuiTabBar*)ptabBar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeBeginAmendTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DockNodeBeginAmendTabBarNative(ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static bool DockNodeBeginAmendTabBar( ImGuiDockNode* node)
		{
			byte ret = DockNodeBeginAmendTabBarNative(node);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeEndAmendTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockNodeEndAmendTabBarNative();

		/// <summary>/// To be documented./// </summary>		public static void DockNodeEndAmendTabBar()
		{
			DockNodeEndAmendTabBarNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeGetRootNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* DockNodeGetRootNodeNative(ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* DockNodeGetRootNode( ImGuiDockNode* node)
		{
			ImGuiDockNode* ret = DockNodeGetRootNodeNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeIsInHierarchyOf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DockNodeIsInHierarchyOfNative(ImGuiDockNode* node, ImGuiDockNode* parent);

		/// <summary>/// To be documented./// </summary>		public static bool DockNodeIsInHierarchyOf( ImGuiDockNode* node,  ImGuiDockNode* parent)
		{
			byte ret = DockNodeIsInHierarchyOfNative(node, parent);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool DockNodeIsInHierarchyOf( ImGuiDockNode* node,  ref ImGuiDockNode parent)
		{
			fixed (ImGuiDockNode* pparent = &parent)
			{
				byte ret = DockNodeIsInHierarchyOfNative(node, (ImGuiDockNode*)pparent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeGetDepth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int DockNodeGetDepthNative(ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static int DockNodeGetDepth( ImGuiDockNode* node)
		{
			int ret = DockNodeGetDepthNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockNodeGetWindowMenuButtonId")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint DockNodeGetWindowMenuButtonIdNative(ImGuiDockNode* node);

		/// <summary>/// To be documented./// </summary>		public static uint DockNodeGetWindowMenuButtonId( ImGuiDockNode* node)
		{
			uint ret = DockNodeGetWindowMenuButtonIdNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowDockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* GetWindowDockNodeNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* GetWindowDockNode()
		{
			ImGuiDockNode* ret = GetWindowDockNodeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowAlwaysWantOwnTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte GetWindowAlwaysWantOwnTabBarNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static bool GetWindowAlwaysWantOwnTabBar( ImGuiWindow* window)
		{
			byte ret = GetWindowAlwaysWantOwnTabBarNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginDocked")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginDockedNative(ImGuiWindow* window, byte* pOpen);

		/// <summary>/// To be documented./// </summary>		public static void BeginDocked( ImGuiWindow* window,  byte* pOpen)
		{
			BeginDockedNative(window, pOpen);
		}

		/// <summary>/// To be documented./// </summary>		public static void BeginDocked( ImGuiWindow* window,  ref byte pOpen)
		{
			fixed (byte* ppOpen = &pOpen)
			{
				BeginDockedNative(window, (byte*)ppOpen);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginDockableDragDropSource")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginDockableDragDropSourceNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void BeginDockableDragDropSource( ImGuiWindow* window)
		{
			BeginDockableDragDropSourceNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginDockableDragDropTarget")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginDockableDragDropTargetNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void BeginDockableDragDropTarget( ImGuiWindow* window)
		{
			BeginDockableDragDropTargetNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowDock")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowDockNative(ImGuiWindow* window, uint dockId, int cond);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowDock( ImGuiWindow* window,  uint dockId,  int cond)
		{
			SetWindowDockNative(window, dockId, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderDockWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderDockWindowNative(byte* windowName, uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderDockWindow( byte* windowName,  uint nodeId)
		{
			DockBuilderDockWindowNative(windowName, nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderGetNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* DockBuilderGetNodeNative(uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* DockBuilderGetNode( uint nodeId)
		{
			ImGuiDockNode* ret = DockBuilderGetNodeNative(nodeId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderGetCentralNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDockNode* DockBuilderGetCentralNodeNative(uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDockNode* DockBuilderGetCentralNode( uint nodeId)
		{
			ImGuiDockNode* ret = DockBuilderGetCentralNodeNative(nodeId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderAddNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint DockBuilderAddNodeNative(uint nodeId, int flags);

		/// <summary>/// To be documented./// </summary>		public static uint DockBuilderAddNode( uint nodeId,  int flags)
		{
			uint ret = DockBuilderAddNodeNative(nodeId, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderRemoveNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderRemoveNodeNative(uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderRemoveNode( uint nodeId)
		{
			DockBuilderRemoveNodeNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderRemoveNodeDockedWindows")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderRemoveNodeDockedWindowsNative(uint nodeId, byte clearSettingsRefs);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderRemoveNodeDockedWindows( uint nodeId,  bool clearSettingsRefs)
		{
			DockBuilderRemoveNodeDockedWindowsNative(nodeId, clearSettingsRefs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderRemoveNodeChildNodes")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderRemoveNodeChildNodesNative(uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderRemoveNodeChildNodes( uint nodeId)
		{
			DockBuilderRemoveNodeChildNodesNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderSetNodePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderSetNodePosNative(uint nodeId, Vector2 pos);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderSetNodePos( uint nodeId,  Vector2 pos)
		{
			DockBuilderSetNodePosNative(nodeId, pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderSetNodeSize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderSetNodeSizeNative(uint nodeId, Vector2 size);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderSetNodeSize( uint nodeId,  Vector2 size)
		{
			DockBuilderSetNodeSizeNative(nodeId, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderSplitNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint DockBuilderSplitNodeNative(uint nodeId, int splitDir, float sizeRatioForNodeAtDir, uint* outIdAtDir, uint* outIdAtOppositeDir);

		/// <summary>/// To be documented./// </summary>		public static uint DockBuilderSplitNode( uint nodeId,  int splitDir,  float sizeRatioForNodeAtDir,  uint* outIdAtDir,  uint* outIdAtOppositeDir)
		{
			uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, outIdAtDir, outIdAtOppositeDir);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static uint DockBuilderSplitNode( uint nodeId,  int splitDir,  float sizeRatioForNodeAtDir,  ref uint outIdAtDir,  uint* outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtDir = &outIdAtDir)
			{
				uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, (uint*)poutIdAtDir, outIdAtOppositeDir);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint DockBuilderSplitNode( uint nodeId,  int splitDir,  float sizeRatioForNodeAtDir,  uint* outIdAtDir,  ref uint outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtOppositeDir = &outIdAtOppositeDir)
			{
				uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, outIdAtDir, (uint*)poutIdAtOppositeDir);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static uint DockBuilderSplitNode( uint nodeId,  int splitDir,  float sizeRatioForNodeAtDir,  ref uint outIdAtDir,  ref uint outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtDir = &outIdAtDir)
			{
				fixed (uint* poutIdAtOppositeDir = &outIdAtOppositeDir)
				{
					uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, (uint*)poutIdAtDir, (uint*)poutIdAtOppositeDir);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderCopyDockSpace")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderCopyDockSpaceNative(uint srcDockspaceId, uint dstDockspaceId, ImVectorConstCharPtr* inWindowRemapPairs);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyDockSpace( uint srcDockspaceId,  uint dstDockspaceId,  ImVectorConstCharPtr* inWindowRemapPairs)
		{
			DockBuilderCopyDockSpaceNative(srcDockspaceId, dstDockspaceId, inWindowRemapPairs);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyDockSpace( uint srcDockspaceId,  uint dstDockspaceId,  ref ImVectorConstCharPtr inWindowRemapPairs)
		{
			fixed (ImVectorConstCharPtr* pinWindowRemapPairs = &inWindowRemapPairs)
			{
				DockBuilderCopyDockSpaceNative(srcDockspaceId, dstDockspaceId, (ImVectorConstCharPtr*)pinWindowRemapPairs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderCopyNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderCopyNodeNative(uint srcNodeId, uint dstNodeId, ImVectorImGuiID* outNodeRemapPairs);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyNode( uint srcNodeId,  uint dstNodeId,  ImVectorImGuiID* outNodeRemapPairs)
		{
			DockBuilderCopyNodeNative(srcNodeId, dstNodeId, outNodeRemapPairs);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyNode( uint srcNodeId,  uint dstNodeId,  ref ImVectorImGuiID outNodeRemapPairs)
		{
			fixed (ImVectorImGuiID* poutNodeRemapPairs = &outNodeRemapPairs)
			{
				DockBuilderCopyNodeNative(srcNodeId, dstNodeId, (ImVectorImGuiID*)poutNodeRemapPairs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderCopyWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderCopyWindowSettingsNative(byte* srcName, byte* dstName);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyWindowSettings( byte* srcName,  byte* dstName)
		{
			DockBuilderCopyWindowSettingsNative(srcName, dstName);
		}

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyWindowSettings( byte* srcName,  ref byte dstName)
		{
			fixed (byte* pdstName = &dstName)
			{
				DockBuilderCopyWindowSettingsNative(srcName, (byte*)pdstName);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderCopyWindowSettings( byte* srcName,  string dstName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dstName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dstName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dstName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DockBuilderCopyWindowSettingsNative(srcName, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDockBuilderFinish")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DockBuilderFinishNative(uint nodeId);

		/// <summary>/// To be documented./// </summary>		public static void DockBuilderFinish( uint nodeId)
		{
			DockBuilderFinishNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushFocusScope")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushFocusScopeNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void PushFocusScope( uint id)
		{
			PushFocusScopeNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPopFocusScope")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopFocusScopeNative();

		/// <summary>/// To be documented./// </summary>		public static void PopFocusScope()
		{
			PopFocusScopeNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetCurrentFocusScope")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetCurrentFocusScopeNative();

		/// <summary>/// To be documented./// </summary>		public static uint GetCurrentFocusScope()
		{
			uint ret = GetCurrentFocusScopeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsDragDropActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsDragDropActiveNative();

		/// <summary>/// To be documented./// </summary>		public static bool IsDragDropActive()
		{
			byte ret = IsDragDropActiveNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginDragDropTargetCustom")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginDragDropTargetCustomNative(ImRect bb, uint id);

		/// <summary>/// To be documented./// </summary>		public static bool BeginDragDropTargetCustom( ImRect bb,  uint id)
		{
			byte ret = BeginDragDropTargetCustomNative(bb, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igClearDragDrop")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ClearDragDropNative();

		/// <summary>/// To be documented./// </summary>		public static void ClearDragDrop()
		{
			ClearDragDropNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsDragDropPayloadBeingAccepted")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsDragDropPayloadBeingAcceptedNative();

		/// <summary>/// To be documented./// </summary>		public static bool IsDragDropPayloadBeingAccepted()
		{
			byte ret = IsDragDropPayloadBeingAcceptedNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderDragDropTargetRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderDragDropTargetRectNative(ImRect bb);

		/// <summary>/// To be documented./// </summary>		public static void RenderDragDropTargetRect( ImRect bb)
		{
			RenderDragDropTargetRectNative(bb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetTypingSelectRequest")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTypingSelectRequest* GetTypingSelectRequestNative(int flags);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTypingSelectRequest* GetTypingSelectRequest( int flags)
		{
			ImGuiTypingSelectRequest* ret = GetTypingSelectRequestNative(flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTypingSelectFindMatch")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TypingSelectFindMatchNative(ImGuiTypingSelectRequest* req, int itemsCount, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, void* userData, int navItemIdx);

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc,  void* userData,  int navItemIdx)
		{
			int ret = TypingSelectFindMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, ref byte> getItemNameFunc,  void* userData,  int navItemIdx)
		{
			int ret = TypingSelectFindMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTypingSelectFindNextSingleCharMatch")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TypingSelectFindNextSingleCharMatchNative(ImGuiTypingSelectRequest* req, int itemsCount, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, void* userData, int navItemIdx);

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindNextSingleCharMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc,  void* userData,  int navItemIdx)
		{
			int ret = TypingSelectFindNextSingleCharMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindNextSingleCharMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, ref byte> getItemNameFunc,  void* userData,  int navItemIdx)
		{
			int ret = TypingSelectFindNextSingleCharMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTypingSelectFindBestLeadingMatch")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TypingSelectFindBestLeadingMatchNative(ImGuiTypingSelectRequest* req, int itemsCount, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*> getItemNameFunc, void* userData);

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindBestLeadingMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*> getItemNameFunc,  void* userData)
		{
			int ret = TypingSelectFindBestLeadingMatchNative(req, itemsCount, getItemNameFunc, userData);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int TypingSelectFindBestLeadingMatch( ImGuiTypingSelectRequest* req,  int itemsCount,  delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, ref byte> getItemNameFunc,  void* userData)
		{
			int ret = TypingSelectFindBestLeadingMatchNative(req, itemsCount, getItemNameFunc, userData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetWindowClipRectBeforeSetChannel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetWindowClipRectBeforeSetChannelNative(ImGuiWindow* window, ImRect clipRect);

		/// <summary>/// To be documented./// </summary>		public static void SetWindowClipRectBeforeSetChannel( ImGuiWindow* window,  ImRect clipRect)
		{
			SetWindowClipRectBeforeSetChannelNative(window, clipRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void BeginColumnsNative(byte* strId, int count, int flags);

		/// <summary>/// To be documented./// </summary>		public static void BeginColumns( byte* strId,  int count,  int flags)
		{
			BeginColumnsNative(strId, count, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igEndColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void EndColumnsNative();

		/// <summary>/// To be documented./// </summary>		public static void EndColumns()
		{
			EndColumnsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushColumnClipRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushColumnClipRectNative(int columnIndex);

		/// <summary>/// To be documented./// </summary>		public static void PushColumnClipRect( int columnIndex)
		{
			PushColumnClipRectNative(columnIndex);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPushColumnsBackground")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PushColumnsBackgroundNative();

		/// <summary>/// To be documented./// </summary>		public static void PushColumnsBackground()
		{
			PushColumnsBackgroundNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPopColumnsBackground")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void PopColumnsBackgroundNative();

		/// <summary>/// To be documented./// </summary>		public static void PopColumnsBackground()
		{
			PopColumnsBackgroundNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetColumnsID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetColumnsIDNative(byte* strId, int count);

		/// <summary>/// To be documented./// </summary>		public static uint GetColumnsID( byte* strId,  int count)
		{
			uint ret = GetColumnsIDNative(strId, count);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindOrCreateColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiOldColumns* FindOrCreateColumnsNative(ImGuiWindow* window, uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiOldColumns* FindOrCreateColumns( ImGuiWindow* window,  uint id)
		{
			ImGuiOldColumns* ret = FindOrCreateColumnsNative(window, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetColumnOffsetFromNorm")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GetColumnOffsetFromNormNative(ImGuiOldColumns* columns, float offsetNorm);

		/// <summary>/// To be documented./// </summary>		public static float GetColumnOffsetFromNorm( ImGuiOldColumns* columns,  float offsetNorm)
		{
			float ret = GetColumnOffsetFromNormNative(columns, offsetNorm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetColumnNormFromOffset")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GetColumnNormFromOffsetNative(ImGuiOldColumns* columns, float offset);

		/// <summary>/// To be documented./// </summary>		public static float GetColumnNormFromOffset( ImGuiOldColumns* columns,  float offset)
		{
			float ret = GetColumnNormFromOffsetNative(columns, offset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableOpenContextMenu")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableOpenContextMenuNative(int columnN);

		/// <summary>/// To be documented./// </summary>		public static void TableOpenContextMenu( int columnN)
		{
			TableOpenContextMenuNative(columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSetColumnWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSetColumnWidthNative(int columnN, float width);

		/// <summary>/// To be documented./// </summary>		public static void TableSetColumnWidth( int columnN,  float width)
		{
			TableSetColumnWidthNative(columnN, width);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSetColumnSortDirection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSetColumnSortDirectionNative(int columnN, int sortDirection, byte appendToSortSpecs);

		/// <summary>/// To be documented./// </summary>		public static void TableSetColumnSortDirection( int columnN,  int sortDirection,  bool appendToSortSpecs)
		{
			TableSetColumnSortDirectionNative(columnN, sortDirection, appendToSortSpecs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetHoveredColumn")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TableGetHoveredColumnNative();

		/// <summary>/// To be documented./// </summary>		public static int TableGetHoveredColumn()
		{
			int ret = TableGetHoveredColumnNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetHoveredRow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TableGetHoveredRowNative();

		/// <summary>/// To be documented./// </summary>		public static int TableGetHoveredRow()
		{
			int ret = TableGetHoveredRowNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetHeaderRowHeight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float TableGetHeaderRowHeightNative();

		/// <summary>/// To be documented./// </summary>		public static float TableGetHeaderRowHeight()
		{
			float ret = TableGetHeaderRowHeightNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetHeaderAngledMaxLabelWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float TableGetHeaderAngledMaxLabelWidthNative();

		/// <summary>/// To be documented./// </summary>		public static float TableGetHeaderAngledMaxLabelWidth()
		{
			float ret = TableGetHeaderAngledMaxLabelWidthNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTablePushBackgroundChannel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TablePushBackgroundChannelNative();

		/// <summary>/// To be documented./// </summary>		public static void TablePushBackgroundChannel()
		{
			TablePushBackgroundChannelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTablePopBackgroundChannel")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TablePopBackgroundChannelNative();

		/// <summary>/// To be documented./// </summary>		public static void TablePopBackgroundChannel()
		{
			TablePopBackgroundChannelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableAngledHeadersRowEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableAngledHeadersRowExNative(float angle, float labelWidth);

		/// <summary>/// To be documented./// </summary>		public static void TableAngledHeadersRowEx( float angle,  float labelWidth)
		{
			TableAngledHeadersRowExNative(angle, labelWidth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetCurrentTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTable* GetCurrentTableNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTable* GetCurrentTable()
		{
			ImGuiTable* ret = GetCurrentTableNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableFindByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTable* TableFindByIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTable* TableFindByID( uint id)
		{
			ImGuiTable* ret = TableFindByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginTableEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginTableExNative(byte* name, uint id, int columnsCount, int flags, Vector2 outerSize, float innerWidth);

		/// <summary>/// To be documented./// </summary>		public static bool BeginTableEx( byte* name,  uint id,  int columnsCount,  int flags,  Vector2 outerSize,  float innerWidth)
		{
			byte ret = BeginTableExNative(name, id, columnsCount, flags, outerSize, innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableBeginInitMemory")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableBeginInitMemoryNative(ImGuiTable* table, int columnsCount);

		/// <summary>/// To be documented./// </summary>		public static void TableBeginInitMemory( ImGuiTable* table,  int columnsCount)
		{
			TableBeginInitMemoryNative(table, columnsCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableBeginApplyRequests")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableBeginApplyRequestsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableBeginApplyRequests( ImGuiTable* table)
		{
			TableBeginApplyRequestsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSetupDrawChannels")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSetupDrawChannelsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableSetupDrawChannels( ImGuiTable* table)
		{
			TableSetupDrawChannelsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableUpdateLayout")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableUpdateLayoutNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableUpdateLayout( ImGuiTable* table)
		{
			TableUpdateLayoutNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableUpdateBorders")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableUpdateBordersNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableUpdateBorders( ImGuiTable* table)
		{
			TableUpdateBordersNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableUpdateColumnsWeightFromWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableUpdateColumnsWeightFromWidthNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableUpdateColumnsWeightFromWidth( ImGuiTable* table)
		{
			TableUpdateColumnsWeightFromWidthNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableDrawBorders")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableDrawBordersNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableDrawBorders( ImGuiTable* table)
		{
			TableDrawBordersNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableDrawContextMenu")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableDrawContextMenuNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableDrawContextMenu( ImGuiTable* table)
		{
			TableDrawContextMenuNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableBeginContextMenuPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TableBeginContextMenuPopupNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static bool TableBeginContextMenuPopup( ImGuiTable* table)
		{
			byte ret = TableBeginContextMenuPopupNative(table);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableMergeDrawChannels")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableMergeDrawChannelsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableMergeDrawChannels( ImGuiTable* table)
		{
			TableMergeDrawChannelsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetInstanceData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableInstanceData* TableGetInstanceDataNative(ImGuiTable* table, int instanceNo);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableInstanceData* TableGetInstanceData( ImGuiTable* table,  int instanceNo)
		{
			ImGuiTableInstanceData* ret = TableGetInstanceDataNative(table, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetInstanceID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint TableGetInstanceIDNative(ImGuiTable* table, int instanceNo);

		/// <summary>/// To be documented./// </summary>		public static uint TableGetInstanceID( ImGuiTable* table,  int instanceNo)
		{
			uint ret = TableGetInstanceIDNative(table, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSortSpecsSanitize")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSortSpecsSanitizeNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableSortSpecsSanitize( ImGuiTable* table)
		{
			TableSortSpecsSanitizeNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSortSpecsBuild")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSortSpecsBuildNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableSortSpecsBuild( ImGuiTable* table)
		{
			TableSortSpecsBuildNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetColumnNextSortDirection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TableGetColumnNextSortDirectionNative(ImGuiTableColumn* column);

		/// <summary>/// To be documented./// </summary>		public static int TableGetColumnNextSortDirection( ImGuiTableColumn* column)
		{
			int ret = TableGetColumnNextSortDirectionNative(column);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableFixColumnSortDirection")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableFixColumnSortDirectionNative(ImGuiTable* table, ImGuiTableColumn* column);

		/// <summary>/// To be documented./// </summary>		public static void TableFixColumnSortDirection( ImGuiTable* table,  ImGuiTableColumn* column)
		{
			TableFixColumnSortDirectionNative(table, column);
		}

		/// <summary>/// To be documented./// </summary>		public static void TableFixColumnSortDirection( ImGuiTable* table,  ref ImGuiTableColumn column)
		{
			fixed (ImGuiTableColumn* pcolumn = &column)
			{
				TableFixColumnSortDirectionNative(table, (ImGuiTableColumn*)pcolumn);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetColumnWidthAuto")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float TableGetColumnWidthAutoNative(ImGuiTable* table, ImGuiTableColumn* column);

		/// <summary>/// To be documented./// </summary>		public static float TableGetColumnWidthAuto( ImGuiTable* table,  ImGuiTableColumn* column)
		{
			float ret = TableGetColumnWidthAutoNative(table, column);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static float TableGetColumnWidthAuto( ImGuiTable* table,  ref ImGuiTableColumn column)
		{
			fixed (ImGuiTableColumn* pcolumn = &column)
			{
				float ret = TableGetColumnWidthAutoNative(table, (ImGuiTableColumn*)pcolumn);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableBeginRow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableBeginRowNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableBeginRow( ImGuiTable* table)
		{
			TableBeginRowNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableEndRow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableEndRowNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableEndRow( ImGuiTable* table)
		{
			TableEndRowNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableBeginCell")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableBeginCellNative(ImGuiTable* table, int columnN);

		/// <summary>/// To be documented./// </summary>		public static void TableBeginCell( ImGuiTable* table,  int columnN)
		{
			TableBeginCellNative(table, columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableEndCell")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableEndCellNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableEndCell( ImGuiTable* table)
		{
			TableEndCellNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetCellBgRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableGetCellBgRectNative(ImRect* pOut, ImGuiTable* table, int columnN);

		/// <summary>/// To be documented./// </summary>		public static void TableGetCellBgRect( ImRect* pOut,  ImGuiTable* table,  int columnN)
		{
			TableGetCellBgRectNative(pOut, table, columnN);
		}

		/// <summary>/// To be documented./// </summary>		public static void TableGetCellBgRect( ImRect* pOut,  ref ImGuiTable table,  int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableGetCellBgRectNative(pOut, (ImGuiTable*)ptable, columnN);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetColumnName_TablePtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* TableGetColumnNameTablePtrNative(ImGuiTable* table, int columnN);

		/// <summary>/// To be documented./// </summary>		public static byte* TableGetColumnNameTablePtr( ImGuiTable* table,  int columnN)
		{
			byte* ret = TableGetColumnNameTablePtrNative(table, columnN);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string TableGetColumnNameTablePtrS( ImGuiTable* table,  int columnN)
		{
			string ret = Utils.DecodeStringUTF8(TableGetColumnNameTablePtrNative(table, columnN));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetColumnResizeID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint TableGetColumnResizeIDNative(ImGuiTable* table, int columnN, int instanceNo);

		/// <summary>/// To be documented./// </summary>		public static uint TableGetColumnResizeID( ImGuiTable* table,  int columnN,  int instanceNo)
		{
			uint ret = TableGetColumnResizeIDNative(table, columnN, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetMaxColumnWidth")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float TableGetMaxColumnWidthNative(ImGuiTable* table, int columnN);

		/// <summary>/// To be documented./// </summary>		public static float TableGetMaxColumnWidth( ImGuiTable* table,  int columnN)
		{
			float ret = TableGetMaxColumnWidthNative(table, columnN);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSetColumnWidthAutoSingle")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSetColumnWidthAutoSingleNative(ImGuiTable* table, int columnN);

		/// <summary>/// To be documented./// </summary>		public static void TableSetColumnWidthAutoSingle( ImGuiTable* table,  int columnN)
		{
			TableSetColumnWidthAutoSingleNative(table, columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSetColumnWidthAutoAll")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSetColumnWidthAutoAllNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableSetColumnWidthAutoAll( ImGuiTable* table)
		{
			TableSetColumnWidthAutoAllNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableRemove")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableRemoveNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableRemove( ImGuiTable* table)
		{
			TableRemoveNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGcCompactTransientBuffers_TablePtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableGcCompactTransientBuffersTablePtrNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableGcCompactTransientBuffersTablePtr( ImGuiTable* table)
		{
			TableGcCompactTransientBuffersTablePtrNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGcCompactTransientBuffers_TableTempDataPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableGcCompactTransientBuffersTableTempDataPtrNative(ImGuiTableTempData* table);

		/// <summary>/// To be documented./// </summary>		public static void TableGcCompactTransientBuffersTableTempDataPtr( ImGuiTableTempData* table)
		{
			TableGcCompactTransientBuffersTableTempDataPtrNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGcCompactSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableGcCompactSettingsNative();

		/// <summary>/// To be documented./// </summary>		public static void TableGcCompactSettings()
		{
			TableGcCompactSettingsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableLoadSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableLoadSettingsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableLoadSettings( ImGuiTable* table)
		{
			TableLoadSettingsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSaveSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSaveSettingsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableSaveSettings( ImGuiTable* table)
		{
			TableSaveSettingsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableResetSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableResetSettingsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void TableResetSettings( ImGuiTable* table)
		{
			TableResetSettingsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableGetBoundSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableSettings* TableGetBoundSettingsNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableSettings* TableGetBoundSettings( ImGuiTable* table)
		{
			ImGuiTableSettings* ret = TableGetBoundSettingsNative(table);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSettingsAddSettingsHandler")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TableSettingsAddSettingsHandlerNative();

		/// <summary>/// To be documented./// </summary>		public static void TableSettingsAddSettingsHandler()
		{
			TableSettingsAddSettingsHandlerNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSettingsCreate")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableSettings* TableSettingsCreateNative(uint id, int columnsCount);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableSettings* TableSettingsCreate( uint id,  int columnsCount)
		{
			ImGuiTableSettings* ret = TableSettingsCreateNative(id, columnsCount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTableSettingsFindByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTableSettings* TableSettingsFindByIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTableSettings* TableSettingsFindByID( uint id)
		{
			ImGuiTableSettings* ret = TableSettingsFindByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetCurrentTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabBar* GetCurrentTabBarNative();

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabBar* GetCurrentTabBar()
		{
			ImGuiTabBar* ret = GetCurrentTabBarNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igBeginTabBarEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte BeginTabBarExNative(ImGuiTabBar* tabBar, ImRect bb, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool BeginTabBarEx( ImGuiTabBar* tabBar,  ImRect bb,  int flags)
		{
			byte ret = BeginTabBarExNative(tabBar, bb, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarFindTabByID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* TabBarFindTabByIDNative(ImGuiTabBar* tabBar, uint tabId);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabItem* TabBarFindTabByID( ImGuiTabBar* tabBar,  uint tabId)
		{
			ImGuiTabItem* ret = TabBarFindTabByIDNative(tabBar, tabId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarFindTabByOrder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* TabBarFindTabByOrderNative(ImGuiTabBar* tabBar, int order);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabItem* TabBarFindTabByOrder( ImGuiTabBar* tabBar,  int order)
		{
			ImGuiTabItem* ret = TabBarFindTabByOrderNative(tabBar, order);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarFindMostRecentlySelectedTabForActiveWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* TabBarFindMostRecentlySelectedTabForActiveWindowNative(ImGuiTabBar* tabBar);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabItem* TabBarFindMostRecentlySelectedTabForActiveWindow( ImGuiTabBar* tabBar)
		{
			ImGuiTabItem* ret = TabBarFindMostRecentlySelectedTabForActiveWindowNative(tabBar);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarGetCurrentTab")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiTabItem* TabBarGetCurrentTabNative(ImGuiTabBar* tabBar);

		/// <summary>/// To be documented./// </summary>		public static ImGuiTabItem* TabBarGetCurrentTab( ImGuiTabBar* tabBar)
		{
			ImGuiTabItem* ret = TabBarGetCurrentTabNative(tabBar);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarGetTabOrder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int TabBarGetTabOrderNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab);

		/// <summary>/// To be documented./// </summary>		public static int TabBarGetTabOrder( ImGuiTabBar* tabBar,  ImGuiTabItem* tab)
		{
			int ret = TabBarGetTabOrderNative(tabBar, tab);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int TabBarGetTabOrder( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				int ret = TabBarGetTabOrderNative(tabBar, (ImGuiTabItem*)ptab);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarGetTabName")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* TabBarGetTabNameNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab);

		/// <summary>/// To be documented./// </summary>		public static byte* TabBarGetTabName( ImGuiTabBar* tabBar,  ImGuiTabItem* tab)
		{
			byte* ret = TabBarGetTabNameNative(tabBar, tab);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string TabBarGetTabNameS( ImGuiTabBar* tabBar,  ImGuiTabItem* tab)
		{
			string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative(tabBar, tab));
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static byte* TabBarGetTabName( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				byte* ret = TabBarGetTabNameNative(tabBar, (ImGuiTabItem*)ptab);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static string TabBarGetTabNameS( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative(tabBar, (ImGuiTabItem*)ptab));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarAddTab")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarAddTabNative(ImGuiTabBar* tabBar, int tabFlags, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void TabBarAddTab( ImGuiTabBar* tabBar,  int tabFlags,  ImGuiWindow* window)
		{
			TabBarAddTabNative(tabBar, tabFlags, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabBarAddTab( ImGuiTabBar* tabBar,  int tabFlags,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				TabBarAddTabNative(tabBar, tabFlags, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarRemoveTab")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarRemoveTabNative(ImGuiTabBar* tabBar, uint tabId);

		/// <summary>/// To be documented./// </summary>		public static void TabBarRemoveTab( ImGuiTabBar* tabBar,  uint tabId)
		{
			TabBarRemoveTabNative(tabBar, tabId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarCloseTab")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarCloseTabNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab);

		/// <summary>/// To be documented./// </summary>		public static void TabBarCloseTab( ImGuiTabBar* tabBar,  ImGuiTabItem* tab)
		{
			TabBarCloseTabNative(tabBar, tab);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabBarCloseTab( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarCloseTabNative(tabBar, (ImGuiTabItem*)ptab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarQueueFocus")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarQueueFocusNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab);

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueFocus( ImGuiTabBar* tabBar,  ImGuiTabItem* tab)
		{
			TabBarQueueFocusNative(tabBar, tab);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueFocus( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueFocusNative(tabBar, (ImGuiTabItem*)ptab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarQueueReorder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarQueueReorderNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab, int offset);

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueReorder( ImGuiTabBar* tabBar,  ImGuiTabItem* tab,  int offset)
		{
			TabBarQueueReorderNative(tabBar, tab, offset);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueReorder( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab,  int offset)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueReorderNative(tabBar, (ImGuiTabItem*)ptab, offset);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarQueueReorderFromMousePos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabBarQueueReorderFromMousePosNative(ImGuiTabBar* tabBar, ImGuiTabItem* tab, Vector2 mousePos);

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueReorderFromMousePos( ImGuiTabBar* tabBar,  ImGuiTabItem* tab,  Vector2 mousePos)
		{
			TabBarQueueReorderFromMousePosNative(tabBar, tab, mousePos);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabBarQueueReorderFromMousePos( ImGuiTabBar* tabBar,  ref ImGuiTabItem tab,  Vector2 mousePos)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueReorderFromMousePosNative(tabBar, (ImGuiTabItem*)ptab, mousePos);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabBarProcessReorder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TabBarProcessReorderNative(ImGuiTabBar* tabBar);

		/// <summary>/// To be documented./// </summary>		public static bool TabBarProcessReorder( ImGuiTabBar* tabBar)
		{
			byte ret = TabBarProcessReorderNative(tabBar);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabItemEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TabItemExNative(ImGuiTabBar* tabBar, byte* label, byte* pOpen, int flags, ImGuiWindow* dockedWindow);

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  byte* label,  byte* pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			byte ret = TabItemExNative(tabBar, label, pOpen, flags, dockedWindow);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  ref byte label,  byte* pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  string label,  byte* pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TabItemExNative(tabBar, pStr0, pOpen, flags, dockedWindow);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  byte* label,  ref byte pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			fixed (byte* ppOpen = &pOpen)
			{
				byte ret = TabItemExNative(tabBar, label, (byte*)ppOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  ref byte label,  ref byte pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* ppOpen = &pOpen)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, (byte*)ppOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  string label,  ref byte pOpen,  int flags,  ImGuiWindow* dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppOpen = &pOpen)
			{
				byte ret = TabItemExNative(tabBar, pStr0, (byte*)ppOpen, flags, dockedWindow);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  byte* label,  byte* pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
			{
				byte ret = TabItemExNative(tabBar, label, pOpen, flags, (ImGuiWindow*)pdockedWindow);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  ref byte label,  byte* pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  string label,  byte* pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
			{
				byte ret = TabItemExNative(tabBar, pStr0, pOpen, flags, (ImGuiWindow*)pdockedWindow);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  byte* label,  ref byte pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			fixed (byte* ppOpen = &pOpen)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, label, (byte*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  ref byte label,  ref byte pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* ppOpen = &pOpen)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative(tabBar, (byte*)plabel, (byte*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TabItemEx( ImGuiTabBar* tabBar,  string label,  ref byte pOpen,  int flags,  ref ImGuiWindow dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppOpen = &pOpen)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, pStr0, (byte*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabItemCalcSize_Str")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabItemCalcSizeNative(Vector2* pOut, byte* label, byte hasCloseButtonOrUnsavedMarker);

		/// <summary>/// To be documented./// </summary>		public static void TabItemCalcSize( Vector2* pOut,  byte* label,  bool hasCloseButtonOrUnsavedMarker)
		{
			TabItemCalcSizeNative(pOut, label, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemCalcSize( Vector2* pOut,  ref byte label,  bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (byte* plabel = &label)
			{
				TabItemCalcSizeNative(pOut, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemCalcSize( Vector2* pOut,  string label,  bool hasCloseButtonOrUnsavedMarker)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TabItemCalcSizeNative(pOut, pStr0, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabItemCalcSize_WindowPtr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabItemCalcSizeWindowPtrNative(Vector2* pOut, ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void TabItemCalcSizeWindowPtr( Vector2* pOut,  ImGuiWindow* window)
		{
			TabItemCalcSizeWindowPtrNative(pOut, window);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemCalcSizeWindowPtr( Vector2* pOut,  ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				TabItemCalcSizeWindowPtrNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabItemBackground")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabItemBackgroundNative(ImDrawList* drawList, ImRect bb, int flags, uint col);

		/// <summary>/// To be documented./// </summary>		public static void TabItemBackground( ImDrawList* drawList,  ImRect bb,  int flags,  uint col)
		{
			TabItemBackgroundNative(drawList, bb, flags, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTabItemLabelAndCloseButton")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TabItemLabelAndCloseButtonNative(ImDrawList* drawList, ImRect bb, int flags, Vector2 framePadding, byte* label, uint tabId, uint closeButtonId, byte isContentsVisible, byte* outJustClosed, byte* outTextClipped);

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  byte* label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  byte* outTextClipped)
		{
			TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  ref byte label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  byte* outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  string label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  byte* outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  byte* label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  byte* outTextClipped)
		{
			fixed (byte* poutJustClosed = &outJustClosed)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, outTextClipped);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  ref byte label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  byte* outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poutJustClosed = &outJustClosed)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  string label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  byte* outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* poutJustClosed = &outJustClosed)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, outTextClipped);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  byte* label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  ref byte outTextClipped)
		{
			fixed (byte* poutTextClipped = &outTextClipped)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (byte*)poutTextClipped);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  ref byte label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  ref byte outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (byte*)poutTextClipped);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  string label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  byte* outJustClosed,  ref byte outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* poutTextClipped = &outTextClipped)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (byte*)poutTextClipped);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  byte* label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  ref byte outTextClipped)
		{
			fixed (byte* poutJustClosed = &outJustClosed)
			{
				fixed (byte* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, (byte*)poutTextClipped);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  ref byte label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  ref byte outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poutJustClosed = &outJustClosed)
				{
					fixed (byte* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, (byte*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TabItemLabelAndCloseButton( ImDrawList* drawList,  ImRect bb,  int flags,  Vector2 framePadding,  string label,  uint tabId,  uint closeButtonId,  bool isContentsVisible,  ref byte outJustClosed,  ref byte outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* poutJustClosed = &outJustClosed)
			{
				fixed (byte* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (byte*)poutJustClosed, (byte*)poutTextClipped);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderTextNative(Vector2 pos, byte* text, byte* textEnd, byte hideTextAfterHash);

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  byte* text,  byte* textEnd,  bool hideTextAfterHash)
		{
			RenderTextNative(pos, text, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  ref byte text,  byte* textEnd,  bool hideTextAfterHash)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextNative(pos, (byte*)ptext, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  string text,  byte* textEnd,  bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextNative(pos, pStr0, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  byte* text,  ref byte textEnd,  bool hideTextAfterHash)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextNative(pos, text, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  byte* text,  string textEnd,  bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextNative(pos, text, pStr0, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  ref byte text,  ref byte textEnd,  bool hideTextAfterHash)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextNative(pos, (byte*)ptext, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderText( Vector2 pos,  string text,  string textEnd,  bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextNative(pos, pStr0, pStr1, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderTextWrapped")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderTextWrappedNative(Vector2 pos, byte* text, byte* textEnd, float wrapWidth);

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  byte* text,  byte* textEnd,  float wrapWidth)
		{
			RenderTextWrappedNative(pos, text, textEnd, wrapWidth);
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  ref byte text,  byte* textEnd,  float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextWrappedNative(pos, (byte*)ptext, textEnd, wrapWidth);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  string text,  byte* textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextWrappedNative(pos, pStr0, textEnd, wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  byte* text,  ref byte textEnd,  float wrapWidth)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextWrappedNative(pos, text, (byte*)ptextEnd, wrapWidth);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  byte* text,  string textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextWrappedNative(pos, text, pStr0, wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  ref byte text,  ref byte textEnd,  float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextWrappedNative(pos, (byte*)ptext, (byte*)ptextEnd, wrapWidth);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextWrapped( Vector2 pos,  string text,  string textEnd,  float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextWrappedNative(pos, pStr0, pStr1, wrapWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderTextClipped")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderTextClippedNative(Vector2 posMin, Vector2 posMax, byte* text, byte* textEnd, Vector2* textSizeIfKnown, Vector2 align, ImRect* clipRect);

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			RenderTextClippedNative(posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedNative(posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedNative(posMin, posMax, text, pStr0, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextClippedNative(posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, clipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, text, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, text, pStr0, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClipped( Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderTextClippedEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderTextClippedExNative(ImDrawList* drawList, Vector2 posMin, Vector2 posMax, byte* text, byte* textEnd, Vector2* textSizeIfKnown, Vector2 align, ImRect* clipRect);

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, clipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  Vector2* textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  byte* textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  byte* text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  ref byte text,  ref byte textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextClippedEx( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  string text,  string textEnd,  ref Vector2 textSizeIfKnown,  Vector2 align,  ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}
	}
}
