// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igOpenPopupOnItemClick")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void OpenPopupOnItemClick([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			OpenPopupOnItemClickNative(pStr0, popupFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// helper to open popup when clicked on last item. Default to ImGuiPopupFlags_MouseButtonRight == 1. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igOpenPopupOnItemClick")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void OpenPopupOnItemClick([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			OpenPopupOnItemClickNative(pStr0, (ImGuiPopupFlags)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// manually close the popup we have begin-ed into.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCloseCurrentPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CloseCurrentPopupNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[263])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[263])();
			#endif
		}

		/// <summary>
		/// manually close the popup we have begin-ed into.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCloseCurrentPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CloseCurrentPopup()
		{
			CloseCurrentPopupNative();
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginPopupContextItemNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiPopupFlags, byte>)vt[264])(strId, popupFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiPopupFlags, byte>)vt[264])((nint)strId, popupFlags);
			#endif
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextItemNative(strId, popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			byte ret = BeginPopupContextItemNative(strId, (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem()
		{
			byte ret = BeginPopupContextItemNative((byte*)(default), (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextItemNative((byte*)(default), popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextItemNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextItemNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextItemNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextItemNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextItemNative(pStr0, popupFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on last item. Use str_id==NULL to associate the popup to previous item. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextItem([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextItemNative(pStr0, (ImGuiPopupFlags)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginPopupContextWindowNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiPopupFlags, byte>)vt[265])(strId, popupFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiPopupFlags, byte>)vt[265])((nint)strId, popupFlags);
			#endif
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextWindowNative(strId, popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			byte ret = BeginPopupContextWindowNative(strId, (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow()
		{
			byte ret = BeginPopupContextWindowNative((byte*)(default), (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextWindowNative((byte*)(default), popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextWindowNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextWindowNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextWindowNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextWindowNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextWindowNative(pStr0, popupFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked on current window.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextWindow")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextWindow([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextWindowNative(pStr0, (ImGuiPopupFlags)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginPopupContextVoidNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiPopupFlags, byte>)vt[266])(strId, popupFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiPopupFlags, byte>)vt[266])((nint)strId, popupFlags);
			#endif
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextVoidNative(strId, popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			byte ret = BeginPopupContextVoidNative(strId, (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid()
		{
			byte ret = BeginPopupContextVoidNative((byte*)(default), (ImGuiPopupFlags)(1));
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = BeginPopupContextVoidNative((byte*)(default), popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextVoidNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginPopupContextVoidNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextVoidNative((byte*)pstrId, popupFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginPopupContextVoidNative((byte*)pstrId, (ImGuiPopupFlags)(1));
				return ret != 0;
			}
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextVoidNative(pStr0, popupFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// open+begin popup when clicked in void (where there are no windows).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupContextVoid")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupContextVoid([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPopupContextVoidNative(pStr0, (ImGuiPopupFlags)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPopupOpenNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiPopupFlags, byte>)vt[267])(strId, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiPopupFlags, byte>)vt[267])((nint)strId, flags);
			#endif
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags flags)
		{
			byte ret = IsPopupOpenNative(strId, flags);
			return ret != 0;
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			byte ret = IsPopupOpenNative(strId, (ImGuiPopupFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = IsPopupOpenNative((byte*)pstrId, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = IsPopupOpenNative((byte*)pstrId, (ImGuiPopupFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = IsPopupOpenNative((byte*)pstrId, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = IsPopupOpenNative((byte*)pstrId, (ImGuiPopupFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsPopupOpenNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// return true if the popup is open.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpen([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsPopupOpenNative(pStr0, (ImGuiPopupFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTableNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, ImGuiTableFlags, Vector2, float, byte>)vt[268])(strId, columns, flags, outerSize, innerWidth);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, ImGuiTableFlags, Vector2, float, byte>)vt[268])((nint)strId, columns, flags, outerSize, innerWidth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte ret = BeginTableNative(strId, columns, flags, outerSize, innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			byte ret = BeginTableNative(strId, columns, flags, outerSize, (float)(0.0f));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags)
		{
			byte ret = BeginTableNative(strId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns)
		{
			byte ret = BeginTableNative(strId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			byte ret = BeginTableNative(strId, columns, (ImGuiTableFlags)(0), outerSize, (float)(0.0f));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte ret = BeginTableNative(strId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte ret = BeginTableNative(strId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte ret = BeginTableNative(strId, columns, (ImGuiTableFlags)(0), outerSize, innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, outerSize, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), outerSize, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, outerSize, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), outerSize, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTableNative((byte*)pstrId, columns, (ImGuiTableFlags)(0), outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, flags, outerSize, innerWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, flags, outerSize, (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, (ImGuiTableFlags)(0), outerSize, (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, flags, (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, (ImGuiTableFlags)(0), (Vector2)(new Vector2(0.0f,0.0f)), innerWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTable([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "int")] int columns, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableNative(pStr0, columns, (ImGuiTableFlags)(0), outerSize, innerWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// only call EndTable() if BeginTable() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndTableNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[269])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[269])();
			#endif
		}

		/// <summary>
		/// only call EndTable() if BeginTable() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndTable()
		{
			EndTableNative();
		}

		/// <summary>
		/// append into the first cell of a new row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableNextRowNative([NativeName(NativeNameType.Param, "row_flags")] [NativeName(NativeNameType.Type, "ImGuiTableRowFlags")] ImGuiTableRowFlags rowFlags, [NativeName(NativeNameType.Param, "min_row_height")] [NativeName(NativeNameType.Type, "float")] float minRowHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableRowFlags, float, void>)vt[270])(rowFlags, minRowHeight);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiTableRowFlags, float, void>)vt[270])(rowFlags, minRowHeight);
			#endif
		}

		/// <summary>
		/// append into the first cell of a new row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableNextRow([NativeName(NativeNameType.Param, "row_flags")] [NativeName(NativeNameType.Type, "ImGuiTableRowFlags")] ImGuiTableRowFlags rowFlags, [NativeName(NativeNameType.Param, "min_row_height")] [NativeName(NativeNameType.Type, "float")] float minRowHeight)
		{
			TableNextRowNative(rowFlags, minRowHeight);
		}

		/// <summary>
		/// append into the first cell of a new row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableNextRow([NativeName(NativeNameType.Param, "row_flags")] [NativeName(NativeNameType.Type, "ImGuiTableRowFlags")] ImGuiTableRowFlags rowFlags)
		{
			TableNextRowNative(rowFlags, (float)(0.0f));
		}

		/// <summary>
		/// append into the first cell of a new row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableNextRow()
		{
			TableNextRowNative((ImGuiTableRowFlags)(0), (float)(0.0f));
		}

		/// <summary>
		/// append into the first cell of a new row.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableNextRow([NativeName(NativeNameType.Param, "min_row_height")] [NativeName(NativeNameType.Type, "float")] float minRowHeight)
		{
			TableNextRowNative((ImGuiTableRowFlags)(0), minRowHeight);
		}

		/// <summary>
		/// append into the next column (or first column of next row if currently in last column). Return true when column is visible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextColumn")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TableNextColumnNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[271])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[271])();
			#endif
		}

		/// <summary>
		/// append into the next column (or first column of next row if currently in last column). Return true when column is visible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableNextColumn")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TableNextColumn()
		{
			byte ret = TableNextColumnNative();
			return ret != 0;
		}

		/// <summary>
		/// append into the specified column. Return true when column is visible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TableSetColumnIndexNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)vt[272])(columnN);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)vt[272])(columnN);
			#endif
		}

		/// <summary>
		/// append into the specified column. Return true when column is visible.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TableSetColumnIndex([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			byte ret = TableSetColumnIndexNative(columnN);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetupColumnNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, ImGuiTableColumnFlags, float, uint, void>)vt[273])(label, flags, initWidthOrWeight, userId);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiTableColumnFlags, float, uint, void>)vt[273])((nint)label, flags, initWidthOrWeight, userId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			TableSetupColumnNative(label, flags, initWidthOrWeight, userId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			TableSetupColumnNative(label, flags, initWidthOrWeight, (uint)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags)
		{
			TableSetupColumnNative(label, flags, (float)(0.0f), (uint)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			TableSetupColumnNative(label, (ImGuiTableColumnFlags)(0), (float)(0.0f), (uint)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			TableSetupColumnNative(label, (ImGuiTableColumnFlags)(0), initWidthOrWeight, (uint)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			TableSetupColumnNative(label, flags, (float)(0.0f), userId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			TableSetupColumnNative(label, (ImGuiTableColumnFlags)(0), (float)(0.0f), userId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			TableSetupColumnNative(label, (ImGuiTableColumnFlags)(0), initWidthOrWeight, userId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, flags, initWidthOrWeight, userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, flags, initWidthOrWeight, (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, flags, (float)(0.0f), (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), (float)(0.0f), (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), initWidthOrWeight, (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, flags, (float)(0.0f), userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), (float)(0.0f), userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = &label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), initWidthOrWeight, userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, flags, initWidthOrWeight, userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, flags, initWidthOrWeight, (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, flags, (float)(0.0f), (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), (float)(0.0f), (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), initWidthOrWeight, (uint)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, flags, (float)(0.0f), userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), (float)(0.0f), userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			fixed (byte* plabel = label)
			{
				TableSetupColumnNative((byte*)plabel, (ImGuiTableColumnFlags)(0), initWidthOrWeight, userId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, flags, initWidthOrWeight, userId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, flags, initWidthOrWeight, (uint)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, flags, (float)(0.0f), (uint)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, (ImGuiTableColumnFlags)(0), (float)(0.0f), (uint)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, (ImGuiTableColumnFlags)(0), initWidthOrWeight, (uint)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")] ImGuiTableColumnFlags flags, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, flags, (float)(0.0f), userId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, (ImGuiTableColumnFlags)(0), (float)(0.0f), userId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupColumn([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "init_width_or_weight")] [NativeName(NativeNameType.Type, "float")] float initWidthOrWeight, [NativeName(NativeNameType.Param, "user_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint userId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableSetupColumnNative(pStr0, (ImGuiTableColumnFlags)(0), initWidthOrWeight, userId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// lock columnsrows so they stay visible when scrolled.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupScrollFreeze")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetupScrollFreezeNative([NativeName(NativeNameType.Param, "cols")] [NativeName(NativeNameType.Type, "int")] int cols, [NativeName(NativeNameType.Param, "rows")] [NativeName(NativeNameType.Type, "int")] int rows)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[274])(cols, rows);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)vt[274])(cols, rows);
			#endif
		}

		/// <summary>
		/// lock columnsrows so they stay visible when scrolled.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupScrollFreeze")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupScrollFreeze([NativeName(NativeNameType.Param, "cols")] [NativeName(NativeNameType.Type, "int")] int cols, [NativeName(NativeNameType.Param, "rows")] [NativeName(NativeNameType.Type, "int")] int rows)
		{
			TableSetupScrollFreezeNative(cols, rows);
		}

		/// <summary>
		/// submit one header cell manually (rarely used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableHeaderNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[275])(label);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[275])((nint)label);
			#endif
		}

		/// <summary>
		/// submit one header cell manually (rarely used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableHeader([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			TableHeaderNative(label);
		}

		/// <summary>
		/// submit one header cell manually (rarely used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableHeader([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				TableHeaderNative((byte*)plabel);
			}
		}

		/// <summary>
		/// submit one header cell manually (rarely used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableHeader([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				TableHeaderNative((byte*)plabel);
			}
		}

		/// <summary>
		/// submit one header cell manually (rarely used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableHeader([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TableHeaderNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeadersRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableHeadersRowNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[276])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[276])();
			#endif
		}

		/// <summary>
		/// submit a row with headers cells based on data provided to TableSetupColumn() + submit context menu<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableHeadersRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableHeadersRow()
		{
			TableHeadersRowNative();
		}

		/// <summary>
		/// submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableAngledHeadersRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableAngledHeadersRowNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[277])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[277])();
			#endif
		}

		/// <summary>
		/// submit a row with angled headers for every column with the ImGuiTableColumnFlags_AngledHeader flag. MUST BE FIRST ROW.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableAngledHeadersRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableAngledHeadersRow()
		{
			TableAngledHeadersRowNative();
		}

		/// <summary>
		/// get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")]
		internal static ImGuiTableSortSpecs* TableGetSortSpecsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSortSpecs*>)vt[278])();
			#else
			return (ImGuiTableSortSpecs*)((delegate* unmanaged[Cdecl]<nint>)vt[278])();
			#endif
		}

		/// <summary>
		/// get latest sort specs for the table (NULL if not sorting).  Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")]
		public static ImGuiTableSortSpecs* TableGetSortSpecs()
		{
			ImGuiTableSortSpecs* ret = TableGetSortSpecsNative();
			return ret;
		}

		/// <summary>
		/// return number of columns (value passed to BeginTable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TableGetColumnCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[279])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[279])();
			#endif
		}

		/// <summary>
		/// return number of columns (value passed to BeginTable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TableGetColumnCount()
		{
			int ret = TableGetColumnCountNative();
			return ret;
		}

		/// <summary>
		/// return current column index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TableGetColumnIndexNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[280])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[280])();
			#endif
		}

		/// <summary>
		/// return current column index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TableGetColumnIndex()
		{
			int ret = TableGetColumnIndexNative();
			return ret;
		}

		/// <summary>
		/// return current row index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetRowIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TableGetRowIndexNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[281])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[281])();
			#endif
		}

		/// <summary>
		/// return current row index.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetRowIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TableGetRowIndex()
		{
			int ret = TableGetRowIndexNative();
			return ret;
		}

		/// <summary>
		/// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_Int")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* TableGetColumnNameNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[282])(columnN);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[282])(columnN);
			#endif
		}

		/// <summary>
		/// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_Int")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TableGetColumnName([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			byte* ret = TableGetColumnNameNative(columnN);
			return ret;
		}

		/// <summary>
		/// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_Int")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TableGetColumnName()
		{
			byte* ret = TableGetColumnNameNative((int)(-1));
			return ret;
		}

		/// <summary>
		/// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_Int")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TableGetColumnNameS()
		{
			string ret = Utils.DecodeStringUTF8(TableGetColumnNameNative((int)(-1)));
			return ret;
		}

		/// <summary>
		/// return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_Int")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TableGetColumnNameS([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			string ret = Utils.DecodeStringUTF8(TableGetColumnNameNative(columnN));
			return ret;
		}

		/// <summary>
		/// return column flags so you can query their EnabledVisibleSortedHovered status flags. Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")]
		internal static ImGuiTableColumnFlags TableGetColumnFlagsNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiTableColumnFlags>)vt[283])(columnN);
			#else
			return (ImGuiTableColumnFlags)((delegate* unmanaged[Cdecl]<int, ImGuiTableColumnFlags>)vt[283])(columnN);
			#endif
		}

		/// <summary>
		/// return column flags so you can query their EnabledVisibleSortedHovered status flags. Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")]
		public static ImGuiTableColumnFlags TableGetColumnFlags([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			ImGuiTableColumnFlags ret = TableGetColumnFlagsNative(columnN);
			return ret;
		}

		/// <summary>
		/// return column flags so you can query their EnabledVisibleSortedHovered status flags. Pass -1 to use current column.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnFlags")]
		public static ImGuiTableColumnFlags TableGetColumnFlags()
		{
			ImGuiTableColumnFlags ret = TableGetColumnFlagsNative((int)(-1));
			return ret;
		}

		/// <summary>
		/// change user accessible enableddisabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetColumnEnabledNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool")] byte v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[284])(columnN, v);
			#else
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[284])(columnN, v);
			#endif
		}

		/// <summary>
		/// change user accessible enableddisabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnEnabled([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool")] bool v)
		{
			TableSetColumnEnabledNative(columnN, v ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() &amp; ImGuiTableColumnFlags_IsHovered) instead.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHoveredColumn")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TableGetHoveredColumnNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[285])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[285])();
			#endif
		}

		/// <summary>
		/// return hovered column. return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered. Can also use (TableGetColumnFlags() &amp; ImGuiTableColumnFlags_IsHovered) instead.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHoveredColumn")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TableGetHoveredColumn()
		{
			int ret = TableGetHoveredColumnNative();
			return ret;
		}

		/// <summary>
		/// change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetBgColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetBgColorNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiTableBgTarget")] ImGuiTableBgTarget target, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "ImU32")] uint color, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableBgTarget, uint, int, void>)vt[286])(target, color, columnN);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiTableBgTarget, uint, int, void>)vt[286])(target, color, columnN);
			#endif
		}

		/// <summary>
		/// change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetBgColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetBgColor([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiTableBgTarget")] ImGuiTableBgTarget target, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "ImU32")] uint color, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			TableSetBgColorNative(target, color, columnN);
		}

		/// <summary>
		/// change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetBgColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetBgColor([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiTableBgTarget")] ImGuiTableBgTarget target, [NativeName(NativeNameType.Param, "color")] [NativeName(NativeNameType.Type, "ImU32")] uint color)
		{
			TableSetBgColorNative(target, color, (int)(-1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ColumnsNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] byte* id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] byte border)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, byte, void>)vt[287])(count, id, border);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, byte, void>)vt[287])(count, (nint)id, border);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] byte* id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			ColumnsNative(count, id, border ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] byte* id)
		{
			ColumnsNative(count, id, (byte)(1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			ColumnsNative(count, (byte*)(default), (byte)(1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns()
		{
			ColumnsNative((int)(1), (byte*)(default), (byte)(1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] byte* id)
		{
			ColumnsNative((int)(1), id, (byte)(1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			ColumnsNative(count, (byte*)(default), border ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			ColumnsNative((int)(1), (byte*)(default), border ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] byte* id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			ColumnsNative((int)(1), id, border ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ref byte id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			fixed (byte* pid = &id)
			{
				ColumnsNative(count, (byte*)pid, border ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ref byte id)
		{
			fixed (byte* pid = &id)
			{
				ColumnsNative(count, (byte*)pid, (byte)(1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ref byte id)
		{
			fixed (byte* pid = &id)
			{
				ColumnsNative((int)(1), (byte*)pid, (byte)(1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ref byte id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			fixed (byte* pid = &id)
			{
				ColumnsNative((int)(1), (byte*)pid, border ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			fixed (byte* pid = id)
			{
				ColumnsNative(count, (byte*)pid, border ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> id)
		{
			fixed (byte* pid = id)
			{
				ColumnsNative(count, (byte*)pid, (byte)(1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> id)
		{
			fixed (byte* pid = id)
			{
				ColumnsNative((int)(1), (byte*)pid, (byte)(1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			fixed (byte* pid = id)
			{
				ColumnsNative((int)(1), (byte*)pid, border ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] string id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColumnsNative(count, pStr0, border ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] string id)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColumnsNative(count, pStr0, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] string id)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColumnsNative((int)(1), pStr0, (byte)(1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Columns([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "const char*")] string id, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColumnsNative((int)(1), pStr0, border ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// next column, defaults to current row or next row if the current row is finished<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igNextColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NextColumnNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[288])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[288])();
			#endif
		}

		/// <summary>
		/// next column, defaults to current row or next row if the current row is finished<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igNextColumn")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NextColumn()
		{
			NextColumnNative();
		}

		/// <summary>
		/// get current column index<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetColumnIndexNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[289])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[289])();
			#endif
		}

		/// <summary>
		/// get current column index<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetColumnIndex()
		{
			int ret = GetColumnIndexNative();
			return ret;
		}

		/// <summary>
		/// get column width (in pixels). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetColumnWidthNative([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, float>)vt[290])(columnIndex);
			#else
			return (float)((delegate* unmanaged[Cdecl]<int, float>)vt[290])(columnIndex);
			#endif
		}

		/// <summary>
		/// get column width (in pixels). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnWidth([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			float ret = GetColumnWidthNative(columnIndex);
			return ret;
		}

		/// <summary>
		/// get column width (in pixels). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnWidth()
		{
			float ret = GetColumnWidthNative((int)(-1));
			return ret;
		}

		/// <summary>
		/// set column width (in pixels). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetColumnWidthNative([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[291])(columnIndex, width);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[291])(columnIndex, width);
			#endif
		}

		/// <summary>
		/// set column width (in pixels). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetColumnWidth([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			SetColumnWidthNative(columnIndex, width);
		}

		/// <summary>
		/// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetColumnOffsetNative([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, float>)vt[292])(columnIndex);
			#else
			return (float)((delegate* unmanaged[Cdecl]<int, float>)vt[292])(columnIndex);
			#endif
		}

		/// <summary>
		/// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnOffset([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			float ret = GetColumnOffsetNative(columnIndex);
			return ret;
		}

		/// <summary>
		/// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnOffset()
		{
			float ret = GetColumnOffsetNative((int)(-1));
			return ret;
		}

		/// <summary>
		/// set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetColumnOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetColumnOffsetNative([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex, [NativeName(NativeNameType.Param, "offset_x")] [NativeName(NativeNameType.Type, "float")] float offsetX)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[293])(columnIndex, offsetX);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[293])(columnIndex, offsetX);
			#endif
		}

		/// <summary>
		/// set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetColumnOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetColumnOffset([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex, [NativeName(NativeNameType.Param, "offset_x")] [NativeName(NativeNameType.Type, "float")] float offsetX)
		{
			SetColumnOffsetNative(columnIndex, offsetX);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetColumnsCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[294])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[294])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetColumnsCount()
		{
			int ret = GetColumnsCountNative();
			return ret;
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTabBarNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabBarFlags")] ImGuiTabBarFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiTabBarFlags, byte>)vt[295])(strId, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiTabBarFlags, byte>)vt[295])((nint)strId, flags);
			#endif
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabBarFlags")] ImGuiTabBarFlags flags)
		{
			byte ret = BeginTabBarNative(strId, flags);
			return ret != 0;
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			byte ret = BeginTabBarNative(strId, (ImGuiTabBarFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabBarFlags")] ImGuiTabBarFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTabBarNative((byte*)pstrId, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = BeginTabBarNative((byte*)pstrId, (ImGuiTabBarFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabBarFlags")] ImGuiTabBarFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTabBarNative((byte*)pstrId, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = BeginTabBarNative((byte*)pstrId, (ImGuiTabBarFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabBarFlags")] ImGuiTabBarFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabBarNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create and append into a TabBar<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabBar([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabBarNative(pStr0, (ImGuiTabBarFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// only call EndTabBar() if BeginTabBar() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndTabBarNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[296])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[296])();
			#endif
		}

		/// <summary>
		/// only call EndTabBar() if BeginTabBar() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndTabBar()
		{
			EndTabBarNative();
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTabItemNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, bool*, ImGuiTabItemFlags, byte>)vt[297])(label, pOpen, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiTabItemFlags, byte>)vt[297])((nint)label, (nint)pOpen, flags);
			#endif
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte ret = BeginTabItemNative(label, pOpen, flags);
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			byte ret = BeginTabItemNative(label, pOpen, (ImGuiTabItemFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = BeginTabItemNative(label, (bool*)(default), (ImGuiTabItemFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte ret = BeginTabItemNative(label, (bool*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, pOpen, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, pOpen, (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, (bool*)(default), (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, (bool*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, pOpen, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, pOpen, (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, (bool*)(default), (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginTabItemNative((byte*)plabel, (bool*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabItemNative(pStr0, pOpen, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabItemNative(pStr0, pOpen, (ImGuiTabItemFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabItemNative(pStr0, (bool*)(default), (ImGuiTabItemFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTabItemNative(pStr0, (bool*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginTabItemNative(label, (bool*)ppOpen, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginTabItemNative(label, (bool*)ppOpen, (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginTabItemNative((byte*)plabel, (bool*)ppOpen, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginTabItemNative((byte*)plabel, (bool*)ppOpen, (ImGuiTabItemFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginTabItemNative((byte*)plabel, (bool*)ppOpen, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = BeginTabItemNative((byte*)plabel, (bool*)ppOpen, (ImGuiTabItemFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginTabItemNative(pStr0, (bool*)ppOpen, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab. Returns true if the Tab is selected.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTabItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTabItem([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = BeginTabItemNative(pStr0, (bool*)ppOpen, (ImGuiTabItemFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// only call EndTabItem() if BeginTabItem() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTabItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndTabItemNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[298])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[298])();
			#endif
		}

		/// <summary>
		/// only call EndTabItem() if BeginTabItem() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndTabItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndTabItem()
		{
			EndTabItemNative();
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TabItemButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiTabItemFlags, byte>)vt[299])(label, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiTabItemFlags, byte>)vt[299])((nint)label, flags);
			#endif
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte ret = TabItemButtonNative(label, flags);
			return ret != 0;
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = TabItemButtonNative(label, (ImGuiTabItemFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TabItemButtonNative((byte*)plabel, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TabItemButtonNative((byte*)plabel, (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TabItemButtonNative((byte*)plabel, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TabItemButtonNative((byte*)plabel, (ImGuiTabItemFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TabItemButtonNative(pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TabItemButtonNative(pStr0, (ImGuiTabItemFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// notify TabBar or Docking system of a closed tabwindow ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetTabItemClosed")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetTabItemClosedNative([NativeName(NativeNameType.Param, "tab_or_docked_window_label")] [NativeName(NativeNameType.Type, "const char*")] byte* tabOrDockedWindowLabel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[300])(tabOrDockedWindowLabel);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[300])((nint)tabOrDockedWindowLabel);
			#endif
		}

		/// <summary>
		/// notify TabBar or Docking system of a closed tabwindow ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetTabItemClosed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTabItemClosed([NativeName(NativeNameType.Param, "tab_or_docked_window_label")] [NativeName(NativeNameType.Type, "const char*")] byte* tabOrDockedWindowLabel)
		{
			SetTabItemClosedNative(tabOrDockedWindowLabel);
		}

		/// <summary>
		/// notify TabBar or Docking system of a closed tabwindow ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetTabItemClosed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTabItemClosed([NativeName(NativeNameType.Param, "tab_or_docked_window_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte tabOrDockedWindowLabel)
		{
			fixed (byte* ptabOrDockedWindowLabel = &tabOrDockedWindowLabel)
			{
				SetTabItemClosedNative((byte*)ptabOrDockedWindowLabel);
			}
		}

		/// <summary>
		/// notify TabBar or Docking system of a closed tabwindow ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetTabItemClosed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTabItemClosed([NativeName(NativeNameType.Param, "tab_or_docked_window_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> tabOrDockedWindowLabel)
		{
			fixed (byte* ptabOrDockedWindowLabel = tabOrDockedWindowLabel)
			{
				SetTabItemClosedNative((byte*)ptabOrDockedWindowLabel);
			}
		}

		/// <summary>
		/// notify TabBar or Docking system of a closed tabwindow ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetTabItemClosed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTabItemClosed([NativeName(NativeNameType.Param, "tab_or_docked_window_label")] [NativeName(NativeNameType.Type, "const char*")] string tabOrDockedWindowLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (tabOrDockedWindowLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(tabOrDockedWindowLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(tabOrDockedWindowLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetTabItemClosedNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockSpaceNative([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Vector2, ImGuiDockNodeFlags, ImGuiWindowClass*, uint>)vt[301])(dockspaceId, size, flags, windowClass);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, Vector2, ImGuiDockNodeFlags, nint, uint>)vt[301])(dockspaceId, size, flags, (nint)windowClass);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceNative(dockspaceId, size, flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceNative(dockspaceId, size, flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			uint ret = DockSpaceNative(dockspaceId, size, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId)
		{
			uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceNative(dockspaceId, size, (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceNative(dockspaceId, size, flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceNative(dockspaceId, size, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpace")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpace([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceNative(dockspaceId, (Vector2)(new Vector2(0,0)), flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockSpaceOverViewportNative([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiViewport*, ImGuiDockNodeFlags, ImGuiWindowClass*, uint>)vt[302])(dockspaceId, viewport, flags, windowClass);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, ImGuiDockNodeFlags, nint, uint>)vt[302])(dockspaceId, (nint)viewport, flags, (nint)windowClass);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport()
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), viewport, flags, (ImGuiWindowClass*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), viewport, (ImGuiDockNodeFlags)(0), windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			uint ret = DockSpaceOverViewportNative((uint)(0), viewport, flags, windowClass);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, flags, windowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), windowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), windowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, flags, windowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), viewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)(default), flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)(default), flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				uint ret = DockSpaceOverViewportNative((uint)(0), viewport, flags, (ImGuiWindowClass*)pwindowClass);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockspaceId, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = DockSpaceOverViewportNative(dockspaceId, (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, (ImGuiDockNodeFlags)(0), (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockSpaceOverViewport")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockSpaceOverViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags, [NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				fixed (ImGuiWindowClass* pwindowClass = &windowClass)
				{
					uint ret = DockSpaceOverViewportNative((uint)(0), (ImGuiViewport*)pviewport, flags, (ImGuiWindowClass*)pwindowClass);
					return ret;
				}
			}
		}

		/// <summary>
		/// set next window dock id<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowDockID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNextWindowDockIDNative([NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiCond, void>)vt[303])(dockId, cond);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiCond, void>)vt[303])(dockId, cond);
			#endif
		}

		/// <summary>
		/// set next window dock id<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowDockID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextWindowDockID([NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			SetNextWindowDockIDNative(dockId, cond);
		}

		/// <summary>
		/// set next window dock id<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowDockID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextWindowDockID([NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId)
		{
			SetNextWindowDockIDNative(dockId, (ImGuiCond)(0));
		}

		/// <summary>
		/// set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parentchild relationship)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowClass")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNextWindowClassNative([NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowClass*, void>)vt[304])(windowClass);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[304])((nint)windowClass);
			#endif
		}

		/// <summary>
		/// set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parentchild relationship)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowClass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextWindowClass([NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ImGuiWindowClass* windowClass)
		{
			SetNextWindowClassNative(windowClass);
		}

		/// <summary>
		/// set next window class (control docking compatibility + provide hints to platform backend via custom viewport flags and platform parentchild relationship)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowClass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextWindowClass([NativeName(NativeNameType.Param, "window_class")] [NativeName(NativeNameType.Type, "const ImGuiWindowClass*")] ref ImGuiWindowClass windowClass)
		{
			fixed (ImGuiWindowClass* pwindowClass = &windowClass)
			{
				SetNextWindowClassNative((ImGuiWindowClass*)pwindowClass);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowDockID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetWindowDockIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[305])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[305])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowDockID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowDockID()
		{
			uint ret = GetWindowDockIDNative();
			return ret;
		}

		/// <summary>
		/// is current window docked into another window?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowDocked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowDockedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[306])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[306])();
			#endif
		}

		/// <summary>
		/// is current window docked into another window?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowDocked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowDocked()
		{
			byte ret = IsWindowDockedNative();
			return ret != 0;
		}

		/// <summary>
		/// start logging to tty (stdout)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToTTY")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogToTTYNative([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[307])(autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[307])(autoOpenDepth);
			#endif
		}

		/// <summary>
		/// start logging to tty (stdout)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToTTY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToTTY([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			LogToTTYNative(autoOpenDepth);
		}

		/// <summary>
		/// start logging to tty (stdout)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToTTY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToTTY()
		{
			LogToTTYNative((int)(-1));
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogToFileNative([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)vt[308])(autoOpenDepth, filename);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)vt[308])(autoOpenDepth, (nint)filename);
			#endif
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			LogToFileNative(autoOpenDepth, filename);
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			LogToFileNative(autoOpenDepth, (byte*)(default));
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile()
		{
			LogToFileNative((int)(-1), (byte*)(default));
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename)
		{
			LogToFileNative((int)(-1), filename);
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename)
		{
			fixed (byte* pfilename = &filename)
			{
				LogToFileNative(autoOpenDepth, (byte*)pfilename);
			}
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename)
		{
			fixed (byte* pfilename = &filename)
			{
				LogToFileNative((int)(-1), (byte*)pfilename);
			}
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename)
		{
			fixed (byte* pfilename = filename)
			{
				LogToFileNative(autoOpenDepth, (byte*)pfilename);
			}
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename)
		{
			fixed (byte* pfilename = filename)
			{
				LogToFileNative((int)(-1), (byte*)pfilename);
			}
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogToFileNative(autoOpenDepth, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// start logging to file<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToFile")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToFile([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogToFileNative((int)(-1), pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// start logging to OS clipboard<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToClipboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogToClipboardNative([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[309])(autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[309])(autoOpenDepth);
			#endif
		}

		/// <summary>
		/// start logging to OS clipboard<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToClipboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToClipboard([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			LogToClipboardNative(autoOpenDepth);
		}

		/// <summary>
		/// start logging to OS clipboard<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToClipboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToClipboard()
		{
			LogToClipboardNative((int)(-1));
		}

		/// <summary>
		/// stop logging (close file, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogFinishNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[310])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[310])();
			#endif
		}

		/// <summary>
		/// stop logging (close file, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogFinish()
		{
			LogFinishNative();
		}

		/// <summary>
		/// helper to display buttons for logging to ttyfileclipboard<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogButtons")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogButtonsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[311])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[311])();
			#endif
		}

		/// <summary>
		/// helper to display buttons for logging to ttyfileclipboard<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogButtons")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogButtons()
		{
			LogButtonsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogTextVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[312])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[312])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			LogTextVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				LogTextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				LogTextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogTextVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}
	}
}
