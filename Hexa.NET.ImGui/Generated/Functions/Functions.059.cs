// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBuffer([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte** poutBufEnd = &outBufEnd)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (fmt != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(fmt);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImFormatStringToTempBufferNative((byte**)poutBuf, (byte**)poutBufEnd, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFormatStringToTempBufferVNative([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, byte**, byte*, nint, void>)vt[702])(outBuf, outBufEnd, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)vt[702])((nint)outBuf, (nint)outBufEnd, (nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			ImFormatStringToTempBufferVNative(outBuf, outBufEnd, fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				ImFormatStringToTempBufferVNative((byte**)poutBuf, outBufEnd, fmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBufEnd = &outBufEnd)
			{
				ImFormatStringToTempBufferVNative(outBuf, (byte**)poutBufEnd, fmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte** poutBufEnd = &outBufEnd)
				{
					ImFormatStringToTempBufferVNative((byte**)poutBuf, (byte**)poutBufEnd, fmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				ImFormatStringToTempBufferVNative(outBuf, outBufEnd, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				ImFormatStringToTempBufferVNative(outBuf, outBufEnd, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFormatStringToTempBufferVNative(outBuf, outBufEnd, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte* pfmt = &fmt)
				{
					ImFormatStringToTempBufferVNative((byte**)poutBuf, outBufEnd, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte* pfmt = fmt)
				{
					ImFormatStringToTempBufferVNative((byte**)poutBuf, outBufEnd, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] byte** outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFormatStringToTempBufferVNative((byte**)poutBuf, outBufEnd, pStr0, args);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBufEnd = &outBufEnd)
			{
				fixed (byte* pfmt = &fmt)
				{
					ImFormatStringToTempBufferVNative(outBuf, (byte**)poutBufEnd, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBufEnd = &outBufEnd)
			{
				fixed (byte* pfmt = fmt)
				{
					ImFormatStringToTempBufferVNative(outBuf, (byte**)poutBufEnd, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] byte** outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBufEnd = &outBufEnd)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFormatStringToTempBufferVNative(outBuf, (byte**)poutBufEnd, pStr0, args);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte** poutBufEnd = &outBufEnd)
				{
					fixed (byte* pfmt = &fmt)
					{
						ImFormatStringToTempBufferVNative((byte**)poutBuf, (byte**)poutBufEnd, (byte*)pfmt, args);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte** poutBufEnd = &outBufEnd)
				{
					fixed (byte* pfmt = fmt)
					{
						ImFormatStringToTempBufferVNative((byte**)poutBuf, (byte**)poutBufEnd, (byte*)pfmt, args);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFormatStringToTempBufferV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFormatStringToTempBufferV([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBuf, [NativeName(NativeNameType.Param, "out_buf_end")] [NativeName(NativeNameType.Type, "const char**")] ref byte* outBufEnd, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte** poutBuf = &outBuf)
			{
				fixed (byte** poutBufEnd = &outBufEnd)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (fmt != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(fmt);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					ImFormatStringToTempBufferVNative((byte**)poutBuf, (byte**)poutBufEnd, pStr0, args);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImParseFormatFindStartNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)vt[703])(format);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[703])((nint)format);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindStart([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* ret = ImParseFormatFindStartNative(format);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindStartS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			string ret = Utils.DecodeStringUTF8(ImParseFormatFindStartNative(format));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindStart([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte* ret = ImParseFormatFindStartNative((byte*)pformat);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindStartS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatFindStartNative((byte*)pformat));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindStart([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte* ret = ImParseFormatFindStartNative((byte*)pformat);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindStartS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatFindStartNative((byte*)pformat));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindStart([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatFindStartNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindStart")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindStartS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatFindStartNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImParseFormatFindEndNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)vt[704])(format);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[704])((nint)format);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindEnd([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* ret = ImParseFormatFindEndNative(format);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindEndS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			string ret = Utils.DecodeStringUTF8(ImParseFormatFindEndNative(format));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindEnd([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte* ret = ImParseFormatFindEndNative((byte*)pformat);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindEndS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatFindEndNative((byte*)pformat));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindEnd([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte* ret = ImParseFormatFindEndNative((byte*)pformat);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindEndS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatFindEndNative((byte*)pformat));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatFindEnd([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatFindEndNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatFindEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatFindEndS([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatFindEndNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImParseFormatSanitizeForPrintingNative([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, ulong, void>)vt[705])(fmtIn, fmtOut, fmtOutSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ulong, void>)vt[705])((nint)fmtIn, (nint)fmtOut, fmtOutSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			ImParseFormatSanitizeForPrintingNative(fmtIn, fmtOut, fmtOutSize);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, fmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, fmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(pStr0, fmtOut, fmtOutSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				ImParseFormatSanitizeForPrintingNative(fmtIn, (byte*)pfmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(fmtIn, pStr0, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(pStr0, pStr1, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			ImParseFormatSanitizeForPrintingNative(fmtIn, fmtOut, fmtOutSize);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, fmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, fmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(pStr0, fmtOut, fmtOutSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				ImParseFormatSanitizeForPrintingNative(fmtIn, (byte*)pfmtOut, fmtOutSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(fmtIn, pStr0, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					ImParseFormatSanitizeForPrintingNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForPrinting")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImParseFormatSanitizeForPrinting([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImParseFormatSanitizeForPrintingNative(pStr0, pStr1, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImParseFormatSanitizeForScanningNative([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ulong, byte*>)vt[706])(fmtIn, fmtOut, fmtOutSize);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint>)vt[706])((nint)fmtIn, (nint)fmtOut, fmtOutSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, fmtOut, fmtOutSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, fmtOut, fmtOutSize));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(pStr0, fmtOut, fmtOutSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(pStr0, fmtOut, fmtOutSize));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, (byte*)pfmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, (byte*)pfmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, pStr0, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, pStr0, fmtOutSize));
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(pStr0, pStr1, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] ulong fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(pStr0, pStr1, fmtOutSize));
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, fmtOut, fmtOutSize);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, fmtOut, fmtOutSize));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, fmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(pStr0, fmtOut, fmtOutSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] byte* fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(pStr0, fmtOut, fmtOutSize));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, (byte*)pfmtOut, fmtOutSize);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtOut = &fmtOut)
			{
				string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, (byte*)pfmtOut, fmtOutSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(fmtIn, pStr0, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] byte* fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtOut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtOut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(fmtIn, pStr0, fmtOutSize));
			fmtOut = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = &fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					byte* ret = ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref byte fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			fixed (byte* pfmtIn = fmtIn)
			{
				fixed (byte* pfmtOut = &fmtOut)
				{
					string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative((byte*)pfmtIn, (byte*)pfmtOut, fmtOutSize));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImParseFormatSanitizeForScanning([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = ImParseFormatSanitizeForScanningNative(pStr0, pStr1, fmtOutSize);
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatSanitizeForScanning")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImParseFormatSanitizeForScanningS([NativeName(NativeNameType.Param, "fmt_in")] [NativeName(NativeNameType.Type, "const char*")] string fmtIn, [NativeName(NativeNameType.Param, "fmt_out")] [NativeName(NativeNameType.Type, "char*")] ref string fmtOut, [NativeName(NativeNameType.Param, "fmt_out_size")] [NativeName(NativeNameType.Type, "size_t")] nuint fmtOutSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmtIn != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmtIn);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmtIn, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmtOut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmtOut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmtOut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImParseFormatSanitizeForScanningNative(pStr0, pStr1, fmtOutSize));
			fmtOut = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatPrecision")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImParseFormatPrecisionNative([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "default_value")] [NativeName(NativeNameType.Type, "int")] int defaultValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int>)vt[707])(format, defaultValue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[707])((nint)format, defaultValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatPrecision")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImParseFormatPrecision([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "default_value")] [NativeName(NativeNameType.Type, "int")] int defaultValue)
		{
			int ret = ImParseFormatPrecisionNative(format, defaultValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatPrecision")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImParseFormatPrecision([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "default_value")] [NativeName(NativeNameType.Type, "int")] int defaultValue)
		{
			fixed (byte* pformat = &format)
			{
				int ret = ImParseFormatPrecisionNative((byte*)pformat, defaultValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatPrecision")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImParseFormatPrecision([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "default_value")] [NativeName(NativeNameType.Type, "int")] int defaultValue)
		{
			fixed (byte* pformat = format)
			{
				int ret = ImParseFormatPrecisionNative((byte*)pformat, defaultValue);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImParseFormatPrecision")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImParseFormatPrecision([NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "default_value")] [NativeName(NativeNameType.Type, "int")] int defaultValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImParseFormatPrecisionNative(pStr0, defaultValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImTextCharToUtf8Native([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] byte* outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint, byte*>)vt[708])(outBuf, c);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[708])((nint)outBuf, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextCharToUtf8([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] byte* outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			byte* ret = ImTextCharToUtf8Native(outBuf, c);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextCharToUtf8S([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] byte* outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			string ret = Utils.DecodeStringUTF8(ImTextCharToUtf8Native(outBuf, c));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextCharToUtf8([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] ref byte outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (byte* poutBuf = &outBuf)
			{
				byte* ret = ImTextCharToUtf8Native((byte*)poutBuf, c);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextCharToUtf8S([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] ref byte outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (byte* poutBuf = &outBuf)
			{
				string ret = Utils.DecodeStringUTF8(ImTextCharToUtf8Native((byte*)poutBuf, c));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextCharToUtf8([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] ReadOnlySpan<byte> outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (byte* poutBuf = outBuf)
			{
				byte* ret = ImTextCharToUtf8Native((byte*)poutBuf, c);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharToUtf8")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextCharToUtf8S([NativeName(NativeNameType.Param, "out_buf")] [NativeName(NativeNameType.Type, "char[5]")] ReadOnlySpan<byte> outBuf, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (byte* poutBuf = outBuf)
			{
				string ret = Utils.DecodeStringUTF8(ImTextCharToUtf8Native((byte*)poutBuf, c));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImTextCharFromUtf8Native([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, byte*, byte*, int>)vt[709])(outChar, inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[709])((nint)outChar, (nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			int ret = ImTextCharFromUtf8Native(outChar, inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCharFromUtf8Native(outChar, (byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				int ret = ImTextCharFromUtf8Native(outChar, (byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCharFromUtf8Native(outChar, pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinText = &inText)
				{
					int ret = ImTextCharFromUtf8Native((uint*)poutChar, (byte*)pinText, inTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinText = inText)
				{
					int ret = ImTextCharFromUtf8Native((uint*)poutChar, (byte*)pinText, inTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inText != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inText);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, pStr0, inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCharFromUtf8Native(outChar, inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinTextEnd = inTextEnd)
			{
				int ret = ImTextCharFromUtf8Native(outChar, inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCharFromUtf8Native(outChar, inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inTextEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, inText, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native(outChar, (byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCharFromUtf8Native(outChar, (byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCharFromUtf8Native(outChar, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinText = &inText)
				{
					fixed (byte* pinTextEnd = &inTextEnd)
					{
						int ret = ImTextCharFromUtf8Native((uint*)poutChar, (byte*)pinText, (byte*)pinTextEnd);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				fixed (byte* pinText = inText)
				{
					fixed (byte* pinTextEnd = inTextEnd)
					{
						int ret = ImTextCharFromUtf8Native((uint*)poutChar, (byte*)pinText, (byte*)pinTextEnd);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCharFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCharFromUtf8([NativeName(NativeNameType.Param, "out_char")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint outChar, [NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			fixed (uint* poutChar = &outChar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inText != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inText);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (inTextEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ImTextCharFromUtf8Native((uint*)poutChar, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImTextCountCharsFromUtf8Native([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[710])(inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[710])((nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			int ret = ImTextCountCharsFromUtf8Native(inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountCharsFromUtf8Native(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinTextEnd = inTextEnd)
			{
				int ret = ImTextCountCharsFromUtf8Native(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCountCharsFromUtf8Native((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountCharsFromUtf8")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountCharsFromUtf8([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountCharsFromUtf8Native(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImTextCountUtf8BytesFromCharNative([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[711])(inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[711])((nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			int ret = ImTextCountUtf8BytesFromCharNative(inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountUtf8BytesFromCharNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinTextEnd = inTextEnd)
			{
				int ret = ImTextCountUtf8BytesFromCharNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCountUtf8BytesFromCharNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromChar")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFromChar([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountUtf8BytesFromCharNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromStr")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImTextCountUtf8BytesFromNative([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)vt[712])(inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[712])((nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromStr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFrom([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inTextEnd)
		{
			int ret = ImTextCountUtf8BytesFromNative(inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromStr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFrom([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inTextEnd)
		{
			fixed (char* pinText = &inText)
			{
				int ret = ImTextCountUtf8BytesFromNative((char*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromStr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFrom([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char inTextEnd)
		{
			fixed (char* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountUtf8BytesFromNative(inText, (char*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountUtf8BytesFromStr")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountUtf8BytesFrom([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char inTextEnd)
		{
			fixed (char* pinText = &inText)
			{
				fixed (char* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountUtf8BytesFromNative((char*)pinText, (char*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImTextFindPreviousUtf8CodepointNative([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)vt[713])(inTextStart, inTextCurr);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[713])((nint)inTextStart, (nint)inTextCurr);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, inTextCurr);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, inTextCurr));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, inTextCurr));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] string inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(pStr0, inTextCurr);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] string inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(pStr0, inTextCurr));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextCurr)
		{
			fixed (byte* pinTextCurr = &inTextCurr)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextCurr)
		{
			fixed (byte* pinTextCurr = &inTextCurr)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextCurr = inTextCurr)
			{
				byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextCurr = inTextCurr)
			{
				string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, (byte*)pinTextCurr));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextCurr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextCurr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(inTextStart, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextCurr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextCurr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(inTextStart, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextCurr)
		{
			fixed (byte* pinTextStart = &inTextStart)
			{
				fixed (byte* pinTextCurr = &inTextCurr)
				{
					string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				fixed (byte* pinTextCurr = inTextCurr)
				{
					byte* ret = ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextCurr)
		{
			fixed (byte* pinTextStart = inTextStart)
			{
				fixed (byte* pinTextCurr = inTextCurr)
				{
					string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative((byte*)pinTextStart, (byte*)pinTextCurr));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImTextFindPreviousUtf8Codepoint([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] string inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextFindPreviousUtf8Codepoint")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImTextFindPreviousUtf8CodepointS([NativeName(NativeNameType.Param, "in_text_start")] [NativeName(NativeNameType.Type, "const char*")] string inTextStart, [NativeName(NativeNameType.Param, "in_text_curr")] [NativeName(NativeNameType.Type, "const char*")] string inTextCurr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextStart != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextStart);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextStart, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextCurr != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextCurr);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextCurr, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImTextFindPreviousUtf8CodepointNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImTextCountLinesNative([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)vt[714])(inText, inTextEnd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[714])((nint)inText, (nint)inTextEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			int ret = ImTextCountLinesNative(inText, inTextEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				int ret = ImTextCountLinesNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				int ret = ImTextCountLinesNative((byte*)pinText, inTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, inTextEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinTextEnd = &inTextEnd)
			{
				int ret = ImTextCountLinesNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinTextEnd = inTextEnd)
			{
				int ret = ImTextCountLinesNative(inText, (byte*)pinTextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] byte* inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inTextEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inTextEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ImTextCountLinesNative(inText, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte inTextEnd)
		{
			fixed (byte* pinText = &inText)
			{
				fixed (byte* pinTextEnd = &inTextEnd)
				{
					int ret = ImTextCountLinesNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inTextEnd)
		{
			fixed (byte* pinText = inText)
			{
				fixed (byte* pinTextEnd = inTextEnd)
				{
					int ret = ImTextCountLinesNative((byte*)pinText, (byte*)pinTextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTextCountLines")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImTextCountLines([NativeName(NativeNameType.Param, "in_text")] [NativeName(NativeNameType.Type, "const char*")] string inText, [NativeName(NativeNameType.Param, "in_text_end")] [NativeName(NativeNameType.Type, "const char*")] string inTextEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (inTextEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(inTextEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(inTextEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ImTextCountLinesNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		internal static ImFileHandle ImFileOpenNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImFileHandle>)vt[715])(filename, mode);
			#else
			return (ImFileHandle)((delegate* unmanaged[Cdecl]<nint, nint, ImFileHandle>)vt[715])((nint)filename, (nint)mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode)
		{
			ImFileHandle ret = ImFileOpenNative(filename, mode);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFileHandle ret = ImFileOpenNative((byte*)pfilename, mode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode)
		{
			fixed (byte* pfilename = filename)
			{
				ImFileHandle ret = ImFileOpenNative((byte*)pfilename, mode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, mode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode)
		{
			fixed (byte* pmode = &mode)
			{
				ImFileHandle ret = ImFileOpenNative(filename, (byte*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode)
		{
			fixed (byte* pmode = mode)
			{
				ImFileHandle ret = ImFileOpenNative(filename, (byte*)pmode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(filename, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					ImFileHandle ret = ImFileOpenNative((byte*)pfilename, (byte*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					ImFileHandle ret = ImFileOpenNative((byte*)pfilename, (byte*)pmode);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileOpen")]
		[return: NativeName(NativeNameType.Type, "ImFileHandle")]
		public static ImFileHandle ImFileOpen([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImFileHandle ret = ImFileOpenNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileClose")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImFileCloseNative([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, byte>)vt[716])(file);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImFileHandle, byte>)vt[716])(file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileClose")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImFileClose([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			byte ret = ImFileCloseNative(file);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileGetSize")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		internal static ulong ImFileGetSizeNative([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFileHandle, ulong>)vt[717])(file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ImFileHandle, ulong>)vt[717])(file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileGetSize")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		public static ulong ImFileGetSize([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			ulong ret = ImFileGetSizeNative(file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileRead")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		internal static ulong ImFileReadNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImU64")] ulong size, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "ImU64")] ulong count, [NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[718])(data, size, count, file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ImFileHandle, ulong>)vt[718])((nint)data, size, count, file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileRead")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		public static ulong ImFileRead([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImU64")] ulong size, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "ImU64")] ulong count, [NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			ulong ret = ImFileReadNative(data, size, count, file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileWrite")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		internal static ulong ImFileWriteNative([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImU64")] ulong size, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "ImU64")] ulong count, [NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ulong, ulong, ImFileHandle, ulong>)vt[719])(data, size, count, file);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ImFileHandle, ulong>)vt[719])((nint)data, size, count, file);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileWrite")]
		[return: NativeName(NativeNameType.Type, "ImU64")]
		public static ulong ImFileWrite([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImU64")] ulong size, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "ImU64")] ulong count, [NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "ImFileHandle")] ImFileHandle file)
		{
			ulong ret = ImFileWriteNative(data, size, count, file);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* ImFileLoadToMemoryNative([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ulong*, int, void*>)vt[720])(filename, mode, outFileSize, paddingBytes);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, nint>)vt[720])((nint)filename, (nint)mode, (nint)outFileSize, paddingBytes);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			void* ret = ImFileLoadToMemoryNative(filename, mode, outFileSize, paddingBytes);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, mode, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pmode = mode)
			{
				void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, outFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(filename, pStr0, outFileSize, paddingBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, outFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, outFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, outFileSize, paddingBytes);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, mode, (ulong*)poutFileSize, paddingBytes);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative((byte*)pfilename, mode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] byte* mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, mode, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pmode = &mode)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pmode = mode)
			{
				fixed (nuint* poutFileSize = &outFileSize)
				{
					void* ret = ImFileLoadToMemoryNative(filename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(filename, pStr0, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ref byte mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (byte* pmode = &mode)
				{
					fixed (nuint* poutFileSize = &outFileSize)
					{
						void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (byte* pmode = mode)
				{
					fixed (nuint* poutFileSize = &outFileSize)
					{
						void* ret = ImFileLoadToMemoryNative((byte*)pfilename, (byte*)pmode, (ulong*)poutFileSize, paddingBytes);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFileLoadToMemory")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImFileLoadToMemory([NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "const char*")] string mode, [NativeName(NativeNameType.Param, "out_file_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outFileSize, [NativeName(NativeNameType.Param, "padding_bytes")] [NativeName(NativeNameType.Type, "int")] int paddingBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (mode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(mode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(mode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (nuint* poutFileSize = &outFileSize)
			{
				void* ret = ImFileLoadToMemoryNative(pStr0, pStr1, (ulong*)poutFileSize, paddingBytes);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImPow_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImPowFloatNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)vt[721])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)vt[721])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImPow_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImPowFloat([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			float ret = ImPowFloatNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImPow_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double ImPowDoubleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "double")] double y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)vt[722])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)vt[722])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImPow_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ImPowDouble([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "double")] double y)
		{
			double ret = ImPowDoubleNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLog_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImLogFloatNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[723])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[723])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLog_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImLogFloat([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			float ret = ImLogFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLog_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double ImLogDoubleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[724])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[724])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLog_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ImLogDouble([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			double ret = ImLogDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_Int")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImAbsIntNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[725])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[725])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_Int")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImAbsInt([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = ImAbsIntNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImAbsFloatNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[726])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[726])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImAbsFloat([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			float ret = ImAbsFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double ImAbsDoubleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[727])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[727])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImAbs_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ImAbsDouble([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			double ret = ImAbsDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSign_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImSignFloatNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[728])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[728])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSign_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImSignFloat([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			float ret = ImSignFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSign_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double ImSignDoubleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[729])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[729])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSign_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ImSignDouble([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			double ret = ImSignDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRsqrt_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImRsqrtFloatNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[730])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[730])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRsqrt_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRsqrtFloat([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			float ret = ImRsqrtFloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRsqrt_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		internal static double ImRsqrtDoubleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)vt[731])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)vt[731])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRsqrt_double")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double ImRsqrtDouble([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "double")] double x)
		{
			double ret = ImRsqrtDoubleNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImMinNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[732])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[732])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImMin([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			Vector2 ret;
			ImMinNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			ImMinNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMinNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImMaxNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[733])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[733])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImMax([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			Vector2 ret;
			ImMaxNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			ImMaxNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMaxNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImClampNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "mn")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mn, [NativeName(NativeNameType.Param, "mx")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[734])(pOut, v, mn, mx);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[734])((nint)pOut, v, mn, mx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImClamp([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "mn")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mn, [NativeName(NativeNameType.Param, "mx")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mx)
		{
			Vector2 ret;
			ImClampNative(&ret, v, mn, mx);
			return ret;
		}
	}
}
