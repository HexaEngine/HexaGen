// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImClamp([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "mn")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mn, [NativeName(NativeNameType.Param, "mx")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mx)
		{
			ImClampNative(pOut, v, mn, mx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImClamp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImClamp([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "mn")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mn, [NativeName(NativeNameType.Param, "mx")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mx)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImClampNative((Vector2*)ppOut, v, mn, mx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImLerpVec2FloatNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, float, void>)vt[735])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, float, void>)vt[735])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImLerpVec2Float([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			Vector2 ret;
			ImLerpVec2FloatNative(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec2Float([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImLerpVec2FloatNative(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec2Float([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLerpVec2FloatNative((Vector2*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImLerpVec2Vec2Native([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[736])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[736])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImLerpVec2Vec2([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 t)
		{
			Vector2 ret;
			ImLerpVec2Vec2Native(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec2Vec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 t)
		{
			ImLerpVec2Vec2Native(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec2Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec2Vec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLerpVec2Vec2Native((Vector2*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImLerpVec4Native([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, Vector4, Vector4, float, void>)vt[737])(pOut, a, b, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector4, Vector4, float, void>)vt[737])((nint)pOut, a, b, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector4 ImLerpVec4([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			Vector4 ret;
			ImLerpVec4Native(&ret, a, b, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImLerpVec4Native(pOut, a, b, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLerp_Vec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLerpVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] ref Vector4 pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 b, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				ImLerpVec4Native((Vector4*)ppOut, a, b, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSaturate")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImSaturateNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[738])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[738])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImSaturate")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImSaturate([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			float ret = ImSaturateNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLengthSqr_Vec2")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImLengthSqrVec2Native([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float>)vt[739])(lhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float>)vt[739])(lhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLengthSqr_Vec2")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImLengthSqrVec2([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs)
		{
			float ret = ImLengthSqrVec2Native(lhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLengthSqr_Vec4")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImLengthSqrVec4Native([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 lhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, float>)vt[740])(lhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector4, float>)vt[740])(lhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLengthSqr_Vec4")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImLengthSqrVec4([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 lhs)
		{
			float ret = ImLengthSqrVec4Native(lhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImInvLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImInvLengthNative([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "fail_value")] [NativeName(NativeNameType.Type, "float")] float failValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[741])(lhs, failValue);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[741])(lhs, failValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImInvLength")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImInvLength([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "fail_value")] [NativeName(NativeNameType.Type, "float")] float failValue)
		{
			float ret = ImInvLengthNative(lhs, failValue);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImTruncFloatNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[742])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[742])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImTruncFloat([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			float ret = ImTruncFloatNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImTruncVec2Native([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[743])(pOut, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[743])((nint)pOut, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImTruncVec2([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			Vector2 ret;
			ImTruncVec2Native(&ret, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTruncVec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			ImTruncVec2Native(pOut, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTrunc_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTruncVec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImTruncVec2Native((Vector2*)ppOut, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImFloorFloatNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)vt[744])(f);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)vt[744])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Float")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImFloorFloat([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			float ret = ImFloorFloatNative(f);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFloorVec2Native([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, void>)vt[745])(pOut, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[745])((nint)pOut, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImFloorVec2([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			Vector2 ret;
			ImFloorVec2Native(&ret, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFloorVec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			ImFloorVec2Native(pOut, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFloor_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFloorVec2([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImFloorVec2Native((Vector2*)ppOut, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImModPositive")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImModPositiveNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "int")] int a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "int")] int b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)vt[746])(a, b);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)vt[746])(a, b);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImModPositive")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImModPositive([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "int")] int a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "int")] int b)
		{
			int ret = ImModPositiveNative(a, b);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImDot")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImDotNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, float>)vt[747])(a, b);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, Vector2, float>)vt[747])(a, b);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImDot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImDot([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b)
		{
			float ret = ImDotNative(a, b);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRotateNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, float, float, void>)vt[748])(pOut, v, cosA, sinA);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, float, void>)vt[748])((nint)pOut, v, cosA, sinA);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRotate([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA)
		{
			Vector2 ret;
			ImRotateNative(&ret, v, cosA, sinA);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRotate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA)
		{
			ImRotateNative(pOut, v, cosA, sinA);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImRotate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRotate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 v, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRotateNative((Vector2*)ppOut, v, cosA, sinA);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLinearSweep")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImLinearSweepNative([NativeName(NativeNameType.Param, "current")] [NativeName(NativeNameType.Type, "float")] float current, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "float")] float target, [NativeName(NativeNameType.Param, "speed")] [NativeName(NativeNameType.Type, "float")] float speed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float>)vt[749])(current, target, speed);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float, float>)vt[749])(current, target, speed);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLinearSweep")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImLinearSweep([NativeName(NativeNameType.Param, "current")] [NativeName(NativeNameType.Type, "float")] float current, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "float")] float target, [NativeName(NativeNameType.Param, "speed")] [NativeName(NativeNameType.Type, "float")] float speed)
		{
			float ret = ImLinearSweepNative(current, target, speed);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLinearRemapClamp")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImLinearRemapClampNative([NativeName(NativeNameType.Param, "s0")] [NativeName(NativeNameType.Type, "float")] float s0, [NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "float")] float s1, [NativeName(NativeNameType.Param, "d0")] [NativeName(NativeNameType.Type, "float")] float d0, [NativeName(NativeNameType.Param, "d1")] [NativeName(NativeNameType.Type, "float")] float d1, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, float, float>)vt[750])(s0, s1, d0, d1, x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float, float, float, float>)vt[750])(s0, s1, d0, d1, x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLinearRemapClamp")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImLinearRemapClamp([NativeName(NativeNameType.Param, "s0")] [NativeName(NativeNameType.Type, "float")] float s0, [NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "float")] float s1, [NativeName(NativeNameType.Param, "d0")] [NativeName(NativeNameType.Type, "float")] float d0, [NativeName(NativeNameType.Param, "d1")] [NativeName(NativeNameType.Type, "float")] float d1, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			float ret = ImLinearRemapClampNative(s0, s1, d0, d1, x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMul")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImMulNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, void>)vt[751])(pOut, lhs, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[751])((nint)pOut, lhs, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMul")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImMul([NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			Vector2 ret;
			ImMulNative(&ret, lhs, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMul")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMul([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			ImMulNative(pOut, lhs, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImMul")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImMul([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "lhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 lhs, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImMulNative((Vector2*)ppOut, lhs, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImIsFloatAboveGuaranteedIntegerPrecision")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImIsFloatAboveGuaranteedIntegerPrecisionNative([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<float, byte>)vt[752])(f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImIsFloatAboveGuaranteedIntegerPrecision")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImIsFloatAboveGuaranteedIntegerPrecision([NativeName(NativeNameType.Param, "f")] [NativeName(NativeNameType.Type, "float")] float f)
		{
			byte ret = ImIsFloatAboveGuaranteedIntegerPrecisionNative(f);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImExponentialMovingAverage")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImExponentialMovingAverageNative([NativeName(NativeNameType.Param, "avg")] [NativeName(NativeNameType.Type, "float")] float avg, [NativeName(NativeNameType.Param, "sample")] [NativeName(NativeNameType.Type, "float")] float sample, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, int, float>)vt[753])(avg, sample, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImExponentialMovingAverage")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImExponentialMovingAverage([NativeName(NativeNameType.Param, "avg")] [NativeName(NativeNameType.Type, "float")] float avg, [NativeName(NativeNameType.Param, "sample")] [NativeName(NativeNameType.Type, "float")] float sample, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			float ret = ImExponentialMovingAverageNative(avg, sample, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBezierCubicCalcNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])(pOut, p1, p2, p3, p4, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, float, void>)vt[754])((nint)pOut, p1, p2, p3, p4, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImBezierCubicCalc([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			Vector2 ret;
			ImBezierCubicCalcNative(&ret, p1, p2, p3, p4, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicCalc([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImBezierCubicCalcNative(pOut, p1, p2, p3, p4, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicCalc([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicCalcNative((Vector2*)ppOut, p1, p2, p3, p4, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBezierCubicClosestPointNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])(pOut, p1, p2, p3, p4, p, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, int, void>)vt[755])((nint)pOut, p1, p2, p3, p4, p, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImBezierCubicClosestPoint([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			Vector2 ret;
			ImBezierCubicClosestPointNative(&ret, p1, p2, p3, p4, p, numSegments);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			ImBezierCubicClosestPointNative(pOut, p1, p2, p3, p4, p, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicClosestPointNative((Vector2*)ppOut, p1, p2, p3, p4, p, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPointCasteljau")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBezierCubicClosestPointCasteljauNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "tess_tol")] [NativeName(NativeNameType.Type, "float")] float tessTol)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])(pOut, p1, p2, p3, p4, p, tessTol);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, float, void>)vt[756])((nint)pOut, p1, p2, p3, p4, p, tessTol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPointCasteljau")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImBezierCubicClosestPointCasteljau([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "tess_tol")] [NativeName(NativeNameType.Type, "float")] float tessTol)
		{
			Vector2 ret;
			ImBezierCubicClosestPointCasteljauNative(&ret, p1, p2, p3, p4, p, tessTol);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPointCasteljau")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicClosestPointCasteljau([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "tess_tol")] [NativeName(NativeNameType.Type, "float")] float tessTol)
		{
			ImBezierCubicClosestPointCasteljauNative(pOut, p1, p2, p3, p4, p, tessTol);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierCubicClosestPointCasteljau")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierCubicClosestPointCasteljau([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "tess_tol")] [NativeName(NativeNameType.Type, "float")] float tessTol)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierCubicClosestPointCasteljauNative((Vector2*)ppOut, p1, p2, p3, p4, p, tessTol);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierQuadraticCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBezierQuadraticCalcNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, float, void>)vt[757])(pOut, p1, p2, p3, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, float, void>)vt[757])((nint)pOut, p1, p2, p3, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierQuadraticCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImBezierQuadraticCalc([NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			Vector2 ret;
			ImBezierQuadraticCalcNative(&ret, p1, p2, p3, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierQuadraticCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierQuadraticCalc([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImBezierQuadraticCalcNative(pOut, p1, p2, p3, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBezierQuadraticCalc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBezierQuadraticCalc([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImBezierQuadraticCalcNative((Vector2*)ppOut, p1, p2, p3, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLineClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImLineClosestPointNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, void>)vt[758])(pOut, a, b, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, void>)vt[758])((nint)pOut, a, b, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLineClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImLineClosestPoint([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			Vector2 ret;
			ImLineClosestPointNative(&ret, a, b, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLineClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLineClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			ImLineClosestPointNative(pOut, a, b, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLineClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImLineClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImLineClosestPointNative((Vector2*)ppOut, a, b, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleContainsPoint")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImTriangleContainsPointNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, byte>)vt[759])(a, b, c, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleContainsPoint")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImTriangleContainsPoint([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			byte ret = ImTriangleContainsPointNative(a, b, c, p);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImTriangleClosestPointNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, Vector2, Vector2, void>)vt[760])(pOut, a, b, c, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, void>)vt[760])((nint)pOut, a, b, c, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImTriangleClosestPoint([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			Vector2 ret;
			ImTriangleClosestPointNative(&ret, a, b, c, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			ImTriangleClosestPointNative(pOut, a, b, c, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleClosestPoint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleClosestPoint([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImTriangleClosestPointNative((Vector2*)ppOut, a, b, c, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImTriangleBarycentricCoordsNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] float* outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] float* outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] float* outW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, float*, float*, float*, void>)vt[761])(a, b, c, p, outU, outV, outW);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, Vector2, nint, nint, nint, void>)vt[761])(a, b, c, p, (nint)outU, (nint)outV, (nint)outW);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] float* outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] float* outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] float* outW)
		{
			ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, outW);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] ref float outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] float* outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] float* outW)
		{
			fixed (float* poutU = &outU)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, outW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] float* outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] ref float outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] float* outW)
		{
			fixed (float* poutV = &outV)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, outW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] ref float outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] ref float outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] float* outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, outW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] float* outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] float* outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] ref float outW)
		{
			fixed (float* poutW = &outW)
			{
				ImTriangleBarycentricCoordsNative(a, b, c, p, outU, outV, (float*)poutW);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] ref float outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] float* outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, outV, (float*)poutW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] float* outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] ref float outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] ref float outW)
		{
			fixed (float* poutV = &outV)
			{
				fixed (float* poutW = &outW)
				{
					ImTriangleBarycentricCoordsNative(a, b, c, p, outU, (float*)poutV, (float*)poutW);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleBarycentricCoords")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImTriangleBarycentricCoords([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "out_u")] [NativeName(NativeNameType.Type, "float*")] ref float outU, [NativeName(NativeNameType.Param, "out_v")] [NativeName(NativeNameType.Type, "float*")] ref float outV, [NativeName(NativeNameType.Param, "out_w")] [NativeName(NativeNameType.Type, "float*")] ref float outW)
		{
			fixed (float* poutU = &outU)
			{
				fixed (float* poutV = &outV)
				{
					fixed (float* poutW = &outW)
					{
						ImTriangleBarycentricCoordsNative(a, b, c, p, (float*)poutU, (float*)poutV, (float*)poutW);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImTriangleAreaNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, float>)vt[762])(a, b, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImTriangleArea([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c)
		{
			float ret = ImTriangleAreaNative(a, b, c);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleIsClockwise")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImTriangleIsClockwiseNative([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<Vector2, Vector2, Vector2, byte>)vt[763])(a, b, c);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImTriangleIsClockwise")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImTriangleIsClockwise([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c)
		{
			byte ret = ImTriangleIsClockwiseNative(a, b, c);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_ImVec1_Nil")]
		[return: NativeName(NativeNameType.Type, "ImVec1*")]
		internal static ImVec1* ImVec1ImVec1NilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec1*>)vt[764])();
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<nint>)vt[764])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_ImVec1_Nil")]
		[return: NativeName(NativeNameType.Type, "ImVec1*")]
		public static ImVec1* ImVec1ImVec1Nil()
		{
			ImVec1* ret = ImVec1ImVec1NilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImVec1DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec1*")] ImVec1* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec1*, void>)vt[765])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[765])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVec1Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec1*")] ImVec1* self)
		{
			ImVec1DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVec1Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec1*")] ref ImVec1 self)
		{
			fixed (ImVec1* pself = &self)
			{
				ImVec1DestroyNative((ImVec1*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_ImVec1_Float")]
		[return: NativeName(NativeNameType.Type, "ImVec1*")]
		internal static ImVec1* ImVec1ImVec1FloatNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, ImVec1*>)vt[766])(x);
			#else
			return (ImVec1*)((delegate* unmanaged[Cdecl]<float, nint>)vt[766])(x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec1_ImVec1_Float")]
		[return: NativeName(NativeNameType.Type, "ImVec1*")]
		public static ImVec1* ImVec1ImVec1Float([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "float")] float x)
		{
			ImVec1* ret = ImVec1ImVec1FloatNative(x);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_Nil")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		internal static ImVec2Ih* ImVec2IhImVec2IhNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVec2Ih*>)vt[767])();
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<nint>)vt[767])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_Nil")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		public static ImVec2Ih* ImVec2IhImVec2IhNil()
		{
			ImVec2Ih* ret = ImVec2IhImVec2IhNilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImVec2IhDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec2ih*")] ImVec2Ih* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec2Ih*, void>)vt[768])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[768])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVec2IhDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec2ih*")] ImVec2Ih* self)
		{
			ImVec2IhDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVec2IhDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVec2ih*")] ref ImVec2Ih self)
		{
			fixed (ImVec2Ih* pself = &self)
			{
				ImVec2IhDestroyNative((ImVec2Ih*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_short")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		internal static ImVec2Ih* ImVec2IhImVec2IhShortNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "short")] short x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "short")] short y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short, short, ImVec2Ih*>)vt[769])(x, y);
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<short, short, nint>)vt[769])(x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_short")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		public static ImVec2Ih* ImVec2IhImVec2IhShort([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "short")] short x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "short")] short y)
		{
			ImVec2Ih* ret = ImVec2IhImVec2IhShortNative(x, y);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		internal static ImVec2Ih* ImVec2IhImVec2IhVec2Native([NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, ImVec2Ih*>)vt[770])(rhs);
			#else
			return (ImVec2Ih*)((delegate* unmanaged[Cdecl]<Vector2, nint>)vt[770])(rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVec2ih_ImVec2ih_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImVec2ih*")]
		public static ImVec2Ih* ImVec2IhImVec2IhVec2([NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 rhs)
		{
			ImVec2Ih* ret = ImVec2IhImVec2IhVec2Native(rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Nil")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		internal static ImRect* ImRectImRectNilNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*>)vt[771])();
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<nint>)vt[771])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Nil")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		public static ImRect* ImRectImRectNil()
		{
			ImRect* ret = ImRectImRectNilNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[772])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[772])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectDestroyNative((ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		internal static ImRect* ImRectImRectVec2Native([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, Vector2, ImRect*>)vt[773])(min, max);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector2, Vector2, nint>)vt[773])(min, max);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		public static ImRect* ImRectImRectVec2([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 max)
		{
			ImRect* ret = ImRectImRectVec2Native(min, max);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Vec4")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		internal static ImRect* ImRectImRectVec4Native([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, ImRect*>)vt[774])(v);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<Vector4, nint>)vt[774])(v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Vec4")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		public static ImRect* ImRectImRectVec4([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 v)
		{
			ImRect* ret = ImRectImRectVec4Native(v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Float")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		internal static ImRect* ImRectImRectFloatNative([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImRect*>)vt[775])(x1, y1, x2, y2);
			#else
			return (ImRect*)((delegate* unmanaged[Cdecl]<float, float, float, float, nint>)vt[775])(x1, y1, x2, y2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ImRect_Float")]
		[return: NativeName(NativeNameType.Type, "ImRect*")]
		public static ImRect* ImRectImRectFloat([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "float")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "float")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "float")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "float")] float y2)
		{
			ImRect* ret = ImRectImRectFloatNative(x1, y1, x2, y2);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetCenterNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[776])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[776])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetCenter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetCenterNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetCenter([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetCenterNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetCenter([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetCenterNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetCenter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetCenterNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetCenter([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetCenterNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetCenter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetCenter([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetCenterNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetSizeNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[777])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[777])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetSize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetSizeNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetSizeNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetSizeNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetSize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetSizeNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetSizeNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetSizeNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImRectGetWidthNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[778])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[778])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetWidth([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			float ret = ImRectGetWidthNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetWidth([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetWidthNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImRectGetHeightNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[779])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[779])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetHeight([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			float ret = ImRectGetHeightNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetHeight([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetHeightNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImRectGetAreaNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, float>)vt[780])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)vt[780])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetArea([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			float ret = ImRectGetAreaNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetArea")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImRectGetArea([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				float ret = ImRectGetAreaNative((ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetTLNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[781])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[781])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetTL([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetTLNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetTLNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetTLNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetTL([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTLNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTLNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetTRNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[782])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[782])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetTR([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetTRNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetTRNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetTRNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetTR([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetTRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetTRNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetTR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetTR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetTRNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetBLNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[783])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[783])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetBL([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetBLNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetBLNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetBLNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetBL([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBLNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBLNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBL([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBLNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectGetBRNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImRect*, void>)vt[784])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[784])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetBR([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector2 ret;
			ImRectGetBRNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectGetBRNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ImRectGetBRNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ImRectGetBR([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector2 ret;
				ImRectGetBRNative(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectGetBRNative(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_GetBR")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectGetBR([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectGetBRNative((Vector2*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Vec2")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImRectContainsVec2Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, byte>)vt[785])(self, p);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, byte>)vt[785])((nint)self, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Vec2")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			byte ret = ImRectContainsVec2Native(self, p);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Vec2")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsVec2Native((ImRect*)pself, p);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Rect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImRectContainsRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[786])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[786])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Rect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			byte ret = ImRectContainsRectNative(self, r);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Contains_Rect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsRectNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ContainsWithPad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImRectContainsWithPadNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "pad")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, Vector2, Vector2, byte>)vt[787])(self, p, pad);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, byte>)vt[787])((nint)self, p, pad);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ContainsWithPad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsWithPad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "pad")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pad)
		{
			byte ret = ImRectContainsWithPadNative(self, p, pad);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ContainsWithPad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectContainsWithPad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p, [NativeName(NativeNameType.Param, "pad")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pad)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectContainsWithPadNative((ImRect*)pself, p, pad);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Overlaps")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImRectOverlapsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, ImRect, byte>)vt[788])(self, r);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImRect, byte>)vt[788])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Overlaps")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectOverlaps([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			byte ret = ImRectOverlapsNative(self, r);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Overlaps")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectOverlaps([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectOverlapsNative((ImRect*)pself, r);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectAddVec2Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[789])(self, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[789])((nint)self, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectAddVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			ImRectAddVec2Native(self, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectAddVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddVec2Native((ImRect*)pself, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectAddRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[790])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[790])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectAddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			ImRectAddRectNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Add_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectAddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectAddRectNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectExpandFloatNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const float")] float amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[791])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[791])((nint)self, amount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectExpandFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const float")] float amount)
		{
			ImRectExpandFloatNative(self, amount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectExpandFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const float")] float amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandFloatNative((ImRect*)pself, amount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectExpandVec2Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 amount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[792])(self, amount);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[792])((nint)self, amount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectExpandVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 amount)
		{
			ImRectExpandVec2Native(self, amount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Expand_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectExpandVec2([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "amount")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 amount)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectExpandVec2Native((ImRect*)pself, amount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Translate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectTranslateNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, Vector2, void>)vt[793])(self, d);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[793])((nint)self, d);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Translate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d)
		{
			ImRectTranslateNative(self, d);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Translate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateNative((ImRect*)pself, d);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateX")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectTranslateXNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "float")] float dx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[794])(self, dx);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[794])((nint)self, dx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateX")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslateX([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "float")] float dx)
		{
			ImRectTranslateXNative(self, dx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateX")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslateX([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "float")] float dx)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateXNative((ImRect*)pself, dx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateY")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectTranslateYNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "float")] float dy)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, float, void>)vt[795])(self, dy);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[795])((nint)self, dy);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslateY([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "float")] float dy)
		{
			ImRectTranslateYNative(self, dy);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_TranslateY")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectTranslateY([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "float")] float dy)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectTranslateYNative((ImRect*)pself, dy);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWith")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectClipWithNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[796])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[796])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWith")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectClipWith([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			ImRectClipWithNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWith")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectClipWith([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWithFull")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectClipWithFullNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImRect, void>)vt[797])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[797])((nint)self, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWithFull")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectClipWithFull([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			ImRectClipWithFullNative(self, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ClipWithFull")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectClipWithFull([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectClipWithFullNative((ImRect*)pself, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Floor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectFloorNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, void>)vt[798])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[798])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Floor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectFloor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectFloorNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_Floor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectFloor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectFloorNative((ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_IsInverted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImRectIsInvertedNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect*, byte>)vt[799])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[799])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_IsInverted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectIsInverted([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			byte ret = ImRectIsInvertedNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_IsInverted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImRectIsInverted([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				byte ret = ImRectIsInvertedNative((ImRect*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImRectToVec4Native([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, ImRect*, void>)vt[800])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[800])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector4 ImRectToVec4([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			Vector4 ret;
			ImRectToVec4Native(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectToVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			ImRectToVec4Native(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectToVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] ref Vector4 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* self)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				ImRectToVec4Native((Vector4*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector4 ImRectToVec4([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				Vector4 ret;
				ImRectToVec4Native(&ret, (ImRect*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectToVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (ImRect* pself = &self)
			{
				ImRectToVec4Native(pOut, (ImRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImRect_ToVec4")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImRectToVec4([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] ref Vector4 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect self)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				fixed (ImRect* pself = &self)
				{
					ImRectToVec4Native((Vector4*)ppOut, (ImRect*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayGetStorageSizeInBytes")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong ImBitArrayGetStorageSizeInBytesNative([NativeName(NativeNameType.Param, "bitcount")] [NativeName(NativeNameType.Type, "int")] int bitcount)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ulong>)vt[801])(bitcount);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<int, ulong>)vt[801])(bitcount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayGetStorageSizeInBytes")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong ImBitArrayGetStorageSizeInBytes([NativeName(NativeNameType.Param, "bitcount")] [NativeName(NativeNameType.Type, "int")] int bitcount)
		{
			ulong ret = ImBitArrayGetStorageSizeInBytesNative(bitcount);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearAllBits")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitArrayClearAllBitsNative([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "bitcount")] [NativeName(NativeNameType.Type, "int")] int bitcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[802])(arr, bitcount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[802])((nint)arr, bitcount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearAllBits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArrayClearAllBits([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "bitcount")] [NativeName(NativeNameType.Type, "int")] int bitcount)
		{
			ImBitArrayClearAllBitsNative(arr, bitcount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearAllBits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArrayClearAllBits([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] ref uint arr, [NativeName(NativeNameType.Param, "bitcount")] [NativeName(NativeNameType.Type, "int")] int bitcount)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearAllBitsNative((uint*)parr, bitcount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayTestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImBitArrayTestBitNative([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "const ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, int, byte>)vt[803])(arr, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[803])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayTestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImBitArrayTestBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "const ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte ret = ImBitArrayTestBitNative(arr, n);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayTestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImBitArrayTestBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "const ImU32*")] ref uint arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (uint* parr = &arr)
			{
				byte ret = ImBitArrayTestBitNative((uint*)parr, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitArrayClearBitNative([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[804])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[804])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArrayClearBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			ImBitArrayClearBitNative(arr, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArrayClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArrayClearBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] ref uint arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArrayClearBitNative((uint*)parr, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitArraySetBitNative([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, void>)vt[805])(arr, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[805])((nint)arr, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArraySetBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			ImBitArraySetBitNative(arr, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArraySetBit([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] ref uint arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitNative((uint*)parr, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBitRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitArraySetBitRangeNative([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "n2")] [NativeName(NativeNameType.Type, "int")] int n2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, int, int, void>)vt[806])(arr, n, n2);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[806])((nint)arr, n, n2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBitRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArraySetBitRange([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] uint* arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "n2")] [NativeName(NativeNameType.Type, "int")] int n2)
		{
			ImBitArraySetBitRangeNative(arr, n, n2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImBitArraySetBitRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitArraySetBitRange([NativeName(NativeNameType.Param, "arr")] [NativeName(NativeNameType.Type, "ImU32*")] ref uint arr, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "n2")] [NativeName(NativeNameType.Type, "int")] int n2)
		{
			fixed (uint* parr = &arr)
			{
				ImBitArraySetBitRangeNative((uint*)parr, n, n2);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Create")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitVectorCreateNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "int")] int sz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[807])(self, sz);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[807])((nint)self, sz);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Create")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorCreate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "int")] int sz)
		{
			ImBitVectorCreateNative(self, sz);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Create")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorCreate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ref ImBitVector self, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "int")] int sz)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorCreateNative((ImBitVector*)pself, sz);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitVectorClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, void>)vt[808])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[808])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorClear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self)
		{
			ImBitVectorClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorClear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ref ImBitVector self)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearNative((ImBitVector*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_TestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImBitVectorTestBitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImBitVector*, int, byte>)vt[809])(self, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)vt[809])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_TestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImBitVectorTestBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte ret = ImBitVectorTestBitNative(self, n);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_TestBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImBitVectorTestBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ref ImBitVector self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				byte ret = ImBitVectorTestBitNative((ImBitVector*)pself, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitVectorSetBitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[810])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[810])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorSetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			ImBitVectorSetBitNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorSetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ref ImBitVector self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorSetBitNative((ImBitVector*)pself, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_ClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImBitVectorClearBitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImBitVector*, int, void>)vt[811])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[811])((nint)self, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_ClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorClearBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ImBitVector* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			ImBitVectorClearBitNative(self, n);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImBitVector_ClearBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImBitVectorClearBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImBitVector*")] ref ImBitVector self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImBitVector* pself = &self)
			{
				ImBitVectorClearBitNative((ImBitVector*)pself, n);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTextIndexClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, void>)vt[812])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[812])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexClear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self)
		{
			ImGuiTextIndexClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexClear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexClearNative((ImGuiTextIndex*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImGuiTextIndexSizeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, int>)vt[813])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[813])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImGuiTextIndexSize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self)
		{
			int ret = ImGuiTextIndexSizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImGuiTextIndexSize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				int ret = ImGuiTextIndexSizeNative((ImGuiTextIndex*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImGuiTextIndexGetLineBeginNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[814])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[814])((nint)self, (nint)baseValue, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, baseValue, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, baseValue, n));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineBeginNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineBegin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineBeginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineBeginNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* ImGuiTextIndexGetLineEndNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, byte*>)vt[815])(self, baseValue, n);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint>)vt[815])((nint)self, (nint)baseValue, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* ret = ImGuiTextIndexGetLineEndNative(self, baseValue, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, baseValue, n));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, baseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				byte* ret = ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, (byte*)pbaseValue, n));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ImGuiTextIndexGetLineEndNative(self, pStr0, n);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative(self, pStr0, n));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, n));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* ImGuiTextIndexGetLineEnd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_get_line_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string ImGuiTextIndexGetLineEndS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(ImGuiTextIndexGetLineEndNative((ImGuiTextIndex*)pself, pStr0, n));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTextIndexAppendNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextIndex*, byte*, int, int, void>)vt[816])(self, baseValue, oldSize, newSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, void>)vt[816])((nint)self, (nint)baseValue, oldSize, newSize);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			ImGuiTextIndexAppendNative(self, baseValue, oldSize, newSize);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] byte* baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, baseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (byte* pbaseValue = &baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (byte* pbaseValue = baseValue)
			{
				ImGuiTextIndexAppendNative(self, (byte*)pbaseValue, oldSize, newSize);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ImGuiTextIndex* self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (baseValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextIndexAppendNative(self, pStr0, oldSize, newSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ref byte baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = &baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				fixed (byte* pbaseValue = baseValue)
				{
					ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, (byte*)pbaseValue, oldSize, newSize);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextIndex_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTextIndexAppend([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextIndex*")] ref ImGuiTextIndex self, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "const char*")] string baseValue, [NativeName(NativeNameType.Param, "old_size")] [NativeName(NativeNameType.Type, "int")] int oldSize, [NativeName(NativeNameType.Param, "new_size")] [NativeName(NativeNameType.Type, "int")] int newSize)
		{
			fixed (ImGuiTextIndex* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (baseValue != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(baseValue);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(baseValue, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGuiTextIndexAppendNative((ImGuiTextIndex*)pself, pStr0, oldSize, newSize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLowerBound")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		internal static ImGuiStoragePair* ImLowerBoundNative([NativeName(NativeNameType.Param, "in_begin")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inBegin, [NativeName(NativeNameType.Param, "in_end")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inEnd, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStoragePair*, ImGuiStoragePair*, uint, ImGuiStoragePair*>)vt[817])(inBegin, inEnd, key);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint>)vt[817])((nint)inBegin, (nint)inEnd, key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLowerBound")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImLowerBound([NativeName(NativeNameType.Param, "in_begin")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inBegin, [NativeName(NativeNameType.Param, "in_end")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inEnd, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			ImGuiStoragePair* ret = ImLowerBoundNative(inBegin, inEnd, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLowerBound")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImLowerBound([NativeName(NativeNameType.Param, "in_begin")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ref ImGuiStoragePair inBegin, [NativeName(NativeNameType.Param, "in_end")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inEnd, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				ImGuiStoragePair* ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, inEnd, key);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLowerBound")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImLowerBound([NativeName(NativeNameType.Param, "in_begin")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* inBegin, [NativeName(NativeNameType.Param, "in_end")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ref ImGuiStoragePair inEnd, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStoragePair* pinEnd = &inEnd)
			{
				ImGuiStoragePair* ret = ImLowerBoundNative(inBegin, (ImGuiStoragePair*)pinEnd, key);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImLowerBound")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImLowerBound([NativeName(NativeNameType.Param, "in_begin")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ref ImGuiStoragePair inBegin, [NativeName(NativeNameType.Param, "in_end")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ref ImGuiStoragePair inEnd, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStoragePair* pinBegin = &inBegin)
			{
				fixed (ImGuiStoragePair* pinEnd = &inEnd)
				{
					ImGuiStoragePair* ret = ImLowerBoundNative((ImGuiStoragePair*)pinBegin, (ImGuiStoragePair*)pinEnd, key);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_ImDrawListSharedData")]
		[return: NativeName(NativeNameType.Type, "ImDrawListSharedData*")]
		internal static ImDrawListSharedData* ImDrawListSharedDataImDrawListSharedDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawListSharedData*>)vt[818])();
			#else
			return (ImDrawListSharedData*)((delegate* unmanaged[Cdecl]<nint>)vt[818])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_ImDrawListSharedData")]
		[return: NativeName(NativeNameType.Type, "ImDrawListSharedData*")]
		public static ImDrawListSharedData* ImDrawListSharedDataImDrawListSharedData()
		{
			ImDrawListSharedData* ret = ImDrawListSharedDataImDrawListSharedDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImDrawListSharedDataDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, void>)vt[819])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[819])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawListSharedDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* self)
		{
			ImDrawListSharedDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawListSharedDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ref ImDrawListSharedData self)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataDestroyNative((ImDrawListSharedData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImDrawListSharedDataSetCircleTessellationMaxErrorNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* self, [NativeName(NativeNameType.Param, "max_error")] [NativeName(NativeNameType.Type, "float")] float maxError)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, float, void>)vt[820])(self, maxError);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[820])((nint)self, maxError);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawListSharedDataSetCircleTessellationMaxError([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* self, [NativeName(NativeNameType.Param, "max_error")] [NativeName(NativeNameType.Type, "float")] float maxError)
		{
			ImDrawListSharedDataSetCircleTessellationMaxErrorNative(self, maxError);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSharedData_SetCircleTessellationMaxError")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawListSharedDataSetCircleTessellationMaxError([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ref ImDrawListSharedData self, [NativeName(NativeNameType.Param, "max_error")] [NativeName(NativeNameType.Type, "float")] float maxError)
		{
			fixed (ImDrawListSharedData* pself = &self)
			{
				ImDrawListSharedDataSetCircleTessellationMaxErrorNative((ImDrawListSharedData*)pself, maxError);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_ImDrawDataBuilder")]
		[return: NativeName(NativeNameType.Type, "ImDrawDataBuilder*")]
		internal static ImDrawDataBuilder* ImDrawDataBuilderImDrawDataBuilderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*>)vt[821])();
			#else
			return (ImDrawDataBuilder*)((delegate* unmanaged[Cdecl]<nint>)vt[821])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_ImDrawDataBuilder")]
		[return: NativeName(NativeNameType.Type, "ImDrawDataBuilder*")]
		public static ImDrawDataBuilder* ImDrawDataBuilderImDrawDataBuilder()
		{
			ImDrawDataBuilder* ret = ImDrawDataBuilderImDrawDataBuilderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImDrawDataBuilderDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawDataBuilder*")] ImDrawDataBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawDataBuilder*, void>)vt[822])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[822])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawDataBuilderDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawDataBuilder*")] ImDrawDataBuilder* self)
		{
			ImDrawDataBuilderDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawDataBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImDrawDataBuilderDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawDataBuilder*")] ref ImDrawDataBuilder self)
		{
			fixed (ImDrawDataBuilder* pself = &self)
			{
				ImDrawDataBuilderDestroyNative((ImDrawDataBuilder*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiDataVarInfo_GetVarPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* ImGuiDataVarInfoGetVarPtrNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiDataVarInfo*")] ImGuiDataVarInfo* self, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "void*")] void* parent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDataVarInfo*, void*, void*>)vt[823])(self, parent);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[823])((nint)self, (nint)parent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiDataVarInfo_GetVarPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImGuiDataVarInfoGetVarPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiDataVarInfo*")] ImGuiDataVarInfo* self, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "void*")] void* parent)
		{
			void* ret = ImGuiDataVarInfoGetVarPtrNative(self, parent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiDataVarInfo_GetVarPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* ImGuiDataVarInfoGetVarPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiDataVarInfo*")] ref ImGuiDataVarInfo self, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "void*")] void* parent)
		{
			fixed (ImGuiDataVarInfo* pself = &self)
			{
				void* ret = ImGuiDataVarInfoGetVarPtrNative((ImGuiDataVarInfo*)pself, parent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModIntNative([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int")] int v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, int, ImGuiStyleMod*>)vt[824])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, int, nint>)vt[824])(idx, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		public static ImGuiStyleMod* ImGuiStyleModImGuiStyleModInt([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int")] int v)
		{
			ImGuiStyleMod* ret = ImGuiStyleModImGuiStyleModIntNative(idx, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiStyleModDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyleMod*")] ImGuiStyleMod* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyleMod*, void>)vt[825])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[825])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiStyleModDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyleMod*")] ImGuiStyleMod* self)
		{
			ImGuiStyleModDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiStyleModDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyleMod*")] ref ImGuiStyleMod self)
		{
			fixed (ImGuiStyleMod* pself = &self)
			{
				ImGuiStyleModDestroyNative((ImGuiStyleMod*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Float")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModFloatNative([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, ImGuiStyleMod*>)vt[826])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, float, nint>)vt[826])(idx, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Float")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		public static ImGuiStyleMod* ImGuiStyleModImGuiStyleModFloat([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			ImGuiStyleMod* ret = ImGuiStyleModImGuiStyleModFloatNative(idx, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		internal static ImGuiStyleMod* ImGuiStyleModImGuiStyleModVec2Native([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, ImGuiStyleMod*>)vt[827])(idx, v);
			#else
			return (ImGuiStyleMod*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, Vector2, nint>)vt[827])(idx, v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyleMod_ImGuiStyleMod_Vec2")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyleMod*")]
		public static ImGuiStyleMod* ImGuiStyleModImGuiStyleModVec2([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 v)
		{
			ImGuiStyleMod* ret = ImGuiStyleModImGuiStyleModVec2Native(idx, v);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_ImGuiComboPreviewData")]
		[return: NativeName(NativeNameType.Type, "ImGuiComboPreviewData*")]
		internal static ImGuiComboPreviewData* ImGuiComboPreviewDataImGuiComboPreviewDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*>)vt[828])();
			#else
			return (ImGuiComboPreviewData*)((delegate* unmanaged[Cdecl]<nint>)vt[828])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_ImGuiComboPreviewData")]
		[return: NativeName(NativeNameType.Type, "ImGuiComboPreviewData*")]
		public static ImGuiComboPreviewData* ImGuiComboPreviewDataImGuiComboPreviewData()
		{
			ImGuiComboPreviewData* ret = ImGuiComboPreviewDataImGuiComboPreviewDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiComboPreviewDataDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiComboPreviewData*")] ImGuiComboPreviewData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiComboPreviewData*, void>)vt[829])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[829])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiComboPreviewDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiComboPreviewData*")] ImGuiComboPreviewData* self)
		{
			ImGuiComboPreviewDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiComboPreviewData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiComboPreviewDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiComboPreviewData*")] ref ImGuiComboPreviewData self)
		{
			fixed (ImGuiComboPreviewData* pself = &self)
			{
				ImGuiComboPreviewDataDestroyNative((ImGuiComboPreviewData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_ImGuiMenuColumns")]
		[return: NativeName(NativeNameType.Type, "ImGuiMenuColumns*")]
		internal static ImGuiMenuColumns* ImGuiMenuColumnsImGuiMenuColumnsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*>)vt[830])();
			#else
			return (ImGuiMenuColumns*)((delegate* unmanaged[Cdecl]<nint>)vt[830])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_ImGuiMenuColumns")]
		[return: NativeName(NativeNameType.Type, "ImGuiMenuColumns*")]
		public static ImGuiMenuColumns* ImGuiMenuColumnsImGuiMenuColumns()
		{
			ImGuiMenuColumns* ret = ImGuiMenuColumnsImGuiMenuColumnsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiMenuColumnsDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, void>)vt[831])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[831])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self)
		{
			ImGuiMenuColumnsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ref ImGuiMenuColumns self)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsDestroyNative((ImGuiMenuColumns*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiMenuColumnsUpdateNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "window_reappearing")] [NativeName(NativeNameType.Type, "bool")] byte windowReappearing)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, byte, void>)vt[832])(self, spacing, windowReappearing);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, byte, void>)vt[832])((nint)self, spacing, windowReappearing);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsUpdate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "window_reappearing")] [NativeName(NativeNameType.Type, "bool")] bool windowReappearing)
		{
			ImGuiMenuColumnsUpdateNative(self, spacing, windowReappearing ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_Update")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsUpdate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ref ImGuiMenuColumns self, [NativeName(NativeNameType.Param, "spacing")] [NativeName(NativeNameType.Type, "float")] float spacing, [NativeName(NativeNameType.Param, "window_reappearing")] [NativeName(NativeNameType.Type, "bool")] bool windowReappearing)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsUpdateNative((ImGuiMenuColumns*)pself, spacing, windowReappearing ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_DeclColumns")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float ImGuiMenuColumnsDeclColumnsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "w_icon")] [NativeName(NativeNameType.Type, "float")] float wIcon, [NativeName(NativeNameType.Param, "w_label")] [NativeName(NativeNameType.Type, "float")] float wLabel, [NativeName(NativeNameType.Param, "w_shortcut")] [NativeName(NativeNameType.Type, "float")] float wShortcut, [NativeName(NativeNameType.Param, "w_mark")] [NativeName(NativeNameType.Type, "float")] float wMark)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, float, float, float, float, float>)vt[833])(self, wIcon, wLabel, wShortcut, wMark);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float, float, float, float, float>)vt[833])((nint)self, wIcon, wLabel, wShortcut, wMark);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_DeclColumns")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImGuiMenuColumnsDeclColumns([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "w_icon")] [NativeName(NativeNameType.Type, "float")] float wIcon, [NativeName(NativeNameType.Param, "w_label")] [NativeName(NativeNameType.Type, "float")] float wLabel, [NativeName(NativeNameType.Param, "w_shortcut")] [NativeName(NativeNameType.Type, "float")] float wShortcut, [NativeName(NativeNameType.Param, "w_mark")] [NativeName(NativeNameType.Type, "float")] float wMark)
		{
			float ret = ImGuiMenuColumnsDeclColumnsNative(self, wIcon, wLabel, wShortcut, wMark);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_DeclColumns")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float ImGuiMenuColumnsDeclColumns([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ref ImGuiMenuColumns self, [NativeName(NativeNameType.Param, "w_icon")] [NativeName(NativeNameType.Type, "float")] float wIcon, [NativeName(NativeNameType.Param, "w_label")] [NativeName(NativeNameType.Type, "float")] float wLabel, [NativeName(NativeNameType.Param, "w_shortcut")] [NativeName(NativeNameType.Type, "float")] float wShortcut, [NativeName(NativeNameType.Param, "w_mark")] [NativeName(NativeNameType.Type, "float")] float wMark)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				float ret = ImGuiMenuColumnsDeclColumnsNative((ImGuiMenuColumns*)pself, wIcon, wLabel, wShortcut, wMark);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_CalcNextTotalWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiMenuColumnsCalcNextTotalWidthNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "update_offsets")] [NativeName(NativeNameType.Type, "bool")] byte updateOffsets)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMenuColumns*, byte, void>)vt[834])(self, updateOffsets);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[834])((nint)self, updateOffsets);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_CalcNextTotalWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsCalcNextTotalWidth([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ImGuiMenuColumns* self, [NativeName(NativeNameType.Param, "update_offsets")] [NativeName(NativeNameType.Type, "bool")] bool updateOffsets)
		{
			ImGuiMenuColumnsCalcNextTotalWidthNative(self, updateOffsets ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiMenuColumns_CalcNextTotalWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiMenuColumnsCalcNextTotalWidth([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiMenuColumns*")] ref ImGuiMenuColumns self, [NativeName(NativeNameType.Param, "update_offsets")] [NativeName(NativeNameType.Type, "bool")] bool updateOffsets)
		{
			fixed (ImGuiMenuColumns* pself = &self)
			{
				ImGuiMenuColumnsCalcNextTotalWidthNative((ImGuiMenuColumns*)pself, updateOffsets ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")]
		internal static ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*>)vt[835])();
			#else
			return (ImGuiInputTextDeactivatedState*)((delegate* unmanaged[Cdecl]<nint>)vt[835])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")]
		public static ImGuiInputTextDeactivatedState* ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedState()
		{
			ImGuiInputTextDeactivatedState* ret = ImGuiInputTextDeactivatedStateImGuiInputTextDeactivatedStateNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiInputTextDeactivatedStateDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ImGuiInputTextDeactivatedState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[836])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[836])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextDeactivatedStateDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ImGuiInputTextDeactivatedState* self)
		{
			ImGuiInputTextDeactivatedStateDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextDeactivatedStateDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateDestroyNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiInputTextDeactivatedStateClearFreeMemoryNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ImGuiInputTextDeactivatedState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextDeactivatedState*, void>)vt[837])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[837])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextDeactivatedStateClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ImGuiInputTextDeactivatedState* self)
		{
			ImGuiInputTextDeactivatedStateClearFreeMemoryNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextDeactivatedState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextDeactivatedStateClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextDeactivatedState*")] ref ImGuiInputTextDeactivatedState self)
		{
			fixed (ImGuiInputTextDeactivatedState* pself = &self)
			{
				ImGuiInputTextDeactivatedStateClearFreeMemoryNative((ImGuiInputTextDeactivatedState*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ImGuiInputTextState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextState*")]
		internal static ImGuiInputTextState* ImGuiInputTextStateImGuiInputTextStateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*>)vt[838])();
			#else
			return (ImGuiInputTextState*)((delegate* unmanaged[Cdecl]<nint>)vt[838])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ImGuiInputTextState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextState*")]
		public static ImGuiInputTextState* ImGuiInputTextStateImGuiInputTextState()
		{
			ImGuiInputTextState* ret = ImGuiInputTextStateImGuiInputTextStateNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiInputTextStateDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[839])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[839])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			ImGuiInputTextStateDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateDestroyNative((ImGuiInputTextState*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiInputTextStateClearTextNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[840])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[840])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateClearText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			ImGuiInputTextStateClearTextNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateClearText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearTextNative((ImGuiInputTextState*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiInputTextStateClearFreeMemoryNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[841])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[841])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			ImGuiInputTextStateClearFreeMemoryNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiInputTextStateClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				ImGuiInputTextStateClearFreeMemoryNative((ImGuiInputTextState*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetUndoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ImGuiInputTextStateGetUndoAvailCountNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, int>)vt[842])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[842])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetUndoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImGuiInputTextStateGetUndoAvailCount([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* self)
		{
			int ret = ImGuiInputTextStateGetUndoAvailCountNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextState_GetUndoAvailCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ImGuiInputTextStateGetUndoAvailCount([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ref ImGuiInputTextState self)
		{
			fixed (ImGuiInputTextState* pself = &self)
			{
				int ret = ImGuiInputTextStateGetUndoAvailCountNative((ImGuiInputTextState*)pself);
				return ret;
			}
		}
	}
}
