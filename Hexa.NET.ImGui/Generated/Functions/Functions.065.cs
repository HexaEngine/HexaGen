// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarFindMostRecentlySelectedTabForActiveWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		internal static ImGuiTabItem* TabBarFindMostRecentlySelectedTabForActiveWindowNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*>)vt[1282])(tabBar);
			#else
			return (ImGuiTabItem*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1282])((nint)tabBar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarFindMostRecentlySelectedTabForActiveWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public static ImGuiTabItem* TabBarFindMostRecentlySelectedTabForActiveWindow([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			ImGuiTabItem* ret = TabBarFindMostRecentlySelectedTabForActiveWindowNative(tabBar);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarFindMostRecentlySelectedTabForActiveWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public static ImGuiTabItem* TabBarFindMostRecentlySelectedTabForActiveWindow([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				ImGuiTabItem* ret = TabBarFindMostRecentlySelectedTabForActiveWindowNative((ImGuiTabBar*)ptabBar);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetCurrentTab")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		internal static ImGuiTabItem* TabBarGetCurrentTabNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*>)vt[1283])(tabBar);
			#else
			return (ImGuiTabItem*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1283])((nint)tabBar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetCurrentTab")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public static ImGuiTabItem* TabBarGetCurrentTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			ImGuiTabItem* ret = TabBarGetCurrentTabNative(tabBar);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetCurrentTab")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public static ImGuiTabItem* TabBarGetCurrentTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				ImGuiTabItem* ret = TabBarGetCurrentTabNative((ImGuiTabBar*)ptabBar);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabOrder")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TabBarGetTabOrderNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, int>)vt[1284])(tabBar, tab);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[1284])((nint)tabBar, (nint)tab);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabOrder")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TabBarGetTabOrder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			int ret = TabBarGetTabOrderNative(tabBar, tab);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabOrder")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TabBarGetTabOrder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				int ret = TabBarGetTabOrderNative((ImGuiTabBar*)ptabBar, tab);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabOrder")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TabBarGetTabOrder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				int ret = TabBarGetTabOrderNative(tabBar, (ImGuiTabItem*)ptab);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabOrder")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TabBarGetTabOrder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					int ret = TabBarGetTabOrderNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* TabBarGetTabNameNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, byte*>)vt[1285])(tabBar, tab);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[1285])((nint)tabBar, (nint)tab);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TabBarGetTabName([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			byte* ret = TabBarGetTabNameNative(tabBar, tab);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TabBarGetTabNameS([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative(tabBar, tab));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TabBarGetTabName([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* ret = TabBarGetTabNameNative((ImGuiTabBar*)ptabBar, tab);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TabBarGetTabNameS([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative((ImGuiTabBar*)ptabBar, tab));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TabBarGetTabName([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				byte* ret = TabBarGetTabNameNative(tabBar, (ImGuiTabItem*)ptab);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TabBarGetTabNameS([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative(tabBar, (ImGuiTabItem*)ptab));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TabBarGetTabName([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					byte* ret = TabBarGetTabNameNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarGetTabName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TabBarGetTabNameS([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					string ret = Utils.DecodeStringUTF8(TabBarGetTabNameNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarAddTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarAddTabNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab_flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags tabFlags, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItemFlags, ImGuiWindow*, void>)vt[1286])(tabBar, tabFlags, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiTabItemFlags, nint, void>)vt[1286])((nint)tabBar, tabFlags, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarAddTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarAddTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab_flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags tabFlags, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			TabBarAddTabNative(tabBar, tabFlags, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarAddTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarAddTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab_flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags tabFlags, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarAddTabNative((ImGuiTabBar*)ptabBar, tabFlags, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarAddTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarAddTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab_flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags tabFlags, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				TabBarAddTabNative(tabBar, tabFlags, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarAddTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarAddTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab_flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags tabFlags, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					TabBarAddTabNative((ImGuiTabBar*)ptabBar, tabFlags, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarRemoveTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarRemoveTabNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, uint, void>)vt[1287])(tabBar, tabId);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[1287])((nint)tabBar, tabId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarRemoveTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarRemoveTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId)
		{
			TabBarRemoveTabNative(tabBar, tabId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarRemoveTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarRemoveTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarRemoveTabNative((ImGuiTabBar*)ptabBar, tabId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarCloseTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarCloseTabNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, void>)vt[1288])(tabBar, tab);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1288])((nint)tabBar, (nint)tab);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarCloseTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarCloseTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			TabBarCloseTabNative(tabBar, tab);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarCloseTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarCloseTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarCloseTabNative((ImGuiTabBar*)ptabBar, tab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarCloseTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarCloseTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarCloseTabNative(tabBar, (ImGuiTabItem*)ptab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarCloseTab")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarCloseTab([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					TabBarCloseTabNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueFocus")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarQueueFocusNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, void>)vt[1289])(tabBar, tab);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1289])((nint)tabBar, (nint)tab);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueFocus")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueFocus([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			TabBarQueueFocusNative(tabBar, tab);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueFocus")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueFocus([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarQueueFocusNative((ImGuiTabBar*)ptabBar, tab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueFocus")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueFocus([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueFocusNative(tabBar, (ImGuiTabItem*)ptab);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueFocus")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueFocus([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					TabBarQueueFocusNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarQueueReorderNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, int, void>)vt[1290])(tabBar, tab, offset);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[1290])((nint)tabBar, (nint)tab, offset);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			TabBarQueueReorderNative(tabBar, tab, offset);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarQueueReorderNative((ImGuiTabBar*)ptabBar, tab, offset);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueReorderNative(tabBar, (ImGuiTabItem*)ptab, offset);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					TabBarQueueReorderNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab, offset);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorderFromMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabBarQueueReorderFromMousePosNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "mouse_pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 mousePos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, ImGuiTabItem*, Vector2, void>)vt[1291])(tabBar, tab, mousePos);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[1291])((nint)tabBar, (nint)tab, mousePos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorderFromMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorderFromMousePos([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "mouse_pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 mousePos)
		{
			TabBarQueueReorderFromMousePosNative(tabBar, tab, mousePos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorderFromMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorderFromMousePos([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* tab, [NativeName(NativeNameType.Param, "mouse_pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 mousePos)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				TabBarQueueReorderFromMousePosNative((ImGuiTabBar*)ptabBar, tab, mousePos);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorderFromMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorderFromMousePos([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab, [NativeName(NativeNameType.Param, "mouse_pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 mousePos)
		{
			fixed (ImGuiTabItem* ptab = &tab)
			{
				TabBarQueueReorderFromMousePosNative(tabBar, (ImGuiTabItem*)ptab, mousePos);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarQueueReorderFromMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabBarQueueReorderFromMousePos([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "tab")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem tab, [NativeName(NativeNameType.Param, "mouse_pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 mousePos)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiTabItem* ptab = &tab)
				{
					TabBarQueueReorderFromMousePosNative((ImGuiTabBar*)ptabBar, (ImGuiTabItem*)ptab, mousePos);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarProcessReorder")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TabBarProcessReorderNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte>)vt[1292])(tabBar);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[1292])((nint)tabBar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarProcessReorder")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabBarProcessReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			byte ret = TabBarProcessReorderNative(tabBar);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabBarProcessReorder")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabBarProcessReorder([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte ret = TabBarProcessReorderNative((ImGuiTabBar*)ptabBar);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TabItemExNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte*, bool*, ImGuiTabItemFlags, ImGuiWindow*, byte>)vt[1293])(tabBar, label, pOpen, flags, dockedWindow);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, ImGuiTabItemFlags, nint, byte>)vt[1293])((nint)tabBar, (nint)label, (nint)pOpen, flags, (nint)dockedWindow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			byte ret = TabItemExNative(tabBar, label, pOpen, flags, dockedWindow);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, label, pOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TabItemExNative(tabBar, pStr0, pOpen, flags, dockedWindow);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, pOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, pOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, pStr0, pOpen, flags, dockedWindow);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = TabItemExNative(tabBar, label, (bool*)ppOpen, flags, dockedWindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, label, (bool*)ppOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, (bool*)ppOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, (bool*)ppOpen, flags, dockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				byte ret = TabItemExNative(tabBar, pStr0, (bool*)ppOpen, flags, dockedWindow);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					fixed (bool* ppOpen = &pOpen)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, (bool*)ppOpen, flags, dockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					fixed (bool* ppOpen = &pOpen)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, (bool*)ppOpen, flags, dockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (bool* ppOpen = &pOpen)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, pStr0, (bool*)ppOpen, flags, dockedWindow);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
			{
				byte ret = TabItemExNative(tabBar, label, pOpen, flags, (ImGuiWindow*)pdockedWindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, label, pOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = label)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, (byte*)plabel, pOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
			{
				byte ret = TabItemExNative(tabBar, pStr0, pOpen, flags, (ImGuiWindow*)pdockedWindow);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, pOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, pOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, pStr0, pOpen, flags, (ImGuiWindow*)pdockedWindow);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, label, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, label, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative(tabBar, (byte*)plabel, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative(tabBar, (byte*)plabel, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* ppOpen = &pOpen)
			{
				fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
				{
					byte ret = TabItemExNative(tabBar, pStr0, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					fixed (bool* ppOpen = &pOpen)
					{
						fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
						{
							byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					fixed (bool* ppOpen = &pOpen)
					{
						fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
						{
							byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, (byte*)plabel, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TabItemEx([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "docked_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow dockedWindow)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (bool* ppOpen = &pOpen)
				{
					fixed (ImGuiWindow* pdockedWindow = &dockedWindow)
					{
						byte ret = TabItemExNative((ImGuiTabBar*)ptabBar, pStr0, (bool*)ppOpen, flags, (ImGuiWindow*)pdockedWindow);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabItemCalcSizeNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] byte hasCloseButtonOrUnsavedMarker)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, byte*, byte, void>)vt[1294])(pOut, label, hasCloseButtonOrUnsavedMarker);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, void>)vt[1294])((nint)pOut, (nint)label, hasCloseButtonOrUnsavedMarker);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSize([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			Vector2 ret;
			TabItemCalcSizeNative(&ret, label, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			TabItemCalcSizeNative(pOut, label, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				TabItemCalcSizeNative((Vector2*)ppOut, label, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSize([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (byte* plabel = &label)
			{
				Vector2 ret;
				TabItemCalcSizeNative(&ret, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSize([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (byte* plabel = label)
			{
				Vector2 ret;
				TabItemCalcSizeNative(&ret, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSize([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Vector2 ret;
			TabItemCalcSizeNative(&ret, pStr0, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (byte* plabel = &label)
				{
					TabItemCalcSizeNative((Vector2*)ppOut, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (byte* plabel = label)
				{
					TabItemCalcSizeNative((Vector2*)ppOut, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				TabItemCalcSizeNative((Vector2*)ppOut, pStr0, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (byte* plabel = &label)
			{
				TabItemCalcSizeNative(pOut, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			fixed (byte* plabel = label)
			{
				TabItemCalcSizeNative(pOut, (byte*)plabel, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "has_close_button_or_unsaved_marker")] [NativeName(NativeNameType.Type, "bool")] bool hasCloseButtonOrUnsavedMarker)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TabItemCalcSizeNative(pOut, pStr0, hasCloseButtonOrUnsavedMarker ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabItemCalcSizeWindowPtrNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, void>)vt[1295])(pOut, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1295])((nint)pOut, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			Vector2 ret;
			TabItemCalcSizeWindowPtrNative(&ret, window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			TabItemCalcSizeWindowPtrNative(pOut, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				TabItemCalcSizeWindowPtrNative((Vector2*)ppOut, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				TabItemCalcSizeWindowPtrNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				TabItemCalcSizeWindowPtrNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemCalcSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemCalcSizeWindowPtr([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					TabItemCalcSizeWindowPtrNative((Vector2*)ppOut, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabItemBackgroundNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImRect, ImGuiTabItemFlags, uint, void>)vt[1296])(drawList, bb, flags, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, ImGuiTabItemFlags, uint, void>)vt[1296])((nint)drawList, bb, flags, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemBackground([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			TabItemBackgroundNative(drawList, bb, flags, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemBackground([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				TabItemBackgroundNative((ImDrawList*)pdrawList, bb, flags, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TabItemLabelAndCloseButtonNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] byte isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImRect, ImGuiTabItemFlags, Vector2, byte*, uint, uint, byte, bool*, bool*, void>)vt[1297])(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible, outJustClosed, outTextClipped);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, ImGuiTabItemFlags, Vector2, nint, uint, uint, byte, nint, nint, void>)vt[1297])((nint)drawList, bb, flags, framePadding, (nint)label, tabId, closeButtonId, isContentsVisible, (nint)outJustClosed, (nint)outTextClipped);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (byte* plabel = label)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, outTextClipped);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (bool* poutJustClosed = &outJustClosed)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* poutJustClosed = &outJustClosed)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					fixed (bool* poutJustClosed = &outJustClosed)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					fixed (bool* poutJustClosed = &outJustClosed)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] bool* outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, outTextClipped);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (bool* poutTextClipped = &outTextClipped)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* poutTextClipped = &outTextClipped)
			{
				TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] bool* outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, outJustClosed, (bool*)poutTextClipped);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (bool* poutJustClosed = &outJustClosed)
			{
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, label, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* poutJustClosed = &outJustClosed)
			{
				fixed (bool* poutTextClipped = &outTextClipped)
				{
					TabItemLabelAndCloseButtonNative(drawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					fixed (bool* poutJustClosed = &outJustClosed)
					{
						fixed (bool* poutTextClipped = &outTextClipped)
						{
							TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					fixed (bool* poutJustClosed = &outJustClosed)
					{
						fixed (bool* poutTextClipped = &outTextClipped)
						{
							TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, (byte*)plabel, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTabItemLabelAndCloseButton")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TabItemLabelAndCloseButton([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTabItemFlags")] ImGuiTabItemFlags flags, [NativeName(NativeNameType.Param, "frame_padding")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 framePadding, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "tab_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint tabId, [NativeName(NativeNameType.Param, "close_button_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint closeButtonId, [NativeName(NativeNameType.Param, "is_contents_visible")] [NativeName(NativeNameType.Type, "bool")] bool isContentsVisible, [NativeName(NativeNameType.Param, "out_just_closed")] [NativeName(NativeNameType.Type, "bool*")] ref bool outJustClosed, [NativeName(NativeNameType.Param, "out_text_clipped")] [NativeName(NativeNameType.Type, "bool*")] ref bool outTextClipped)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (bool* poutJustClosed = &outJustClosed)
				{
					fixed (bool* poutTextClipped = &outTextClipped)
					{
						TabItemLabelAndCloseButtonNative((ImDrawList*)pdrawList, bb, flags, framePadding, pStr0, tabId, closeButtonId, isContentsVisible ? (byte)1 : (byte)0, (bool*)poutJustClosed, (bool*)poutTextClipped);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderTextNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] byte hideTextAfterHash)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, byte*, byte*, byte, void>)vt[1298])(pos, text, textEnd, hideTextAfterHash);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, nint, nint, byte, void>)vt[1298])(pos, (nint)text, (nint)textEnd, hideTextAfterHash);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			RenderTextNative(pos, text, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextNative(pos, (byte*)ptext, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptext = text)
			{
				RenderTextNative(pos, (byte*)ptext, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextNative(pos, pStr0, textEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextNative(pos, text, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				RenderTextNative(pos, text, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextNative(pos, text, pStr0, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextNative(pos, (byte*)ptext, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextNative(pos, (byte*)ptext, (byte*)ptextEnd, hideTextAfterHash ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderText([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "hide_text_after_hash")] [NativeName(NativeNameType.Type, "bool")] bool hideTextAfterHash)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextNative(pos, pStr0, pStr1, hideTextAfterHash ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderTextWrappedNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, byte*, byte*, float, void>)vt[1299])(pos, text, textEnd, wrapWidth);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, nint, nint, float, void>)vt[1299])(pos, (nint)text, (nint)textEnd, wrapWidth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			RenderTextWrappedNative(pos, text, textEnd, wrapWidth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextWrappedNative(pos, (byte*)ptext, textEnd, wrapWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptext = text)
			{
				RenderTextWrappedNative(pos, (byte*)ptext, textEnd, wrapWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextWrappedNative(pos, pStr0, textEnd, wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextWrappedNative(pos, text, (byte*)ptextEnd, wrapWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				RenderTextWrappedNative(pos, text, (byte*)ptextEnd, wrapWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextWrappedNative(pos, text, pStr0, wrapWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextWrappedNative(pos, (byte*)ptext, (byte*)ptextEnd, wrapWidth);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextWrappedNative(pos, (byte*)ptext, (byte*)ptextEnd, wrapWidth);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextWrapped([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "wrap_width")] [NativeName(NativeNameType.Type, "float")] float wrapWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextWrappedNative(pos, pStr0, pStr1, wrapWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderTextClippedNative([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, byte*, byte*, Vector2*, Vector2, ImRect*, void>)vt[1300])(posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, nint, nint, nint, Vector2, nint, void>)vt[1300])(posMin, posMax, (nint)text, (nint)textEnd, (nint)textSizeIfKnown, align, (nint)clipRect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			RenderTextClippedNative(posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedNative(posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedNative(posMin, posMax, text, pStr0, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextClippedNative(posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, clipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, text, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, text, pStr0, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedNative(posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedNative(posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedNative(posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClipped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClipped([NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedNative(posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderTextClippedExNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, byte*, byte*, Vector2*, Vector2, ImRect*, void>)vt[1301])(drawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, nint, nint, nint, Vector2, nint, void>)vt[1301])((nint)drawList, posMin, posMax, (nint)text, (nint)textEnd, (nint)textSizeIfKnown, align, (nint)clipRect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, clipRect);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, clipRect);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, clipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, clipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, clipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, clipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, clipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, textEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}
	}
}
