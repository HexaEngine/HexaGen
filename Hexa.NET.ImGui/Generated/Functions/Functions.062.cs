// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabItem_ImGuiTabItem")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		internal static ImGuiTabItem* ImGuiTabItemImGuiTabItemNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabItem*>)vt[955])();
			#else
			return (ImGuiTabItem*)((delegate* unmanaged[Cdecl]<nint>)vt[955])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabItem_ImGuiTabItem")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabItem*")]
		public static ImGuiTabItem* ImGuiTabItemImGuiTabItem()
		{
			ImGuiTabItem* ret = ImGuiTabItemImGuiTabItemNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabItem_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTabItemDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabItem*, void>)vt[956])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[956])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabItem_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTabItemDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ImGuiTabItem* self)
		{
			ImGuiTabItemDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabItem_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTabItemDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabItem*")] ref ImGuiTabItem self)
		{
			fixed (ImGuiTabItem* pself = &self)
			{
				ImGuiTabItemDestroyNative((ImGuiTabItem*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabBar_ImGuiTabBar")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		internal static ImGuiTabBar* ImGuiTabBarImGuiTabBarNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTabBar*>)vt[957])();
			#else
			return (ImGuiTabBar*)((delegate* unmanaged[Cdecl]<nint>)vt[957])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabBar_ImGuiTabBar")]
		[return: NativeName(NativeNameType.Type, "ImGuiTabBar*")]
		public static ImGuiTabBar* ImGuiTabBarImGuiTabBar()
		{
			ImGuiTabBar* ret = ImGuiTabBarImGuiTabBarNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabBar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTabBarDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, void>)vt[958])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[958])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabBar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTabBarDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* self)
		{
			ImGuiTabBarDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTabBar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTabBarDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar self)
		{
			fixed (ImGuiTabBar* pself = &self)
			{
				ImGuiTabBarDestroyNative((ImGuiTabBar*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumn_ImGuiTableColumn")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		internal static ImGuiTableColumn* ImGuiTableColumnImGuiTableColumnNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumn*>)vt[959])();
			#else
			return (ImGuiTableColumn*)((delegate* unmanaged[Cdecl]<nint>)vt[959])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumn_ImGuiTableColumn")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumn*")]
		public static ImGuiTableColumn* ImGuiTableColumnImGuiTableColumn()
		{
			ImGuiTableColumn* ret = ImGuiTableColumnImGuiTableColumnNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumn_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableColumnDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumn*, void>)vt[960])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[960])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumn_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableColumnDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* self)
		{
			ImGuiTableColumnDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumn_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableColumnDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn self)
		{
			fixed (ImGuiTableColumn* pself = &self)
			{
				ImGuiTableColumnDestroyNative((ImGuiTableColumn*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_ImGuiTableInstanceData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		internal static ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableInstanceData*>)vt[961])();
			#else
			return (ImGuiTableInstanceData*)((delegate* unmanaged[Cdecl]<nint>)vt[961])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_ImGuiTableInstanceData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		public static ImGuiTableInstanceData* ImGuiTableInstanceDataImGuiTableInstanceData()
		{
			ImGuiTableInstanceData* ret = ImGuiTableInstanceDataImGuiTableInstanceDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableInstanceDataDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")] ImGuiTableInstanceData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableInstanceData*, void>)vt[962])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[962])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableInstanceDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")] ImGuiTableInstanceData* self)
		{
			ImGuiTableInstanceDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableInstanceData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableInstanceDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")] ref ImGuiTableInstanceData self)
		{
			fixed (ImGuiTableInstanceData* pself = &self)
			{
				ImGuiTableInstanceDataDestroyNative((ImGuiTableInstanceData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_ImGuiTable")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		internal static ImGuiTable* ImGuiTableImGuiTableNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*>)vt[963])();
			#else
			return (ImGuiTable*)((delegate* unmanaged[Cdecl]<nint>)vt[963])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_ImGuiTable")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		public static ImGuiTable* ImGuiTableImGuiTable()
		{
			ImGuiTable* ret = ImGuiTableImGuiTableNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[964])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[964])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* self)
		{
			ImGuiTableDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTable_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable self)
		{
			fixed (ImGuiTable* pself = &self)
			{
				ImGuiTableDestroyNative((ImGuiTable*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableTempData_ImGuiTableTempData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		internal static ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableTempData*>)vt[965])();
			#else
			return (ImGuiTableTempData*)((delegate* unmanaged[Cdecl]<nint>)vt[965])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableTempData_ImGuiTableTempData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableTempData*")]
		public static ImGuiTableTempData* ImGuiTableTempDataImGuiTableTempData()
		{
			ImGuiTableTempData* ret = ImGuiTableTempDataImGuiTableTempDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableTempData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableTempDataDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ImGuiTableTempData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableTempData*, void>)vt[966])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[966])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableTempData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableTempDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ImGuiTableTempData* self)
		{
			ImGuiTableTempDataDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableTempData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableTempDataDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ref ImGuiTableTempData self)
		{
			fixed (ImGuiTableTempData* pself = &self)
			{
				ImGuiTableTempDataDestroyNative((ImGuiTableTempData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_ImGuiTableColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		internal static ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumnSettings*>)vt[967])();
			#else
			return (ImGuiTableColumnSettings*)((delegate* unmanaged[Cdecl]<nint>)vt[967])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_ImGuiTableColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		public static ImGuiTableColumnSettings* ImGuiTableColumnSettingsImGuiTableColumnSettings()
		{
			ImGuiTableColumnSettings* ret = ImGuiTableColumnSettingsImGuiTableColumnSettingsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableColumnSettingsDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")] ImGuiTableColumnSettings* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumnSettings*, void>)vt[968])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[968])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableColumnSettingsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")] ImGuiTableColumnSettings* self)
		{
			ImGuiTableColumnSettingsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableColumnSettingsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")] ref ImGuiTableColumnSettings self)
		{
			fixed (ImGuiTableColumnSettings* pself = &self)
			{
				ImGuiTableColumnSettingsDestroyNative((ImGuiTableColumnSettings*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_ImGuiTableSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSettings*")]
		internal static ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSettings*>)vt[969])();
			#else
			return (ImGuiTableSettings*)((delegate* unmanaged[Cdecl]<nint>)vt[969])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_ImGuiTableSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSettings*")]
		public static ImGuiTableSettings* ImGuiTableSettingsImGuiTableSettings()
		{
			ImGuiTableSettings* ret = ImGuiTableSettingsImGuiTableSettingsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiTableSettingsDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)vt[970])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[970])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableSettingsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* self)
		{
			ImGuiTableSettingsDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiTableSettingsDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableSettingsDestroyNative((ImGuiTableSettings*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_GetColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		internal static ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettingsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, ImGuiTableColumnSettings*>)vt[971])(self);
			#else
			return (ImGuiTableColumnSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[971])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_GetColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		public static ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettings([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* self)
		{
			ImGuiTableColumnSettings* ret = ImGuiTableSettingsGetColumnSettingsNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSettings_GetColumnSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSettings*")]
		public static ImGuiTableColumnSettings* ImGuiTableSettingsGetColumnSettings([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ref ImGuiTableSettings self)
		{
			fixed (ImGuiTableSettings* pself = &self)
			{
				ImGuiTableColumnSettings* ret = ImGuiTableSettingsGetColumnSettingsNative((ImGuiTableSettings*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentWindowRead")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* GetCurrentWindowReadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[972])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[972])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentWindowRead")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* GetCurrentWindowRead()
		{
			ImGuiWindow* ret = GetCurrentWindowReadNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* GetCurrentWindowNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[973])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[973])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* GetCurrentWindow()
		{
			ImGuiWindow* ret = GetCurrentWindowNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* FindWindowByIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiWindow*>)vt[974])(id);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[974])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindWindowByID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiWindow* ret = FindWindowByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByName")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* FindWindowByNameNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiWindow*>)vt[975])(name);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[975])((nint)name);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByName")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindWindowByName([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			ImGuiWindow* ret = FindWindowByNameNative(name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByName")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindWindowByName([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindow* ret = FindWindowByNameNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByName")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindWindowByName([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImGuiWindow* ret = FindWindowByNameNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowByName")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindWindowByName([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindow* ret = FindWindowByNameNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowParentAndRootLinks")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateWindowParentAndRootLinksNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags flags, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindowFlags, ImGuiWindow*, void>)vt[976])(window, flags, parentWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiWindowFlags, nint, void>)vt[976])((nint)window, flags, (nint)parentWindow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowParentAndRootLinks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowParentAndRootLinks([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags flags, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			UpdateWindowParentAndRootLinksNative(window, flags, parentWindow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowParentAndRootLinks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowParentAndRootLinks([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags flags, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, parentWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowParentAndRootLinks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowParentAndRootLinks([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags flags, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				UpdateWindowParentAndRootLinksNative(window, flags, (ImGuiWindow*)pparentWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowParentAndRootLinks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowParentAndRootLinks([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags flags, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* pparentWindow = &parentWindow)
				{
					UpdateWindowParentAndRootLinksNative((ImGuiWindow*)pwindow, flags, (ImGuiWindow*)pparentWindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowSkipRefresh")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateWindowSkipRefreshNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[977])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[977])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowSkipRefresh")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowSkipRefresh([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			UpdateWindowSkipRefreshNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateWindowSkipRefresh")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateWindowSkipRefresh([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				UpdateWindowSkipRefreshNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CalcWindowNextAutoFitSizeNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, void>)vt[978])(pOut, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[978])((nint)pOut, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			Vector2 ret;
			CalcWindowNextAutoFitSizeNative(&ret, window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			CalcWindowNextAutoFitSizeNative(pOut, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				CalcWindowNextAutoFitSizeNative((Vector2*)ppOut, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				CalcWindowNextAutoFitSizeNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				CalcWindowNextAutoFitSizeNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWindowNextAutoFitSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcWindowNextAutoFitSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					CalcWindowNextAutoFitSizeNative((Vector2*)ppOut, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowChildOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowChildOfNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent, [NativeName(NativeNameType.Param, "popup_hierarchy")] [NativeName(NativeNameType.Type, "bool")] byte popupHierarchy, [NativeName(NativeNameType.Param, "dock_hierarchy")] [NativeName(NativeNameType.Type, "bool")] byte dockHierarchy)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte, byte, byte>)vt[979])(window, potentialParent, popupHierarchy, dockHierarchy);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte, byte, byte>)vt[979])((nint)window, (nint)potentialParent, popupHierarchy, dockHierarchy);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowChildOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowChildOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent, [NativeName(NativeNameType.Param, "popup_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool popupHierarchy, [NativeName(NativeNameType.Param, "dock_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool dockHierarchy)
		{
			byte ret = IsWindowChildOfNative(window, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowChildOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowChildOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent, [NativeName(NativeNameType.Param, "popup_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool popupHierarchy, [NativeName(NativeNameType.Param, "dock_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, potentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowChildOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowChildOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialParent, [NativeName(NativeNameType.Param, "popup_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool popupHierarchy, [NativeName(NativeNameType.Param, "dock_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool dockHierarchy)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowChildOfNative(window, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowChildOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowChildOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialParent, [NativeName(NativeNameType.Param, "popup_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool popupHierarchy, [NativeName(NativeNameType.Param, "dock_hierarchy")] [NativeName(NativeNameType.Type, "bool")] bool dockHierarchy)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowChildOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent, popupHierarchy ? (byte)1 : (byte)0, dockHierarchy ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowWithinBeginStackOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowWithinBeginStackOfNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte>)vt[980])(window, potentialParent);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[980])((nint)window, (nint)potentialParent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowWithinBeginStackOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowWithinBeginStackOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent)
		{
			byte ret = IsWindowWithinBeginStackOfNative(window, potentialParent);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowWithinBeginStackOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowWithinBeginStackOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, potentialParent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowWithinBeginStackOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowWithinBeginStackOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* ppotentialParent = &potentialParent)
			{
				byte ret = IsWindowWithinBeginStackOfNative(window, (ImGuiWindow*)ppotentialParent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowWithinBeginStackOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowWithinBeginStackOf([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "potential_parent")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialParent)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* ppotentialParent = &potentialParent)
				{
					byte ret = IsWindowWithinBeginStackOfNative((ImGuiWindow*)pwindow, (ImGuiWindow*)ppotentialParent);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowAbove")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowAboveNative([NativeName(NativeNameType.Param, "potential_above")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialAbove, [NativeName(NativeNameType.Param, "potential_below")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialBelow)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, byte>)vt[981])(potentialAbove, potentialBelow);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[981])((nint)potentialAbove, (nint)potentialBelow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowAbove")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowAbove([NativeName(NativeNameType.Param, "potential_above")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialAbove, [NativeName(NativeNameType.Param, "potential_below")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialBelow)
		{
			byte ret = IsWindowAboveNative(potentialAbove, potentialBelow);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowAbove")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowAbove([NativeName(NativeNameType.Param, "potential_above")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialAbove, [NativeName(NativeNameType.Param, "potential_below")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, potentialBelow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowAbove")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowAbove([NativeName(NativeNameType.Param, "potential_above")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* potentialAbove, [NativeName(NativeNameType.Param, "potential_below")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
			{
				byte ret = IsWindowAboveNative(potentialAbove, (ImGuiWindow*)ppotentialBelow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowAbove")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowAbove([NativeName(NativeNameType.Param, "potential_above")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialAbove, [NativeName(NativeNameType.Param, "potential_below")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow potentialBelow)
		{
			fixed (ImGuiWindow* ppotentialAbove = &potentialAbove)
			{
				fixed (ImGuiWindow* ppotentialBelow = &potentialBelow)
				{
					byte ret = IsWindowAboveNative((ImGuiWindow*)ppotentialAbove, (ImGuiWindow*)ppotentialBelow);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowNavFocusable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowNavFocusableNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte>)vt[982])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[982])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowNavFocusable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowNavFocusable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			byte ret = IsWindowNavFocusableNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowNavFocusable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowNavFocusable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowNavFocusableNative((ImGuiWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowPos_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowPosWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, ImGuiCond, void>)vt[983])(window, pos, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiCond, void>)vt[983])((nint)window, pos, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowPos_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowPosWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			SetWindowPosWindowPtrNative(window, pos, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowPos_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowPosWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowPosWindowPtrNative((ImGuiWindow*)pwindow, pos, cond);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowSizeWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, ImGuiCond, void>)vt[984])(window, size, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiCond, void>)vt[984])((nint)window, size, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowSizeWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			SetWindowSizeWindowPtrNative(window, size, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowSize_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowSizeWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowSizeWindowPtrNative((ImGuiWindow*)pwindow, size, cond);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowCollapsed_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowCollapsedWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "collapsed")] [NativeName(NativeNameType.Type, "bool")] byte collapsed, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte, ImGuiCond, void>)vt[985])(window, collapsed, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, ImGuiCond, void>)vt[985])((nint)window, collapsed, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowCollapsed_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowCollapsedWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "collapsed")] [NativeName(NativeNameType.Type, "bool")] bool collapsed, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			SetWindowCollapsedWindowPtrNative(window, collapsed ? (byte)1 : (byte)0, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowCollapsed_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowCollapsedWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "collapsed")] [NativeName(NativeNameType.Type, "bool")] bool collapsed, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowCollapsedWindowPtrNative((ImGuiWindow*)pwindow, collapsed ? (byte)1 : (byte)0, cond);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHitTestHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowHitTestHoleNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, Vector2, Vector2, void>)vt[986])(window, pos, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[986])((nint)window, pos, size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHitTestHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowHitTestHole([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			SetWindowHitTestHoleNative(window, pos, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHitTestHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowHitTestHole([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHitTestHoleNative((ImGuiWindow*)pwindow, pos, size);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHiddenAndSkipItemsForCurrentFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowHiddenAndSkipItemsForCurrentFrameNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[987])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[987])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHiddenAndSkipItemsForCurrentFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowHiddenAndSkipItemsForCurrentFrame([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			SetWindowHiddenAndSkipItemsForCurrentFrameNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowHiddenAndSkipItemsForCurrentFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowHiddenAndSkipItemsForCurrentFrame([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowHiddenAndSkipItemsForCurrentFrameNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowParentWindowForFocusRoute")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowParentWindowForFocusRouteNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, void>)vt[988])(window, parentWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[988])((nint)window, (nint)parentWindow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowParentWindowForFocusRoute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowParentWindowForFocusRoute([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			SetWindowParentWindowForFocusRouteNative(window, parentWindow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowParentWindowForFocusRoute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowParentWindowForFocusRoute([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowParentWindowForFocusRouteNative((ImGuiWindow*)pwindow, parentWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowParentWindowForFocusRoute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowParentWindowForFocusRoute([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pparentWindow = &parentWindow)
			{
				SetWindowParentWindowForFocusRouteNative(window, (ImGuiWindow*)pparentWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowParentWindowForFocusRoute")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowParentWindowForFocusRoute([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "parent_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* pparentWindow = &parentWindow)
				{
					SetWindowParentWindowForFocusRouteNative((ImGuiWindow*)pwindow, (ImGuiWindow*)pparentWindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WindowRectAbsToRelNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, ImRect, void>)vt[989])(pOut, window, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)vt[989])((nint)pOut, (nint)window, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect WindowRectAbsToRel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			ImRect ret;
			WindowRectAbsToRelNative(&ret, window, r);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			WindowRectAbsToRelNative(pOut, window, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				WindowRectAbsToRelNative((ImRect*)ppOut, window, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect WindowRectAbsToRel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectAbsToRelNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectAbsToRelNative(pOut, (ImGuiWindow*)pwindow, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectAbsToRelNative((ImRect*)ppOut, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WindowRectRelToAbsNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, ImRect, void>)vt[990])(pOut, window, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)vt[990])((nint)pOut, (nint)window, r);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect WindowRectRelToAbs([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			ImRect ret;
			WindowRectRelToAbsNative(&ret, window, r);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			WindowRectRelToAbsNative(pOut, window, r);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				WindowRectRelToAbsNative((ImRect*)ppOut, window, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect WindowRectRelToAbs([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				WindowRectRelToAbsNative(&ret, (ImGuiWindow*)pwindow, r);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowRectRelToAbsNative(pOut, (ImGuiWindow*)pwindow, r);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowRectRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowRectRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect r)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowRectRelToAbsNative((ImRect*)ppOut, (ImGuiWindow*)pwindow, r);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WindowPosRelToAbsNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, Vector2, void>)vt[991])(pOut, window, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[991])((nint)pOut, (nint)window, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 WindowPosRelToAbs([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			Vector2 ret;
			WindowPosRelToAbsNative(&ret, window, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			WindowPosRelToAbsNative(pOut, window, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				WindowPosRelToAbsNative((Vector2*)ppOut, window, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 WindowPosRelToAbs([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				WindowPosRelToAbsNative(&ret, (ImGuiWindow*)pwindow, p);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosRelToAbsNative(pOut, (ImGuiWindow*)pwindow, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosRelToAbs")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosRelToAbs([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowPosRelToAbsNative((Vector2*)ppOut, (ImGuiWindow*)pwindow, p);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void WindowPosAbsToRelNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, Vector2, void>)vt[992])(pOut, window, p);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, Vector2, void>)vt[992])((nint)pOut, (nint)window, p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 WindowPosAbsToRel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			Vector2 ret;
			WindowPosAbsToRelNative(&ret, window, p);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			WindowPosAbsToRelNative(pOut, window, p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				WindowPosAbsToRelNative((Vector2*)ppOut, window, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 WindowPosAbsToRel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				WindowPosAbsToRelNative(&ret, (ImGuiWindow*)pwindow, p);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				WindowPosAbsToRelNative(pOut, (ImGuiWindow*)pwindow, p);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igWindowPosAbsToRel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WindowPosAbsToRel([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					WindowPosAbsToRelNative((Vector2*)ppOut, (ImGuiWindow*)pwindow, p);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FocusWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiFocusRequestFlags, void>)vt[993])(window, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiFocusRequestFlags, void>)vt[993])((nint)window, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			FocusWindowNative(window, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FocusWindowNative((ImGuiWindow*)pwindow, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FocusTopMostWindowUnderOneNative([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, ImGuiViewport*, ImGuiFocusRequestFlags, void>)vt[994])(underThisWindow, ignoreWindow, filterViewport, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, ImGuiFocusRequestFlags, void>)vt[994])((nint)underThisWindow, (nint)ignoreWindow, (nint)filterViewport, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, filterViewport, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, filterViewport, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, filterViewport, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiViewport* pfilterViewport = &filterViewport)
			{
				FocusTopMostWindowUnderOneNative(underThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, ignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
			{
				fixed (ImGuiViewport* pfilterViewport = &filterViewport)
				{
					FocusTopMostWindowUnderOneNative(underThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusTopMostWindowUnderOne")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusTopMostWindowUnderOne([NativeName(NativeNameType.Param, "under_this_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow underThisWindow, [NativeName(NativeNameType.Param, "ignore_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow ignoreWindow, [NativeName(NativeNameType.Param, "filter_viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport filterViewport, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiFocusRequestFlags")] ImGuiFocusRequestFlags flags)
		{
			fixed (ImGuiWindow* punderThisWindow = &underThisWindow)
			{
				fixed (ImGuiWindow* pignoreWindow = &ignoreWindow)
				{
					fixed (ImGuiViewport* pfilterViewport = &filterViewport)
					{
						FocusTopMostWindowUnderOneNative((ImGuiWindow*)punderThisWindow, (ImGuiWindow*)pignoreWindow, (ImGuiViewport*)pfilterViewport, flags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToFocusFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BringWindowToFocusFrontNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[995])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[995])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToFocusFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToFocusFront([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			BringWindowToFocusFrontNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToFocusFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToFocusFront([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToFocusFrontNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BringWindowToDisplayFrontNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[996])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[996])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayFront([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			BringWindowToDisplayFrontNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayFront")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayFront([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayFrontNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBack")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BringWindowToDisplayBackNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[997])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[997])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBack([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			BringWindowToDisplayBackNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBack")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBack([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayBackNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBehind")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BringWindowToDisplayBehindNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "above_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* aboveWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*, void>)vt[998])(window, aboveWindow);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[998])((nint)window, (nint)aboveWindow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBehind")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBehind([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "above_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* aboveWindow)
		{
			BringWindowToDisplayBehindNative(window, aboveWindow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBehind")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBehind([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "above_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* aboveWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BringWindowToDisplayBehindNative((ImGuiWindow*)pwindow, aboveWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBehind")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBehind([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "above_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow aboveWindow)
		{
			fixed (ImGuiWindow* paboveWindow = &aboveWindow)
			{
				BringWindowToDisplayBehindNative(window, (ImGuiWindow*)paboveWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBringWindowToDisplayBehind")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BringWindowToDisplayBehind([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "above_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow aboveWindow)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiWindow* paboveWindow = &aboveWindow)
				{
					BringWindowToDisplayBehindNative((ImGuiWindow*)pwindow, (ImGuiWindow*)paboveWindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int FindWindowDisplayIndexNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, int>)vt[999])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[999])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int FindWindowDisplayIndex([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			int ret = FindWindowDisplayIndexNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowDisplayIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int FindWindowDisplayIndex([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				int ret = FindWindowDisplayIndexNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBottomMostVisibleWindowWithinBeginStack")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStackNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*>)vt[1000])(window);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1000])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBottomMostVisibleWindowWithinBeginStack")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStack([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			ImGuiWindow* ret = FindBottomMostVisibleWindowWithinBeginStackNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBottomMostVisibleWindowWithinBeginStack")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindBottomMostVisibleWindowWithinBeginStack([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindow* ret = FindBottomMostVisibleWindowWithinBeginStackNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowRefreshPolicy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNextWindowRefreshPolicyNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowRefreshFlags")] ImGuiWindowRefreshFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowRefreshFlags, void>)vt[1001])(flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiWindowRefreshFlags, void>)vt[1001])(flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextWindowRefreshPolicy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextWindowRefreshPolicy([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiWindowRefreshFlags")] ImGuiWindowRefreshFlags flags)
		{
			SetNextWindowRefreshPolicyNative(flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetCurrentFontNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)vt[1002])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1002])((nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font)
		{
			SetCurrentFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				SetCurrentFontNative((ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetDefaultFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* GetDefaultFontNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFont*>)vt[1003])();
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint>)vt[1003])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetDefaultFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* GetDefaultFont()
		{
			ImFont* ret = GetDefaultFontNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetForegroundDrawList_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		internal static ImDrawList* GetForegroundDrawListWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImDrawList*>)vt[1004])(window);
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1004])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetForegroundDrawList_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public static ImDrawList* GetForegroundDrawListWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			ImDrawList* ret = GetForegroundDrawListWindowPtrNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetForegroundDrawList_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public static ImDrawList* GetForegroundDrawListWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImDrawList* ret = GetForegroundDrawListWindowPtrNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddDrawListToDrawDataExNative([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ImVectorImDrawListPtr* outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, ImVectorImDrawListPtr*, ImDrawList*, void>)vt[1005])(drawData, outList, drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[1005])((nint)drawData, (nint)outList, (nint)drawList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ImVectorImDrawListPtr* outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			AddDrawListToDrawDataExNative(drawData, outList, drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ImVectorImDrawListPtr* outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, outList, drawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ref ImVectorImDrawListPtr outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, drawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ref ImVectorImDrawListPtr outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImVectorImDrawListPtr* poutList = &outList)
				{
					AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, (ImVectorImDrawListPtr*)poutList, drawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ImVectorImDrawListPtr* outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				AddDrawListToDrawDataExNative(drawData, outList, (ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ImVectorImDrawListPtr* outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, outList, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ref ImVectorImDrawListPtr outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImVectorImDrawListPtr* poutList = &outList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListToDrawDataExNative(drawData, (ImVectorImDrawListPtr*)poutList, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddDrawListToDrawDataEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawListToDrawDataEx([NativeName(NativeNameType.Param, "draw_data")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData drawData, [NativeName(NativeNameType.Param, "out_list")] [NativeName(NativeNameType.Type, "ImVector_ImDrawListPtr*")] ref ImVectorImDrawListPtr outList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawData* pdrawData = &drawData)
			{
				fixed (ImVectorImDrawListPtr* poutList = &outList)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						AddDrawListToDrawDataExNative((ImDrawData*)pdrawData, (ImVectorImDrawListPtr*)poutList, (ImDrawList*)pdrawList);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInitialize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void InitializeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1006])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1006])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInitialize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Initialize()
		{
			InitializeNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1007])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1007])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Shutdown()
		{
			ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateInputEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateInputEventsNative([NativeName(NativeNameType.Param, "trickle_fast_inputs")] [NativeName(NativeNameType.Type, "bool")] byte trickleFastInputs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)vt[1008])(trickleFastInputs);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)vt[1008])(trickleFastInputs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateInputEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateInputEvents([NativeName(NativeNameType.Param, "trickle_fast_inputs")] [NativeName(NativeNameType.Type, "bool")] bool trickleFastInputs)
		{
			UpdateInputEventsNative(trickleFastInputs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateHoveredWindowAndCaptureFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateHoveredWindowAndCaptureFlagsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1009])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1009])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateHoveredWindowAndCaptureFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateHoveredWindowAndCaptureFlags()
		{
			UpdateHoveredWindowAndCaptureFlagsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredWindowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FindHoveredWindowExNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "find_first_and_in_any_viewport")] [NativeName(NativeNameType.Type, "bool")] byte findFirstAndInAnyViewport, [NativeName(NativeNameType.Param, "out_hovered_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindow, [NativeName(NativeNameType.Param, "out_hovered_window_under_moving_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindowUnderMovingWindow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, byte, ImGuiWindow**, ImGuiWindow**, void>)vt[1010])(pos, findFirstAndInAnyViewport, outHoveredWindow, outHoveredWindowUnderMovingWindow);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, byte, nint, nint, void>)vt[1010])(pos, findFirstAndInAnyViewport, (nint)outHoveredWindow, (nint)outHoveredWindowUnderMovingWindow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredWindowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindHoveredWindowEx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "find_first_and_in_any_viewport")] [NativeName(NativeNameType.Type, "bool")] bool findFirstAndInAnyViewport, [NativeName(NativeNameType.Param, "out_hovered_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindow, [NativeName(NativeNameType.Param, "out_hovered_window_under_moving_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindowUnderMovingWindow)
		{
			FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, outHoveredWindow, outHoveredWindowUnderMovingWindow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredWindowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindHoveredWindowEx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "find_first_and_in_any_viewport")] [NativeName(NativeNameType.Type, "bool")] bool findFirstAndInAnyViewport, [NativeName(NativeNameType.Param, "out_hovered_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* outHoveredWindow, [NativeName(NativeNameType.Param, "out_hovered_window_under_moving_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindow = &outHoveredWindow)
			{
				FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, (ImGuiWindow**)poutHoveredWindow, outHoveredWindowUnderMovingWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredWindowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindHoveredWindowEx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "find_first_and_in_any_viewport")] [NativeName(NativeNameType.Type, "bool")] bool findFirstAndInAnyViewport, [NativeName(NativeNameType.Param, "out_hovered_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** outHoveredWindow, [NativeName(NativeNameType.Param, "out_hovered_window_under_moving_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindowUnderMovingWindow = &outHoveredWindowUnderMovingWindow)
			{
				FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, outHoveredWindow, (ImGuiWindow**)poutHoveredWindowUnderMovingWindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredWindowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindHoveredWindowEx([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "find_first_and_in_any_viewport")] [NativeName(NativeNameType.Type, "bool")] bool findFirstAndInAnyViewport, [NativeName(NativeNameType.Param, "out_hovered_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* outHoveredWindow, [NativeName(NativeNameType.Param, "out_hovered_window_under_moving_window")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* outHoveredWindowUnderMovingWindow)
		{
			fixed (ImGuiWindow** poutHoveredWindow = &outHoveredWindow)
			{
				fixed (ImGuiWindow** poutHoveredWindowUnderMovingWindow = &outHoveredWindowUnderMovingWindow)
				{
					FindHoveredWindowExNative(pos, findFirstAndInAnyViewport ? (byte)1 : (byte)0, (ImGuiWindow**)poutHoveredWindow, (ImGuiWindow**)poutHoveredWindowUnderMovingWindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StartMouseMovingWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1011])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1011])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			StartMouseMovingWindowNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				StartMouseMovingWindowNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindowOrNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void StartMouseMovingWindowOrNodeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "undock")] [NativeName(NativeNameType.Type, "bool")] byte undock)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiDockNode*, byte, void>)vt[1012])(window, node, undock);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, void>)vt[1012])((nint)window, (nint)node, undock);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindowOrNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindowOrNode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "undock")] [NativeName(NativeNameType.Type, "bool")] bool undock)
		{
			StartMouseMovingWindowOrNodeNative(window, node, undock ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindowOrNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindowOrNode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "undock")] [NativeName(NativeNameType.Type, "bool")] bool undock)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				StartMouseMovingWindowOrNodeNative((ImGuiWindow*)pwindow, node, undock ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindowOrNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindowOrNode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "undock")] [NativeName(NativeNameType.Type, "bool")] bool undock)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				StartMouseMovingWindowOrNodeNative(window, (ImGuiDockNode*)pnode, undock ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igStartMouseMovingWindowOrNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StartMouseMovingWindowOrNode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "undock")] [NativeName(NativeNameType.Type, "bool")] bool undock)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					StartMouseMovingWindowOrNodeNative((ImGuiWindow*)pwindow, (ImGuiDockNode*)pnode, undock ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateMouseMovingWindowNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateMouseMovingWindowNewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1013])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1013])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateMouseMovingWindowNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateMouseMovingWindowNewFrame()
		{
			UpdateMouseMovingWindowNewFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateMouseMovingWindowEndFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdateMouseMovingWindowEndFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1014])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1014])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdateMouseMovingWindowEndFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateMouseMovingWindowEndFrame()
		{
			UpdateMouseMovingWindowEndFrameNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddContextHook")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint AddContextHookNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "hook")] [NativeName(NativeNameType.Type, "const ImGuiContextHook*")] ImGuiContextHook* hook)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiContextHook*, uint>)vt[1015])(context, hook);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)vt[1015])((nint)context, (nint)hook);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddContextHook")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint AddContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "hook")] [NativeName(NativeNameType.Type, "const ImGuiContextHook*")] ImGuiContextHook* hook)
		{
			uint ret = AddContextHookNative(context, hook);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddContextHook")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint AddContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext context, [NativeName(NativeNameType.Param, "hook")] [NativeName(NativeNameType.Type, "const ImGuiContextHook*")] ImGuiContextHook* hook)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				uint ret = AddContextHookNative((ImGuiContext*)pcontext, hook);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddContextHook")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint AddContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "hook")] [NativeName(NativeNameType.Type, "const ImGuiContextHook*")] ref ImGuiContextHook hook)
		{
			fixed (ImGuiContextHook* phook = &hook)
			{
				uint ret = AddContextHookNative(context, (ImGuiContextHook*)phook);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddContextHook")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint AddContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext context, [NativeName(NativeNameType.Param, "hook")] [NativeName(NativeNameType.Type, "const ImGuiContextHook*")] ref ImGuiContextHook hook)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				fixed (ImGuiContextHook* phook = &hook)
				{
					uint ret = AddContextHookNative((ImGuiContext*)pcontext, (ImGuiContextHook*)phook);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveContextHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RemoveContextHookNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "hook_to_remove")] [NativeName(NativeNameType.Type, "ImGuiID")] uint hookToRemove)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, uint, void>)vt[1016])(context, hookToRemove);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[1016])((nint)context, hookToRemove);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveContextHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "hook_to_remove")] [NativeName(NativeNameType.Type, "ImGuiID")] uint hookToRemove)
		{
			RemoveContextHookNative(context, hookToRemove);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveContextHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveContextHook([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext context, [NativeName(NativeNameType.Param, "hook_to_remove")] [NativeName(NativeNameType.Type, "ImGuiID")] uint hookToRemove)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				RemoveContextHookNative((ImGuiContext*)pcontext, hookToRemove);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCallContextHooks")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CallContextHooksNative([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "ImGuiContextHookType")] ImGuiContextHookType type)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiContextHookType, void>)vt[1017])(context, type);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiContextHookType, void>)vt[1017])((nint)context, type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCallContextHooks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CallContextHooks([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* context, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "ImGuiContextHookType")] ImGuiContextHookType type)
		{
			CallContextHooksNative(context, type);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCallContextHooks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CallContextHooks([NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext context, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "ImGuiContextHookType")] ImGuiContextHookType type)
		{
			fixed (ImGuiContext* pcontext = &context)
			{
				CallContextHooksNative((ImGuiContext*)pcontext, type);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTranslateWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TranslateWindowsInViewportNative([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "old_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 oldPos, [NativeName(NativeNameType.Param, "new_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 newPos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, Vector2, Vector2, void>)vt[1018])(viewport, oldPos, newPos);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, void>)vt[1018])((nint)viewport, oldPos, newPos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTranslateWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TranslateWindowsInViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "old_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 oldPos, [NativeName(NativeNameType.Param, "new_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 newPos)
		{
			TranslateWindowsInViewportNative(viewport, oldPos, newPos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTranslateWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TranslateWindowsInViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "old_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 oldPos, [NativeName(NativeNameType.Param, "new_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 newPos)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				TranslateWindowsInViewportNative((ImGuiViewportP*)pviewport, oldPos, newPos);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScaleWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScaleWindowsInViewportNative([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, float, void>)vt[1019])(viewport, scale);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1019])((nint)viewport, scale);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScaleWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleWindowsInViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			ScaleWindowsInViewportNative(viewport, scale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScaleWindowsInViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleWindowsInViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				ScaleWindowsInViewportNative((ImGuiViewportP*)pviewport, scale);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDestroyPlatformWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyPlatformWindowNative([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[1020])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1020])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDestroyPlatformWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyPlatformWindow([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			DestroyPlatformWindowNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDestroyPlatformWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyPlatformWindow([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DestroyPlatformWindowNative((ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowViewportNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, void>)vt[1021])(window, viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1021])((nint)window, (nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			SetWindowViewportNative(window, viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowViewportNative((ImGuiWindow*)pwindow, viewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetWindowViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					SetWindowViewportNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetCurrentViewportNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, void>)vt[1022])(window, viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1022])((nint)window, (nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			SetCurrentViewportNative(window, viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetCurrentViewportNative((ImGuiWindow*)pwindow, viewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				SetCurrentViewportNative(window, (ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetCurrentViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentViewport([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					SetCurrentViewportNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetViewportPlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "const ImGuiPlatformMonitor*")]
		internal static ImGuiPlatformMonitor* GetViewportPlatformMonitorNative([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiViewport*, ImGuiPlatformMonitor*>)vt[1023])(viewport);
			#else
			return (ImGuiPlatformMonitor*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1023])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetViewportPlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "const ImGuiPlatformMonitor*")]
		public static ImGuiPlatformMonitor* GetViewportPlatformMonitor([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport)
		{
			ImGuiPlatformMonitor* ret = GetViewportPlatformMonitorNative(viewport);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetViewportPlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "const ImGuiPlatformMonitor*")]
		public static ImGuiPlatformMonitor* GetViewportPlatformMonitor([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport viewport)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				ImGuiPlatformMonitor* ret = GetViewportPlatformMonitorNative((ImGuiViewport*)pviewport);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredViewportFromPlatformWindowStack")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		internal static ImGuiViewportP* FindHoveredViewportFromPlatformWindowStackNative([NativeName(NativeNameType.Param, "mouse_platform_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mousePlatformPos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, ImGuiViewportP*>)vt[1024])(mousePlatformPos);
			#else
			return (ImGuiViewportP*)((delegate* unmanaged[Cdecl]<Vector2, nint>)vt[1024])(mousePlatformPos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindHoveredViewportFromPlatformWindowStack")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewportP*")]
		public static ImGuiViewportP* FindHoveredViewportFromPlatformWindowStack([NativeName(NativeNameType.Param, "mouse_platform_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 mousePlatformPos)
		{
			ImGuiViewportP* ret = FindHoveredViewportFromPlatformWindowStackNative(mousePlatformPos);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkIniSettingsDirty_Nil")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MarkIniSettingsDirtyNilNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1025])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1025])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkIniSettingsDirty_Nil")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MarkIniSettingsDirtyNil()
		{
			MarkIniSettingsDirtyNilNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkIniSettingsDirty_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MarkIniSettingsDirtyWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1026])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1026])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkIniSettingsDirty_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MarkIniSettingsDirtyWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			MarkIniSettingsDirtyWindowPtrNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkIniSettingsDirty_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MarkIniSettingsDirtyWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				MarkIniSettingsDirtyWindowPtrNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearIniSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearIniSettingsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1027])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1027])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearIniSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearIniSettings()
		{
			ClearIniSettingsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddSettingsHandlerNative([NativeName(NativeNameType.Param, "handler")] [NativeName(NativeNameType.Type, "const ImGuiSettingsHandler*")] ImGuiSettingsHandler* handler)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSettingsHandler*, void>)vt[1028])(handler);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1028])((nint)handler);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddSettingsHandler([NativeName(NativeNameType.Param, "handler")] [NativeName(NativeNameType.Type, "const ImGuiSettingsHandler*")] ImGuiSettingsHandler* handler)
		{
			AddSettingsHandlerNative(handler);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igAddSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddSettingsHandler([NativeName(NativeNameType.Param, "handler")] [NativeName(NativeNameType.Type, "const ImGuiSettingsHandler*")] ref ImGuiSettingsHandler handler)
		{
			fixed (ImGuiSettingsHandler* phandler = &handler)
			{
				AddSettingsHandlerNative((ImGuiSettingsHandler*)phandler);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RemoveSettingsHandlerNative([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] byte* typeName)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1029])(typeName);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1029])((nint)typeName);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] byte* typeName)
		{
			RemoveSettingsHandlerNative(typeName);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte typeName)
		{
			fixed (byte* ptypeName = &typeName)
			{
				RemoveSettingsHandlerNative((byte*)ptypeName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> typeName)
		{
			fixed (byte* ptypeName = typeName)
			{
				RemoveSettingsHandlerNative((byte*)ptypeName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRemoveSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RemoveSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] string typeName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (typeName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(typeName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(typeName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RemoveSettingsHandlerNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		internal static ImGuiSettingsHandler* FindSettingsHandlerNative([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] byte* typeName)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiSettingsHandler*>)vt[1030])(typeName);
			#else
			return (ImGuiSettingsHandler*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1030])((nint)typeName);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public static ImGuiSettingsHandler* FindSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] byte* typeName)
		{
			ImGuiSettingsHandler* ret = FindSettingsHandlerNative(typeName);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public static ImGuiSettingsHandler* FindSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte typeName)
		{
			fixed (byte* ptypeName = &typeName)
			{
				ImGuiSettingsHandler* ret = FindSettingsHandlerNative((byte*)ptypeName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public static ImGuiSettingsHandler* FindSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> typeName)
		{
			fixed (byte* ptypeName = typeName)
			{
				ImGuiSettingsHandler* ret = FindSettingsHandlerNative((byte*)ptypeName);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindSettingsHandler")]
		[return: NativeName(NativeNameType.Type, "ImGuiSettingsHandler*")]
		public static ImGuiSettingsHandler* FindSettingsHandler([NativeName(NativeNameType.Param, "type_name")] [NativeName(NativeNameType.Type, "const char*")] string typeName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (typeName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(typeName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(typeName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiSettingsHandler* ret = FindSettingsHandlerNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCreateNewWindowSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		internal static ImGuiWindowSettings* CreateNewWindowSettingsNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiWindowSettings*>)vt[1031])(name);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1031])((nint)name);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCreateNewWindowSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* CreateNewWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			ImGuiWindowSettings* ret = CreateNewWindowSettingsNative(name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCreateNewWindowSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* CreateNewWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ImGuiWindowSettings* ret = CreateNewWindowSettingsNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCreateNewWindowSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* CreateNewWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ImGuiWindowSettings* ret = CreateNewWindowSettingsNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCreateNewWindowSettings")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* CreateNewWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiWindowSettings* ret = CreateNewWindowSettingsNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowSettingsByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		internal static ImGuiWindowSettings* FindWindowSettingsByIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiWindowSettings*>)vt[1032])(id);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1032])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowSettingsByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* FindWindowSettingsByID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiWindowSettings* ret = FindWindowSettingsByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowSettingsByWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		internal static ImGuiWindowSettings* FindWindowSettingsByWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindowSettings*>)vt[1033])(window);
			#else
			return (ImGuiWindowSettings*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1033])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowSettingsByWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* FindWindowSettingsByWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			ImGuiWindowSettings* ret = FindWindowSettingsByWindowNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindWindowSettingsByWindow")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowSettings*")]
		public static ImGuiWindowSettings* FindWindowSettingsByWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindowSettings* ret = FindWindowSettingsByWindowNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearWindowSettingsNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1034])(name);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1034])((nint)name);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name)
		{
			ClearWindowSettingsNative(name);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				ClearWindowSettingsNative((byte*)pname);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				ClearWindowSettingsNative((byte*)pname);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearWindowSettings([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ClearWindowSettingsNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeRegisterEntries")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LocalizeRegisterEntriesNative([NativeName(NativeNameType.Param, "entries")] [NativeName(NativeNameType.Type, "const ImGuiLocEntry*")] ImGuiLocEntry* entries, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiLocEntry*, int, void>)vt[1035])(entries, count);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1035])((nint)entries, count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeRegisterEntries")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LocalizeRegisterEntries([NativeName(NativeNameType.Param, "entries")] [NativeName(NativeNameType.Type, "const ImGuiLocEntry*")] ImGuiLocEntry* entries, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			LocalizeRegisterEntriesNative(entries, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeRegisterEntries")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LocalizeRegisterEntries([NativeName(NativeNameType.Param, "entries")] [NativeName(NativeNameType.Type, "const ImGuiLocEntry*")] ref ImGuiLocEntry entries, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImGuiLocEntry* pentries = &entries)
			{
				LocalizeRegisterEntriesNative((ImGuiLocEntry*)pentries, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeGetMsg")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* LocalizeGetMsgNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiLocKey")] ImGuiLocKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiLocKey, byte*>)vt[1036])(key);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ImGuiLocKey, nint>)vt[1036])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeGetMsg")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* LocalizeGetMsg([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiLocKey")] ImGuiLocKey key)
		{
			byte* ret = LocalizeGetMsgNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLocalizeGetMsg")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string LocalizeGetMsgS([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiLocKey")] ImGuiLocKey key)
		{
			string ret = Utils.DecodeStringUTF8(LocalizeGetMsgNative(key));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetScrollXWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "scroll_x")] [NativeName(NativeNameType.Type, "float")] float scrollX)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, void>)vt[1037])(window, scrollX);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1037])((nint)window, scrollX);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollXWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "scroll_x")] [NativeName(NativeNameType.Type, "float")] float scrollX)
		{
			SetScrollXWindowPtrNative(window, scrollX);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollXWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "scroll_x")] [NativeName(NativeNameType.Type, "float")] float scrollX)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollXWindowPtrNative((ImGuiWindow*)pwindow, scrollX);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetScrollYWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "scroll_y")] [NativeName(NativeNameType.Type, "float")] float scrollY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, void>)vt[1038])(window, scrollY);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1038])((nint)window, scrollY);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollYWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "scroll_y")] [NativeName(NativeNameType.Type, "float")] float scrollY)
		{
			SetScrollYWindowPtrNative(window, scrollY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollYWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "scroll_y")] [NativeName(NativeNameType.Type, "float")] float scrollY)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollYWindowPtrNative((ImGuiWindow*)pwindow, scrollY);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetScrollFromPosXWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "local_x")] [NativeName(NativeNameType.Type, "float")] float localX, [NativeName(NativeNameType.Param, "center_x_ratio")] [NativeName(NativeNameType.Type, "float")] float centerXRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, float, void>)vt[1039])(window, localX, centerXRatio);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[1039])((nint)window, localX, centerXRatio);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollFromPosXWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "local_x")] [NativeName(NativeNameType.Type, "float")] float localX, [NativeName(NativeNameType.Param, "center_x_ratio")] [NativeName(NativeNameType.Type, "float")] float centerXRatio)
		{
			SetScrollFromPosXWindowPtrNative(window, localX, centerXRatio);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosX_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollFromPosXWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "local_x")] [NativeName(NativeNameType.Type, "float")] float localX, [NativeName(NativeNameType.Param, "center_x_ratio")] [NativeName(NativeNameType.Type, "float")] float centerXRatio)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollFromPosXWindowPtrNative((ImGuiWindow*)pwindow, localX, centerXRatio);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetScrollFromPosYWindowPtrNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "local_y")] [NativeName(NativeNameType.Type, "float")] float localY, [NativeName(NativeNameType.Param, "center_y_ratio")] [NativeName(NativeNameType.Type, "float")] float centerYRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, float, float, void>)vt[1040])(window, localY, centerYRatio);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[1040])((nint)window, localY, centerYRatio);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollFromPosYWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "local_y")] [NativeName(NativeNameType.Type, "float")] float localY, [NativeName(NativeNameType.Param, "center_y_ratio")] [NativeName(NativeNameType.Type, "float")] float centerYRatio)
		{
			SetScrollFromPosYWindowPtrNative(window, localY, centerYRatio);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetScrollFromPosY_WindowPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetScrollFromPosYWindowPtr([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "local_y")] [NativeName(NativeNameType.Type, "float")] float localY, [NativeName(NativeNameType.Param, "center_y_ratio")] [NativeName(NativeNameType.Type, "float")] float centerYRatio)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetScrollFromPosYWindowPtrNative((ImGuiWindow*)pwindow, localY, centerYRatio);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScrollToItemNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiScrollFlags, void>)vt[1041])(flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiScrollFlags, void>)vt[1041])(flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToItem([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			ScrollToItemNative(flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScrollToRectNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, ImGuiScrollFlags, void>)vt[1042])(window, rect, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, ImGuiScrollFlags, void>)vt[1042])((nint)window, rect, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			ScrollToRectNative(window, rect, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToRectNative((ImGuiWindow*)pwindow, rect, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScrollToRectExNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, ImRect, ImGuiScrollFlags, void>)vt[1043])(pOut, window, rect, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, ImGuiScrollFlags, void>)vt[1043])((nint)pOut, (nint)window, rect, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ScrollToRectEx([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			Vector2 ret;
			ScrollToRectExNative(&ret, window, rect, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRectEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			ScrollToRectExNative(pOut, window, rect, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRectEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				ScrollToRectExNative((Vector2*)ppOut, window, rect, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 ScrollToRectEx([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				ScrollToRectExNative(&ret, (ImGuiWindow*)pwindow, rect, flags);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRectEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToRectExNative(pOut, (ImGuiWindow*)pwindow, rect, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToRectEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToRectEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags flags)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					ScrollToRectExNative((Vector2*)ppOut, (ImGuiWindow*)pwindow, rect, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToBringRectIntoView")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScrollToBringRectIntoViewNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, void>)vt[1044])(window, rect);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[1044])((nint)window, rect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToBringRectIntoView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToBringRectIntoView([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect)
		{
			ScrollToBringRectIntoViewNative(window, rect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollToBringRectIntoView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScrollToBringRectIntoView([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ScrollToBringRectIntoViewNative((ImGuiWindow*)pwindow, rect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetItemStatusFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		internal static ImGuiItemStatusFlags GetItemStatusFlagsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiItemStatusFlags>)vt[1045])();
			#else
			return (ImGuiItemStatusFlags)((delegate* unmanaged[Cdecl]<ImGuiItemStatusFlags>)vt[1045])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetItemStatusFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")]
		public static ImGuiItemStatusFlags GetItemStatusFlags()
		{
			ImGuiItemStatusFlags ret = GetItemStatusFlagsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetItemFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		internal static ImGuiItemFlags GetItemFlagsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiItemFlags>)vt[1046])();
			#else
			return (ImGuiItemFlags)((delegate* unmanaged[Cdecl]<ImGuiItemFlags>)vt[1046])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetItemFlags")]
		[return: NativeName(NativeNameType.Type, "ImGuiItemFlags")]
		public static ImGuiItemFlags GetItemFlags()
		{
			ImGuiItemFlags ret = GetItemFlagsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetActiveID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetActiveIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[1047])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[1047])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetActiveID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetActiveID()
		{
			uint ret = GetActiveIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFocusID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetFocusIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[1048])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[1048])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFocusID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetFocusID()
		{
			uint ret = GetFocusIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetActiveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetActiveIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiWindow*, void>)vt[1049])(id, window);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)vt[1049])(id, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetActiveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetActiveID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			SetActiveIDNative(id, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetActiveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetActiveID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetActiveIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetFocusID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetFocusIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiWindow*, void>)vt[1050])(id, window);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)vt[1050])(id, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetFocusID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFocusID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			SetFocusIDNative(id, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetFocusID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFocusID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetFocusIDNative(id, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearActiveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearActiveIDNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1051])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1051])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearActiveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearActiveID()
		{
			ClearActiveIDNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetHoveredID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetHoveredIDNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[1052])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[1052])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetHoveredID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetHoveredID()
		{
			uint ret = GetHoveredIDNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetHoveredID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetHoveredIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1053])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1053])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetHoveredID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHoveredID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			SetHoveredIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igKeepAliveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void KeepAliveIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1054])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1054])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igKeepAliveID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void KeepAliveID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			KeepAliveIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkItemEdited")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MarkItemEditedNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1055])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1055])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMarkItemEdited")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MarkItemEdited([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			MarkItemEditedNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushOverrideID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushOverrideIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1056])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1056])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushOverrideID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushOverrideID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			PushOverrideIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDWithSeedNative([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, uint, uint>)vt[1057])(strIdBegin, strIdEnd, seed);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint, uint>)vt[1057])((nint)strIdBegin, (nint)strIdEnd, seed);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			uint ret = GetIDWithSeedNative(strIdBegin, strIdEnd, seed);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				uint ret = GetIDWithSeedNative((byte*)pstrIdBegin, strIdEnd, seed);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				uint ret = GetIDWithSeedNative((byte*)pstrIdBegin, strIdEnd, seed);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDWithSeedNative(pStr0, strIdEnd, seed);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				uint ret = GetIDWithSeedNative(strIdBegin, (byte*)pstrIdEnd, seed);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdEnd = strIdEnd)
			{
				uint ret = GetIDWithSeedNative(strIdBegin, (byte*)pstrIdEnd, seed);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDWithSeedNative(strIdBegin, pStr0, seed);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					uint ret = GetIDWithSeedNative((byte*)pstrIdBegin, (byte*)pstrIdEnd, seed);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				fixed (byte* pstrIdEnd = strIdEnd)
				{
					uint ret = GetIDWithSeedNative((byte*)pstrIdBegin, (byte*)pstrIdEnd, seed);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeed([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetIDWithSeedNative(pStr0, pStr1, seed);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDWithSeedIntNative([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint, uint>)vt[1058])(n, seed);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, uint, uint>)vt[1058])(n, seed);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetIDWithSeed_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetIDWithSeedInt([NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "ImGuiID")] uint seed)
		{
			uint ret = GetIDWithSeedIntNative(n, seed);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemSize_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ItemSizeVec2Native([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "text_baseline_y")] [NativeName(NativeNameType.Type, "float")] float textBaselineY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, float, void>)vt[1059])(size, textBaselineY);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, float, void>)vt[1059])(size, textBaselineY);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemSize_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ItemSizeVec2([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "text_baseline_y")] [NativeName(NativeNameType.Type, "float")] float textBaselineY)
		{
			ItemSizeVec2Native(size, textBaselineY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemSize_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ItemSizeRectNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "text_baseline_y")] [NativeName(NativeNameType.Type, "float")] float textBaselineY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect, float, void>)vt[1060])(bb, textBaselineY);
			#else
			((delegate* unmanaged[Cdecl]<ImRect, float, void>)vt[1060])(bb, textBaselineY);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemSize_Rect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ItemSizeRect([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "text_baseline_y")] [NativeName(NativeNameType.Type, "float")] float textBaselineY)
		{
			ItemSizeRectNative(bb, textBaselineY);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemAdd")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ItemAddNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "nav_bb")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* navBb, [NativeName(NativeNameType.Param, "extra_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags extraFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, ImRect*, ImGuiItemFlags, byte>)vt[1061])(bb, id, navBb, extraFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, nint, ImGuiItemFlags, byte>)vt[1061])(bb, id, (nint)navBb, extraFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemAdd")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ItemAdd([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "nav_bb")] [NativeName(NativeNameType.Type, "const ImRect*")] ImRect* navBb, [NativeName(NativeNameType.Param, "extra_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags extraFlags)
		{
			byte ret = ItemAddNative(bb, id, navBb, extraFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemAdd")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ItemAdd([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "nav_bb")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect navBb, [NativeName(NativeNameType.Param, "extra_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags extraFlags)
		{
			fixed (ImRect* pnavBb = &navBb)
			{
				byte ret = ItemAddNative(bb, id, (ImRect*)pnavBb, extraFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemHoverable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ItemHoverableNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "item_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags itemFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiItemFlags, byte>)vt[1062])(bb, id, itemFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiItemFlags, byte>)vt[1062])(bb, id, itemFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igItemHoverable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ItemHoverable([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "item_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags itemFlags)
		{
			byte ret = ItemHoverableNative(bb, id, itemFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowContentHoverable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsWindowContentHoverableNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiHoveredFlags")] ImGuiHoveredFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiHoveredFlags, byte>)vt[1063])(window, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiHoveredFlags, byte>)vt[1063])((nint)window, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowContentHoverable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowContentHoverable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiHoveredFlags")] ImGuiHoveredFlags flags)
		{
			byte ret = IsWindowContentHoverableNative(window, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsWindowContentHoverable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsWindowContentHoverable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiHoveredFlags")] ImGuiHoveredFlags flags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = IsWindowContentHoverableNative((ImGuiWindow*)pwindow, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsClippedEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsClippedExNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, byte>)vt[1064])(bb, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, byte>)vt[1064])(bb, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsClippedEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsClippedEx([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			byte ret = IsClippedExNative(bb, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetLastItemData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetLastItemDataNative([NativeName(NativeNameType.Param, "item_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint itemId, [NativeName(NativeNameType.Param, "in_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags inFlags, [NativeName(NativeNameType.Param, "status_flags")] [NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")] ImGuiItemStatusFlags statusFlags, [NativeName(NativeNameType.Param, "item_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect itemRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiItemFlags, ImGuiItemStatusFlags, ImRect, void>)vt[1065])(itemId, inFlags, statusFlags, itemRect);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiItemFlags, ImGuiItemStatusFlags, ImRect, void>)vt[1065])(itemId, inFlags, statusFlags, itemRect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetLastItemData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetLastItemData([NativeName(NativeNameType.Param, "item_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint itemId, [NativeName(NativeNameType.Param, "in_flags")] [NativeName(NativeNameType.Type, "ImGuiItemFlags")] ImGuiItemFlags inFlags, [NativeName(NativeNameType.Param, "status_flags")] [NativeName(NativeNameType.Type, "ImGuiItemStatusFlags")] ImGuiItemStatusFlags statusFlags, [NativeName(NativeNameType.Param, "item_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect itemRect)
		{
			SetLastItemDataNative(itemId, inFlags, statusFlags, itemRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcItemSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CalcItemSizeNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "default_w")] [NativeName(NativeNameType.Type, "float")] float defaultW, [NativeName(NativeNameType.Param, "default_h")] [NativeName(NativeNameType.Type, "float")] float defaultH)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, float, float, void>)vt[1066])(pOut, size, defaultW, defaultH);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, float, void>)vt[1066])((nint)pOut, size, defaultW, defaultH);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcItemSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 CalcItemSize([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "default_w")] [NativeName(NativeNameType.Type, "float")] float defaultW, [NativeName(NativeNameType.Param, "default_h")] [NativeName(NativeNameType.Type, "float")] float defaultH)
		{
			Vector2 ret;
			CalcItemSizeNative(&ret, size, defaultW, defaultH);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcItemSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcItemSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "default_w")] [NativeName(NativeNameType.Type, "float")] float defaultW, [NativeName(NativeNameType.Param, "default_h")] [NativeName(NativeNameType.Type, "float")] float defaultH)
		{
			CalcItemSizeNative(pOut, size, defaultW, defaultH);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcItemSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcItemSize([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "default_w")] [NativeName(NativeNameType.Type, "float")] float defaultW, [NativeName(NativeNameType.Param, "default_h")] [NativeName(NativeNameType.Type, "float")] float defaultH)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				CalcItemSizeNative((Vector2*)ppOut, size, defaultW, defaultH);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWrapWidthForPos")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float CalcWrapWidthForPosNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "wrap_pos_x")] [NativeName(NativeNameType.Type, "float")] float wrapPosX)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[1067])(pos, wrapPosX);
			#else
			return (float)((delegate* unmanaged[Cdecl]<Vector2, float, float>)vt[1067])(pos, wrapPosX);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcWrapWidthForPos")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float CalcWrapWidthForPos([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "wrap_pos_x")] [NativeName(NativeNameType.Type, "float")] float wrapPosX)
		{
			float ret = CalcWrapWidthForPosNative(pos, wrapPosX);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushMultiItemsWidths")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushMultiItemsWidthsNative([NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "width_full")] [NativeName(NativeNameType.Type, "float")] float widthFull)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1068])(components, widthFull);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1068])(components, widthFull);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushMultiItemsWidths")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushMultiItemsWidths([NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "width_full")] [NativeName(NativeNameType.Type, "float")] float widthFull)
		{
			PushMultiItemsWidthsNative(components, widthFull);
		}
	}
}
