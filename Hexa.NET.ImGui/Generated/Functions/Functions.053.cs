// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimUnreserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimUnreserve([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			PrimUnreserveNative(self, idxCount, vtxCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimUnreserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimUnreserve([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "idx_count")] [NativeName(NativeNameType.Type, "int")] int idxCount, [NativeName(NativeNameType.Param, "vtx_count")] [NativeName(NativeNameType.Type, "int")] int vtxCount)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimUnreserveNative((ImDrawList*)pself, idxCount, vtxCount);
			}
		}

		/// <summary>
		/// Axis aligned rectangle (composed of two triangles)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, void>)vt[583])(self, a, b, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, void>)vt[583])((nint)self, a, b, col);
			#endif
		}

		/// <summary>
		/// Axis aligned rectangle (composed of two triangles)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			PrimRectNative(self, a, b, col);
		}

		/// <summary>
		/// Axis aligned rectangle (composed of two triangles)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimRectNative((ImDrawList*)pself, a, b, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimRectUVNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[584])(self, a, b, uvA, uvB, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[584])((nint)self, a, b, uvA, uvB, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimRectUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			PrimRectUVNative(self, a, b, uvA, uvB, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimRectUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimRectUVNative((ImDrawList*)pself, a, b, uvA, uvB, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimQuadUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimQuadUVNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "uv_c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvC, [NativeName(NativeNameType.Param, "uv_d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvD, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[585])(self, a, b, c, d, uvA, uvB, uvC, uvD, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[585])((nint)self, a, b, c, d, uvA, uvB, uvC, uvD, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimQuadUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimQuadUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "uv_c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvC, [NativeName(NativeNameType.Param, "uv_d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvD, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			PrimQuadUVNative(self, a, b, c, d, uvA, uvB, uvC, uvD, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimQuadUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimQuadUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 c, [NativeName(NativeNameType.Param, "d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 d, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "uv_c")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvC, [NativeName(NativeNameType.Param, "uv_d")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvD, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimQuadUVNative((ImDrawList*)pself, a, b, c, d, uvA, uvB, uvC, uvD, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimWriteVtxNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, void>)vt[586])(self, pos, uv, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, void>)vt[586])((nint)self, pos, uv, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimWriteVtx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			PrimWriteVtxNative(self, pos, uv, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimWriteVtx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimWriteVtxNative((ImDrawList*)pself, pos, uv, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteIdx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimWriteIdxNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImDrawIdx")] ushort idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ushort, void>)vt[587])(self, idx);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, void>)vt[587])((nint)self, idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteIdx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimWriteIdx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImDrawIdx")] ushort idx)
		{
			PrimWriteIdxNative(self, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimWriteIdx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimWriteIdx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImDrawIdx")] ushort idx)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimWriteIdxNative((ImDrawList*)pself, idx);
			}
		}

		/// <summary>
		/// Write vertex with unique index<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PrimVtxNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, void>)vt[588])(self, pos, uv, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, void>)vt[588])((nint)self, pos, uv, col);
			#endif
		}

		/// <summary>
		/// Write vertex with unique index<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimVtx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			PrimVtxNative(self, pos, uv, col);
		}

		/// <summary>
		/// Write vertex with unique index<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PrimVtx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrimVtx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "uv")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				PrimVtxNative((ImDrawList*)pself, pos, uv, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ResetForNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _ResetForNewFrameNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[589])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[589])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ResetForNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _ResetForNewFrame([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_ResetForNewFrameNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ResetForNewFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _ResetForNewFrame([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_ResetForNewFrameNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _ClearFreeMemoryNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[590])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[590])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _ClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_ClearFreeMemoryNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _ClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_ClearFreeMemoryNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PopUnusedDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _PopUnusedDrawCmdNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[591])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[591])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PopUnusedDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PopUnusedDrawCmd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_PopUnusedDrawCmdNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PopUnusedDrawCmd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PopUnusedDrawCmd([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_PopUnusedDrawCmdNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__TryMergeDrawCmds")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _TryMergeDrawCmdsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[592])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[592])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__TryMergeDrawCmds")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _TryMergeDrawCmds([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_TryMergeDrawCmdsNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__TryMergeDrawCmds")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _TryMergeDrawCmds([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_TryMergeDrawCmdsNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _OnChangedClipRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[593])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[593])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_OnChangedClipRectNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_OnChangedClipRectNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _OnChangedTextureIDNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[594])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[594])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_OnChangedTextureIDNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_OnChangedTextureIDNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedVtxOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _OnChangedVtxOffsetNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[595])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[595])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedVtxOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedVtxOffset([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			_OnChangedVtxOffsetNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__OnChangedVtxOffset")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _OnChangedVtxOffset([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				_OnChangedVtxOffsetNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__CalcCircleAutoSegmentCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int _CalcCircleAutoSegmentCountNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawList*, float, int>)vt[596])(self, radius);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, float, int>)vt[596])((nint)self, radius);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__CalcCircleAutoSegmentCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int _CalcCircleAutoSegmentCount([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			int ret = _CalcCircleAutoSegmentCountNative(self, radius);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__CalcCircleAutoSegmentCount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int _CalcCircleAutoSegmentCount([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius)
		{
			fixed (ImDrawList* pself = &self)
			{
				int ret = _CalcCircleAutoSegmentCountNative((ImDrawList*)pself, radius);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToFastEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _PathArcToFastExNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min_sample")] [NativeName(NativeNameType.Type, "int")] int aMinSample, [NativeName(NativeNameType.Param, "a_max_sample")] [NativeName(NativeNameType.Type, "int")] int aMaxSample, [NativeName(NativeNameType.Param, "a_step")] [NativeName(NativeNameType.Type, "int")] int aStep)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, int, int, int, void>)vt[597])(self, center, radius, aMinSample, aMaxSample, aStep);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, int, int, int, void>)vt[597])((nint)self, center, radius, aMinSample, aMaxSample, aStep);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToFastEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PathArcToFastEx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min_sample")] [NativeName(NativeNameType.Type, "int")] int aMinSample, [NativeName(NativeNameType.Param, "a_max_sample")] [NativeName(NativeNameType.Type, "int")] int aMaxSample, [NativeName(NativeNameType.Param, "a_step")] [NativeName(NativeNameType.Type, "int")] int aStep)
		{
			_PathArcToFastExNative(self, center, radius, aMinSample, aMaxSample, aStep);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToFastEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PathArcToFastEx([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min_sample")] [NativeName(NativeNameType.Type, "int")] int aMinSample, [NativeName(NativeNameType.Param, "a_max_sample")] [NativeName(NativeNameType.Type, "int")] int aMaxSample, [NativeName(NativeNameType.Param, "a_step")] [NativeName(NativeNameType.Type, "int")] int aStep)
		{
			fixed (ImDrawList* pself = &self)
			{
				_PathArcToFastExNative((ImDrawList*)pself, center, radius, aMinSample, aMaxSample, aStep);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToN")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void _PathArcToNNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, float, float, int, void>)vt[598])(self, center, radius, aMin, aMax, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, float, float, int, void>)vt[598])((nint)self, center, radius, aMin, aMax, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PathArcToN([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			_PathArcToNNative(self, center, radius, aMin, aMax, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList__PathArcToN")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void _PathArcToN([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "a_min")] [NativeName(NativeNameType.Type, "float")] float aMin, [NativeName(NativeNameType.Param, "a_max")] [NativeName(NativeNameType.Type, "float")] float aMax, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				_PathArcToNNative((ImDrawList*)pself, center, radius, aMin, aMax, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ImDrawData")]
		[return: NativeName(NativeNameType.Type, "ImDrawData*")]
		internal static ImDrawData* ImDrawDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawData*>)vt[599])();
			#else
			return (ImDrawData*)((delegate* unmanaged[Cdecl]<nint>)vt[599])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ImDrawData")]
		[return: NativeName(NativeNameType.Type, "ImDrawData*")]
		public static ImDrawData* ImDrawData()
		{
			ImDrawData* ret = ImDrawDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)vt[600])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[600])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				DestroyNative((ImDrawData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)vt[601])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[601])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				ClearNative((ImDrawData*)pself);
			}
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddDrawListNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, ImDrawList*, void>)vt[602])(self, drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[602])((nint)self, (nint)drawList);
			#endif
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawList([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			AddDrawListNative(self, drawList);
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawList([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawData* pself = &self)
			{
				AddDrawListNative((ImDrawData*)pself, drawList);
			}
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawList([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				AddDrawListNative(self, (ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// Helper to add an external draw list into an existing ImDrawData.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_AddDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddDrawList([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawData* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					AddDrawListNative((ImDrawData*)pself, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DeIndexAllBuffersNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, void>)vt[603])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[603])((nint)self);
			#endif
		}

		/// <summary>
		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeIndexAllBuffers([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self)
		{
			DeIndexAllBuffersNative(self);
		}

		/// <summary>
		/// Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_DeIndexAllBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeIndexAllBuffers([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self)
		{
			fixed (ImDrawData* pself = &self)
			{
				DeIndexAllBuffersNative((ImDrawData*)pself);
			}
		}

		/// <summary>
		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScaleClipRectsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self, [NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawData*, Vector2, void>)vt[604])(self, fbScale);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, void>)vt[604])((nint)self, fbScale);
			#endif
		}

		/// <summary>
		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleClipRects([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ImDrawData* self, [NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			ScaleClipRectsNative(self, fbScale);
		}

		/// <summary>
		/// Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawData_ScaleClipRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleClipRects([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawData*")] ref ImDrawData self, [NativeName(NativeNameType.Param, "fb_scale")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 fbScale)
		{
			fixed (ImDrawData* pself = &self)
			{
				ScaleClipRectsNative((ImDrawData*)pself, fbScale);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_ImFontConfig")]
		[return: NativeName(NativeNameType.Type, "ImFontConfig*")]
		internal static ImFontConfig* ImFontConfigNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontConfig*>)vt[605])();
			#else
			return (ImFontConfig*)((delegate* unmanaged[Cdecl]<nint>)vt[605])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_ImFontConfig")]
		[return: NativeName(NativeNameType.Type, "ImFontConfig*")]
		public static ImFontConfig* ImFontConfig()
		{
			ImFontConfig* ret = ImFontConfigNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontConfig*, void>)vt[606])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[606])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontConfig_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ref ImFontConfig self)
		{
			fixed (ImFontConfig* pself = &self)
			{
				DestroyNative((ImFontConfig*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder")]
		[return: NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")]
		internal static ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*>)vt[607])();
			#else
			return (ImFontGlyphRangesBuilder*)((delegate* unmanaged[Cdecl]<nint>)vt[607])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder")]
		[return: NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")]
		public static ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder()
		{
			ImFontGlyphRangesBuilder* ret = ImFontGlyphRangesBuilderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, void>)vt[608])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[608])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				DestroyNative((ImFontGlyphRangesBuilder*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, void>)vt[609])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[609])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				ClearNative((ImFontGlyphRangesBuilder*)pself);
			}
		}

		/// <summary>
		/// Get bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte GetBitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, ulong, byte>)vt[610])(self, n);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ulong, byte>)vt[610])((nint)self, n);
			#endif
		}

		/// <summary>
		/// Get bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			byte ret = GetBitNative(self, n);
			return ret != 0;
		}

		/// <summary>
		/// Get bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte ret = GetBitNative((ImFontGlyphRangesBuilder*)pself, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			byte ret = GetBitNative(self, n);
			return ret != 0;
		}

		/// <summary>
		/// Get bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_GetBit")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte ret = GetBitNative((ImFontGlyphRangesBuilder*)pself, n);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetBitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, ulong, void>)vt[611])(self, n);
			#else
			((delegate* unmanaged[Cdecl]<nint, ulong, void>)vt[611])((nint)self, n);
			#endif
		}

		/// <summary>
		/// Set bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			SetBitNative(self, n);
		}

		/// <summary>
		/// Set bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] ulong n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				SetBitNative((ImFontGlyphRangesBuilder*)pself, n);
			}
		}

		/// <summary>
		/// Set bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			SetBitNative(self, n);
		}

		/// <summary>
		/// Set bit n in the array<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_SetBit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBit([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "size_t")] nuint n)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				SetBitNative((ImFontGlyphRangesBuilder*)pself, n);
			}
		}

		/// <summary>
		/// Add character<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddCharNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, char, void>)vt[612])(self, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, char, void>)vt[612])((nint)self, c);
			#endif
		}

		/// <summary>
		/// Add character<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddChar([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			AddCharNative(self, c);
		}

		/// <summary>
		/// Add character<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddChar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddChar([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar")] char c)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				AddCharNative((ImFontGlyphRangesBuilder*)pself, c);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddTextNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, byte*, byte*, void>)vt[613])(self, text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[613])((nint)self, (nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			AddTextNative(self, text, textEnd);
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			AddTextNative(self, text, (byte*)(default));
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				AddTextNative((ImFontGlyphRangesBuilder*)pself, text, textEnd);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				AddTextNative((ImFontGlyphRangesBuilder*)pself, text, (byte*)(default));
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				AddTextNative(self, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				AddTextNative(self, (byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				AddTextNative(self, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				AddTextNative(self, (byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative((ImFontGlyphRangesBuilder*)pself, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative((ImFontGlyphRangesBuilder*)pself, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				AddTextNative(self, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				AddTextNative(self, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					AddTextNative((ImFontGlyphRangesBuilder*)pself, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddTextNative((ImFontGlyphRangesBuilder*)pself, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					AddTextNative(self, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					AddTextNative(self, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			AddTextNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						AddTextNative((ImFontGlyphRangesBuilder*)pself, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// Add string (each character of the UTF-8 string are added)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				AddTextNative((ImFontGlyphRangesBuilder*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddRangesNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* ranges)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, char*, void>)vt[614])(self, ranges);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[614])((nint)self, (nint)ranges);
			#endif
		}

		/// <summary>
		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* ranges)
		{
			AddRangesNative(self, ranges);
		}

		/// <summary>
		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* ranges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				AddRangesNative((ImFontGlyphRangesBuilder*)pself, ranges);
			}
		}

		/// <summary>
		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char ranges)
		{
			fixed (char* pranges = &ranges)
			{
				AddRangesNative(self, (char*)pranges);
			}
		}

		/// <summary>
		/// Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCIILatin+Ext<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_AddRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char ranges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (char* pranges = &ranges)
				{
					AddRangesNative((ImFontGlyphRangesBuilder*)pself, (char*)pranges);
				}
			}
		}

		/// <summary>
		/// Output new ranges<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BuildRangesNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* outRanges)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontGlyphRangesBuilder*, ImVectorImWchar*, void>)vt[615])(self, outRanges);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[615])((nint)self, (nint)outRanges);
			#endif
		}

		/// <summary>
		/// Output new ranges<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* outRanges)
		{
			BuildRangesNative(self, outRanges);
		}

		/// <summary>
		/// Output new ranges<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				BuildRangesNative((ImFontGlyphRangesBuilder*)pself, outRanges);
			}
		}

		/// <summary>
		/// Output new ranges<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ImFontGlyphRangesBuilder* self, [NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar outRanges)
		{
			fixed (ImVectorImWchar* poutRanges = &outRanges)
			{
				BuildRangesNative(self, (ImVectorImWchar*)poutRanges);
			}
		}

		/// <summary>
		/// Output new ranges<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontGlyphRangesBuilder_BuildRanges")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildRanges([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontGlyphRangesBuilder*")] ref ImFontGlyphRangesBuilder self, [NativeName(NativeNameType.Param, "out_ranges")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar outRanges)
		{
			fixed (ImFontGlyphRangesBuilder* pself = &self)
			{
				fixed (ImVectorImWchar* poutRanges = &outRanges)
				{
					BuildRangesNative((ImFontGlyphRangesBuilder*)pself, (ImVectorImWchar*)poutRanges);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_ImFontAtlasCustomRect")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		internal static ImFontAtlasCustomRect* ImFontAtlasCustomRectNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlasCustomRect*>)vt[616])();
			#else
			return (ImFontAtlasCustomRect*)((delegate* unmanaged[Cdecl]<nint>)vt[616])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_ImFontAtlasCustomRect")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public static ImFontAtlasCustomRect* ImFontAtlasCustomRect()
		{
			ImFontAtlasCustomRect* ret = ImFontAtlasCustomRectNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlasCustomRect*, void>)vt[617])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[617])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect self)
		{
			fixed (ImFontAtlasCustomRect* pself = &self)
			{
				DestroyNative((ImFontAtlasCustomRect*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPackedNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlasCustomRect*, byte>)vt[618])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[618])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPacked([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* self)
		{
			byte ret = IsPackedNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlasCustomRect_IsPacked")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPacked([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")] ref ImFontAtlasCustomRect self)
		{
			fixed (ImFontAtlasCustomRect* pself = &self)
			{
				byte ret = IsPackedNative((ImFontAtlasCustomRect*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ImFontAtlas")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlas*")]
		internal static ImFontAtlas* ImFontAtlasNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*>)vt[619])();
			#else
			return (ImFontAtlas*)((delegate* unmanaged[Cdecl]<nint>)vt[619])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ImFontAtlas")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlas*")]
		public static ImFontAtlas* ImFontAtlas()
		{
			ImFontAtlas* ret = ImFontAtlasNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[620])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[620])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				DestroyNative((ImFontAtlas*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontConfig*, ImFont*>)vt[621])(self, fontCfg);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[621])((nint)self, (nint)fontCfg);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFont([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontNative(self, fontCfg);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFont([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontNative((ImFontAtlas*)pself, fontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFont([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontNative(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFont")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFont([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontNative((ImFontAtlas*)pself, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontDefaultNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontConfig*, ImFont*>)vt[622])(self, fontCfg);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[622])((nint)self, (nint)fontCfg);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontDefaultNative(self, fontCfg);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			ImFont* ret = AddFontDefaultNative(self, (ImFontConfig*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontDefaultNative((ImFontAtlas*)pself, fontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontDefaultNative((ImFontAtlas*)pself, (ImFontConfig*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontDefaultNative(self, (ImFontConfig*)pfontCfg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontDefault")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontDefaultNative((ImFontAtlas*)pself, (ImFontConfig*)pfontCfg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromFileTTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte*, float, ImFontConfig*, char*, ImFont*>)vt[623])(self, filename, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, float, nint, nint, nint>)vt[623])((nint)self, (nint)filename, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pfilename = filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pfilename = filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryTTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, void*, int, float, ImFontConfig*, char*, ImFont*>)vt[624])(self, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, int, float, nint, nint, nint>)vt[624])((nint)self, (nint)fontData, fontDataSize, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryCompressedTTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, void*, int, float, ImFontConfig*, char*, ImFont*>)vt[625])(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, int, float, nint, nint, nint>)vt[625])((nint)self, (nint)compressedFontData, compressedFontDataSize, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryCompressedBase85TTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte*, float, ImFontConfig*, char*, ImFont*>)vt[626])(self, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, float, nint, nint, nint>)vt[626])((nint)self, (nint)compressedFontDatabase85, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}
	}
}
