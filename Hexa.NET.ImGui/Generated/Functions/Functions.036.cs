// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputDouble")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputDouble([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "double*")] ref double v, [NativeName(NativeNameType.Param, "step")] [NativeName(NativeNameType.Type, "double")] double step, [NativeName(NativeNameType.Param, "step_fast")] [NativeName(NativeNameType.Type, "double")] double stepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (double* pv = &v)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (format != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(format);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = InputDoubleNative(pStr0, (double*)pv, step, stepFast, pStr1, (ImGuiInputTextFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputDouble")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputDouble([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "double*")] ref double v, [NativeName(NativeNameType.Param, "step")] [NativeName(NativeNameType.Type, "double")] double step, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (double* pv = &v)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (format != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(format);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = InputDoubleNative(pStr0, (double*)pv, step, (double)(0.0), pStr1, (ImGuiInputTextFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputDouble")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputDouble([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "double*")] ref double v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (double* pv = &v)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (format != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(format);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = InputDoubleNative(pStr0, (double*)pv, (double)(0.0), (double)(0.0), pStr1, (ImGuiInputTextFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputDouble")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputDouble([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "double*")] ref double v, [NativeName(NativeNameType.Param, "step")] [NativeName(NativeNameType.Type, "double")] double step, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (double* pv = &v)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (format != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(format);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = InputDoubleNative(pStr0, (double*)pv, step, (double)(0.0), pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputDouble")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputDouble([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "double*")] ref double v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (double* pv = &v)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (format != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(format);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = InputDoubleNative(pStr0, (double*)pv, (double)(0.0), (double)(0.0), pStr1, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte InputScalarNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDataType, void*, void*, void*, byte*, ImGuiInputTextFlags, byte>)vt[198])(label, dataType, pData, pStep, pStepFast, format, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDataType, nint, nint, nint, nint, ImGuiInputTextFlags, byte>)vt[198])((nint)label, dataType, (nint)pData, (nint)pStep, (nint)pStepFast, (nint)format, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, pStep, pStepFast, pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, pStep, (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNative(label, dataType, pData, (void*)(default), (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, pStep, (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNative((byte*)plabel, dataType, pData, (void*)(default), (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, pStepFast, pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, pStep, (void*)(default), pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalar([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNative(pStr0, dataType, pData, (void*)(default), (void*)(default), pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte InputScalarNNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDataType, void*, int, void*, void*, byte*, ImGuiInputTextFlags, byte>)vt[199])(label, dataType, pData, components, pStep, pStepFast, format, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDataType, nint, int, nint, nint, nint, ImGuiInputTextFlags, byte>)vt[199])((nint)label, dataType, (nint)pData, components, (nint)pStep, (nint)pStepFast, (nint)format, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), format, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), (byte*)(default), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, pStepFast, pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), pStr0, (ImGuiInputTextFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, pStep, (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InputScalarNNative(label, dataType, pData, components, (void*)(default), (void*)(default), pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, pStepFast, (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, (ImGuiInputTextFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, pStep, (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = InputScalarNNative((byte*)plabel, dataType, pData, components, (void*)(default), (void*)(default), (byte*)pformat, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "p_step_fast")] [NativeName(NativeNameType.Type, "const void*")] void* pStepFast, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, pStepFast, pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), pStr1, (ImGuiInputTextFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "p_step")] [NativeName(NativeNameType.Type, "const void*")] void* pStep, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, pStep, (void*)(default), pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputScalarN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InputScalarN([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "components")] [NativeName(NativeNameType.Type, "int")] int components, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputTextFlags")] ImGuiInputTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = InputScalarNNative(pStr0, dataType, pData, components, (void*)(default), (void*)(default), pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ColorEdit3Native([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, ImGuiColorEditFlags, byte>)vt[200])(label, col, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiColorEditFlags, byte>)vt[200])((nint)label, (nint)col, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte ret = ColorEdit3Native(label, col, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			byte ret = ColorEdit3Native(label, col, (ImGuiColorEditFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorEdit3Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorEdit3Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorEdit3Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorEdit3Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorEdit3Native(pStr0, col, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorEdit3Native(pStr0, col, (ImGuiColorEditFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col)
		{
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorEdit3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorEdit3Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorEdit3Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorEdit3Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorEdit3Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorEdit3Native(pStr0, (float*)pcol, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorEdit3Native(pStr0, (float*)pcol, (ImGuiColorEditFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ColorEdit4Native([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, ImGuiColorEditFlags, byte>)vt[201])(label, col, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiColorEditFlags, byte>)vt[201])((nint)label, (nint)col, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte ret = ColorEdit4Native(label, col, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			byte ret = ColorEdit4Native(label, col, (ImGuiColorEditFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorEdit4Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorEdit4Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorEdit4Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorEdit4Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorEdit4Native(pStr0, col, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorEdit4Native(pStr0, col, (ImGuiColorEditFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref float col)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> col)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref Vector4 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (Vector4* pcol = &col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref Vector4 col)
		{
			fixed (Vector4* pcol = &col)
			{
				byte ret = ColorEdit4Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorEdit4Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref float col)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorEdit4Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorEdit4Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ReadOnlySpan<float> col)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorEdit4Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref Vector4 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcol = &col)
			{
				byte ret = ColorEdit4Native(pStr0, (float*)pcol, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEdit4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorEdit4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] ref Vector4 col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector4* pcol = &col)
			{
				byte ret = ColorEdit4Native(pStr0, (float*)pcol, (ImGuiColorEditFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ColorPicker3Native([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, ImGuiColorEditFlags, byte>)vt[202])(label, col, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiColorEditFlags, byte>)vt[202])((nint)label, (nint)col, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte ret = ColorPicker3Native(label, col, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			byte ret = ColorPicker3Native(label, col, (ImGuiColorEditFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorPicker3Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorPicker3Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorPicker3Native((byte*)plabel, col, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ColorPicker3Native((byte*)plabel, col, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorPicker3Native(pStr0, col, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] float* col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ColorPicker3Native(pStr0, col, (ImGuiColorEditFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col)
		{
			fixed (float* pcol = &col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col)
		{
			fixed (float* pcol = col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col)
		{
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorPicker3Native(label, (float*)pcol, (ImGuiColorEditFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorPicker3Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref float col)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pcol = &col)
				{
					byte ret = ColorPicker3Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorPicker3Native((byte*)plabel, (float*)pcol, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ReadOnlySpan<float> col)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pcol = col)
				{
					byte ret = ColorPicker3Native((byte*)plabel, (float*)pcol, (ImGuiColorEditFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorPicker3Native(pStr0, (float*)pcol, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker3")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker3([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[3]")] ref Vector3 col)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector3* pcol = &col)
			{
				byte ret = ColorPicker3Native(pStr0, (float*)pcol, (ImGuiColorEditFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ColorPicker4Native([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags, [NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, ImGuiColorEditFlags, float*, byte>)vt[203])(label, col, flags, refCol);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiColorEditFlags, nint, byte>)vt[203])((nint)label, (nint)col, flags, (nint)refCol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags, [NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol)
		{
			byte ret = ColorPicker4Native(label, col, flags, refCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte ret = ColorPicker4Native(label, col, flags, (float*)(default));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			byte ret = ColorPicker4Native(label, col, (ImGuiColorEditFlags)(0), (float*)(default));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol)
		{
			byte ret = ColorPicker4Native(label, col, (ImGuiColorEditFlags)(0), refCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags, [NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorPicker4Native((byte*)plabel, col, flags, refCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorPicker4Native((byte*)plabel, col, flags, (float*)(default));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPicker4")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ColorPicker4([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "float[4]")] float* col)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ColorPicker4Native((byte*)plabel, col, (ImGuiColorEditFlags)(0), (float*)(default));
				return ret != 0;
			}
		}
	}
}
