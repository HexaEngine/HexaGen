// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayload = &payload)
					{
						DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ptarget = &target)
				{
					fixed (ImGuiDockNode* ptargetNode = &targetNode)
					{
						fixed (ImGuiWindow* ppayload = &payload)
						{
							DockContextQueueDockNative((ImGuiContext*)pctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextQueueUndockWindowNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiWindow*, void>)vt[1165])(ctx, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1165])((nint)ctx, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			DockContextQueueUndockWindowNative(ctx, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextQueueUndockWindowNative((ImGuiContext*)pctx, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextQueueUndockWindowNative(ctx, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					DockContextQueueUndockWindowNative((ImGuiContext*)pctx, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextQueueUndockNodeNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiDockNode*, void>)vt[1166])(ctx, node);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1166])((nint)ctx, (nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			DockContextQueueUndockNodeNative(ctx, node);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextQueueUndockNodeNative((ImGuiContext*)pctx, node);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextQueueUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					DockContextQueueUndockNodeNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextProcessUndockWindowNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] byte clearPersistentDockingRef)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiWindow*, byte, void>)vt[1167])(ctx, window, clearPersistentDockingRef);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, void>)vt[1167])((nint)ctx, (nint)window, clearPersistentDockingRef);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			DockContextProcessUndockWindowNative(ctx, window, clearPersistentDockingRef ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextProcessUndockWindowNative((ImGuiContext*)pctx, window, clearPersistentDockingRef ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextProcessUndockWindowNative(ctx, (ImGuiWindow*)pwindow, clearPersistentDockingRef ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					DockContextProcessUndockWindowNative((ImGuiContext*)pctx, (ImGuiWindow*)pwindow, clearPersistentDockingRef ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextProcessUndockNodeNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiDockNode*, void>)vt[1168])(ctx, node);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1168])((nint)ctx, (nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			DockContextProcessUndockNodeNative(ctx, node);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextProcessUndockNodeNative((ImGuiContext*)pctx, node);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextProcessUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					DockContextProcessUndockNodeNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DockContextCalcDropPosForDockingNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] byte splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiDockNode*, ImGuiWindow*, ImGuiDockNode*, ImGuiDir, byte, Vector2*, byte>)vt[1169])(target, targetNode, payloadWindow, payloadNode, splitDir, splitOuter, outPos);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ImGuiDir, byte, nint, byte>)vt[1169])((nint)target, (nint)targetNode, (nint)payloadWindow, (nint)payloadNode, splitDir, splitOuter, (nint)outPos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
					{
						fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
						{
							byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, outPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (Vector2* poutPos = &outPos)
			{
				byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
					{
						fixed (Vector2* poutPos = &outPos)
						{
							byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, payloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
			{
				fixed (Vector2* poutPos = &outPos)
				{
					byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						fixed (Vector2* poutPos = &outPos)
						{
							byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
			{
				fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
				{
					fixed (Vector2* poutPos = &outPos)
					{
						byte ret = DockContextCalcDropPosForDockingNative(target, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						fixed (Vector2* poutPos = &outPos)
						{
							byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
				{
					fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
					{
						fixed (Vector2* poutPos = &outPos)
						{
							byte ret = DockContextCalcDropPosForDockingNative(target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextCalcDropPosForDocking")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockContextCalcDropPosForDocking([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payloadWindow, [NativeName(NativeNameType.Param, "payload_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode payloadNode, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter, [NativeName(NativeNameType.Param, "out_pos")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 outPos)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayloadWindow = &payloadWindow)
					{
						fixed (ImGuiDockNode* ppayloadNode = &payloadNode)
						{
							fixed (Vector2* poutPos = &outPos)
							{
								byte ret = DockContextCalcDropPosForDockingNative((ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayloadWindow, (ImGuiDockNode*)ppayloadNode, splitDir, splitOuter ? (byte)1 : (byte)0, (Vector2*)poutPos);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextFindNodeByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		internal static ImGuiDockNode* DockContextFindNodeByIDNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, uint, ImGuiDockNode*>)vt[1170])(ctx, id);
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[1170])((nint)ctx, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextFindNodeByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockContextFindNodeByID([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiDockNode* ret = DockContextFindNodeByIDNative(ctx, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextFindNodeByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockContextFindNodeByID([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiDockNode* ret = DockContextFindNodeByIDNative((ImGuiContext*)pctx, id);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockNodeWindowMenuHandlerDefaultNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiDockNode*, ImGuiTabBar*, void>)vt[1171])(ctx, node, tabBar);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[1171])((nint)ctx, (nint)node, (nint)tabBar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			DockNodeWindowMenuHandlerDefaultNative(ctx, node, tabBar);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockNodeWindowMenuHandlerDefaultNative((ImGuiContext*)pctx, node, tabBar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockNodeWindowMenuHandlerDefaultNative(ctx, (ImGuiDockNode*)pnode, tabBar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					DockNodeWindowMenuHandlerDefaultNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode, tabBar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DockNodeWindowMenuHandlerDefaultNative(ctx, node, (ImGuiTabBar*)ptabBar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiTabBar* ptabBar = &tabBar)
				{
					DockNodeWindowMenuHandlerDefaultNative((ImGuiContext*)pctx, node, (ImGuiTabBar*)ptabBar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (ImGuiTabBar* ptabBar = &tabBar)
				{
					DockNodeWindowMenuHandlerDefaultNative(ctx, (ImGuiDockNode*)pnode, (ImGuiTabBar*)ptabBar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeWindowMenuHandler_Default")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeWindowMenuHandlerDefault([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					fixed (ImGuiTabBar* ptabBar = &tabBar)
					{
						DockNodeWindowMenuHandlerDefaultNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode, (ImGuiTabBar*)ptabBar);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeBeginAmendTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DockNodeBeginAmendTabBarNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte>)vt[1172])(node);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[1172])((nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeBeginAmendTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeBeginAmendTabBar([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			byte ret = DockNodeBeginAmendTabBarNative(node);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeBeginAmendTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeBeginAmendTabBar([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				byte ret = DockNodeBeginAmendTabBarNative((ImGuiDockNode*)pnode);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeEndAmendTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockNodeEndAmendTabBarNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1173])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1173])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeEndAmendTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockNodeEndAmendTabBar()
		{
			DockNodeEndAmendTabBarNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetRootNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		internal static ImGuiDockNode* DockNodeGetRootNodeNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, ImGuiDockNode*>)vt[1174])(node);
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1174])((nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetRootNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockNodeGetRootNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			ImGuiDockNode* ret = DockNodeGetRootNodeNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetRootNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockNodeGetRootNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				ImGuiDockNode* ret = DockNodeGetRootNodeNative((ImGuiDockNode*)pnode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeIsInHierarchyOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DockNodeIsInHierarchyOfNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* parent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, ImGuiDockNode*, byte>)vt[1175])(node, parent);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[1175])((nint)node, (nint)parent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeIsInHierarchyOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeIsInHierarchyOf([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* parent)
		{
			byte ret = DockNodeIsInHierarchyOfNative(node, parent);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeIsInHierarchyOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeIsInHierarchyOf([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* parent)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				byte ret = DockNodeIsInHierarchyOfNative((ImGuiDockNode*)pnode, parent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeIsInHierarchyOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeIsInHierarchyOf([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode parent)
		{
			fixed (ImGuiDockNode* pparent = &parent)
			{
				byte ret = DockNodeIsInHierarchyOfNative(node, (ImGuiDockNode*)pparent);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeIsInHierarchyOf")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DockNodeIsInHierarchyOf([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode parent)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (ImGuiDockNode* pparent = &parent)
				{
					byte ret = DockNodeIsInHierarchyOfNative((ImGuiDockNode*)pnode, (ImGuiDockNode*)pparent);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetDepth")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int DockNodeGetDepthNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, int>)vt[1176])(node);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[1176])((nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetDepth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int DockNodeGetDepth([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ImGuiDockNode* node)
		{
			int ret = DockNodeGetDepthNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetDepth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int DockNodeGetDepth([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				int ret = DockNodeGetDepthNative((ImGuiDockNode*)pnode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetWindowMenuButtonId")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockNodeGetWindowMenuButtonIdNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*, uint>)vt[1177])(node);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)vt[1177])((nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetWindowMenuButtonId")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockNodeGetWindowMenuButtonId([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ImGuiDockNode* node)
		{
			uint ret = DockNodeGetWindowMenuButtonIdNative(node);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockNodeGetWindowMenuButtonId")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockNodeGetWindowMenuButtonId([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "const ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				uint ret = DockNodeGetWindowMenuButtonIdNative((ImGuiDockNode*)pnode);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowDockNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		internal static ImGuiDockNode* GetWindowDockNodeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDockNode*>)vt[1178])();
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<nint>)vt[1178])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowDockNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* GetWindowDockNode()
		{
			ImGuiDockNode* ret = GetWindowDockNodeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowAlwaysWantOwnTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte GetWindowAlwaysWantOwnTabBarNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte>)vt[1179])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[1179])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowAlwaysWantOwnTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetWindowAlwaysWantOwnTabBar([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			byte ret = GetWindowAlwaysWantOwnTabBarNative(window);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowAlwaysWantOwnTabBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetWindowAlwaysWantOwnTabBar([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = GetWindowAlwaysWantOwnTabBarNative((ImGuiWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDocked")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginDockedNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, bool*, void>)vt[1180])(window, pOpen);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1180])((nint)window, (nint)pOpen);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDocked")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDocked([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			BeginDockedNative(window, pOpen);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDocked")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDocked([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] bool* pOpen)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BeginDockedNative((ImGuiWindow*)pwindow, pOpen);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDocked")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDocked([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			fixed (bool* ppOpen = &pOpen)
			{
				BeginDockedNative(window, (bool*)ppOpen);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDocked")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDocked([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "p_open")] [NativeName(NativeNameType.Type, "bool*")] ref bool pOpen)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (bool* ppOpen = &pOpen)
				{
					BeginDockedNative((ImGuiWindow*)pwindow, (bool*)ppOpen);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropSource")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginDockableDragDropSourceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1181])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1181])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropSource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDockableDragDropSource([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			BeginDockableDragDropSourceNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropSource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDockableDragDropSource([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BeginDockableDragDropSourceNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginDockableDragDropTargetNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1182])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1182])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDockableDragDropTarget([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			BeginDockableDragDropTargetNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDockableDragDropTarget")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDockableDragDropTarget([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				BeginDockableDragDropTargetNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowDockNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, uint, ImGuiCond, void>)vt[1183])(window, dockId, cond);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, ImGuiCond, void>)vt[1183])((nint)window, dockId, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowDock([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			SetWindowDockNative(window, dockId, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowDock([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "dock_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dockId, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImGuiCond")] ImGuiCond cond)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowDockNative((ImGuiWindow*)pwindow, dockId, cond);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderDockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderDockWindowNative([NativeName(NativeNameType.Param, "window_name")] [NativeName(NativeNameType.Type, "const char*")] byte* windowName, [NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, uint, void>)vt[1184])(windowName, nodeId);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[1184])((nint)windowName, nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderDockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderDockWindow([NativeName(NativeNameType.Param, "window_name")] [NativeName(NativeNameType.Type, "const char*")] byte* windowName, [NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			DockBuilderDockWindowNative(windowName, nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderDockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderDockWindow([NativeName(NativeNameType.Param, "window_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte windowName, [NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			fixed (byte* pwindowName = &windowName)
			{
				DockBuilderDockWindowNative((byte*)pwindowName, nodeId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderDockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderDockWindow([NativeName(NativeNameType.Param, "window_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> windowName, [NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			fixed (byte* pwindowName = windowName)
			{
				DockBuilderDockWindowNative((byte*)pwindowName, nodeId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderDockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderDockWindow([NativeName(NativeNameType.Param, "window_name")] [NativeName(NativeNameType.Type, "const char*")] string windowName, [NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (windowName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(windowName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(windowName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DockBuilderDockWindowNative(pStr0, nodeId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderGetNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		internal static ImGuiDockNode* DockBuilderGetNodeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiDockNode*>)vt[1185])(nodeId);
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1185])(nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderGetNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockBuilderGetNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			ImGuiDockNode* ret = DockBuilderGetNodeNative(nodeId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderGetCentralNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		internal static ImGuiDockNode* DockBuilderGetCentralNodeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiDockNode*>)vt[1186])(nodeId);
			#else
			return (ImGuiDockNode*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1186])(nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderGetCentralNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiDockNode*")]
		public static ImGuiDockNode* DockBuilderGetCentralNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			ImGuiDockNode* ret = DockBuilderGetCentralNodeNative(nodeId);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderAddNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockBuilderAddNodeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiDockNodeFlags, uint>)vt[1187])(nodeId, flags);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, ImGuiDockNodeFlags, uint>)vt[1187])(nodeId, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderAddNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockBuilderAddNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiDockNodeFlags")] ImGuiDockNodeFlags flags)
		{
			uint ret = DockBuilderAddNodeNative(nodeId, flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderRemoveNodeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1188])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1188])(nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderRemoveNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			DockBuilderRemoveNodeNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNodeDockedWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderRemoveNodeDockedWindowsNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "clear_settings_refs")] [NativeName(NativeNameType.Type, "bool")] byte clearSettingsRefs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, void>)vt[1189])(nodeId, clearSettingsRefs);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, void>)vt[1189])(nodeId, clearSettingsRefs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNodeDockedWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderRemoveNodeDockedWindows([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "clear_settings_refs")] [NativeName(NativeNameType.Type, "bool")] bool clearSettingsRefs)
		{
			DockBuilderRemoveNodeDockedWindowsNative(nodeId, clearSettingsRefs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNodeChildNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderRemoveNodeChildNodesNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1190])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1190])(nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderRemoveNodeChildNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderRemoveNodeChildNodes([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			DockBuilderRemoveNodeChildNodesNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSetNodePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderSetNodePosNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Vector2, void>)vt[1191])(nodeId, pos);
			#else
			((delegate* unmanaged[Cdecl]<uint, Vector2, void>)vt[1191])(nodeId, pos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSetNodePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderSetNodePos([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos)
		{
			DockBuilderSetNodePosNative(nodeId, pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSetNodeSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderSetNodeSizeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Vector2, void>)vt[1192])(nodeId, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, Vector2, void>)vt[1192])(nodeId, size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSetNodeSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderSetNodeSize([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 size)
		{
			DockBuilderSetNodeSizeNative(nodeId, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSplitNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockBuilderSplitNodeNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "size_ratio_for_node_at_dir")] [NativeName(NativeNameType.Type, "float")] float sizeRatioForNodeAtDir, [NativeName(NativeNameType.Param, "out_id_at_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtDir, [NativeName(NativeNameType.Param, "out_id_at_opposite_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtOppositeDir)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiDir, float, uint*, uint*, uint>)vt[1193])(nodeId, splitDir, sizeRatioForNodeAtDir, outIdAtDir, outIdAtOppositeDir);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, ImGuiDir, float, nint, nint, uint>)vt[1193])(nodeId, splitDir, sizeRatioForNodeAtDir, (nint)outIdAtDir, (nint)outIdAtOppositeDir);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSplitNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockBuilderSplitNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "size_ratio_for_node_at_dir")] [NativeName(NativeNameType.Type, "float")] float sizeRatioForNodeAtDir, [NativeName(NativeNameType.Param, "out_id_at_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtDir, [NativeName(NativeNameType.Param, "out_id_at_opposite_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtOppositeDir)
		{
			uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, outIdAtDir, outIdAtOppositeDir);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSplitNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockBuilderSplitNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "size_ratio_for_node_at_dir")] [NativeName(NativeNameType.Type, "float")] float sizeRatioForNodeAtDir, [NativeName(NativeNameType.Param, "out_id_at_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outIdAtDir, [NativeName(NativeNameType.Param, "out_id_at_opposite_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtDir = &outIdAtDir)
			{
				uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, (uint*)poutIdAtDir, outIdAtOppositeDir);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSplitNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockBuilderSplitNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "size_ratio_for_node_at_dir")] [NativeName(NativeNameType.Type, "float")] float sizeRatioForNodeAtDir, [NativeName(NativeNameType.Param, "out_id_at_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outIdAtDir, [NativeName(NativeNameType.Param, "out_id_at_opposite_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtOppositeDir = &outIdAtOppositeDir)
			{
				uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, outIdAtDir, (uint*)poutIdAtOppositeDir);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderSplitNode")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockBuilderSplitNode([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "size_ratio_for_node_at_dir")] [NativeName(NativeNameType.Type, "float")] float sizeRatioForNodeAtDir, [NativeName(NativeNameType.Param, "out_id_at_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outIdAtDir, [NativeName(NativeNameType.Param, "out_id_at_opposite_dir")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outIdAtOppositeDir)
		{
			fixed (uint* poutIdAtDir = &outIdAtDir)
			{
				fixed (uint* poutIdAtOppositeDir = &outIdAtOppositeDir)
				{
					uint ret = DockBuilderSplitNodeNative(nodeId, splitDir, sizeRatioForNodeAtDir, (uint*)poutIdAtDir, (uint*)poutIdAtOppositeDir);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyDockSpace")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderCopyDockSpaceNative([NativeName(NativeNameType.Param, "src_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcDockspaceId, [NativeName(NativeNameType.Param, "dst_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstDockspaceId, [NativeName(NativeNameType.Param, "in_window_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_const_charPtr*")] ImVectorConstCharPtr* inWindowRemapPairs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, ImVectorConstCharPtr*, void>)vt[1194])(srcDockspaceId, dstDockspaceId, inWindowRemapPairs);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)vt[1194])(srcDockspaceId, dstDockspaceId, (nint)inWindowRemapPairs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyDockSpace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyDockSpace([NativeName(NativeNameType.Param, "src_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcDockspaceId, [NativeName(NativeNameType.Param, "dst_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstDockspaceId, [NativeName(NativeNameType.Param, "in_window_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_const_charPtr*")] ImVectorConstCharPtr* inWindowRemapPairs)
		{
			DockBuilderCopyDockSpaceNative(srcDockspaceId, dstDockspaceId, inWindowRemapPairs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyDockSpace")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyDockSpace([NativeName(NativeNameType.Param, "src_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcDockspaceId, [NativeName(NativeNameType.Param, "dst_dockspace_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstDockspaceId, [NativeName(NativeNameType.Param, "in_window_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_const_charPtr*")] ref ImVectorConstCharPtr inWindowRemapPairs)
		{
			fixed (ImVectorConstCharPtr* pinWindowRemapPairs = &inWindowRemapPairs)
			{
				DockBuilderCopyDockSpaceNative(srcDockspaceId, dstDockspaceId, (ImVectorConstCharPtr*)pinWindowRemapPairs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderCopyNodeNative([NativeName(NativeNameType.Param, "src_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcNodeId, [NativeName(NativeNameType.Param, "dst_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstNodeId, [NativeName(NativeNameType.Param, "out_node_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_ImGuiID*")] ImVectorImGuiID* outNodeRemapPairs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, ImVectorImGuiID*, void>)vt[1195])(srcNodeId, dstNodeId, outNodeRemapPairs);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)vt[1195])(srcNodeId, dstNodeId, (nint)outNodeRemapPairs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyNode([NativeName(NativeNameType.Param, "src_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcNodeId, [NativeName(NativeNameType.Param, "dst_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstNodeId, [NativeName(NativeNameType.Param, "out_node_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_ImGuiID*")] ImVectorImGuiID* outNodeRemapPairs)
		{
			DockBuilderCopyNodeNative(srcNodeId, dstNodeId, outNodeRemapPairs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyNode([NativeName(NativeNameType.Param, "src_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint srcNodeId, [NativeName(NativeNameType.Param, "dst_node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint dstNodeId, [NativeName(NativeNameType.Param, "out_node_remap_pairs")] [NativeName(NativeNameType.Type, "ImVector_ImGuiID*")] ref ImVectorImGuiID outNodeRemapPairs)
		{
			fixed (ImVectorImGuiID* poutNodeRemapPairs = &outNodeRemapPairs)
			{
				DockBuilderCopyNodeNative(srcNodeId, dstNodeId, (ImVectorImGuiID*)poutNodeRemapPairs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderCopyWindowSettingsNative([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] byte* srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] byte* dstName)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[1196])(srcName, dstName);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1196])((nint)srcName, (nint)dstName);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] byte* srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] byte* dstName)
		{
			DockBuilderCopyWindowSettingsNative(srcName, dstName);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] byte* dstName)
		{
			fixed (byte* psrcName = &srcName)
			{
				DockBuilderCopyWindowSettingsNative((byte*)psrcName, dstName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] byte* dstName)
		{
			fixed (byte* psrcName = srcName)
			{
				DockBuilderCopyWindowSettingsNative((byte*)psrcName, dstName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] string srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] byte* dstName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (srcName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(srcName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(srcName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DockBuilderCopyWindowSettingsNative(pStr0, dstName);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] byte* srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte dstName)
		{
			fixed (byte* pdstName = &dstName)
			{
				DockBuilderCopyWindowSettingsNative(srcName, (byte*)pdstName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] byte* srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> dstName)
		{
			fixed (byte* pdstName = dstName)
			{
				DockBuilderCopyWindowSettingsNative(srcName, (byte*)pdstName);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] byte* srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] string dstName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dstName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dstName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dstName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DockBuilderCopyWindowSettingsNative(srcName, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] ref byte dstName)
		{
			fixed (byte* psrcName = &srcName)
			{
				fixed (byte* pdstName = &dstName)
				{
					DockBuilderCopyWindowSettingsNative((byte*)psrcName, (byte*)pdstName);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> dstName)
		{
			fixed (byte* psrcName = srcName)
			{
				fixed (byte* pdstName = dstName)
				{
					DockBuilderCopyWindowSettingsNative((byte*)psrcName, (byte*)pdstName);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderCopyWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderCopyWindowSettings([NativeName(NativeNameType.Param, "src_name")] [NativeName(NativeNameType.Type, "const char*")] string srcName, [NativeName(NativeNameType.Param, "dst_name")] [NativeName(NativeNameType.Type, "const char*")] string dstName)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (srcName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(srcName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(srcName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (dstName != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(dstName);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(dstName, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			DockBuilderCopyWindowSettingsNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockBuilderFinishNative([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1197])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1197])(nodeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockBuilderFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockBuilderFinish([NativeName(NativeNameType.Param, "node_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint nodeId)
		{
			DockBuilderFinishNative(nodeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushFocusScopeNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1198])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1198])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushFocusScope([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			PushFocusScopeNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PopFocusScopeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1199])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1199])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopFocusScope()
		{
			PopFocusScopeNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentFocusScope")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetCurrentFocusScopeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)vt[1200])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)vt[1200])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentFocusScope")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetCurrentFocusScope()
		{
			uint ret = GetCurrentFocusScopeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsDragDropActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsDragDropActiveNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1201])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[1201])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsDragDropActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDragDropActive()
		{
			byte ret = IsDragDropActiveNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDragDropTargetCustom")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginDragDropTargetCustomNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, byte>)vt[1202])(bb, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, byte>)vt[1202])(bb, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDragDropTargetCustom")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginDragDropTargetCustom([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			byte ret = BeginDragDropTargetCustomNative(bb, id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearDragDrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearDragDropNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1203])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1203])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClearDragDrop")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearDragDrop()
		{
			ClearDragDropNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsDragDropPayloadBeingAccepted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsDragDropPayloadBeingAcceptedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1204])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[1204])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsDragDropPayloadBeingAccepted")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDragDropPayloadBeingAccepted()
		{
			byte ret = IsDragDropPayloadBeingAcceptedNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderDragDropTargetRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderDragDropTargetRectNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "item_clip_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect itemClipRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect, ImRect, void>)vt[1205])(bb, itemClipRect);
			#else
			((delegate* unmanaged[Cdecl]<ImRect, ImRect, void>)vt[1205])(bb, itemClipRect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderDragDropTargetRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderDragDropTargetRect([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "item_clip_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect itemClipRect)
		{
			RenderDragDropTargetRectNative(bb, itemClipRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypingSelectRequest")]
		[return: NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")]
		internal static ImGuiTypingSelectRequest* GetTypingSelectRequestNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectFlags")] ImGuiTypingSelectFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTypingSelectFlags, ImGuiTypingSelectRequest*>)vt[1206])(flags);
			#else
			return (ImGuiTypingSelectRequest*)((delegate* unmanaged[Cdecl]<ImGuiTypingSelectFlags, nint>)vt[1206])(flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypingSelectRequest")]
		[return: NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")]
		public static ImGuiTypingSelectRequest* GetTypingSelectRequest([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectFlags")] ImGuiTypingSelectFlags flags)
		{
			ImGuiTypingSelectRequest* ret = GetTypingSelectRequestNative(flags);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TypingSelectFindMatchNative([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTypingSelectRequest*, int, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*>, void*, int, int>)vt[1207])(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int, int>)vt[1207])((nint)req, itemsCount, (nint)getItemNameFunc, (nint)userData, navItemIdx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			int ret = TypingSelectFindMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ref ImGuiTypingSelectRequest req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			fixed (ImGuiTypingSelectRequest* preq = &req)
			{
				int ret = TypingSelectFindMatchNative((ImGuiTypingSelectRequest*)preq, itemsCount, getItemNameFunc, userData, navItemIdx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindNextSingleCharMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TypingSelectFindNextSingleCharMatchNative([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTypingSelectRequest*, int, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*>, void*, int, int>)vt[1208])(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int, int>)vt[1208])((nint)req, itemsCount, (nint)getItemNameFunc, (nint)userData, navItemIdx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindNextSingleCharMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindNextSingleCharMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			int ret = TypingSelectFindNextSingleCharMatchNative(req, itemsCount, getItemNameFunc, userData, navItemIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindNextSingleCharMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindNextSingleCharMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ref ImGuiTypingSelectRequest req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data, int nav_item_idx)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, int, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "nav_item_idx")] [NativeName(NativeNameType.Type, "int")] int navItemIdx)
		{
			fixed (ImGuiTypingSelectRequest* preq = &req)
			{
				int ret = TypingSelectFindNextSingleCharMatchNative((ImGuiTypingSelectRequest*)preq, itemsCount, getItemNameFunc, userData, navItemIdx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindBestLeadingMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TypingSelectFindBestLeadingMatchNative([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTypingSelectRequest*, int, delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*>, void*, int>)vt[1209])(req, itemsCount, getItemNameFunc, userData);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int>)vt[1209])((nint)req, itemsCount, (nint)getItemNameFunc, (nint)userData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindBestLeadingMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindBestLeadingMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ImGuiTypingSelectRequest* req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			int ret = TypingSelectFindBestLeadingMatchNative(req, itemsCount, getItemNameFunc, userData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTypingSelectFindBestLeadingMatch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TypingSelectFindBestLeadingMatch([NativeName(NativeNameType.Param, "req")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectRequest*")] ref ImGuiTypingSelectRequest req, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "get_item_name_func")] [NativeName(NativeNameType.Type, "const char* (*)(ImGuiTypingSelectRequest* req, int items_count, const char* (*)(void*, int)* get_item_name_func, void* user_data)*")] delegate*<ImGuiTypingSelectRequest*, int, delegate*<void*, int, byte*>, void*, byte*> getItemNameFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			fixed (ImGuiTypingSelectRequest* preq = &req)
			{
				int ret = TypingSelectFindBestLeadingMatchNative((ImGuiTypingSelectRequest*)preq, itemsCount, getItemNameFunc, userData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginBoxSelect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginBoxSelectNative([NativeName(NativeNameType.Param, "scope_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect scopeRect, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "box_select_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint boxSelectId, [NativeName(NativeNameType.Param, "ms_flags")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectFlags")] ImGuiMultiSelectFlags msFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, ImGuiWindow*, uint, ImGuiMultiSelectFlags, byte>)vt[1210])(scopeRect, window, boxSelectId, msFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, nint, uint, ImGuiMultiSelectFlags, byte>)vt[1210])(scopeRect, (nint)window, boxSelectId, msFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginBoxSelect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginBoxSelect([NativeName(NativeNameType.Param, "scope_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect scopeRect, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "box_select_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint boxSelectId, [NativeName(NativeNameType.Param, "ms_flags")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectFlags")] ImGuiMultiSelectFlags msFlags)
		{
			byte ret = BeginBoxSelectNative(scopeRect, window, boxSelectId, msFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginBoxSelect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginBoxSelect([NativeName(NativeNameType.Param, "scope_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect scopeRect, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "box_select_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint boxSelectId, [NativeName(NativeNameType.Param, "ms_flags")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectFlags")] ImGuiMultiSelectFlags msFlags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte ret = BeginBoxSelectNative(scopeRect, (ImGuiWindow*)pwindow, boxSelectId, msFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndBoxSelect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndBoxSelectNative([NativeName(NativeNameType.Param, "scope_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect scopeRect, [NativeName(NativeNameType.Param, "ms_flags")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectFlags")] ImGuiMultiSelectFlags msFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect, ImGuiMultiSelectFlags, void>)vt[1211])(scopeRect, msFlags);
			#else
			((delegate* unmanaged[Cdecl]<ImRect, ImGuiMultiSelectFlags, void>)vt[1211])(scopeRect, msFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndBoxSelect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndBoxSelect([NativeName(NativeNameType.Param, "scope_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect scopeRect, [NativeName(NativeNameType.Param, "ms_flags")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectFlags")] ImGuiMultiSelectFlags msFlags)
		{
			EndBoxSelectNative(scopeRect, msFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MultiSelectItemHeaderNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] bool* pSelected, [NativeName(NativeNameType.Param, "p_button_flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags*")] ImGuiButtonFlags* pButtonFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, bool*, ImGuiButtonFlags*, void>)vt[1212])(id, pSelected, pButtonFlags);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vt[1212])(id, (nint)pSelected, (nint)pButtonFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemHeader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] bool* pSelected, [NativeName(NativeNameType.Param, "p_button_flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags*")] ImGuiButtonFlags* pButtonFlags)
		{
			MultiSelectItemHeaderNative(id, pSelected, pButtonFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemHeader")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemHeader([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] ref bool pSelected, [NativeName(NativeNameType.Param, "p_button_flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags*")] ImGuiButtonFlags* pButtonFlags)
		{
			fixed (bool* ppSelected = &pSelected)
			{
				MultiSelectItemHeaderNative(id, (bool*)ppSelected, pButtonFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemFooter")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MultiSelectItemFooterNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] bool* pSelected, [NativeName(NativeNameType.Param, "p_pressed")] [NativeName(NativeNameType.Type, "bool*")] bool* pPressed)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, bool*, bool*, void>)vt[1213])(id, pSelected, pPressed);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)vt[1213])(id, (nint)pSelected, (nint)pPressed);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemFooter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemFooter([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] bool* pSelected, [NativeName(NativeNameType.Param, "p_pressed")] [NativeName(NativeNameType.Type, "bool*")] bool* pPressed)
		{
			MultiSelectItemFooterNative(id, pSelected, pPressed);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemFooter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemFooter([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] ref bool pSelected, [NativeName(NativeNameType.Param, "p_pressed")] [NativeName(NativeNameType.Type, "bool*")] bool* pPressed)
		{
			fixed (bool* ppSelected = &pSelected)
			{
				MultiSelectItemFooterNative(id, (bool*)ppSelected, pPressed);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemFooter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemFooter([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] bool* pSelected, [NativeName(NativeNameType.Param, "p_pressed")] [NativeName(NativeNameType.Type, "bool*")] ref bool pPressed)
		{
			fixed (bool* ppPressed = &pPressed)
			{
				MultiSelectItemFooterNative(id, pSelected, (bool*)ppPressed);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectItemFooter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectItemFooter([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "p_selected")] [NativeName(NativeNameType.Type, "bool*")] ref bool pSelected, [NativeName(NativeNameType.Param, "p_pressed")] [NativeName(NativeNameType.Type, "bool*")] ref bool pPressed)
		{
			fixed (bool* ppSelected = &pSelected)
			{
				fixed (bool* ppPressed = &pPressed)
				{
					MultiSelectItemFooterNative(id, (bool*)ppSelected, (bool*)ppPressed);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MultiSelectAddSetAllNative([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ImGuiMultiSelectTempData* ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] byte selected)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*, byte, void>)vt[1214])(ms, selected);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[1214])((nint)ms, selected);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectAddSetAll([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ImGuiMultiSelectTempData* ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected)
		{
			MultiSelectAddSetAllNative(ms, selected ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectAddSetAll([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ref ImGuiMultiSelectTempData ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected)
		{
			fixed (ImGuiMultiSelectTempData* pms = &ms)
			{
				MultiSelectAddSetAllNative((ImGuiMultiSelectTempData*)pms, selected ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MultiSelectAddSetRangeNative([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ImGuiMultiSelectTempData* ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] byte selected, [NativeName(NativeNameType.Param, "range_dir")] [NativeName(NativeNameType.Type, "int")] int rangeDir, [NativeName(NativeNameType.Param, "first_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long firstItem, [NativeName(NativeNameType.Param, "last_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long lastItem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectTempData*, byte, int, long, long, void>)vt[1215])(ms, selected, rangeDir, firstItem, lastItem);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, int, long, long, void>)vt[1215])((nint)ms, selected, rangeDir, firstItem, lastItem);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectAddSetRange([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ImGuiMultiSelectTempData* ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "range_dir")] [NativeName(NativeNameType.Type, "int")] int rangeDir, [NativeName(NativeNameType.Param, "first_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long firstItem, [NativeName(NativeNameType.Param, "last_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long lastItem)
		{
			MultiSelectAddSetRangeNative(ms, selected ? (byte)1 : (byte)0, rangeDir, firstItem, lastItem);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMultiSelectAddSetRange")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MultiSelectAddSetRange([NativeName(NativeNameType.Param, "ms")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectTempData*")] ref ImGuiMultiSelectTempData ms, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "range_dir")] [NativeName(NativeNameType.Type, "int")] int rangeDir, [NativeName(NativeNameType.Param, "first_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long firstItem, [NativeName(NativeNameType.Param, "last_item")] [NativeName(NativeNameType.Type, "ImGuiSelectionUserData")] long lastItem)
		{
			fixed (ImGuiMultiSelectTempData* pms = &ms)
			{
				MultiSelectAddSetRangeNative((ImGuiMultiSelectTempData*)pms, selected ? (byte)1 : (byte)0, rangeDir, firstItem, lastItem);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetBoxSelectState")]
		[return: NativeName(NativeNameType.Type, "ImGuiBoxSelectState*")]
		internal static ImGuiBoxSelectState* GetBoxSelectStateNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiBoxSelectState*>)vt[1216])(id);
			#else
			return (ImGuiBoxSelectState*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1216])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetBoxSelectState")]
		[return: NativeName(NativeNameType.Type, "ImGuiBoxSelectState*")]
		public static ImGuiBoxSelectState* GetBoxSelectState([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiBoxSelectState* ret = GetBoxSelectStateNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetMultiSelectState")]
		[return: NativeName(NativeNameType.Type, "ImGuiMultiSelectState*")]
		internal static ImGuiMultiSelectState* GetMultiSelectStateNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiMultiSelectState*>)vt[1217])(id);
			#else
			return (ImGuiMultiSelectState*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1217])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetMultiSelectState")]
		[return: NativeName(NativeNameType.Type, "ImGuiMultiSelectState*")]
		public static ImGuiMultiSelectState* GetMultiSelectState([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiMultiSelectState* ret = GetMultiSelectStateNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowClipRectBeforeSetChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetWindowClipRectBeforeSetChannelNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect clipRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImRect, void>)vt[1218])(window, clipRect);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, void>)vt[1218])((nint)window, clipRect);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowClipRectBeforeSetChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowClipRectBeforeSetChannel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect clipRect)
		{
			SetWindowClipRectBeforeSetChannelNative(window, clipRect);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetWindowClipRectBeforeSetChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetWindowClipRectBeforeSetChannel([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect clipRect)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetWindowClipRectBeforeSetChannelNative((ImGuiWindow*)pwindow, clipRect);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginColumnsNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")] ImGuiOldColumnFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, int, ImGuiOldColumnFlags, void>)vt[1219])(strId, count, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, ImGuiOldColumnFlags, void>)vt[1219])((nint)strId, count, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginColumns([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")] ImGuiOldColumnFlags flags)
		{
			BeginColumnsNative(strId, count, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginColumns([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")] ImGuiOldColumnFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				BeginColumnsNative((byte*)pstrId, count, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginColumns([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")] ImGuiOldColumnFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				BeginColumnsNative((byte*)pstrId, count, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginColumns([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiOldColumnFlags")] ImGuiOldColumnFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BeginColumnsNative(pStr0, count, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndColumnsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1220])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1220])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndColumns()
		{
			EndColumnsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushColumnClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushColumnClipRectNative([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1221])(columnIndex);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1221])(columnIndex);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushColumnClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushColumnClipRect([NativeName(NativeNameType.Param, "column_index")] [NativeName(NativeNameType.Type, "int")] int columnIndex)
		{
			PushColumnClipRectNative(columnIndex);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushColumnsBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushColumnsBackgroundNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1222])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1222])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushColumnsBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushColumnsBackground()
		{
			PushColumnsBackgroundNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopColumnsBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PopColumnsBackgroundNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1223])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1223])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopColumnsBackground")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopColumnsBackground()
		{
			PopColumnsBackgroundNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetColumnsIDNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, uint>)vt[1224])(strId, count);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[1224])((nint)strId, count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetColumnsID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			uint ret = GetColumnsIDNative(strId, count);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetColumnsID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* pstrId = &strId)
			{
				uint ret = GetColumnsIDNative((byte*)pstrId, count);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetColumnsID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* pstrId = strId)
			{
				uint ret = GetColumnsIDNative((byte*)pstrId, count);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnsID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetColumnsID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetColumnsIDNative(pStr0, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindOrCreateColumns")]
		[return: NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		internal static ImGuiOldColumns* FindOrCreateColumnsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, uint, ImGuiOldColumns*>)vt[1225])(window, id);
			#else
			return (ImGuiOldColumns*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[1225])((nint)window, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindOrCreateColumns")]
		[return: NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public static ImGuiOldColumns* FindOrCreateColumns([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiOldColumns* ret = FindOrCreateColumnsNative(window, id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindOrCreateColumns")]
		[return: NativeName(NativeNameType.Type, "ImGuiOldColumns*")]
		public static ImGuiOldColumns* FindOrCreateColumns([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiOldColumns* ret = FindOrCreateColumnsNative((ImGuiWindow*)pwindow, id);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffsetFromNorm")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetColumnOffsetFromNormNative([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ImGuiOldColumns* columns, [NativeName(NativeNameType.Param, "offset_norm")] [NativeName(NativeNameType.Type, "float")] float offsetNorm)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOldColumns*, float, float>)vt[1226])(columns, offsetNorm);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float, float>)vt[1226])((nint)columns, offsetNorm);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffsetFromNorm")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnOffsetFromNorm([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ImGuiOldColumns* columns, [NativeName(NativeNameType.Param, "offset_norm")] [NativeName(NativeNameType.Type, "float")] float offsetNorm)
		{
			float ret = GetColumnOffsetFromNormNative(columns, offsetNorm);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnOffsetFromNorm")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnOffsetFromNorm([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ref ImGuiOldColumns columns, [NativeName(NativeNameType.Param, "offset_norm")] [NativeName(NativeNameType.Type, "float")] float offsetNorm)
		{
			fixed (ImGuiOldColumns* pcolumns = &columns)
			{
				float ret = GetColumnOffsetFromNormNative((ImGuiOldColumns*)pcolumns, offsetNorm);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnNormFromOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetColumnNormFromOffsetNative([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ImGuiOldColumns* columns, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "float")] float offset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOldColumns*, float, float>)vt[1227])(columns, offset);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float, float>)vt[1227])((nint)columns, offset);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnNormFromOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnNormFromOffset([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ImGuiOldColumns* columns, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "float")] float offset)
		{
			float ret = GetColumnNormFromOffsetNative(columns, offset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetColumnNormFromOffset")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetColumnNormFromOffset([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "const ImGuiOldColumns*")] ref ImGuiOldColumns columns, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "float")] float offset)
		{
			fixed (ImGuiOldColumns* pcolumns = &columns)
			{
				float ret = GetColumnNormFromOffsetNative((ImGuiOldColumns*)pcolumns, offset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableOpenContextMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableOpenContextMenuNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1228])(columnN);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1228])(columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableOpenContextMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableOpenContextMenu([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			TableOpenContextMenuNative(columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetColumnWidthNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1229])(columnN, width);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)vt[1229])(columnN, width);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnWidth([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			TableSetColumnWidthNative(columnN, width);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetColumnSortDirectionNative([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "sort_direction")] [NativeName(NativeNameType.Type, "ImGuiSortDirection")] ImGuiSortDirection sortDirection, [NativeName(NativeNameType.Param, "append_to_sort_specs")] [NativeName(NativeNameType.Type, "bool")] byte appendToSortSpecs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ImGuiSortDirection, byte, void>)vt[1230])(columnN, sortDirection, appendToSortSpecs);
			#else
			((delegate* unmanaged[Cdecl]<int, ImGuiSortDirection, byte, void>)vt[1230])(columnN, sortDirection, appendToSortSpecs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnSortDirection([NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "sort_direction")] [NativeName(NativeNameType.Type, "ImGuiSortDirection")] ImGuiSortDirection sortDirection, [NativeName(NativeNameType.Param, "append_to_sort_specs")] [NativeName(NativeNameType.Type, "bool")] bool appendToSortSpecs)
		{
			TableSetColumnSortDirectionNative(columnN, sortDirection, appendToSortSpecs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHoveredRow")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TableGetHoveredRowNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)vt[1231])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)vt[1231])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHoveredRow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TableGetHoveredRow()
		{
			int ret = TableGetHoveredRowNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHeaderRowHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float TableGetHeaderRowHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[1232])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[1232])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHeaderRowHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetHeaderRowHeight()
		{
			float ret = TableGetHeaderRowHeightNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHeaderAngledMaxLabelWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float TableGetHeaderAngledMaxLabelWidthNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[1233])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[1233])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetHeaderAngledMaxLabelWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetHeaderAngledMaxLabelWidth()
		{
			float ret = TableGetHeaderAngledMaxLabelWidthNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTablePushBackgroundChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TablePushBackgroundChannelNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1234])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1234])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTablePushBackgroundChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TablePushBackgroundChannel()
		{
			TablePushBackgroundChannelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTablePopBackgroundChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TablePopBackgroundChannelNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1235])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1235])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTablePopBackgroundChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TablePopBackgroundChannel()
		{
			TablePopBackgroundChannelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableAngledHeadersRowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableAngledHeadersRowExNative([NativeName(NativeNameType.Param, "row_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rowId, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "max_label_width")] [NativeName(NativeNameType.Type, "float")] float maxLabelWidth, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const ImGuiTableHeaderData*")] ImGuiTableHeaderData* data, [NativeName(NativeNameType.Param, "data_count")] [NativeName(NativeNameType.Type, "int")] int dataCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, ImGuiTableHeaderData*, int, void>)vt[1236])(rowId, angle, maxLabelWidth, data, dataCount);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, nint, int, void>)vt[1236])(rowId, angle, maxLabelWidth, (nint)data, dataCount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableAngledHeadersRowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableAngledHeadersRowEx([NativeName(NativeNameType.Param, "row_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rowId, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "max_label_width")] [NativeName(NativeNameType.Type, "float")] float maxLabelWidth, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const ImGuiTableHeaderData*")] ImGuiTableHeaderData* data, [NativeName(NativeNameType.Param, "data_count")] [NativeName(NativeNameType.Type, "int")] int dataCount)
		{
			TableAngledHeadersRowExNative(rowId, angle, maxLabelWidth, data, dataCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableAngledHeadersRowEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableAngledHeadersRowEx([NativeName(NativeNameType.Param, "row_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rowId, [NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "max_label_width")] [NativeName(NativeNameType.Type, "float")] float maxLabelWidth, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const ImGuiTableHeaderData*")] ref ImGuiTableHeaderData data, [NativeName(NativeNameType.Param, "data_count")] [NativeName(NativeNameType.Type, "int")] int dataCount)
		{
			fixed (ImGuiTableHeaderData* pdata = &data)
			{
				TableAngledHeadersRowExNative(rowId, angle, maxLabelWidth, (ImGuiTableHeaderData*)pdata, dataCount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentTable")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		internal static ImGuiTable* GetCurrentTableNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*>)vt[1237])();
			#else
			return (ImGuiTable*)((delegate* unmanaged[Cdecl]<nint>)vt[1237])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetCurrentTable")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		public static ImGuiTable* GetCurrentTable()
		{
			ImGuiTable* ret = GetCurrentTableNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFindByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		internal static ImGuiTable* TableFindByIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiTable*>)vt[1238])(id);
			#else
			return (ImGuiTable*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1238])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFindByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiTable*")]
		public static ImGuiTable* TableFindByID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiTable* ret = TableFindByIDNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTableEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTableExNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint, int, ImGuiTableFlags, Vector2, float, byte>)vt[1239])(name, id, columnsCount, flags, outerSize, innerWidth);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, uint, int, ImGuiTableFlags, Vector2, float, byte>)vt[1239])((nint)name, id, columnsCount, flags, outerSize, innerWidth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTableEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTableEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte ret = BeginTableExNative(name, id, columnsCount, flags, outerSize, innerWidth);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTableEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTableEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginTableExNative((byte*)pname, id, columnsCount, flags, outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTableEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTableEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			fixed (byte* pname = name)
			{
				byte ret = BeginTableExNative((byte*)pname, id, columnsCount, flags, outerSize, innerWidth);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTableEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTableEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flags, [NativeName(NativeNameType.Param, "outer_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 outerSize, [NativeName(NativeNameType.Param, "inner_width")] [NativeName(NativeNameType.Type, "float")] float innerWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginTableExNative(pStr0, id, columnsCount, flags, outerSize, innerWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginInitMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableBeginInitMemoryNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, int, void>)vt[1240])(table, columnsCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1240])((nint)table, columnsCount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginInitMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginInitMemory([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount)
		{
			TableBeginInitMemoryNative(table, columnsCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginInitMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginInitMemory([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "columns_count")] [NativeName(NativeNameType.Type, "int")] int columnsCount)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableBeginInitMemoryNative((ImGuiTable*)ptable, columnsCount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableBeginApplyRequestsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1241])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1241])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginApplyRequests([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableBeginApplyRequestsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginApplyRequests([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableBeginApplyRequestsNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetupDrawChannelsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1242])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1242])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupDrawChannels([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableSetupDrawChannelsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetupDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetupDrawChannels([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSetupDrawChannelsNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateLayout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableUpdateLayoutNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1243])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1243])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateLayout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateLayout([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableUpdateLayoutNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateLayout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateLayout([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableUpdateLayoutNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableUpdateBordersNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1244])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1244])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateBorders([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableUpdateBordersNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateBorders([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableUpdateBordersNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateColumnsWeightFromWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableUpdateColumnsWeightFromWidthNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1245])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1245])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateColumnsWeightFromWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateColumnsWeightFromWidth([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableUpdateColumnsWeightFromWidthNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableUpdateColumnsWeightFromWidth")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableUpdateColumnsWeightFromWidth([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableUpdateColumnsWeightFromWidthNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableDrawBordersNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1246])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1246])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableDrawBorders([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableDrawBordersNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawBorders")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableDrawBorders([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableDrawBordersNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawDefaultContextMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableDrawDefaultContextMenuNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "flags_for_section_to_display")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flagsForSectionToDisplay)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, ImGuiTableFlags, void>)vt[1247])(table, flagsForSectionToDisplay);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiTableFlags, void>)vt[1247])((nint)table, flagsForSectionToDisplay);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawDefaultContextMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableDrawDefaultContextMenu([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "flags_for_section_to_display")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flagsForSectionToDisplay)
		{
			TableDrawDefaultContextMenuNative(table, flagsForSectionToDisplay);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableDrawDefaultContextMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableDrawDefaultContextMenu([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "flags_for_section_to_display")] [NativeName(NativeNameType.Type, "ImGuiTableFlags")] ImGuiTableFlags flagsForSectionToDisplay)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableDrawDefaultContextMenuNative((ImGuiTable*)ptable, flagsForSectionToDisplay);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginContextMenuPopup")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TableBeginContextMenuPopupNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, byte>)vt[1248])(table);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[1248])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginContextMenuPopup")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TableBeginContextMenuPopup([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			byte ret = TableBeginContextMenuPopupNative(table);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginContextMenuPopup")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TableBeginContextMenuPopup([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				byte ret = TableBeginContextMenuPopupNative((ImGuiTable*)ptable);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableMergeDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableMergeDrawChannelsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1249])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1249])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableMergeDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableMergeDrawChannels([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableMergeDrawChannelsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableMergeDrawChannels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableMergeDrawChannels([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableMergeDrawChannelsNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		internal static ImGuiTableInstanceData* TableGetInstanceDataNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, int, ImGuiTableInstanceData*>)vt[1250])(table, instanceNo);
			#else
			return (ImGuiTableInstanceData*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[1250])((nint)table, instanceNo);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		public static ImGuiTableInstanceData* TableGetInstanceData([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			ImGuiTableInstanceData* ret = TableGetInstanceDataNative(table, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceData")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableInstanceData*")]
		public static ImGuiTableInstanceData* TableGetInstanceData([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				ImGuiTableInstanceData* ret = TableGetInstanceDataNative((ImGuiTable*)ptable, instanceNo);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint TableGetInstanceIDNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, int, uint>)vt[1251])(table, instanceNo);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[1251])((nint)table, instanceNo);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint TableGetInstanceID([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			uint ret = TableGetInstanceIDNative(table, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint TableGetInstanceID([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				uint ret = TableGetInstanceIDNative((ImGuiTable*)ptable, instanceNo);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsSanitize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSortSpecsSanitizeNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1252])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1252])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsSanitize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSortSpecsSanitize([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableSortSpecsSanitizeNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsSanitize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSortSpecsSanitize([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSortSpecsSanitizeNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsBuild")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSortSpecsBuildNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1253])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1253])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsBuild")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSortSpecsBuild([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableSortSpecsBuildNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSortSpecsBuild")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSortSpecsBuild([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSortSpecsBuildNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnNextSortDirection")]
		[return: NativeName(NativeNameType.Type, "ImGuiSortDirection")]
		internal static ImGuiSortDirection TableGetColumnNextSortDirectionNative([NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumn*, ImGuiSortDirection>)vt[1254])(column);
			#else
			return (ImGuiSortDirection)((delegate* unmanaged[Cdecl]<nint, ImGuiSortDirection>)vt[1254])((nint)column);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnNextSortDirection")]
		[return: NativeName(NativeNameType.Type, "ImGuiSortDirection")]
		public static ImGuiSortDirection TableGetColumnNextSortDirection([NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			ImGuiSortDirection ret = TableGetColumnNextSortDirectionNative(column);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnNextSortDirection")]
		[return: NativeName(NativeNameType.Type, "ImGuiSortDirection")]
		public static ImGuiSortDirection TableGetColumnNextSortDirection([NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn column)
		{
			fixed (ImGuiTableColumn* pcolumn = &column)
			{
				ImGuiSortDirection ret = TableGetColumnNextSortDirectionNative((ImGuiTableColumn*)pcolumn);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFixColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableFixColumnSortDirectionNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, ImGuiTableColumn*, void>)vt[1255])(table, column);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1255])((nint)table, (nint)column);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFixColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableFixColumnSortDirection([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			TableFixColumnSortDirectionNative(table, column);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFixColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableFixColumnSortDirection([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableFixColumnSortDirectionNative((ImGuiTable*)ptable, column);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFixColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableFixColumnSortDirection([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn column)
		{
			fixed (ImGuiTableColumn* pcolumn = &column)
			{
				TableFixColumnSortDirectionNative(table, (ImGuiTableColumn*)pcolumn);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableFixColumnSortDirection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableFixColumnSortDirection([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn column)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				fixed (ImGuiTableColumn* pcolumn = &column)
				{
					TableFixColumnSortDirectionNative((ImGuiTable*)ptable, (ImGuiTableColumn*)pcolumn);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnWidthAuto")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float TableGetColumnWidthAutoNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, ImGuiTableColumn*, float>)vt[1256])(table, column);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, nint, float>)vt[1256])((nint)table, (nint)column);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnWidthAuto")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetColumnWidthAuto([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			float ret = TableGetColumnWidthAutoNative(table, column);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnWidthAuto")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetColumnWidthAuto([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ImGuiTableColumn* column)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				float ret = TableGetColumnWidthAutoNative((ImGuiTable*)ptable, column);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnWidthAuto")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetColumnWidthAuto([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn column)
		{
			fixed (ImGuiTableColumn* pcolumn = &column)
			{
				float ret = TableGetColumnWidthAutoNative(table, (ImGuiTableColumn*)pcolumn);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnWidthAuto")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetColumnWidthAuto([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column")] [NativeName(NativeNameType.Type, "ImGuiTableColumn*")] ref ImGuiTableColumn column)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				fixed (ImGuiTableColumn* pcolumn = &column)
				{
					float ret = TableGetColumnWidthAutoNative((ImGuiTable*)ptable, (ImGuiTableColumn*)pcolumn);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableBeginRowNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1257])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1257])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginRow([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableBeginRowNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginRow([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableBeginRowNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableEndRowNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1258])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1258])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableEndRow([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableEndRowNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndRow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableEndRow([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableEndRowNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableBeginCellNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, int, void>)vt[1259])(table, columnN);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1259])((nint)table, columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginCell([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			TableBeginCellNative(table, columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableBeginCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableBeginCell([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableBeginCellNative((ImGuiTable*)ptable, columnN);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableEndCellNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1260])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1260])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableEndCell([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableEndCellNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableEndCell")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableEndCell([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableEndCellNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetCellBgRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableGetCellBgRectNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiTable*, int, void>)vt[1261])(pOut, table, columnN);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[1261])((nint)pOut, (nint)table, columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetCellBgRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGetCellBgRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			TableGetCellBgRectNative(pOut, table, columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetCellBgRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGetCellBgRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				TableGetCellBgRectNative((ImRect*)ppOut, table, columnN);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetCellBgRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGetCellBgRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableGetCellBgRectNative(pOut, (ImGuiTable*)ptable, columnN);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetCellBgRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGetCellBgRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				fixed (ImGuiTable* ptable = &table)
				{
					TableGetCellBgRectNative((ImRect*)ppOut, (ImGuiTable*)ptable, columnN);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_TablePtr")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* TableGetColumnNameTablePtrNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, int, byte*>)vt[1262])(table, columnN);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[1262])((nint)table, columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_TablePtr")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TableGetColumnNameTablePtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			byte* ret = TableGetColumnNameTablePtrNative(table, columnN);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_TablePtr")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TableGetColumnNameTablePtrS([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			string ret = Utils.DecodeStringUTF8(TableGetColumnNameTablePtrNative(table, columnN));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_TablePtr")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* TableGetColumnNameTablePtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				byte* ret = TableGetColumnNameTablePtrNative((ImGuiTable*)ptable, columnN);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnName_TablePtr")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string TableGetColumnNameTablePtrS([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				string ret = Utils.DecodeStringUTF8(TableGetColumnNameTablePtrNative((ImGuiTable*)ptable, columnN));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnResizeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint TableGetColumnResizeIDNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, int, int, uint>)vt[1263])(table, columnN, instanceNo);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, int, uint>)vt[1263])((nint)table, columnN, instanceNo);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnResizeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint TableGetColumnResizeID([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			uint ret = TableGetColumnResizeIDNative(table, columnN, instanceNo);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetColumnResizeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint TableGetColumnResizeID([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN, [NativeName(NativeNameType.Param, "instance_no")] [NativeName(NativeNameType.Type, "int")] int instanceNo)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				uint ret = TableGetColumnResizeIDNative((ImGuiTable*)ptable, columnN, instanceNo);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetMaxColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float TableGetMaxColumnWidthNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTable*, int, float>)vt[1264])(table, columnN);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, int, float>)vt[1264])((nint)table, columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetMaxColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetMaxColumnWidth([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			float ret = TableGetMaxColumnWidthNative(table, columnN);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGetMaxColumnWidth")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float TableGetMaxColumnWidth([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				float ret = TableGetMaxColumnWidthNative((ImGuiTable*)ptable, columnN);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoSingle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetColumnWidthAutoSingleNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, int, void>)vt[1265])(table, columnN);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[1265])((nint)table, columnN);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoSingle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnWidthAutoSingle([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			TableSetColumnWidthAutoSingleNative(table, columnN);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoSingle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnWidthAutoSingle([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table, [NativeName(NativeNameType.Param, "column_n")] [NativeName(NativeNameType.Type, "int")] int columnN)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSetColumnWidthAutoSingleNative((ImGuiTable*)ptable, columnN);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSetColumnWidthAutoAllNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1266])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1266])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnWidthAutoAll([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableSetColumnWidthAutoAllNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSetColumnWidthAutoAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSetColumnWidthAutoAll([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSetColumnWidthAutoAllNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableRemove")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableRemoveNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1267])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1267])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableRemove")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableRemove([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableRemoveNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableRemove")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableRemove([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableRemoveNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TablePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableGcCompactTransientBuffersTablePtrNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1268])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1268])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TablePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGcCompactTransientBuffersTablePtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableGcCompactTransientBuffersTablePtrNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TablePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGcCompactTransientBuffersTablePtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableGcCompactTransientBuffersTablePtrNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TableTempDataPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableGcCompactTransientBuffersTableTempDataPtrNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ImGuiTableTempData* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableTempData*, void>)vt[1269])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1269])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TableTempDataPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGcCompactTransientBuffersTableTempDataPtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ImGuiTableTempData* table)
		{
			TableGcCompactTransientBuffersTableTempDataPtrNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactTransientBuffers_TableTempDataPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGcCompactTransientBuffersTableTempDataPtr([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTableTempData*")] ref ImGuiTableTempData table)
		{
			fixed (ImGuiTableTempData* ptable = &table)
			{
				TableGcCompactTransientBuffersTableTempDataPtrNative((ImGuiTableTempData*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableGcCompactSettingsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1270])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1270])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableGcCompactSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableGcCompactSettings()
		{
			TableGcCompactSettingsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableLoadSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableLoadSettingsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1271])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1271])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableLoadSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableLoadSettings([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableLoadSettingsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableLoadSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableLoadSettings([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableLoadSettingsNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSaveSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableSaveSettingsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1272])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1272])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSaveSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSaveSettings([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			TableSaveSettingsNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableSaveSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TableSaveSettings([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				TableSaveSettingsNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTableResetSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TableResetSettingsNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1273])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1273])((nint)table);
			#endif
		}
	}
}
