// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShrinkWidths")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShrinkWidthsNative([NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "ImGuiShrinkWidthItem*")] ImGuiShrinkWidthItem* items, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "width_excess")] [NativeName(NativeNameType.Type, "float")] float widthExcess)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiShrinkWidthItem*, int, float, void>)vt[1069])(items, count, widthExcess);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, float, void>)vt[1069])((nint)items, count, widthExcess);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShrinkWidths")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShrinkWidths([NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "ImGuiShrinkWidthItem*")] ImGuiShrinkWidthItem* items, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "width_excess")] [NativeName(NativeNameType.Type, "float")] float widthExcess)
		{
			ShrinkWidthsNative(items, count, widthExcess);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShrinkWidths")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShrinkWidths([NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "ImGuiShrinkWidthItem*")] ref ImGuiShrinkWidthItem items, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "width_excess")] [NativeName(NativeNameType.Type, "float")] float widthExcess)
		{
			fixed (ImGuiShrinkWidthItem* pitems = &items)
			{
				ShrinkWidthsNative((ImGuiShrinkWidthItem*)pitems, count, widthExcess);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetStyleVarInfo")]
		[return: NativeName(NativeNameType.Type, "const ImGuiDataVarInfo*")]
		internal static ImGuiDataVarInfo* GetStyleVarInfoNative([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyleVar, ImGuiDataVarInfo*>)vt[1070])(idx);
			#else
			return (ImGuiDataVarInfo*)((delegate* unmanaged[Cdecl]<ImGuiStyleVar, nint>)vt[1070])(idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetStyleVarInfo")]
		[return: NativeName(NativeNameType.Type, "const ImGuiDataVarInfo*")]
		public static ImGuiDataVarInfo* GetStyleVarInfo([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiStyleVar")] ImGuiStyleVar idx)
		{
			ImGuiDataVarInfo* ret = GetStyleVarInfoNative(idx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDisabledOverrideReenable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginDisabledOverrideReenableNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1071])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1071])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginDisabledOverrideReenable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginDisabledOverrideReenable()
		{
			BeginDisabledOverrideReenableNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndDisabledOverrideReenable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndDisabledOverrideReenableNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1072])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1072])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndDisabledOverrideReenable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndDisabledOverrideReenable()
		{
			EndDisabledOverrideReenableNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogBeginNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "ImGuiLogType")] ImGuiLogType type, [NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiLogType, int, void>)vt[1073])(type, autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiLogType, int, void>)vt[1073])(type, autoOpenDepth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogBegin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogBegin([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "ImGuiLogType")] ImGuiLogType type, [NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			LogBeginNative(type, autoOpenDepth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogToBufferNative([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[1074])(autoOpenDepth);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[1074])(autoOpenDepth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogToBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogToBuffer([NativeName(NativeNameType.Param, "auto_open_depth")] [NativeName(NativeNameType.Type, "int")] int autoOpenDepth)
		{
			LogToBufferNative(autoOpenDepth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogRenderedTextNative([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, byte*, byte*, void>)vt[1075])(refPos, text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[1075])((nint)refPos, (nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			LogRenderedTextNative(refPos, text, textEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				LogRenderedTextNative((Vector2*)prefPos, text, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				LogRenderedTextNative(refPos, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				LogRenderedTextNative(refPos, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = &text)
				{
					LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = text)
				{
					LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				LogRenderedTextNative(refPos, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				LogRenderedTextNative(refPos, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogRenderedTextNative(refPos, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					LogRenderedTextNative((Vector2*)prefPos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					LogRenderedTextNative((Vector2*)prefPos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					LogRenderedTextNative(refPos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					LogRenderedTextNative(refPos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LogRenderedTextNative(refPos, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						LogRenderedTextNative((Vector2*)prefPos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogRenderedText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogRenderedText([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 refPos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (Vector2* prefPos = &refPos)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				LogRenderedTextNative((Vector2*)prefPos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogSetNextTextDecorationNative([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] byte* prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[1076])(prefix, suffix);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1076])((nint)prefix, (nint)suffix);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] byte* prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			LogSetNextTextDecorationNative(prefix, suffix);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] ref byte prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			fixed (byte* pprefix = &prefix)
			{
				LogSetNextTextDecorationNative((byte*)pprefix, suffix);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			fixed (byte* pprefix = prefix)
			{
				LogSetNextTextDecorationNative((byte*)pprefix, suffix);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] string prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] byte* suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogSetNextTextDecorationNative(pStr0, suffix);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] byte* prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] ref byte suffix)
		{
			fixed (byte* psuffix = &suffix)
			{
				LogSetNextTextDecorationNative(prefix, (byte*)psuffix);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] byte* prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> suffix)
		{
			fixed (byte* psuffix = suffix)
			{
				LogSetNextTextDecorationNative(prefix, (byte*)psuffix);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] byte* prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (suffix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(suffix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogSetNextTextDecorationNative(prefix, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] ref byte prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] ref byte suffix)
		{
			fixed (byte* pprefix = &prefix)
			{
				fixed (byte* psuffix = &suffix)
				{
					LogSetNextTextDecorationNative((byte*)pprefix, (byte*)psuffix);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> suffix)
		{
			fixed (byte* pprefix = prefix)
			{
				fixed (byte* psuffix = suffix)
				{
					LogSetNextTextDecorationNative((byte*)pprefix, (byte*)psuffix);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogSetNextTextDecoration")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogSetNextTextDecoration([NativeName(NativeNameType.Param, "prefix")] [NativeName(NativeNameType.Type, "const char*")] string prefix, [NativeName(NativeNameType.Param, "suffix")] [NativeName(NativeNameType.Type, "const char*")] string suffix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (suffix != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(suffix);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(suffix, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LogSetNextTextDecorationNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginChildEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginChildExNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "child_flags")] [NativeName(NativeNameType.Type, "ImGuiChildFlags")] ImGuiChildFlags childFlags, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[1077])(name, id, sizeArg, childFlags, windowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, uint, Vector2, ImGuiChildFlags, ImGuiWindowFlags, byte>)vt[1077])((nint)name, id, sizeArg, childFlags, windowFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginChildEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginChildEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "child_flags")] [NativeName(NativeNameType.Type, "ImGuiChildFlags")] ImGuiChildFlags childFlags, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginChildExNative(name, id, sizeArg, childFlags, windowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginChildEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginChildEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "child_flags")] [NativeName(NativeNameType.Type, "ImGuiChildFlags")] ImGuiChildFlags childFlags, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginChildExNative((byte*)pname, id, sizeArg, childFlags, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginChildEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginChildEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "child_flags")] [NativeName(NativeNameType.Type, "ImGuiChildFlags")] ImGuiChildFlags childFlags, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = name)
			{
				byte ret = BeginChildExNative((byte*)pname, id, sizeArg, childFlags, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginChildEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginChildEx([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "child_flags")] [NativeName(NativeNameType.Type, "ImGuiChildFlags")] ImGuiChildFlags childFlags, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginChildExNative(pStr0, id, sizeArg, childFlags, windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginPopupExNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "extra_window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags extraWindowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiWindowFlags, byte>)vt[1078])(id, extraWindowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImGuiWindowFlags, byte>)vt[1078])(id, extraWindowFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginPopupEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPopupEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "extra_window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags extraWindowFlags)
		{
			byte ret = BeginPopupExNative(id, extraWindowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igOpenPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void OpenPopupExNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiPopupFlags, void>)vt[1079])(id, popupFlags);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiPopupFlags, void>)vt[1079])(id, popupFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igOpenPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void OpenPopupEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			OpenPopupExNative(id, popupFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupToLevel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClosePopupToLevelNative([NativeName(NativeNameType.Param, "remaining")] [NativeName(NativeNameType.Type, "int")] int remaining, [NativeName(NativeNameType.Param, "restore_focus_to_window_under_popup")] [NativeName(NativeNameType.Type, "bool")] byte restoreFocusToWindowUnderPopup)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[1080])(remaining, restoreFocusToWindowUnderPopup);
			#else
			((delegate* unmanaged[Cdecl]<int, byte, void>)vt[1080])(remaining, restoreFocusToWindowUnderPopup);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupToLevel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClosePopupToLevel([NativeName(NativeNameType.Param, "remaining")] [NativeName(NativeNameType.Type, "int")] int remaining, [NativeName(NativeNameType.Param, "restore_focus_to_window_under_popup")] [NativeName(NativeNameType.Type, "bool")] bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupToLevelNative(remaining, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupsOverWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClosePopupsOverWindowNative([NativeName(NativeNameType.Param, "ref_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* refWindow, [NativeName(NativeNameType.Param, "restore_focus_to_window_under_popup")] [NativeName(NativeNameType.Type, "bool")] byte restoreFocusToWindowUnderPopup)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte, void>)vt[1081])(refWindow, restoreFocusToWindowUnderPopup);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[1081])((nint)refWindow, restoreFocusToWindowUnderPopup);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupsOverWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClosePopupsOverWindow([NativeName(NativeNameType.Param, "ref_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* refWindow, [NativeName(NativeNameType.Param, "restore_focus_to_window_under_popup")] [NativeName(NativeNameType.Type, "bool")] bool restoreFocusToWindowUnderPopup)
		{
			ClosePopupsOverWindowNative(refWindow, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupsOverWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClosePopupsOverWindow([NativeName(NativeNameType.Param, "ref_window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow refWindow, [NativeName(NativeNameType.Param, "restore_focus_to_window_under_popup")] [NativeName(NativeNameType.Type, "bool")] bool restoreFocusToWindowUnderPopup)
		{
			fixed (ImGuiWindow* prefWindow = &refWindow)
			{
				ClosePopupsOverWindowNative((ImGuiWindow*)prefWindow, restoreFocusToWindowUnderPopup ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupsExceptModals")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClosePopupsExceptModalsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1082])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1082])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igClosePopupsExceptModals")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClosePopupsExceptModals()
		{
			ClosePopupsExceptModalsNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPopupOpenIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiPopupFlags, byte>)vt[1083])(id, popupFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImGuiPopupFlags, byte>)vt[1083])(id, popupFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsPopupOpen_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPopupOpenID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "popup_flags")] [NativeName(NativeNameType.Type, "ImGuiPopupFlags")] ImGuiPopupFlags popupFlags)
		{
			byte ret = IsPopupOpenIDNative(id, popupFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetPopupAllowedExtentRectNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, void>)vt[1084])(pOut, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1084])((nint)pOut, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			ImRect ret;
			GetPopupAllowedExtentRectNative(&ret, window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			GetPopupAllowedExtentRectNative(pOut, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				GetPopupAllowedExtentRectNative((ImRect*)ppOut, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				GetPopupAllowedExtentRectNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GetPopupAllowedExtentRectNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPopupAllowedExtentRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetPopupAllowedExtentRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					GetPopupAllowedExtentRectNative((ImRect*)ppOut, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTopMostPopupModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* GetTopMostPopupModalNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[1085])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[1085])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTopMostPopupModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* GetTopMostPopupModal()
		{
			ImGuiWindow* ret = GetTopMostPopupModalNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTopMostAndVisiblePopupModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* GetTopMostAndVisiblePopupModalNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*>)vt[1086])();
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint>)vt[1086])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTopMostAndVisiblePopupModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* GetTopMostAndVisiblePopupModal()
		{
			ImGuiWindow* ret = GetTopMostAndVisiblePopupModalNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBlockingModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		internal static ImGuiWindow* FindBlockingModalNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiWindow*>)vt[1087])(window);
			#else
			return (ImGuiWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[1087])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBlockingModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindBlockingModal([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			ImGuiWindow* ret = FindBlockingModalNative(window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBlockingModal")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindow*")]
		public static ImGuiWindow* FindBlockingModal([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImGuiWindow* ret = FindBlockingModalNative((ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FindBestWindowPosForPopupNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiWindow*, void>)vt[1088])(pOut, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1088])((nint)pOut, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			Vector2 ret;
			FindBestWindowPosForPopupNative(&ret, window);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			FindBestWindowPosForPopupNative(pOut, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				FindBestWindowPosForPopupNative((Vector2*)ppOut, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				Vector2 ret;
				FindBestWindowPosForPopupNative(&ret, (ImGuiWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				FindBestWindowPosForPopupNative(pOut, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopup([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					FindBestWindowPosForPopupNative((Vector2*)ppOut, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FindBestWindowPosForPopupExNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ImGuiDir* lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2, Vector2, ImGuiDir*, ImRect, ImRect, ImGuiPopupPositionPolicy, void>)vt[1089])(pOut, refPos, size, lastDir, rOuter, rAvoid, policy);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, nint, ImRect, ImRect, ImGuiPopupPositionPolicy, void>)vt[1089])((nint)pOut, refPos, size, (nint)lastDir, rOuter, rAvoid, policy);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ImGuiDir* lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			Vector2 ret;
			FindBestWindowPosForPopupExNative(&ret, refPos, size, lastDir, rOuter, rAvoid, policy);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ImGuiDir* lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			FindBestWindowPosForPopupExNative(pOut, refPos, size, lastDir, rOuter, rAvoid, policy);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ImGuiDir* lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				FindBestWindowPosForPopupExNative((Vector2*)ppOut, refPos, size, lastDir, rOuter, rAvoid, policy);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ref ImGuiDir lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			fixed (ImGuiDir* plastDir = &lastDir)
			{
				Vector2 ret;
				FindBestWindowPosForPopupExNative(&ret, refPos, size, (ImGuiDir*)plastDir, rOuter, rAvoid, policy);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ref ImGuiDir lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			fixed (ImGuiDir* plastDir = &lastDir)
			{
				FindBestWindowPosForPopupExNative(pOut, refPos, size, (ImGuiDir*)plastDir, rOuter, rAvoid, policy);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindBestWindowPosForPopupEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FindBestWindowPosForPopupEx([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "ref_pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 refPos, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "last_dir")] [NativeName(NativeNameType.Type, "ImGuiDir*")] ref ImGuiDir lastDir, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "r_avoid")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rAvoid, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "ImGuiPopupPositionPolicy")] ImGuiPopupPositionPolicy policy)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImGuiDir* plastDir = &lastDir)
				{
					FindBestWindowPosForPopupExNative((Vector2*)ppOut, refPos, size, (ImGuiDir*)plastDir, rOuter, rAvoid, policy);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTooltipEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTooltipExNative([NativeName(NativeNameType.Param, "tooltip_flags")] [NativeName(NativeNameType.Type, "ImGuiTooltipFlags")] ImGuiTooltipFlags tooltipFlags, [NativeName(NativeNameType.Param, "extra_window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags extraWindowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTooltipFlags, ImGuiWindowFlags, byte>)vt[1090])(tooltipFlags, extraWindowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiTooltipFlags, ImGuiWindowFlags, byte>)vt[1090])(tooltipFlags, extraWindowFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTooltipEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTooltipEx([NativeName(NativeNameType.Param, "tooltip_flags")] [NativeName(NativeNameType.Type, "ImGuiTooltipFlags")] ImGuiTooltipFlags tooltipFlags, [NativeName(NativeNameType.Param, "extra_window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags extraWindowFlags)
		{
			byte ret = BeginTooltipExNative(tooltipFlags, extraWindowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTooltipHidden")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginTooltipHiddenNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1091])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[1091])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginTooltipHidden")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginTooltipHidden()
		{
			byte ret = BeginTooltipHiddenNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginViewportSideBarNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiViewport*, ImGuiDir, float, ImGuiWindowFlags, byte>)vt[1092])(name, viewport, dir, size, windowFlags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiDir, float, ImGuiWindowFlags, byte>)vt[1092])((nint)name, (nint)viewport, dir, size, windowFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			byte ret = BeginViewportSideBarNative(name, viewport, dir, size, windowFlags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = &name)
			{
				byte ret = BeginViewportSideBarNative((byte*)pname, viewport, dir, size, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = name)
			{
				byte ret = BeginViewportSideBarNative((byte*)pname, viewport, dir, size, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ImGuiViewport* viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginViewportSideBarNative(pStr0, viewport, dir, size, windowFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] byte* name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				byte ret = BeginViewportSideBarNative(name, (ImGuiViewport*)pviewport, dir, size, windowFlags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ref byte name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = &name)
			{
				fixed (ImGuiViewport* pviewport = &viewport)
				{
					byte ret = BeginViewportSideBarNative((byte*)pname, (ImGuiViewport*)pviewport, dir, size, windowFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			fixed (byte* pname = name)
			{
				fixed (ImGuiViewport* pviewport = &viewport)
				{
					byte ret = BeginViewportSideBarNative((byte*)pname, (ImGuiViewport*)pviewport, dir, size, windowFlags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginViewportSideBar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginViewportSideBar([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const char*")] string name, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewport*")] ref ImGuiViewport viewport, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "float")] float size, [NativeName(NativeNameType.Param, "window_flags")] [NativeName(NativeNameType.Type, "ImGuiWindowFlags")] ImGuiWindowFlags windowFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImGuiViewport* pviewport = &viewport)
			{
				byte ret = BeginViewportSideBarNative(pStr0, (ImGuiViewport*)pviewport, dir, size, windowFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginMenuExNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte, byte>)vt[1093])(label, icon, enabled);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte, byte>)vt[1093])((nint)label, (nint)icon, enabled);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte ret = BeginMenuExNative(label, icon, enabled ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginMenuExNative((byte*)plabel, icon, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginMenuExNative((byte*)plabel, icon, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginMenuExNative(pStr0, icon, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				byte ret = BeginMenuExNative(label, (byte*)picon, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = icon)
			{
				byte ret = BeginMenuExNative(label, (byte*)picon, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginMenuExNative(label, pStr0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* picon = &icon)
				{
					byte ret = BeginMenuExNative((byte*)plabel, (byte*)picon, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* picon = icon)
				{
					byte ret = BeginMenuExNative((byte*)plabel, (byte*)picon, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginMenuEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginMenuEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (icon != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(icon);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(icon, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = BeginMenuExNative(pStr0, pStr1, enabled ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte MenuItemExNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] byte selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*, byte, byte, byte>)vt[1094])(label, icon, shortcut, selected, enabled);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte, byte, byte>)vt[1094])((nint)label, (nint)icon, (nint)shortcut, selected, enabled);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte ret = MenuItemExNative(label, icon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = MenuItemExNative((byte*)plabel, icon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				byte ret = MenuItemExNative((byte*)plabel, icon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = MenuItemExNative(pStr0, icon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				byte ret = MenuItemExNative(label, (byte*)picon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = icon)
			{
				byte ret = MenuItemExNative(label, (byte*)picon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = MenuItemExNative(label, pStr0, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* picon = &icon)
				{
					byte ret = MenuItemExNative((byte*)plabel, (byte*)picon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* picon = icon)
				{
					byte ret = MenuItemExNative((byte*)plabel, (byte*)picon, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] byte* shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (icon != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(icon);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(icon, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = MenuItemExNative(pStr0, pStr1, shortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ref byte shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* pshortcut = &shortcut)
			{
				byte ret = MenuItemExNative(label, icon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* pshortcut = shortcut)
			{
				byte ret = MenuItemExNative(label, icon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] string shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shortcut != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shortcut, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = MenuItemExNative(label, icon, pStr0, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ref byte shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pshortcut = &shortcut)
				{
					byte ret = MenuItemExNative((byte*)plabel, icon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pshortcut = shortcut)
				{
					byte ret = MenuItemExNative((byte*)plabel, icon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] byte* icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] string shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (shortcut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(shortcut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = MenuItemExNative(pStr0, icon, pStr1, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ref byte shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = &icon)
			{
				fixed (byte* pshortcut = &shortcut)
				{
					byte ret = MenuItemExNative(label, (byte*)picon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* picon = icon)
			{
				fixed (byte* pshortcut = shortcut)
				{
					byte ret = MenuItemExNative(label, (byte*)picon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] string shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (icon != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(icon);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(icon, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (shortcut != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(shortcut, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = MenuItemExNative(label, pStr0, pStr1, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ref byte icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ref byte shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* picon = &icon)
				{
					fixed (byte* pshortcut = &shortcut)
					{
						byte ret = MenuItemExNative((byte*)plabel, (byte*)picon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* picon = icon)
				{
					fixed (byte* pshortcut = shortcut)
					{
						byte ret = MenuItemExNative((byte*)plabel, (byte*)picon, (byte*)pshortcut, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMenuItemEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool MenuItemEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "const char*")] string icon, [NativeName(NativeNameType.Param, "shortcut")] [NativeName(NativeNameType.Type, "const char*")] string shortcut, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (icon != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(icon);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(icon, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (shortcut != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(shortcut);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(shortcut, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte ret = MenuItemExNative(pStr0, pStr1, pStr2, selected ? (byte)1 : (byte)0, enabled ? (byte)1 : (byte)0);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginComboPopup")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginComboPopupNative([NativeName(NativeNameType.Param, "popup_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint popupId, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImRect, ImGuiComboFlags, byte>)vt[1095])(popupId, bb, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImRect, ImGuiComboFlags, byte>)vt[1095])(popupId, bb, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginComboPopup")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginComboPopup([NativeName(NativeNameType.Param, "popup_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint popupId, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			byte ret = BeginComboPopupNative(popupId, bb, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginComboPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginComboPreviewNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1096])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[1096])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginComboPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginComboPreview()
		{
			byte ret = BeginComboPreviewNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndComboPreview")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndComboPreviewNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1097])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1097])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndComboPreview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndComboPreview()
		{
			EndComboPreviewNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavInitWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavInitWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "force_reinit")] [NativeName(NativeNameType.Type, "bool")] byte forceReinit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte, void>)vt[1098])(window, forceReinit);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[1098])((nint)window, forceReinit);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavInitWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavInitWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "force_reinit")] [NativeName(NativeNameType.Type, "bool")] bool forceReinit)
		{
			NavInitWindowNative(window, forceReinit ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavInitWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavInitWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "force_reinit")] [NativeName(NativeNameType.Type, "bool")] bool forceReinit)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				NavInitWindowNative((ImGuiWindow*)pwindow, forceReinit ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavInitRequestApplyResult")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavInitRequestApplyResultNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1099])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1099])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavInitRequestApplyResult")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavInitRequestApplyResult()
		{
			NavInitRequestApplyResultNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestButNoResultYet")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte NavMoveRequestButNoResultYetNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)vt[1100])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)vt[1100])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestButNoResultYet")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool NavMoveRequestButNoResultYet()
		{
			byte ret = NavMoveRequestButNoResultYetNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestSubmit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestSubmitNative([NativeName(NativeNameType.Param, "move_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir moveDir, [NativeName(NativeNameType.Param, "clip_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir clipDir, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags, [NativeName(NativeNameType.Param, "scroll_flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags scrollFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags, void>)vt[1101])(moveDir, clipDir, moveFlags, scrollFlags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags, void>)vt[1101])(moveDir, clipDir, moveFlags, scrollFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestSubmit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestSubmit([NativeName(NativeNameType.Param, "move_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir moveDir, [NativeName(NativeNameType.Param, "clip_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir clipDir, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags, [NativeName(NativeNameType.Param, "scroll_flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags scrollFlags)
		{
			NavMoveRequestSubmitNative(moveDir, clipDir, moveFlags, scrollFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestForwardNative([NativeName(NativeNameType.Param, "move_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir moveDir, [NativeName(NativeNameType.Param, "clip_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir clipDir, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags, [NativeName(NativeNameType.Param, "scroll_flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags scrollFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags, void>)vt[1102])(moveDir, clipDir, moveFlags, scrollFlags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags, void>)vt[1102])(moveDir, clipDir, moveFlags, scrollFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestForward")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestForward([NativeName(NativeNameType.Param, "move_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir moveDir, [NativeName(NativeNameType.Param, "clip_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir clipDir, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags, [NativeName(NativeNameType.Param, "scroll_flags")] [NativeName(NativeNameType.Type, "ImGuiScrollFlags")] ImGuiScrollFlags scrollFlags)
		{
			NavMoveRequestForwardNative(moveDir, clipDir, moveFlags, scrollFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithLastItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestResolveWithLastItemNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ImGuiNavItemData* result)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNavItemData*, void>)vt[1103])(result);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1103])((nint)result);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithLastItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithLastItem([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ImGuiNavItemData* result)
		{
			NavMoveRequestResolveWithLastItemNative(result);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithLastItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithLastItem([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ref ImGuiNavItemData result)
		{
			fixed (ImGuiNavItemData* presult = &result)
			{
				NavMoveRequestResolveWithLastItemNative((ImGuiNavItemData*)presult);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithPastTreeNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestResolveWithPastTreeNodeNative([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ImGuiNavItemData* result, [NativeName(NativeNameType.Param, "tree_node_data")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeStackData*")] ImGuiTreeNodeStackData* treeNodeData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiNavItemData*, ImGuiTreeNodeStackData*, void>)vt[1104])(result, treeNodeData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1104])((nint)result, (nint)treeNodeData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithPastTreeNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithPastTreeNode([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ImGuiNavItemData* result, [NativeName(NativeNameType.Param, "tree_node_data")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeStackData*")] ImGuiTreeNodeStackData* treeNodeData)
		{
			NavMoveRequestResolveWithPastTreeNodeNative(result, treeNodeData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithPastTreeNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithPastTreeNode([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ref ImGuiNavItemData result, [NativeName(NativeNameType.Param, "tree_node_data")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeStackData*")] ImGuiTreeNodeStackData* treeNodeData)
		{
			fixed (ImGuiNavItemData* presult = &result)
			{
				NavMoveRequestResolveWithPastTreeNodeNative((ImGuiNavItemData*)presult, treeNodeData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithPastTreeNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithPastTreeNode([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ImGuiNavItemData* result, [NativeName(NativeNameType.Param, "tree_node_data")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeStackData*")] ref ImGuiTreeNodeStackData treeNodeData)
		{
			fixed (ImGuiTreeNodeStackData* ptreeNodeData = &treeNodeData)
			{
				NavMoveRequestResolveWithPastTreeNodeNative(result, (ImGuiTreeNodeStackData*)ptreeNodeData);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestResolveWithPastTreeNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestResolveWithPastTreeNode([NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "ImGuiNavItemData*")] ref ImGuiNavItemData result, [NativeName(NativeNameType.Param, "tree_node_data")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeStackData*")] ref ImGuiTreeNodeStackData treeNodeData)
		{
			fixed (ImGuiNavItemData* presult = &result)
			{
				fixed (ImGuiTreeNodeStackData* ptreeNodeData = &treeNodeData)
				{
					NavMoveRequestResolveWithPastTreeNodeNative((ImGuiNavItemData*)presult, (ImGuiTreeNodeStackData*)ptreeNodeData);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestCancel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestCancelNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1105])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1105])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestCancel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestCancel()
		{
			NavMoveRequestCancelNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestApplyResult")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestApplyResultNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1106])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1106])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestApplyResult")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestApplyResult()
		{
			NavMoveRequestApplyResultNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestTryWrapping")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavMoveRequestTryWrappingNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiNavMoveFlags, void>)vt[1107])(window, moveFlags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiNavMoveFlags, void>)vt[1107])((nint)window, moveFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestTryWrapping")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestTryWrapping([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags)
		{
			NavMoveRequestTryWrappingNative(window, moveFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavMoveRequestTryWrapping")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavMoveRequestTryWrapping([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "move_flags")] [NativeName(NativeNameType.Type, "ImGuiNavMoveFlags")] ImGuiNavMoveFlags moveFlags)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				NavMoveRequestTryWrappingNative((ImGuiWindow*)pwindow, moveFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavHighlightActivated")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavHighlightActivatedNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1108])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1108])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavHighlightActivated")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavHighlightActivated([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			NavHighlightActivatedNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavClearPreferredPosForAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavClearPreferredPosForAxisNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiAxis, void>)vt[1109])(axis);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiAxis, void>)vt[1109])(axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavClearPreferredPosForAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavClearPreferredPosForAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			NavClearPreferredPosForAxisNative(axis);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavRestoreHighlightAfterMove")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavRestoreHighlightAfterMoveNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1110])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1110])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavRestoreHighlightAfterMove")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavRestoreHighlightAfterMove()
		{
			NavRestoreHighlightAfterMoveNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavUpdateCurrentWindowIsScrollPushableX")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void NavUpdateCurrentWindowIsScrollPushableXNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1111])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1111])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igNavUpdateCurrentWindowIsScrollPushableX")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NavUpdateCurrentWindowIsScrollPushableX()
		{
			NavUpdateCurrentWindowIsScrollPushableXNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNavWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1112])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1112])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNavWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			SetNavWindowNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNavWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				SetNavWindowNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNavIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "nav_layer")] [NativeName(NativeNameType.Type, "ImGuiNavLayer")] ImGuiNavLayer navLayer, [NativeName(NativeNameType.Param, "focus_scope_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint focusScopeId, [NativeName(NativeNameType.Param, "rect_rel")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rectRel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiNavLayer, uint, ImRect, void>)vt[1113])(id, navLayer, focusScopeId, rectRel);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiNavLayer, uint, ImRect, void>)vt[1113])(id, navLayer, focusScopeId, rectRel);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNavID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "nav_layer")] [NativeName(NativeNameType.Type, "ImGuiNavLayer")] ImGuiNavLayer navLayer, [NativeName(NativeNameType.Param, "focus_scope_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint focusScopeId, [NativeName(NativeNameType.Param, "rect_rel")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rectRel)
		{
			SetNavIDNative(id, navLayer, focusScopeId, rectRel);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNavFocusScopeNative([NativeName(NativeNameType.Param, "focus_scope_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint focusScopeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1114])(focusScopeId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1114])(focusScopeId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNavFocusScope")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNavFocusScope([NativeName(NativeNameType.Param, "focus_scope_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint focusScopeId)
		{
			SetNavFocusScopeNative(focusScopeId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FocusItemNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1115])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1115])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFocusItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FocusItem()
		{
			FocusItemNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igActivateItemByID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ActivateItemByIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1116])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1116])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igActivateItemByID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ActivateItemByID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ActivateItemByIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsNamedKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsNamedKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1117])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1117])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsNamedKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsNamedKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsNamedKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsNamedKeyOrMod")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsNamedKeyOrModNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1118])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1118])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsNamedKeyOrMod")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsNamedKeyOrMod([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsNamedKeyOrModNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsLegacyKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsLegacyKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1119])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1119])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsLegacyKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsLegacyKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsLegacyKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyboardKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsKeyboardKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1120])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1120])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyboardKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsKeyboardKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsKeyboardKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsGamepadKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsGamepadKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1121])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1121])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsGamepadKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsGamepadKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsGamepadKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1122])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1122])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsMouseKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsAliasKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsAliasKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1123])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1123])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsAliasKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsAliasKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsAliasKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsModKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsModKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1124])(key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, byte>)vt[1124])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsModKey")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsModKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			byte ret = IsModKeyNative(key);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFixupKeyChord")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		internal static int FixupKeyChordNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[1125])(keyChord);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[1125])(keyChord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFixupKeyChord")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyChord")]
		public static int FixupKeyChord([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord)
		{
			int ret = FixupKeyChordNative(keyChord);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igConvertSingleModFlagToKey")]
		[return: NativeName(NativeNameType.Type, "ImGuiKey")]
		internal static ImGuiKey ConvertSingleModFlagToKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiKey>)vt[1126])(key);
			#else
			return (ImGuiKey)((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiKey>)vt[1126])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igConvertSingleModFlagToKey")]
		[return: NativeName(NativeNameType.Type, "ImGuiKey")]
		public static ImGuiKey ConvertSingleModFlagToKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			ImGuiKey ret = ConvertSingleModFlagToKeyNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyData_ContextPtr")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyData*")]
		internal static ImGuiKeyData* GetKeyDataContextPtrNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiKey, ImGuiKeyData*>)vt[1127])(ctx, key);
			#else
			return (ImGuiKeyData*)((delegate* unmanaged[Cdecl]<nint, ImGuiKey, nint>)vt[1127])((nint)ctx, key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyData_ContextPtr")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyData*")]
		public static ImGuiKeyData* GetKeyDataContextPtr([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			ImGuiKeyData* ret = GetKeyDataContextPtrNative(ctx, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyData_ContextPtr")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyData*")]
		public static ImGuiKeyData* GetKeyDataContextPtr([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiKeyData* ret = GetKeyDataContextPtrNative((ImGuiContext*)pctx, key);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyData_Key")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyData*")]
		internal static ImGuiKeyData* GetKeyDataKeyNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiKeyData*>)vt[1128])(key);
			#else
			return (ImGuiKeyData*)((delegate* unmanaged[Cdecl]<ImGuiKey, nint>)vt[1128])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyData_Key")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyData*")]
		public static ImGuiKeyData* GetKeyDataKey([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			ImGuiKeyData* ret = GetKeyDataKeyNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMouseButtonToKey")]
		[return: NativeName(NativeNameType.Type, "ImGuiKey")]
		internal static ImGuiKey MouseButtonToKeyNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, ImGuiKey>)vt[1129])(button);
			#else
			return (ImGuiKey)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, ImGuiKey>)vt[1129])(button);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMouseButtonToKey")]
		[return: NativeName(NativeNameType.Type, "ImGuiKey")]
		public static ImGuiKey MouseButtonToKey([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button)
		{
			ImGuiKey ret = MouseButtonToKeyNative(button);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDragPastThreshold")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseDragPastThresholdNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "lock_threshold")] [NativeName(NativeNameType.Type, "float")] float lockThreshold)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, float, byte>)vt[1130])(button, lockThreshold);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, float, byte>)vt[1130])(button, lockThreshold);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDragPastThreshold")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseDragPastThreshold([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "lock_threshold")] [NativeName(NativeNameType.Type, "float")] float lockThreshold)
		{
			byte ret = IsMouseDragPastThresholdNative(button, lockThreshold);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyMagnitude2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetKeyMagnitude2DNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "key_left")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyLeft, [NativeName(NativeNameType.Param, "key_right")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyRight, [NativeName(NativeNameType.Param, "key_up")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyUp, [NativeName(NativeNameType.Param, "key_down")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyDown)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImGuiKey, ImGuiKey, ImGuiKey, ImGuiKey, void>)vt[1131])(pOut, keyLeft, keyRight, keyUp, keyDown);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, ImGuiKey, ImGuiKey, ImGuiKey, void>)vt[1131])((nint)pOut, keyLeft, keyRight, keyUp, keyDown);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyMagnitude2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector2 GetKeyMagnitude2D([NativeName(NativeNameType.Param, "key_left")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyLeft, [NativeName(NativeNameType.Param, "key_right")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyRight, [NativeName(NativeNameType.Param, "key_up")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyUp, [NativeName(NativeNameType.Param, "key_down")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyDown)
		{
			Vector2 ret;
			GetKeyMagnitude2DNative(&ret, keyLeft, keyRight, keyUp, keyDown);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyMagnitude2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetKeyMagnitude2D([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "key_left")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyLeft, [NativeName(NativeNameType.Param, "key_right")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyRight, [NativeName(NativeNameType.Param, "key_up")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyUp, [NativeName(NativeNameType.Param, "key_down")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyDown)
		{
			GetKeyMagnitude2DNative(pOut, keyLeft, keyRight, keyUp, keyDown);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyMagnitude2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetKeyMagnitude2D([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "key_left")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyLeft, [NativeName(NativeNameType.Param, "key_right")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyRight, [NativeName(NativeNameType.Param, "key_up")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyUp, [NativeName(NativeNameType.Param, "key_down")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey keyDown)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				GetKeyMagnitude2DNative((Vector2*)ppOut, keyLeft, keyRight, keyUp, keyDown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetNavTweakPressedAmount")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetNavTweakPressedAmountNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiAxis, float>)vt[1132])(axis);
			#else
			return (float)((delegate* unmanaged[Cdecl]<ImGuiAxis, float>)vt[1132])(axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetNavTweakPressedAmount")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetNavTweakPressedAmount([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			float ret = GetNavTweakPressedAmountNative(axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcTypematicRepeatAmount")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int CalcTypematicRepeatAmountNative([NativeName(NativeNameType.Param, "t0")] [NativeName(NativeNameType.Type, "float")] float t0, [NativeName(NativeNameType.Param, "t1")] [NativeName(NativeNameType.Type, "float")] float t1, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float")] float repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float")] float repeatRate)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, int>)vt[1133])(t0, t1, repeatDelay, repeatRate);
			#else
			return (int)((delegate* unmanaged[Cdecl]<float, float, float, float, int>)vt[1133])(t0, t1, repeatDelay, repeatRate);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcTypematicRepeatAmount")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int CalcTypematicRepeatAmount([NativeName(NativeNameType.Param, "t0")] [NativeName(NativeNameType.Type, "float")] float t0, [NativeName(NativeNameType.Param, "t1")] [NativeName(NativeNameType.Type, "float")] float t1, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float")] float repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float")] float repeatRate)
		{
			int ret = CalcTypematicRepeatAmountNative(t0, t1, repeatDelay, repeatRate);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypematicRepeatRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetTypematicRepeatRateNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float*")] float* repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float*")] float* repeatRate)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputFlags, float*, float*, void>)vt[1134])(flags, repeatDelay, repeatRate);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiInputFlags, nint, nint, void>)vt[1134])(flags, (nint)repeatDelay, (nint)repeatRate);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypematicRepeatRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTypematicRepeatRate([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float*")] float* repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float*")] float* repeatRate)
		{
			GetTypematicRepeatRateNative(flags, repeatDelay, repeatRate);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypematicRepeatRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTypematicRepeatRate([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float*")] ref float repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float*")] float* repeatRate)
		{
			fixed (float* prepeatDelay = &repeatDelay)
			{
				GetTypematicRepeatRateNative(flags, (float*)prepeatDelay, repeatRate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypematicRepeatRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTypematicRepeatRate([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float*")] float* repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float*")] ref float repeatRate)
		{
			fixed (float* prepeatRate = &repeatRate)
			{
				GetTypematicRepeatRateNative(flags, repeatDelay, (float*)prepeatRate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTypematicRepeatRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTypematicRepeatRate([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "repeat_delay")] [NativeName(NativeNameType.Type, "float*")] ref float repeatDelay, [NativeName(NativeNameType.Param, "repeat_rate")] [NativeName(NativeNameType.Type, "float*")] ref float repeatRate)
		{
			fixed (float* prepeatDelay = &repeatDelay)
			{
				fixed (float* prepeatRate = &repeatRate)
				{
					GetTypematicRepeatRateNative(flags, (float*)prepeatDelay, (float*)prepeatRate);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTeleportMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TeleportMousePosNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[1135])(pos);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[1135])(pos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTeleportMousePos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TeleportMousePos([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			TeleportMousePosNative(pos);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetActiveIdUsingAllKeyboardKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetActiveIdUsingAllKeyboardKeysNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1136])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1136])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetActiveIdUsingAllKeyboardKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetActiveIdUsingAllKeyboardKeys()
		{
			SetActiveIdUsingAllKeyboardKeysNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsActiveIdUsingNavDir")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsActiveIdUsingNavDirNative([NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDir, byte>)vt[1137])(dir);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiDir, byte>)vt[1137])(dir);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsActiveIdUsingNavDir")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsActiveIdUsingNavDir([NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			byte ret = IsActiveIdUsingNavDirNative(dir);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyOwner")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetKeyOwnerNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, uint>)vt[1138])(key);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<ImGuiKey, uint>)vt[1138])(key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyOwner")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetKeyOwner([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			uint ret = GetKeyOwnerNative(key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetKeyOwner")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetKeyOwnerNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKey, uint, ImGuiInputFlags, void>)vt[1139])(key, ownerId, flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiKey, uint, ImGuiInputFlags, void>)vt[1139])(key, ownerId, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetKeyOwner")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyOwner([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			SetKeyOwnerNative(key, ownerId, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetKeyOwnersForKeyChord")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetKeyOwnersForKeyChordNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, ImGuiInputFlags, void>)vt[1140])(key, ownerId, flags);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, ImGuiInputFlags, void>)vt[1140])(key, ownerId, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetKeyOwnersForKeyChord")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyOwnersForKeyChord([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			SetKeyOwnersForKeyChordNative(key, ownerId, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetItemKeyOwner_InputFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetItemKeyOwnerInputFlagsNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiInputFlags, void>)vt[1141])(key, flags);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiInputFlags, void>)vt[1141])(key, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetItemKeyOwner_InputFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetItemKeyOwnerInputFlags([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags)
		{
			SetItemKeyOwnerInputFlagsNative(key, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTestKeyOwner")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TestKeyOwnerNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1142])(key, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1142])(key, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTestKeyOwner")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TestKeyOwner([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = TestKeyOwnerNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyOwnerData")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyOwnerData*")]
		internal static ImGuiKeyOwnerData* GetKeyOwnerDataNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiKey, ImGuiKeyOwnerData*>)vt[1143])(ctx, key);
			#else
			return (ImGuiKeyOwnerData*)((delegate* unmanaged[Cdecl]<nint, ImGuiKey, nint>)vt[1143])((nint)ctx, key);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyOwnerData")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyOwnerData*")]
		public static ImGuiKeyOwnerData* GetKeyOwnerData([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			ImGuiKeyOwnerData* ret = GetKeyOwnerDataNative(ctx, key);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetKeyOwnerData")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyOwnerData*")]
		public static ImGuiKeyOwnerData* GetKeyOwnerData([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				ImGuiKeyOwnerData* ret = GetKeyOwnerDataNative((ImGuiContext*)pctx, key);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyDown_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsKeyDownIDNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1144])(key, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1144])(key, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyDown_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsKeyDownID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsKeyDownIDNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyPressed_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsKeyPressedInputFlagsNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiInputFlags, uint, byte>)vt[1145])(key, flags, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, ImGuiInputFlags, uint, byte>)vt[1145])(key, flags, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyPressed_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsKeyPressedInputFlags([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsKeyPressedInputFlagsNative(key, flags, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyReleased_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsKeyReleasedIDNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1146])(key, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiKey, uint, byte>)vt[1146])(key, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyReleased_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsKeyReleasedID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsKeyReleasedIDNative(key, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyChordPressed_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsKeyChordPressedInputFlagsNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1147])(keyChord, flags, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1147])(keyChord, flags, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsKeyChordPressed_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsKeyChordPressedInputFlags([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsKeyChordPressedInputFlagsNative(keyChord, flags, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDown_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseDownIDNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1148])(button, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1148])(button, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDown_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseDownID([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsMouseDownIDNative(button, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseClicked_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseClickedInputFlagsNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, ImGuiInputFlags, uint, byte>)vt[1149])(button, flags, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, ImGuiInputFlags, uint, byte>)vt[1149])(button, flags, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseClicked_InputFlags")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseClickedInputFlags([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsMouseClickedInputFlagsNative(button, flags, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseReleased_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseReleasedIDNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1150])(button, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1150])(button, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseReleased_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseReleasedID([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsMouseReleasedIDNative(button, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDoubleClicked_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsMouseDoubleClickedIDNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1151])(button, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiMouseButton, uint, byte>)vt[1151])(button, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igIsMouseDoubleClicked_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsMouseDoubleClickedID([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "ImGuiMouseButton")] ImGuiMouseButton button, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = IsMouseDoubleClickedIDNative(button, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShortcut_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ShortcutIDNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1152])(keyChord, flags, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1152])(keyChord, flags, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShortcut_ID")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ShortcutID([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = ShortcutIDNative(keyChord, flags, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetShortcutRouting")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte SetShortcutRoutingNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1153])(keyChord, flags, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, ImGuiInputFlags, uint, byte>)vt[1153])(keyChord, flags, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetShortcutRouting")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetShortcutRouting([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiInputFlags")] ImGuiInputFlags flags, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = SetShortcutRoutingNative(keyChord, flags, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTestShortcutRouting")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TestShortcutRoutingNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint, byte>)vt[1154])(keyChord, ownerId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, uint, byte>)vt[1154])(keyChord, ownerId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTestShortcutRouting")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TestShortcutRouting([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord, [NativeName(NativeNameType.Param, "owner_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint ownerId)
		{
			byte ret = TestShortcutRoutingNative(keyChord, ownerId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetShortcutRoutingData")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyRoutingData*")]
		internal static ImGuiKeyRoutingData* GetShortcutRoutingDataNative([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ImGuiKeyRoutingData*>)vt[1155])(keyChord);
			#else
			return (ImGuiKeyRoutingData*)((delegate* unmanaged[Cdecl]<int, nint>)vt[1155])(keyChord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetShortcutRoutingData")]
		[return: NativeName(NativeNameType.Type, "ImGuiKeyRoutingData*")]
		public static ImGuiKeyRoutingData* GetShortcutRoutingData([NativeName(NativeNameType.Param, "key_chord")] [NativeName(NativeNameType.Type, "ImGuiKeyChord")] int keyChord)
		{
			ImGuiKeyRoutingData* ret = GetShortcutRoutingDataNative(keyChord);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextInitialize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextInitializeNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1156])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1156])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextInitialize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextInitialize([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextInitializeNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextInitialize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextInitialize([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextInitializeNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextShutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextShutdownNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1157])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1157])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextShutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextShutdown([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextShutdownNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextShutdown")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextShutdown([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextShutdownNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextClearNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextClearNodesNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "root_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rootId, [NativeName(NativeNameType.Param, "clear_settings_refs")] [NativeName(NativeNameType.Type, "bool")] byte clearSettingsRefs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, uint, byte, void>)vt[1158])(ctx, rootId, clearSettingsRefs);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, byte, void>)vt[1158])((nint)ctx, rootId, clearSettingsRefs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextClearNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextClearNodes([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "root_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rootId, [NativeName(NativeNameType.Param, "clear_settings_refs")] [NativeName(NativeNameType.Type, "bool")] bool clearSettingsRefs)
		{
			DockContextClearNodesNative(ctx, rootId, clearSettingsRefs ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextClearNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextClearNodes([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "root_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint rootId, [NativeName(NativeNameType.Param, "clear_settings_refs")] [NativeName(NativeNameType.Type, "bool")] bool clearSettingsRefs)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextClearNodesNative((ImGuiContext*)pctx, rootId, clearSettingsRefs ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextRebuildNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextRebuildNodesNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1159])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1159])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextRebuildNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextRebuildNodes([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextRebuildNodesNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextRebuildNodes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextRebuildNodes([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextRebuildNodesNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateUndocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextNewFrameUpdateUndockingNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1160])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1160])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateUndocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextNewFrameUpdateUndocking([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextNewFrameUpdateUndockingNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateUndocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextNewFrameUpdateUndocking([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextNewFrameUpdateUndockingNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateDocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextNewFrameUpdateDockingNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1161])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1161])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateDocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextNewFrameUpdateDocking([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextNewFrameUpdateDockingNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextNewFrameUpdateDocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextNewFrameUpdateDocking([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextNewFrameUpdateDockingNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextEndFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextEndFrameNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, void>)vt[1162])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1162])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextEndFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextEndFrame([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			DockContextEndFrameNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextEndFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextEndFrame([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextEndFrameNative((ImGuiContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextGenNodeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint DockContextGenNodeIDNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiContext*, uint>)vt[1163])(ctx);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)vt[1163])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextGenNodeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockContextGenNodeID([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx)
		{
			uint ret = DockContextGenNodeIDNative(ctx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextGenNodeID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint DockContextGenNodeID([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				uint ret = DockContextGenNodeIDNative((ImGuiContext*)pctx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextQueueDockNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] byte splitOuter)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiWindow*, ImGuiDockNode*, ImGuiWindow*, ImGuiDir, float, byte, void>)vt[1164])(ctx, target, targetNode, payload, splitDir, splitRatio, splitOuter);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ImGuiDir, float, byte, void>)vt[1164])((nint)ctx, (nint)target, (nint)targetNode, (nint)payload, splitDir, splitRatio, splitOuter);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			DockContextQueueDockNative(ctx, target, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextQueueDockNative((ImGuiContext*)pctx, target, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ptarget = &target)
				{
					DockContextQueueDockNative((ImGuiContext*)pctx, (ImGuiWindow*)ptarget, targetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				DockContextQueueDockNative(ctx, target, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					DockContextQueueDockNative((ImGuiContext*)pctx, target, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ptarget = &target)
				{
					fixed (ImGuiDockNode* ptargetNode = &targetNode)
					{
						DockContextQueueDockNative((ImGuiContext*)pctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, payload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ppayload = &payload)
			{
				DockContextQueueDockNative(ctx, target, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ppayload = &payload)
				{
					DockContextQueueDockNative((ImGuiContext*)pctx, target, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiWindow* ppayload = &payload)
				{
					DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ptarget = &target)
				{
					fixed (ImGuiWindow* ppayload = &payload)
					{
						DockContextQueueDockNative((ImGuiContext*)pctx, (ImGuiWindow*)ptarget, targetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiDockNode* ptargetNode = &targetNode)
			{
				fixed (ImGuiWindow* ppayload = &payload)
				{
					DockContextQueueDockNative(ctx, target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayload = &payload)
					{
						DockContextQueueDockNative((ImGuiContext*)pctx, target, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiWindow* ptarget = &target)
			{
				fixed (ImGuiDockNode* ptargetNode = &targetNode)
				{
					fixed (ImGuiWindow* ppayload = &payload)
					{
						DockContextQueueDockNative(ctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueDock")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueDock([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow target, [NativeName(NativeNameType.Param, "target_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode targetNode, [NativeName(NativeNameType.Param, "payload")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow payload, [NativeName(NativeNameType.Param, "split_dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir splitDir, [NativeName(NativeNameType.Param, "split_ratio")] [NativeName(NativeNameType.Type, "float")] float splitRatio, [NativeName(NativeNameType.Param, "split_outer")] [NativeName(NativeNameType.Type, "bool")] bool splitOuter)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* ptarget = &target)
				{
					fixed (ImGuiDockNode* ptargetNode = &targetNode)
					{
						fixed (ImGuiWindow* ppayload = &payload)
						{
							DockContextQueueDockNative((ImGuiContext*)pctx, (ImGuiWindow*)ptarget, (ImGuiDockNode*)ptargetNode, (ImGuiWindow*)ppayload, splitDir, splitRatio, splitOuter ? (byte)1 : (byte)0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextQueueUndockWindowNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiWindow*, void>)vt[1165])(ctx, window);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1165])((nint)ctx, (nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			DockContextQueueUndockWindowNative(ctx, window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextQueueUndockWindowNative((ImGuiContext*)pctx, window);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextQueueUndockWindowNative(ctx, (ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					DockContextQueueUndockWindowNative((ImGuiContext*)pctx, (ImGuiWindow*)pwindow);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextQueueUndockNodeNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiDockNode*, void>)vt[1166])(ctx, node);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1166])((nint)ctx, (nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			DockContextQueueUndockNodeNative(ctx, node);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextQueueUndockNodeNative((ImGuiContext*)pctx, node);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextQueueUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextQueueUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextQueueUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					DockContextQueueUndockNodeNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextProcessUndockWindowNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] byte clearPersistentDockingRef)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiWindow*, byte, void>)vt[1167])(ctx, window, clearPersistentDockingRef);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, byte, void>)vt[1167])((nint)ctx, (nint)window, clearPersistentDockingRef);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			DockContextProcessUndockWindowNative(ctx, window, clearPersistentDockingRef ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextProcessUndockWindowNative((ImGuiContext*)pctx, window, clearPersistentDockingRef ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DockContextProcessUndockWindowNative(ctx, (ImGuiWindow*)pwindow, clearPersistentDockingRef ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockWindow([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "clear_persistent_docking_ref")] [NativeName(NativeNameType.Type, "bool")] bool clearPersistentDockingRef)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					DockContextProcessUndockWindowNative((ImGuiContext*)pctx, (ImGuiWindow*)pwindow, clearPersistentDockingRef ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DockContextProcessUndockNodeNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiContext*, ImGuiDockNode*, void>)vt[1168])(ctx, node);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1168])((nint)ctx, (nint)node);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			DockContextProcessUndockNodeNative(ctx, node);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				DockContextProcessUndockNodeNative((ImGuiContext*)pctx, node);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ImGuiContext* ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DockContextProcessUndockNodeNative(ctx, (ImGuiDockNode*)pnode);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDockContextProcessUndockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DockContextProcessUndockNode([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImGuiContext*")] ref ImGuiContext ctx, [NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node)
		{
			fixed (ImGuiContext* pctx = &ctx)
			{
				fixed (ImGuiDockNode* pnode = &node)
				{
					DockContextProcessUndockNodeNative((ImGuiContext*)pctx, (ImGuiDockNode*)pnode);
				}
			}
		}
	}
}
