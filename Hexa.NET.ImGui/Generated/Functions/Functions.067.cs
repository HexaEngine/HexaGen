// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pbuf = buf)
			{
				fixed (byte* pformat = format)
				{
					byte ret = DataTypeApplyFromTextNative((byte*)pbuf, dataType, pData, (byte*)pformat, pDataWhenEmpty);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DataTypeApplyFromTextNative(pStr0, dataType, pData, pStr1, pDataWhenEmpty);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeCompare")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int DataTypeCompareNative([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "arg_1")] [NativeName(NativeNameType.Type, "const void*")] void* arg1, [NativeName(NativeNameType.Param, "arg_2")] [NativeName(NativeNameType.Type, "const void*")] void* arg2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDataType, void*, void*, int>)vt[1345])(dataType, arg1, arg2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImGuiDataType, nint, nint, int>)vt[1345])(dataType, (nint)arg1, (nint)arg2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeCompare")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int DataTypeCompare([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "arg_1")] [NativeName(NativeNameType.Type, "const void*")] void* arg1, [NativeName(NativeNameType.Param, "arg_2")] [NativeName(NativeNameType.Type, "const void*")] void* arg2)
		{
			int ret = DataTypeCompareNative(dataType, arg1, arg2);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeClamp")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DataTypeClampNative([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDataType, void*, void*, void*, byte>)vt[1346])(dataType, pData, pMin, pMax);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImGuiDataType, nint, nint, nint, byte>)vt[1346])(dataType, (nint)pData, (nint)pMin, (nint)pMax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeClamp")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeClamp([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax)
		{
			byte ret = DataTypeClampNative(dataType, pData, pMin, pMax);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputTextDeactivateHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void InputTextDeactivateHookNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1347])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1347])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igInputTextDeactivateHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InputTextDeactivateHook([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			InputTextDeactivateHookNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TempInputScalarNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, byte*, ImGuiDataType, void*, byte*, void*, void*, byte>)vt[1348])(bb, id, label, dataType, pData, format, pClampMin, pClampMax);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, nint, ImGuiDataType, nint, nint, nint, nint, byte>)vt[1348])(bb, id, (nint)label, dataType, (nint)pData, (nint)format, (nint)pClampMin, (nint)pClampMax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			byte ret = TempInputScalarNative(bb, id, label, dataType, pData, format, pClampMin, pClampMax);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, format, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, format, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, pStr0, dataType, pData, format, pClampMin, pClampMax);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = TempInputScalarNative(bb, id, label, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* pformat = format)
			{
				byte ret = TempInputScalarNative(bb, id, label, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, label, dataType, pData, pStr0, pClampMin, pClampMax);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pformat = format)
				{
					byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputScalar")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputScalar([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "p_clamp_min")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMin, [NativeName(NativeNameType.Param, "p_clamp_max")] [NativeName(NativeNameType.Type, "const void*")] void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, pStr0, dataType, pData, pStr1, pClampMin, pClampMax);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputIsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TempInputIsActiveNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[1349])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[1349])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTempInputIsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TempInputIsActive([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			byte ret = TempInputIsActiveNative(id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetInputTextState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextState*")]
		internal static ImGuiInputTextState* GetInputTextStateNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiInputTextState*>)vt[1350])(id);
			#else
			return (ImGuiInputTextState*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[1350])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetInputTextState")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextState*")]
		public static ImGuiInputTextState* GetInputTextState([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiInputTextState* ret = GetInputTextStateNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextItemRefVal")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetNextItemRefValNative([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDataType, void*, void>)vt[1351])(dataType, pData);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiDataType, nint, void>)vt[1351])(dataType, (nint)pData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetNextItemRefVal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetNextItemRefVal([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			SetNextItemRefValNative(dataType, pData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ColorTooltipNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, float*, ImGuiColorEditFlags, void>)vt[1352])(text, col, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImGuiColorEditFlags, void>)vt[1352])((nint)text, (nint)col, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			ColorTooltipNative(text, col, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				ColorTooltipNative((byte*)ptext, col, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* ptext = text)
			{
				ColorTooltipNative((byte*)ptext, col, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ColorTooltipNative(pStr0, col, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = &col)
			{
				ColorTooltipNative(text, (float*)pcol, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				fixed (float* pcol = &col)
				{
					ColorTooltipNative((byte*)ptext, (float*)pcol, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (byte* ptext = text)
			{
				fixed (float* pcol = &col)
				{
					ColorTooltipNative((byte*)ptext, (float*)pcol, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorTooltip([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pcol = &col)
			{
				ColorTooltipNative(pStr0, (float*)pcol, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEditOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ColorEditOptionsPopupNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, ImGuiColorEditFlags, void>)vt[1353])(col, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiColorEditFlags, void>)vt[1353])((nint)col, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEditOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorEditOptionsPopup([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] float* col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			ColorEditOptionsPopupNative(col, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorEditOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorEditOptionsPopup([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const float*")] ref float col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* pcol = &col)
			{
				ColorEditOptionsPopupNative((float*)pcol, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPickerOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ColorPickerOptionsPopupNative([NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, ImGuiColorEditFlags, void>)vt[1354])(refCol, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiColorEditFlags, void>)vt[1354])((nint)refCol, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPickerOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorPickerOptionsPopup([NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] float* refCol, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			ColorPickerOptionsPopupNative(refCol, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igColorPickerOptionsPopup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ColorPickerOptionsPopup([NativeName(NativeNameType.Param, "ref_col")] [NativeName(NativeNameType.Type, "const float*")] ref float refCol, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiColorEditFlags")] ImGuiColorEditFlags flags)
		{
			fixed (float* prefCol = &refCol)
			{
				ColorPickerOptionsPopupNative((float*)prefCol, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PlotExNative([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] byte* overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPlotType, byte*, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float>, void*, int, int, byte*, float, float, Vector2, int>)vt[1355])(plotType, label, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
			#else
			return (int)((delegate* unmanaged[Cdecl]<ImGuiPlotType, nint, nint, nint, int, int, nint, float, float, Vector2, int>)vt[1355])(plotType, (nint)label, (nint)valuesGetter, (nint)data, valuesCount, valuesOffset, (nint)overlayText, scaleMin, scaleMax, sizeArg);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] byte* overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] byte* overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] byte* overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* plabel = label)
			{
				int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] byte* overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* poverlayText = &overlayText)
			{
				int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* poverlayText = overlayText)
			{
				int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] string overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlayText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlayText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlayText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, pStr0, scaleMin, scaleMax, sizeArg);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] ref byte overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poverlayText = &overlayText)
				{
					int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* poverlayText = overlayText)
				{
					int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igPlotEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PlotEx([NativeName(NativeNameType.Param, "plot_type")] [NativeName(NativeNameType.Type, "ImGuiPlotType")] ImGuiPlotType plotType, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "values_getter")] [NativeName(NativeNameType.Type, "float (*)(ImGuiPlotType plot_type, const char* label, float (*)(void* data, int idx)* values_getter, void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)*")] delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data, [NativeName(NativeNameType.Param, "values_count")] [NativeName(NativeNameType.Type, "int")] int valuesCount, [NativeName(NativeNameType.Param, "values_offset")] [NativeName(NativeNameType.Type, "int")] int valuesOffset, [NativeName(NativeNameType.Param, "overlay_text")] [NativeName(NativeNameType.Type, "const char*")] string overlayText, [NativeName(NativeNameType.Param, "scale_min")] [NativeName(NativeNameType.Type, "float")] float scaleMin, [NativeName(NativeNameType.Param, "scale_max")] [NativeName(NativeNameType.Type, "float")] float scaleMax, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (overlayText != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(overlayText);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(overlayText, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, pStr1, scaleMin, scaleMax, sizeArg);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearColorGradientKeepAlpha")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShadeVertsLinearColorGradientKeepAlphaNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "gradient_p0")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp0, [NativeName(NativeNameType.Param, "gradient_p1")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp1, [NativeName(NativeNameType.Param, "col0")] [NativeName(NativeNameType.Type, "ImU32")] uint col0, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "ImU32")] uint col1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, Vector2, uint, uint, void>)vt[1356])(drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, Vector2, uint, uint, void>)vt[1356])((nint)drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearColorGradientKeepAlpha")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsLinearColorGradientKeepAlpha([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "gradient_p0")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp0, [NativeName(NativeNameType.Param, "gradient_p1")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp1, [NativeName(NativeNameType.Param, "col0")] [NativeName(NativeNameType.Type, "ImU32")] uint col0, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "ImU32")] uint col1)
		{
			ShadeVertsLinearColorGradientKeepAlphaNative(drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearColorGradientKeepAlpha")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsLinearColorGradientKeepAlpha([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "gradient_p0")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp0, [NativeName(NativeNameType.Param, "gradient_p1")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gradientp1, [NativeName(NativeNameType.Param, "col0")] [NativeName(NativeNameType.Type, "ImU32")] uint col0, [NativeName(NativeNameType.Param, "col1")] [NativeName(NativeNameType.Type, "ImU32")] uint col1)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsLinearColorGradientKeepAlphaNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShadeVertsLinearUVNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "clamp")] [NativeName(NativeNameType.Type, "bool")] byte clamp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, Vector2, Vector2, Vector2, byte, void>)vt[1357])(drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, Vector2, Vector2, Vector2, byte, void>)vt[1357])((nint)drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsLinearUV([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "clamp")] [NativeName(NativeNameType.Type, "bool")] bool clamp)
		{
			ShadeVertsLinearUVNative(drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsLinearUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsLinearUV([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 b, [NativeName(NativeNameType.Param, "uv_a")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvA, [NativeName(NativeNameType.Param, "uv_b")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uvB, [NativeName(NativeNameType.Param, "clamp")] [NativeName(NativeNameType.Type, "bool")] bool clamp)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsLinearUVNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsTransformPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShadeVertsTransformPosNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "pivot_in")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotIn, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA, [NativeName(NativeNameType.Param, "pivot_out")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, float, float, Vector2, void>)vt[1358])(drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, float, float, Vector2, void>)vt[1358])((nint)drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsTransformPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsTransformPos([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "pivot_in")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotIn, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA, [NativeName(NativeNameType.Param, "pivot_out")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotOut)
		{
			ShadeVertsTransformPosNative(drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShadeVertsTransformPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeVertsTransformPos([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "vert_start_idx")] [NativeName(NativeNameType.Type, "int")] int vertStartIdx, [NativeName(NativeNameType.Param, "vert_end_idx")] [NativeName(NativeNameType.Type, "int")] int vertEndIdx, [NativeName(NativeNameType.Param, "pivot_in")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotIn, [NativeName(NativeNameType.Param, "cos_a")] [NativeName(NativeNameType.Type, "float")] float cosA, [NativeName(NativeNameType.Param, "sin_a")] [NativeName(NativeNameType.Type, "float")] float sinA, [NativeName(NativeNameType.Param, "pivot_out")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pivotOut)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsTransformPosNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcCompactTransientMiscBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GcCompactTransientMiscBuffersNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1359])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1359])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcCompactTransientMiscBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GcCompactTransientMiscBuffers()
		{
			GcCompactTransientMiscBuffersNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcCompactTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GcCompactTransientWindowBuffersNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1360])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1360])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcCompactTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GcCompactTransientWindowBuffers([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			GcCompactTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcCompactTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GcCompactTransientWindowBuffers([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GcCompactTransientWindowBuffersNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcAwakeTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GcAwakeTransientWindowBuffersNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)vt[1361])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1361])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcAwakeTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GcAwakeTransientWindowBuffers([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window)
		{
			GcAwakeTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGcAwakeTransientWindowBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GcAwakeTransientWindowBuffers([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GcAwakeTransientWindowBuffersNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugAllocHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugAllocHookNative([NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo*")] ImGuiDebugAllocInfo* info, [NativeName(NativeNameType.Param, "frame_count")] [NativeName(NativeNameType.Type, "int")] int frameCount, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDebugAllocInfo*, int, void*, ulong, void>)vt[1362])(info, frameCount, ptr, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, ulong, void>)vt[1362])((nint)info, frameCount, (nint)ptr, size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugAllocHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugAllocHook([NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo*")] ImGuiDebugAllocInfo* info, [NativeName(NativeNameType.Param, "frame_count")] [NativeName(NativeNameType.Type, "int")] int frameCount, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			DebugAllocHookNative(info, frameCount, ptr, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugAllocHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugAllocHook([NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo*")] ref ImGuiDebugAllocInfo info, [NativeName(NativeNameType.Param, "frame_count")] [NativeName(NativeNameType.Type, "int")] int frameCount, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			fixed (ImGuiDebugAllocInfo* pinfo = &info)
			{
				DebugAllocHookNative((ImGuiDebugAllocInfo*)pinfo, frameCount, ptr, size);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugAllocHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugAllocHook([NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo*")] ImGuiDebugAllocInfo* info, [NativeName(NativeNameType.Param, "frame_count")] [NativeName(NativeNameType.Type, "int")] int frameCount, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			DebugAllocHookNative(info, frameCount, ptr, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugAllocHook")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugAllocHook([NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "ImGuiDebugAllocInfo*")] ref ImGuiDebugAllocInfo info, [NativeName(NativeNameType.Param, "frame_count")] [NativeName(NativeNameType.Type, "int")] int frameCount, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			fixed (ImGuiDebugAllocInfo* pinfo = &info)
			{
				DebugAllocHookNative((ImGuiDebugAllocInfo*)pinfo, frameCount, ptr, size);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckEndFrameRecover")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ErrorCheckEndFrameRecoverNative([NativeName(NativeNameType.Param, "log_callback")] [NativeName(NativeNameType.Type, "ImGuiErrorLogCallback")] ImGuiErrorLogCallback logCallback, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, byte*, void>, void*, void>)vt[1363])((delegate*<void*, byte*, void>)Utils.GetFunctionPointerForDelegate(logCallback), userData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1363])((nint)Utils.GetFunctionPointerForDelegate(logCallback), (nint)userData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckEndFrameRecover")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ErrorCheckEndFrameRecover([NativeName(NativeNameType.Param, "log_callback")] [NativeName(NativeNameType.Type, "ImGuiErrorLogCallback")] ImGuiErrorLogCallback logCallback, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			ErrorCheckEndFrameRecoverNative(logCallback, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckEndWindowRecover")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ErrorCheckEndWindowRecoverNative([NativeName(NativeNameType.Param, "log_callback")] [NativeName(NativeNameType.Type, "ImGuiErrorLogCallback")] ImGuiErrorLogCallback logCallback, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, byte*, void>, void*, void>)vt[1364])((delegate*<void*, byte*, void>)Utils.GetFunctionPointerForDelegate(logCallback), userData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1364])((nint)Utils.GetFunctionPointerForDelegate(logCallback), (nint)userData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckEndWindowRecover")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ErrorCheckEndWindowRecover([NativeName(NativeNameType.Param, "log_callback")] [NativeName(NativeNameType.Type, "ImGuiErrorLogCallback")] ImGuiErrorLogCallback logCallback, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			ErrorCheckEndWindowRecoverNative(logCallback, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckUsingSetCursorPosToExtendParentBoundaries")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1365])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1365])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igErrorCheckUsingSetCursorPosToExtendParentBoundaries")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ErrorCheckUsingSetCursorPosToExtendParentBoundaries()
		{
			ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawCursorPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugDrawCursorPosNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1366])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1366])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawCursorPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugDrawCursorPos([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			DebugDrawCursorPosNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawLineExtents")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugDrawLineExtentsNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1367])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1367])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawLineExtents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugDrawLineExtents([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			DebugDrawLineExtentsNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawItemRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugDrawItemRectNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1368])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1368])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugDrawItemRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugDrawItemRect([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			DebugDrawItemRectNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugTextUnformattedWithLocateItemNative([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] byte* lineEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[1369])(lineBegin, lineEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1369])((nint)lineBegin, (nint)lineEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] byte* lineEnd)
		{
			DebugTextUnformattedWithLocateItemNative(lineBegin, lineEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] byte* lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, lineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] byte* lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, lineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] string lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] byte* lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(pStr0, lineEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte lineEnd)
		{
			fixed (byte* plineEnd = &lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(lineBegin, (byte*)plineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lineEnd)
		{
			fixed (byte* plineEnd = lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(lineBegin, (byte*)plineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] string lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(lineBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				fixed (byte* plineEnd = &lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				fixed (byte* plineEnd = lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextUnformattedWithLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextUnformattedWithLocateItem([NativeName(NativeNameType.Param, "line_begin")] [NativeName(NativeNameType.Type, "const char*")] string lineBegin, [NativeName(NativeNameType.Param, "line_end")] [NativeName(NativeNameType.Type, "const char*")] string lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (lineEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(lineEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(lineEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugLocateItemNative([NativeName(NativeNameType.Param, "target_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint targetId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1370])(targetId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1370])(targetId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLocateItem([NativeName(NativeNameType.Param, "target_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint targetId)
		{
			DebugLocateItemNative(targetId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItemOnHover")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugLocateItemOnHoverNative([NativeName(NativeNameType.Param, "target_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint targetId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1371])(targetId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1371])(targetId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItemOnHover")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLocateItemOnHover([NativeName(NativeNameType.Param, "target_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint targetId)
		{
			DebugLocateItemOnHoverNative(targetId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItemResolveWithLastItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugLocateItemResolveWithLastItemNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1372])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1372])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLocateItemResolveWithLastItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLocateItemResolveWithLastItem()
		{
			DebugLocateItemResolveWithLastItemNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakClearData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugBreakClearDataNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[1373])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[1373])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakClearData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugBreakClearData()
		{
			DebugBreakClearDataNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DebugBreakButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte>)vt[1374])(label, descriptionOfLocation);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[1374])((nint)label, (nint)descriptionOfLocation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			byte ret = DebugBreakButtonNative(label, descriptionOfLocation);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DebugBreakButtonNative((byte*)plabel, descriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DebugBreakButtonNative((byte*)plabel, descriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugBreakButtonNative(pStr0, descriptionOfLocation);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ref byte descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(label, (byte*)pdescriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(label, (byte*)pdescriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugBreakButtonNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ref byte descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugBreakButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DebugBreakButtonNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButtonTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugBreakButtonTooltipNative([NativeName(NativeNameType.Param, "keyboard_only")] [NativeName(NativeNameType.Type, "bool")] byte keyboardOnly, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte*, void>)vt[1375])(keyboardOnly, descriptionOfLocation);
			#else
			((delegate* unmanaged[Cdecl]<byte, nint, void>)vt[1375])(keyboardOnly, (nint)descriptionOfLocation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButtonTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugBreakButtonTooltip([NativeName(NativeNameType.Param, "keyboard_only")] [NativeName(NativeNameType.Type, "bool")] bool keyboardOnly, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] byte* descriptionOfLocation)
		{
			DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, descriptionOfLocation);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButtonTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugBreakButtonTooltip([NativeName(NativeNameType.Param, "keyboard_only")] [NativeName(NativeNameType.Type, "bool")] bool keyboardOnly, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ref byte descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
			{
				DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, (byte*)pdescriptionOfLocation);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButtonTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugBreakButtonTooltip([NativeName(NativeNameType.Param, "keyboard_only")] [NativeName(NativeNameType.Type, "bool")] bool keyboardOnly, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
			{
				DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, (byte*)pdescriptionOfLocation);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugBreakButtonTooltip")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugBreakButtonTooltip([NativeName(NativeNameType.Param, "keyboard_only")] [NativeName(NativeNameType.Type, "bool")] bool keyboardOnly, [NativeName(NativeNameType.Param, "description_of_location")] [NativeName(NativeNameType.Type, "const char*")] string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShowFontAtlas")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ShowFontAtlasNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[1376])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1376])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShowFontAtlas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShowFontAtlas([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			ShowFontAtlasNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igShowFontAtlas")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShowFontAtlas([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ShowFontAtlasNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugHookIdInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugHookIdInfoNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "data_id")] [NativeName(NativeNameType.Type, "const void*")] void* dataId, [NativeName(NativeNameType.Param, "data_id_end")] [NativeName(NativeNameType.Type, "const void*")] void* dataIdEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, void*, void*, void>)vt[1377])(id, dataType, dataId, dataIdEnd);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, nint, nint, void>)vt[1377])(id, dataType, (nint)dataId, (nint)dataIdEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugHookIdInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugHookIdInfo([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "data_id")] [NativeName(NativeNameType.Type, "const void*")] void* dataId, [NativeName(NativeNameType.Param, "data_id_end")] [NativeName(NativeNameType.Type, "const void*")] void* dataIdEnd)
		{
			DebugHookIdInfoNative(id, dataType, dataId, dataIdEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeColumnsNative([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "ImGuiOldColumns*")] ImGuiOldColumns* columns)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOldColumns*, void>)vt[1378])(columns);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1378])((nint)columns);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeColumns([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "ImGuiOldColumns*")] ImGuiOldColumns* columns)
		{
			DebugNodeColumnsNative(columns);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeColumns")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeColumns([NativeName(NativeNameType.Param, "columns")] [NativeName(NativeNameType.Type, "ImGuiOldColumns*")] ref ImGuiOldColumns columns)
		{
			fixed (ImGuiOldColumns* pcolumns = &columns)
			{
				DebugNodeColumnsNative((ImGuiOldColumns*)pcolumns);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeDockNodeNative([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte*, void>)vt[1379])(node, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1379])((nint)node, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeDockNodeNative(node, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DebugNodeDockNodeNative((ImGuiDockNode*)pnode, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDockNodeNative(node, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeDockNodeNative(node, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDockNodeNative(node, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDockNodeNative((ImGuiDockNode*)pnode, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDockNodeNative((ImGuiDockNode*)pnode, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDockNode")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDockNode([NativeName(NativeNameType.Param, "node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode node, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDockNodeNative((ImGuiDockNode*)pnode, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeDrawListNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, ImDrawList*, byte*, void>)vt[1380])(window, viewport, drawList, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)vt[1380])((nint)window, (nint)viewport, (nint)drawList, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeDrawListNative(window, viewport, drawList, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, label);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDrawListNative(window, viewport, drawList, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeDrawListNative(window, viewport, drawList, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDrawListNative(window, viewport, drawList, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = &label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawList([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (label != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(label);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeDrawCmdShowMeshAndBoundingBoxNative([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ImDrawCmd* drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] byte showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] byte showAabb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImDrawList*, ImDrawCmd*, byte, byte, void>)vt[1381])(outDrawList, drawList, drawCmd, showMesh, showAabb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, byte, byte, void>)vt[1381])((nint)outDrawList, (nint)drawList, (nint)drawCmd, showMesh, showAabb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ImDrawCmd* drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ImDrawCmd* drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ImDrawCmd* drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ImDrawCmd* drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ref ImDrawCmd drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ref ImDrawCmd drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ref ImDrawCmd drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox([NativeName(NativeNameType.Param, "out_draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList outDrawList, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "const ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "draw_cmd")] [NativeName(NativeNameType.Type, "const ImDrawCmd*")] ref ImDrawCmd drawCmd, [NativeName(NativeNameType.Param, "show_mesh")] [NativeName(NativeNameType.Type, "bool")] bool showMesh, [NativeName(NativeNameType.Param, "show_aabb")] [NativeName(NativeNameType.Type, "bool")] bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (ImDrawCmd* pdrawCmd = &drawCmd)
					{
						DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeFontNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)vt[1382])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1382])((nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font)
		{
			DebugNodeFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFont([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontNative((ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFontGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeFontGlyphNative([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "glyph")] [NativeName(NativeNameType.Type, "const ImFontGlyph*")] ImFontGlyph* glyph)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontGlyph*, void>)vt[1383])(font, glyph);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1383])((nint)font, (nint)glyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFontGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "glyph")] [NativeName(NativeNameType.Type, "const ImFontGlyph*")] ImFontGlyph* glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFontGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "glyph")] [NativeName(NativeNameType.Type, "const ImFontGlyph*")] ImFontGlyph* glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphNative((ImFont*)pfont, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFontGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "glyph")] [NativeName(NativeNameType.Type, "const ImFontGlyph*")] ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeFontGlyph")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeFontGlyph([NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "glyph")] [NativeName(NativeNameType.Type, "const ImFontGlyph*")] ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					DebugNodeFontGlyphNative((ImFont*)pfont, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeStorageNative([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, byte*, void>)vt[1384])(storage, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1384])((nint)storage, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				DebugNodeStorageNative((ImGuiStorage*)pstorage, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeStorage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeStorage([NativeName(NativeNameType.Param, "storage")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage storage, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeStorageNative((ImGuiStorage*)pstorage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeTabBarNative([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte*, void>)vt[1385])(tabBar, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1385])((nint)tabBar, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ImGuiTabBar* tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTabBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTabBar([NativeName(NativeNameType.Param, "tab_bar")] [NativeName(NativeNameType.Type, "ImGuiTabBar*")] ref ImGuiTabBar tabBar, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeTableNative([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)vt[1386])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1386])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTable([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ImGuiTable* table)
		{
			DebugNodeTableNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTable([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "ImGuiTable*")] ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				DebugNodeTableNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTableSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeTableSettingsNative([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)vt[1387])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1387])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTableSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTableSettings([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ImGuiTableSettings* settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTableSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTableSettings([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiTableSettings*")] ref ImGuiTableSettings settings)
		{
			fixed (ImGuiTableSettings* psettings = &settings)
			{
				DebugNodeTableSettingsNative((ImGuiTableSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeInputTextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeInputTextStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)vt[1388])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1388])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeInputTextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeInputTextState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ImGuiInputTextState* state)
		{
			DebugNodeInputTextStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeInputTextState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeInputTextState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiInputTextState*")] ref ImGuiInputTextState state)
		{
			fixed (ImGuiInputTextState* pstate = &state)
			{
				DebugNodeInputTextStateNative((ImGuiInputTextState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTypingSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeTypingSelectStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectState*")] ImGuiTypingSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*, void>)vt[1389])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1389])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTypingSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTypingSelectState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectState*")] ImGuiTypingSelectState* state)
		{
			DebugNodeTypingSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeTypingSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeTypingSelectState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiTypingSelectState*")] ref ImGuiTypingSelectState state)
		{
			fixed (ImGuiTypingSelectState* pstate = &state)
			{
				DebugNodeTypingSelectStateNative((ImGuiTypingSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeMultiSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeMultiSelectStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectState*")] ImGuiMultiSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectState*, void>)vt[1390])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1390])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeMultiSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeMultiSelectState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectState*")] ImGuiMultiSelectState* state)
		{
			DebugNodeMultiSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeMultiSelectState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeMultiSelectState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectState*")] ref ImGuiMultiSelectState state)
		{
			fixed (ImGuiMultiSelectState* pstate = &state)
			{
				DebugNodeMultiSelectStateNative((ImGuiMultiSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte*, void>)vt[1391])(window, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1391])((nint)window, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeWindowNative((ImGuiWindow*)pwindow, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowNative((ImGuiWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeWindowSettingsNative([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiWindowSettings*")] ImGuiWindowSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, void>)vt[1392])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1392])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowSettings([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiWindowSettings*")] ImGuiWindowSettings* settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowSettings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowSettings([NativeName(NativeNameType.Param, "settings")] [NativeName(NativeNameType.Type, "ImGuiWindowSettings*")] ref ImGuiWindowSettings settings)
		{
			fixed (ImGuiWindowSettings* psettings = &settings)
			{
				DebugNodeWindowSettingsNative((ImGuiWindowSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeWindowsListNative([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ImVectorImGuiWindowPtr* windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVectorImGuiWindowPtr*, byte*, void>)vt[1393])(windows, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1393])((nint)windows, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ImVectorImGuiWindowPtr* windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ref ImVectorImGuiWindowPtr windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ImVectorImGuiWindowPtr* windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ImVectorImGuiWindowPtr* windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ImVectorImGuiWindowPtr* windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ref ImVectorImGuiWindowPtr windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ref ImVectorImGuiWindowPtr windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsList")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsList([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImVector_ImGuiWindowPtr*")] ref ImVectorImGuiWindowPtr windows, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImVectorImGuiWindowPtr* pwindows = &windows)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowsListNative((ImVectorImGuiWindowPtr*)pwindows, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsListByBeginStackParent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeWindowsListByBeginStackParentNative([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** windows, [NativeName(NativeNameType.Param, "windows_size")] [NativeName(NativeNameType.Type, "int")] int windowsSize, [NativeName(NativeNameType.Param, "parent_in_begin_stack")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentInBeginStack)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow**, int, ImGuiWindow*, void>)vt[1394])(windows, windowsSize, parentInBeginStack);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)vt[1394])((nint)windows, windowsSize, (nint)parentInBeginStack);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsListByBeginStackParent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsListByBeginStackParent([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** windows, [NativeName(NativeNameType.Param, "windows_size")] [NativeName(NativeNameType.Type, "int")] int windowsSize, [NativeName(NativeNameType.Param, "parent_in_begin_stack")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsListByBeginStackParent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsListByBeginStackParent([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* windows, [NativeName(NativeNameType.Param, "windows_size")] [NativeName(NativeNameType.Type, "int")] int windowsSize, [NativeName(NativeNameType.Param, "parent_in_begin_stack")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, parentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsListByBeginStackParent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsListByBeginStackParent([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ImGuiWindow** windows, [NativeName(NativeNameType.Param, "windows_size")] [NativeName(NativeNameType.Type, "int")] int windowsSize, [NativeName(NativeNameType.Param, "parent_in_begin_stack")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeWindowsListByBeginStackParent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeWindowsListByBeginStackParent([NativeName(NativeNameType.Param, "windows")] [NativeName(NativeNameType.Type, "ImGuiWindow**")] ref ImGuiWindow* windows, [NativeName(NativeNameType.Param, "windows_size")] [NativeName(NativeNameType.Type, "int")] int windowsSize, [NativeName(NativeNameType.Param, "parent_in_begin_stack")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
				{
					DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodeViewportNative([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)vt[1395])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1395])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodeViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodeViewport([NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeViewportNative((ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugNodePlatformMonitorNative([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ImGuiPlatformMonitor* monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPlatformMonitor*, byte*, int, void>)vt[1396])(monitor, label, idx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[1396])((nint)monitor, (nint)label, idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ImGuiPlatformMonitor* monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			DebugNodePlatformMonitorNative(monitor, label, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ref ImGuiPlatformMonitor monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, label, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ImGuiPlatformMonitor* monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ImGuiPlatformMonitor* monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (byte* plabel = label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ImGuiPlatformMonitor* monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodePlatformMonitorNative(monitor, pStr0, idx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ref ImGuiPlatformMonitor monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ref ImGuiPlatformMonitor monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugNodePlatformMonitor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugNodePlatformMonitor([NativeName(NativeNameType.Param, "monitor")] [NativeName(NativeNameType.Type, "ImGuiPlatformMonitor*")] ref ImGuiPlatformMonitor monitor, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, pStr0, idx);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderKeyboardPreview")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugRenderKeyboardPreviewNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[1397])(drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1397])((nint)drawList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderKeyboardPreview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderKeyboardPreview([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			DebugRenderKeyboardPreviewNative(drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderKeyboardPreview")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderKeyboardPreview([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderKeyboardPreviewNative((ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderViewportThumbnail")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugRenderViewportThumbnailNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImGuiViewportP*, ImRect, void>)vt[1398])(drawList, viewport, bb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)vt[1398])((nint)drawList, (nint)viewport, bb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderViewportThumbnail")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderViewportThumbnail([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderViewportThumbnail")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderViewportThumbnail([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ImGuiViewportP* viewport, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, viewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderViewportThumbnail")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderViewportThumbnail([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugRenderViewportThumbnail")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugRenderViewportThumbnail([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "ImGuiViewportP*")] ref ImGuiViewportP viewport, [NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, (ImGuiViewportP*)pviewport, bb);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasGetBuilderForStbTruetype")]
		[return: NativeName(NativeNameType.Type, "const ImFontBuilderIO*")]
		internal static ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetypeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontBuilderIO*>)vt[1399])();
			#else
			return (ImFontBuilderIO*)((delegate* unmanaged[Cdecl]<nint>)vt[1399])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasGetBuilderForStbTruetype")]
		[return: NativeName(NativeNameType.Type, "const ImFontBuilderIO*")]
		public static ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()
		{
			ImFontBuilderIO* ret = ImFontAtlasGetBuilderForStbTruetypeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasUpdateConfigDataPointers")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasUpdateConfigDataPointersNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[1400])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1400])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasUpdateConfigDataPointers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasUpdateConfigDataPointers([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			ImFontAtlasUpdateConfigDataPointersNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasUpdateConfigDataPointers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasUpdateConfigDataPointers([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasUpdateConfigDataPointersNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildInitNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[1401])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1401])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildInit([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildInit([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildInitNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildSetupFontNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontConfig*, float, float, void>)vt[1402])(atlas, font, fontConfig, ascent, descent);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, float, float, void>)vt[1402])((nint)atlas, (nint)font, (nint)fontConfig, ascent, descent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			ImFontAtlasBuildSetupFontNative(atlas, font, fontConfig, ascent, descent);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, fontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, fontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ImFontConfig* fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, fontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ref ImFontConfig fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFontConfig* pfontConfig = &fontConfig)
			{
				ImFontAtlasBuildSetupFontNative(atlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ref ImFontConfig fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ref ImFontConfig fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildSetupFont")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildSetupFont([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "font_config")] [NativeName(NativeNameType.Type, "ImFontConfig*")] ref ImFontConfig fontConfig, [NativeName(NativeNameType.Param, "ascent")] [NativeName(NativeNameType.Type, "float")] float ascent, [NativeName(NativeNameType.Param, "descent")] [NativeName(NativeNameType.Type, "float")] float descent)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* pfontConfig = &fontConfig)
					{
						ImFontAtlasBuildSetupFontNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildPackCustomRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildPackCustomRectsNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "stbrp_context_opaque")] [NativeName(NativeNameType.Type, "void*")] void* stbrpContextOpaque)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void*, void>)vt[1403])(atlas, stbrpContextOpaque);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1403])((nint)atlas, (nint)stbrpContextOpaque);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildPackCustomRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildPackCustomRects([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "stbrp_context_opaque")] [NativeName(NativeNameType.Type, "void*")] void* stbrpContextOpaque)
		{
			ImFontAtlasBuildPackCustomRectsNative(atlas, stbrpContextOpaque);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildPackCustomRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildPackCustomRects([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "stbrp_context_opaque")] [NativeName(NativeNameType.Type, "void*")] void* stbrpContextOpaque)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildPackCustomRectsNative((ImFontAtlas*)patlas, stbrpContextOpaque);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildFinishNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[1404])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1404])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildFinish([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas)
		{
			ImFontAtlasBuildFinishNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildFinish")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildFinish([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildFinishNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildRender8BppRectFromStringNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, byte*, byte, byte, void>)vt[1405])(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, nint, byte, byte, void>)vt[1405])((nint)atlas, x, y, w, h, (nint)inStr, inMarkerChar, inMarkerPixelValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender8BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] string inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender8BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRender8BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender8bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender8BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] string inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned char")] byte inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender8BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildRender32BppRectFromStringNative([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, byte*, byte, uint, void>)vt[1406])(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, nint, byte, uint, void>)vt[1406])((nint)atlas, x, y, w, h, (nint)inStr, inMarkerChar, inMarkerPixelValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] byte* inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRender32BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] string inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRender32BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRender32BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildRender32bppRectFromString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildRender32BppRectFromString([NativeName(NativeNameType.Param, "atlas")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas atlas, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "in_str")] [NativeName(NativeNameType.Type, "const char*")] string inStr, [NativeName(NativeNameType.Param, "in_marker_char")] [NativeName(NativeNameType.Type, "char")] byte inMarkerChar, [NativeName(NativeNameType.Param, "in_marker_pixel_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint inMarkerPixelValue)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRender32BppRectFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildMultiplyCalcLookupTableNative([NativeName(NativeNameType.Param, "out_table")] [NativeName(NativeNameType.Type, "unsigned char[256]")] byte* outTable, [NativeName(NativeNameType.Param, "in_multiply_factor")] [NativeName(NativeNameType.Type, "float")] float inMultiplyFactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, float, void>)vt[1407])(outTable, inMultiplyFactor);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[1407])((nint)outTable, inMultiplyFactor);
			#endif
		}
	}
}
