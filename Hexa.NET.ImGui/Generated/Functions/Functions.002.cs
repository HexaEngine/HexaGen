// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, tintCol);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, tintCol);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BeginComboNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImGuiComboFlags, byte>)vt[158])(label, previewValue, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ImGuiComboFlags, byte>)vt[158])((nint)label, (nint)previewValue, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			byte ret = BeginComboNative(label, previewValue, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue)
		{
			byte ret = BeginComboNative(label, previewValue, (ImGuiComboFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginComboNative((byte*)plabel, previewValue, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = BeginComboNative((byte*)plabel, previewValue, (ImGuiComboFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginComboNative((byte*)plabel, previewValue, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue)
		{
			fixed (byte* plabel = label)
			{
				byte ret = BeginComboNative((byte*)plabel, previewValue, (ImGuiComboFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginComboNative(pStr0, previewValue, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] byte* previewValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginComboNative(pStr0, previewValue, (ImGuiComboFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ref byte previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* ppreviewValue = &previewValue)
			{
				byte ret = BeginComboNative(label, (byte*)ppreviewValue, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ref byte previewValue)
		{
			fixed (byte* ppreviewValue = &previewValue)
			{
				byte ret = BeginComboNative(label, (byte*)ppreviewValue, (ImGuiComboFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* ppreviewValue = previewValue)
			{
				byte ret = BeginComboNative(label, (byte*)ppreviewValue, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> previewValue)
		{
			fixed (byte* ppreviewValue = previewValue)
			{
				byte ret = BeginComboNative(label, (byte*)ppreviewValue, (ImGuiComboFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] string previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (previewValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(previewValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(previewValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginComboNative(label, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] string previewValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (previewValue != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(previewValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(previewValue, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginComboNative(label, pStr0, (ImGuiComboFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ref byte previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* ppreviewValue = &previewValue)
				{
					byte ret = BeginComboNative((byte*)plabel, (byte*)ppreviewValue, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ref byte previewValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* ppreviewValue = &previewValue)
				{
					byte ret = BeginComboNative((byte*)plabel, (byte*)ppreviewValue, (ImGuiComboFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* ppreviewValue = previewValue)
				{
					byte ret = BeginComboNative((byte*)plabel, (byte*)ppreviewValue, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> previewValue)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* ppreviewValue = previewValue)
				{
					byte ret = BeginComboNative((byte*)plabel, (byte*)ppreviewValue, (ImGuiComboFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] string previewValue, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiComboFlags")] ImGuiComboFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (previewValue != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(previewValue);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(previewValue, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = BeginComboNative(pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginCombo")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginCombo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "preview_value")] [NativeName(NativeNameType.Type, "const char*")] string previewValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (previewValue != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(previewValue);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(previewValue, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = BeginComboNative(pStr0, pStr1, (ImGuiComboFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// only call EndCombo() if BeginCombo() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndCombo")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndComboNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[159])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[159])();
			#endif
		}

		/// <summary>
		/// only call EndCombo() if BeginCombo() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndCombo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndCombo()
		{
			EndComboNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ComboNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, byte**, int, int, byte>)vt[160])(label, currentItem, items, itemsCount, popupMaxHeightInItems);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, int, byte>)vt[160])((nint)label, (nint)currentItem, (nint)items, itemsCount, popupMaxHeightInItems);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte ret = ComboNative(label, currentItem, items, itemsCount, popupMaxHeightInItems);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte ret = ComboNative(label, currentItem, items, itemsCount, (int)(-1));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, items, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, items, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, items, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, items, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, items, itemsCount, popupMaxHeightInItems);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, items, itemsCount, (int)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, items, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, items, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, items, itemsCount, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, items, itemsCount, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, items, itemsCount, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, items, itemsCount, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, items, itemsCount, popupMaxHeightInItems);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, items, itemsCount, (int)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(items);
			if (items != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < items.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
			}
			byte ret = ComboNative(label, currentItem, pStrArray0, itemsCount, popupMaxHeightInItems);
			for (int i = 0; i < items.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(items);
			if (items != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < items.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
			}
			byte ret = ComboNative(label, currentItem, pStrArray0, itemsCount, (int)(-1));
			for (int i = 0; i < items.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(items);
			if (items != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < items.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
			}
			byte ret = ComboNative(pStr0, currentItem, pStrArray0, itemsCount, popupMaxHeightInItems);
			for (int i = 0; i < items.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(items);
			if (items != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < items.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
			}
			byte ret = ComboNative(pStr0, currentItem, pStrArray0, itemsCount, (int)(-1));
			for (int i = 0; i < items.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(items);
				if (items != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < items.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
				}
				byte ret = ComboNative(label, (int*)pcurrentItem, pStrArray0, itemsCount, popupMaxHeightInItems);
				for (int i = 0; i < items.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(items);
				if (items != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < items.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
				}
				byte ret = ComboNative(label, (int*)pcurrentItem, pStrArray0, itemsCount, (int)(-1));
				for (int i = 0; i < items.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(items);
				if (items != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < items.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
				}
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, pStrArray0, itemsCount, popupMaxHeightInItems);
				for (int i = 0; i < items.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str_arr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] items, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(items);
				if (items != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < items.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(items[i]);
				}
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, pStrArray0, itemsCount, (int)(-1));
				for (int i = 0; i < items.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ComboNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, byte*, int, byte>)vt[161])(label, currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, byte>)vt[161])((nint)label, (nint)currentItem, (nint)itemsSeparatedByZeros, popupMaxHeightInItems);
			#endif
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte ret = ComboNative(label, currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			byte ret = ComboNative(label, currentItem, itemsSeparatedByZeros, (int)(-1));
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, itemsSeparatedByZeros, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, itemsSeparatedByZeros, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, itemsSeparatedByZeros, (int)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, itemsSeparatedByZeros, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, itemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, itemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, itemsSeparatedByZeros, popupMaxHeightInItems);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] byte* itemsSeparatedByZeros)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, itemsSeparatedByZeros, (int)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
			{
				byte ret = ComboNative(label, currentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros)
		{
			fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
			{
				byte ret = ComboNative(label, currentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
			{
				byte ret = ComboNative(label, currentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros)
		{
			fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
			{
				byte ret = ComboNative(label, currentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (itemsSeparatedByZeros != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(label, currentItem, pStr0, popupMaxHeightInItems);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (itemsSeparatedByZeros != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(label, currentItem, pStr0, (int)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
				{
					byte ret = ComboNative((byte*)plabel, currentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
				{
					byte ret = ComboNative((byte*)plabel, currentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
				{
					byte ret = ComboNative((byte*)plabel, currentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
				{
					byte ret = ComboNative((byte*)plabel, currentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (itemsSeparatedByZeros != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, pStr1, popupMaxHeightInItems);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (itemsSeparatedByZeros != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, pStr1, (int)(-1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
				{
					byte ret = ComboNative(label, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
				{
					byte ret = ComboNative(label, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
				{
					byte ret = ComboNative(label, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
				{
					byte ret = ComboNative(label, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (itemsSeparatedByZeros != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ComboNative(label, (int*)pcurrentItem, pStr0, popupMaxHeightInItems);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (itemsSeparatedByZeros != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = ComboNative(label, (int*)pcurrentItem, pStr0, (int)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
					{
						byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ref byte itemsSeparatedByZeros)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					fixed (byte* pitemsSeparatedByZeros = &itemsSeparatedByZeros)
					{
						byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
					{
						byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, popupMaxHeightInItems);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> itemsSeparatedByZeros)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					fixed (byte* pitemsSeparatedByZeros = itemsSeparatedByZeros)
					{
						byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, (byte*)pitemsSeparatedByZeros, (int)(-1));
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (itemsSeparatedByZeros != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, pStr1, popupMaxHeightInItems);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_Str")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "items_separated_by_zeros")] [NativeName(NativeNameType.Type, "const char*")] string itemsSeparatedByZeros)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (itemsSeparatedByZeros != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(itemsSeparatedByZeros);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(itemsSeparatedByZeros, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, pStr1, (int)(-1));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ComboNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*>, void*, int, int, byte>)vt[162])(label, currentItem, getter, userData, itemsCount, popupMaxHeightInItems);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int, int, byte>)vt[162])((nint)label, (nint)currentItem, (nint)getter, (nint)userData, itemsCount, popupMaxHeightInItems);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte ret = ComboNative(label, currentItem, getter, userData, itemsCount, popupMaxHeightInItems);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte ret = ComboNative(label, currentItem, getter, userData, itemsCount, (int)(-1));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, getter, userData, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, getter, userData, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, getter, userData, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ComboNative((byte*)plabel, currentItem, getter, userData, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, getter, userData, itemsCount, popupMaxHeightInItems);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] int* currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ComboNative(pStr0, currentItem, getter, userData, itemsCount, (int)(-1));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, getter, userData, itemsCount, popupMaxHeightInItems);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(label, (int*)pcurrentItem, getter, userData, itemsCount, (int)(-1));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, getter, userData, itemsCount, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, getter, userData, itemsCount, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, getter, userData, itemsCount, popupMaxHeightInItems);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pcurrentItem = &currentItem)
				{
					byte ret = ComboNative((byte*)plabel, (int*)pcurrentItem, getter, userData, itemsCount, (int)(-1));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "popup_max_height_in_items")] [NativeName(NativeNameType.Type, "int")] int popupMaxHeightInItems)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, getter, userData, itemsCount, popupMaxHeightInItems);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCombo_FnStrPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Combo([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "current_item")] [NativeName(NativeNameType.Type, "int*")] ref int currentItem, [NativeName(NativeNameType.Param, "getter")] [NativeName(NativeNameType.Type, "const char* (*)(const char* label, int* current_item, const char* (*)(void* user_data, int idx)* getter, void* user_data, int items_count, int popup_max_height_in_items)*")] delegate*<byte*, int*, delegate*<void*, int, byte*>, void*, int, int, byte*> getter, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcurrentItem = &currentItem)
			{
				byte ret = ComboNative(pStr0, (int*)pcurrentItem, getter, userData, itemsCount, (int)(-1));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DragFloatNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, float*, float, float, float, byte*, ImGuiSliderFlags, byte>)vt[163])(label, v, vSpeed, vMin, vMax, format, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, float, float, float, nint, ImGuiSliderFlags, byte>)vt[163])((nint)label, (nint)v, vSpeed, vMin, vMax, (nint)format, flags);
			#endif
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte ret = DragFloatNative(label, v, vSpeed, vMin, vMax, format, flags);
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = DragFloatNative(label, v, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			bool ret = DragFloat(label, v, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			bool ret = DragFloat(label, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			bool ret = DragFloat(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v)
		{
			bool ret = DragFloat(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = DragFloatNative(label, v, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = DragFloatNative(label, v, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte ret = DragFloatNative(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			bool ret = DragFloat(label, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			bool ret = DragFloat(label, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			bool ret = DragFloat(label, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			bool ret = DragFloat(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte ret = DragFloatNative(label, v, vSpeed, vMin, (float)(0.0f), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte ret = DragFloatNative(label, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte ret = DragFloatNative(label, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				bool ret = DragFloat((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				bool ret = DragFloat((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DragFloatNative((byte*)plabel, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, vMin, vMax, format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, vMin, vMax, (string)"%.3f", flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			bool ret = DragFloat(pStr0, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, vMin, (float)(0.0f), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] float* v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragFloatNative(pStr0, v, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, vMin, vMax, format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(label, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					bool ret = DragFloat((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* plabel = label)
			{
				fixed (float* pv = &v)
				{
					byte ret = DragFloatNative((byte*)plabel, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, vMin, vMax, format, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, vMin, vMax, format, (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, vMin, (float)(0.0f), format, (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), format, (ImGuiSliderFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "float")] float vMax, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, vMin, vMax, (string)"%.3f", flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, vMin, (float)(0.0f), (string)"%.3f", flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				bool ret = DragFloat(pStr0, (float*)pv, (float)(1.0f), (float)(0.0f), (float)(0.0f), (string)"%.3f", flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "float")] float vMin, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, vMin, (float)(0.0f), format, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// If v_min &gt;= v_max we have no bound<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragFloat")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragFloat([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float*")] ref float v, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pv = &v)
			{
				byte ret = DragFloatNative(pStr0, (float*)pv, vSpeed, (float)(0.0f), (float)(0.0f), format, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}
	}
}
