// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyCalcLookupTable([NativeName(NativeNameType.Param, "out_table")] [NativeName(NativeNameType.Type, "unsigned char[256]")] byte* outTable, [NativeName(NativeNameType.Param, "in_multiply_factor")] [NativeName(NativeNameType.Type, "float")] float inMultiplyFactor)
		{
			ImFontAtlasBuildMultiplyCalcLookupTableNative(outTable, inMultiplyFactor);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyCalcLookupTable([NativeName(NativeNameType.Param, "out_table")] [NativeName(NativeNameType.Type, "unsigned char[256]")] ref byte outTable, [NativeName(NativeNameType.Param, "in_multiply_factor")] [NativeName(NativeNameType.Type, "float")] float inMultiplyFactor)
		{
			fixed (byte* poutTable = &outTable)
			{
				ImFontAtlasBuildMultiplyCalcLookupTableNative((byte*)poutTable, inMultiplyFactor);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyCalcLookupTable([NativeName(NativeNameType.Param, "out_table")] [NativeName(NativeNameType.Type, "unsigned char[256]")] ReadOnlySpan<byte> outTable, [NativeName(NativeNameType.Param, "in_multiply_factor")] [NativeName(NativeNameType.Type, "float")] float inMultiplyFactor)
		{
			fixed (byte* poutTable = outTable)
			{
				ImFontAtlasBuildMultiplyCalcLookupTableNative((byte*)poutTable, inMultiplyFactor);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImFontAtlasBuildMultiplyRectAlpha8Native([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] byte* table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, int, int, int, int, int, void>)vt[1408])(table, pixels, x, y, w, h, stride);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, int, int, int, void>)vt[1408])((nint)table, (nint)pixels, x, y, w, h, stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] byte* table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			ImFontAtlasBuildMultiplyRectAlpha8Native(table, pixels, x, y, w, h, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] ref byte table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* ptable = &table)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, pixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] ReadOnlySpan<byte> table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] byte* pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* ptable = table)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, pixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] byte* table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* ppixels = &pixels)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native(table, (byte*)ppixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] ref byte table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* ptable = &table)
			{
				fixed (byte* ppixels = &pixels)
				{
					ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, (byte*)ppixels, x, y, w, h, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImFontAtlasBuildMultiplyRectAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImFontAtlasBuildMultiplyRectAlpha8([NativeName(NativeNameType.Param, "table")] [NativeName(NativeNameType.Type, "const unsigned char[256]")] ReadOnlySpan<byte> table, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "unsigned char*")] ref byte pixels, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* ptable = table)
			{
				fixed (byte* ppixels = &pixels)
				{
					ImFontAtlasBuildMultiplyRectAlpha8Native((byte*)ptable, (byte*)ppixels, x, y, w, h, stride);
				}
			}
		}

		/// <summary>
		/// pass text data straight to log (without being displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LogTextNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[1409])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1409])((nint)fmt);
			#endif
		}

		/// <summary>
		/// pass text data straight to log (without being displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			LogTextNative(fmt);
		}

		/// <summary>
		/// pass text data straight to log (without being displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				LogTextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// pass text data straight to log (without being displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				LogTextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// pass text data straight to log (without being displayed)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLogText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LogText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LogTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void appendfNative([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*, void>)vt[1410])(buffer, fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1410])((nint)buffer, (nint)fmt);
			#endif
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			appendfNative(buffer, fmt);
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				appendfNative((ImGuiTextBuffer*)pbuffer, fmt);
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				appendfNative(buffer, (byte*)pfmt);
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				appendfNative(buffer, (byte*)pfmt);
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendfNative(buffer, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				fixed (byte* pfmt = &fmt)
				{
					appendfNative((ImGuiTextBuffer*)pbuffer, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				fixed (byte* pfmt = fmt)
				{
					appendfNative((ImGuiTextBuffer*)pbuffer, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendf([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer buffer, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			fixed (ImGuiTextBuffer* pbuffer = &buffer)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendfNative((ImGuiTextBuffer*)pbuffer, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// for getting FLT_MAX in bindings<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGET_FLT_MAX")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GETFLTMAXNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[1411])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[1411])();
			#endif
		}

		/// <summary>
		/// for getting FLT_MAX in bindings<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGET_FLT_MAX")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GETFLTMAX()
		{
			float ret = GETFLTMAXNative();
			return ret;
		}

		/// <summary>
		/// for getting FLT_MIN in bindings<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGET_FLT_MIN")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GETFLTMINNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[1412])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[1412])();
			#endif
		}

		/// <summary>
		/// for getting FLT_MIN in bindings<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGET_FLT_MIN")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GETFLTMIN()
		{
			float ret = GETFLTMINNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_create")]
		[return: NativeName(NativeNameType.Type, "ImVector_ImWchar*")]
		internal static ImVectorImWchar* ImVectorImWcharCreateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImVectorImWchar*>)vt[1413])();
			#else
			return (ImVectorImWchar*)((delegate* unmanaged[Cdecl]<nint>)vt[1413])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_create")]
		[return: NativeName(NativeNameType.Type, "ImVector_ImWchar*")]
		public static ImVectorImWchar* ImVectorImWcharCreate()
		{
			ImVectorImWchar* ret = ImVectorImWcharCreateNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImVectorImWcharDestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVectorImWchar*, void>)vt[1414])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1414])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* self)
		{
			ImVectorImWcharDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharDestroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar self)
		{
			fixed (ImVectorImWchar* pself = &self)
			{
				ImVectorImWcharDestroyNative((ImVectorImWchar*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImVectorImWcharInitNative([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVectorImWchar*, void>)vt[1415])(p);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1415])((nint)p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharInit([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* p)
		{
			ImVectorImWcharInitNative(p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_Init")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharInit([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar p)
		{
			fixed (ImVectorImWchar* pp = &p)
			{
				ImVectorImWcharInitNative((ImVectorImWchar*)pp);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_UnInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImVectorImWcharUnInitNative([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* p)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVectorImWchar*, void>)vt[1416])(p);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[1416])((nint)p);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_UnInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharUnInit([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ImVectorImWchar* p)
		{
			ImVectorImWcharUnInitNative(p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImVector_ImWchar_UnInit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImVectorImWcharUnInit([NativeName(NativeNameType.Param, "p")] [NativeName(NativeNameType.Type, "ImVector_ImWchar*")] ref ImVectorImWchar p)
		{
			fixed (ImVectorImWchar* pp = &p)
			{
				ImVectorImWcharUnInitNative((ImVectorImWchar*)pp);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiPlatformIOSetPlatformGetWindowPosNative([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ImGuiPlatformIO* platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_pos)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPlatformIO*, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void>, void>)vt[1417])(platformIo, userCallback);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1417])((nint)platformIo, (nint)userCallback);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiPlatformIOSetPlatformGetWindowPos([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ImGuiPlatformIO* platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_pos)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			ImGuiPlatformIOSetPlatformGetWindowPosNative(platformIo, userCallback);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowPos")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiPlatformIOSetPlatformGetWindowPos([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ref ImGuiPlatformIO platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_pos)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			fixed (ImGuiPlatformIO* pplatformIo = &platformIo)
			{
				ImGuiPlatformIOSetPlatformGetWindowPosNative((ImGuiPlatformIO*)pplatformIo, userCallback);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImGuiPlatformIOSetPlatformGetWindowSizeNative([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ImGuiPlatformIO* platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_size)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPlatformIO*, delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void>, void>)vt[1418])(platformIo, userCallback);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[1418])((nint)platformIo, (nint)userCallback);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiPlatformIOSetPlatformGetWindowSize([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ImGuiPlatformIO* platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_size)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			ImGuiPlatformIOSetPlatformGetWindowSizeNative(platformIo, userCallback);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPlatformIO_Set_Platform_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ImGuiPlatformIOSetPlatformGetWindowSize([NativeName(NativeNameType.Param, "platform_io")] [NativeName(NativeNameType.Type, "ImGuiPlatformIO*")] ref ImGuiPlatformIO platformIo, [NativeName(NativeNameType.Param, "user_callback")] [NativeName(NativeNameType.Type, "void (*)(ImGuiPlatformIO* platform_io, void (*)(ImGuiViewport* vp, ImVec2* out_size)* user_callback)*")] delegate*<ImGuiPlatformIO*, delegate*<ImGuiViewport*, Vector2*, void>, void> userCallback)
		{
			fixed (ImGuiPlatformIO* pplatformIo = &platformIo)
			{
				ImGuiPlatformIOSetPlatformGetWindowSizeNative((ImGuiPlatformIO*)pplatformIo, userCallback);
			}
		}

	}
}
