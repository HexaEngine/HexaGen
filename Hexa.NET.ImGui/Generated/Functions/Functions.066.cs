// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, pStr0, textSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (ImRect* pclipRect = &clipRect)
			{
				RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, (ImRect*)pclipRect);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, pStr1, textSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, textEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative(drawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, text, pStr0, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						fixed (ImRect* pclipRect = &clipRect)
						{
							RenderTextClippedExNative(drawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				fixed (ImRect* pclipRect = &clipRect)
				{
					RenderTextClippedExNative(drawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							fixed (ImRect* pclipRect = &clipRect)
							{
								RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							fixed (ImRect* pclipRect = &clipRect)
							{
								RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextClippedEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextClippedEx([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown, [NativeName(NativeNameType.Param, "align")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 align, [NativeName(NativeNameType.Param, "clip_rect")] [NativeName(NativeNameType.Type, "const ImRect*")] ref ImRect clipRect)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					fixed (ImRect* pclipRect = &clipRect)
					{
						RenderTextClippedExNative((ImDrawList*)pdrawList, posMin, posMax, pStr0, pStr1, (Vector2*)ptextSizeIfKnown, align, (ImRect*)pclipRect);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr1);
						}
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderTextEllipsisNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, float, float, byte*, byte*, Vector2*, void>)vt[1302])(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, textSizeIfKnown);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, float, float, nint, nint, nint, void>)vt[1302])((nint)drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (nint)text, (nint)textEnd, (nint)textSizeIfKnown);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, textSizeIfKnown);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, textSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, textSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = text)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, textSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, textSizeIfKnown);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, textSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, textSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, textSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, textSizeIfKnown);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, textSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, textSizeIfKnown);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] Vector2* textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, textSizeIfKnown);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, (Vector2*)ptextSizeIfKnown);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, (Vector2*)ptextSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, (Vector2*)ptextSizeIfKnown);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, (Vector2*)ptextSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, (Vector2*)ptextSizeIfKnown);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, (Vector2*)ptextSizeIfKnown);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
						{
							RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderTextEllipsis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderTextEllipsis([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMin, [NativeName(NativeNameType.Param, "pos_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 posMax, [NativeName(NativeNameType.Param, "clip_max_x")] [NativeName(NativeNameType.Type, "float")] float clipMaxX, [NativeName(NativeNameType.Param, "ellipsis_max_x")] [NativeName(NativeNameType.Type, "float")] float ellipsisMaxX, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "text_size_if_known")] [NativeName(NativeNameType.Type, "const ImVec2*")] ref Vector2 textSizeIfKnown)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative((ImDrawList*)pdrawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, (Vector2*)ptextSizeIfKnown);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderFrameNative([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "fill_col")] [NativeName(NativeNameType.Type, "ImU32")] uint fillCol, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] byte border, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, uint, byte, float, void>)vt[1303])(pMin, pMax, fillCol, border, rounding);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, uint, byte, float, void>)vt[1303])(pMin, pMax, fillCol, border, rounding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderFrame([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "fill_col")] [NativeName(NativeNameType.Type, "ImU32")] uint fillCol, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "bool")] bool border, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			RenderFrameNative(pMin, pMax, fillCol, border ? (byte)1 : (byte)0, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderFrameBorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderFrameBorderNative([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, float, void>)vt[1304])(pMin, pMax, rounding);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, Vector2, float, void>)vt[1304])(pMin, pMax, rounding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderFrameBorder")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderFrameBorder([NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			RenderFrameBorderNative(pMin, pMax, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderColorRectWithAlphaCheckerboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderColorRectWithAlphaCheckerboardNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "fill_col")] [NativeName(NativeNameType.Type, "ImU32")] uint fillCol, [NativeName(NativeNameType.Param, "grid_step")] [NativeName(NativeNameType.Type, "float")] float gridStep, [NativeName(NativeNameType.Param, "grid_off")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gridOff, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, Vector2, float, ImDrawFlags, void>)vt[1305])(drawList, pMin, pMax, fillCol, gridStep, gridOff, rounding, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, Vector2, float, ImDrawFlags, void>)vt[1305])((nint)drawList, pMin, pMax, fillCol, gridStep, gridOff, rounding, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderColorRectWithAlphaCheckerboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderColorRectWithAlphaCheckerboard([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "fill_col")] [NativeName(NativeNameType.Type, "ImU32")] uint fillCol, [NativeName(NativeNameType.Param, "grid_step")] [NativeName(NativeNameType.Type, "float")] float gridStep, [NativeName(NativeNameType.Param, "grid_off")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gridOff, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			RenderColorRectWithAlphaCheckerboardNative(drawList, pMin, pMax, fillCol, gridStep, gridOff, rounding, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderColorRectWithAlphaCheckerboard")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderColorRectWithAlphaCheckerboard([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "fill_col")] [NativeName(NativeNameType.Type, "ImU32")] uint fillCol, [NativeName(NativeNameType.Param, "grid_step")] [NativeName(NativeNameType.Type, "float")] float gridStep, [NativeName(NativeNameType.Param, "grid_off")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 gridOff, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderColorRectWithAlphaCheckerboardNative((ImDrawList*)pdrawList, pMin, pMax, fillCol, gridStep, gridOff, rounding, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderNavHighlight")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderNavHighlightNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiNavHighlightFlags")] ImGuiNavHighlightFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiNavHighlightFlags, void>)vt[1306])(bb, id, flags);
			#else
			((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiNavHighlightFlags, void>)vt[1306])(bb, id, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderNavHighlight")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderNavHighlight([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiNavHighlightFlags")] ImGuiNavHighlightFlags flags)
		{
			RenderNavHighlightNative(bb, id, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* FindRenderedTextEndNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)vt[1307])(text, textEnd);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[1307])((nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* ret = FindRenderedTextEndNative(text, textEnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, textEnd));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				byte* ret = FindRenderedTextEndNative((byte*)ptext, textEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative((byte*)ptext, textEnd));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				byte* ret = FindRenderedTextEndNative((byte*)ptext, textEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative((byte*)ptext, textEnd));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = FindRenderedTextEndNative(pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(pStr0, textEnd));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				byte* ret = FindRenderedTextEndNative(text, (byte*)ptextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, (byte*)ptextEnd));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				byte* ret = FindRenderedTextEndNative(text, (byte*)ptextEnd);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, (byte*)ptextEnd));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = FindRenderedTextEndNative(text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte* ret = FindRenderedTextEndNative((byte*)ptext, (byte*)ptextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative((byte*)ptext, (byte*)ptextEnd));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					byte* ret = FindRenderedTextEndNative((byte*)ptext, (byte*)ptextEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative((byte*)ptext, (byte*)ptextEnd));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* FindRenderedTextEnd([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = FindRenderedTextEndNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindRenderedTextEnd")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string FindRenderedTextEndS([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderMouseCursor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderMouseCursorNative([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "mouse_cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor mouseCursor, [NativeName(NativeNameType.Param, "col_fill")] [NativeName(NativeNameType.Type, "ImU32")] uint colFill, [NativeName(NativeNameType.Param, "col_border")] [NativeName(NativeNameType.Type, "ImU32")] uint colBorder, [NativeName(NativeNameType.Param, "col_shadow")] [NativeName(NativeNameType.Type, "ImU32")] uint colShadow)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, float, ImGuiMouseCursor, uint, uint, uint, void>)vt[1308])(pos, scale, mouseCursor, colFill, colBorder, colShadow);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, float, ImGuiMouseCursor, uint, uint, uint, void>)vt[1308])(pos, scale, mouseCursor, colFill, colBorder, colShadow);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderMouseCursor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderMouseCursor([NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale, [NativeName(NativeNameType.Param, "mouse_cursor")] [NativeName(NativeNameType.Type, "ImGuiMouseCursor")] ImGuiMouseCursor mouseCursor, [NativeName(NativeNameType.Param, "col_fill")] [NativeName(NativeNameType.Type, "ImU32")] uint colFill, [NativeName(NativeNameType.Param, "col_border")] [NativeName(NativeNameType.Type, "ImU32")] uint colBorder, [NativeName(NativeNameType.Param, "col_shadow")] [NativeName(NativeNameType.Type, "ImU32")] uint colShadow)
		{
			RenderMouseCursorNative(pos, scale, mouseCursor, colFill, colBorder, colShadow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrow")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderArrowNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, uint, ImGuiDir, float, void>)vt[1309])(drawList, pos, col, dir, scale);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, uint, ImGuiDir, float, void>)vt[1309])((nint)drawList, pos, col, dir, scale);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrow([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			RenderArrowNative(drawList, pos, col, dir, scale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrow")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrow([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "scale")] [NativeName(NativeNameType.Type, "float")] float scale)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderArrowNative((ImDrawList*)pdrawList, pos, col, dir, scale);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderBullet")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderBulletNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, uint, void>)vt[1310])(drawList, pos, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, uint, void>)vt[1310])((nint)drawList, pos, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderBullet")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderBullet([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			RenderBulletNative(drawList, pos, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderBullet")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderBullet([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderBulletNative((ImDrawList*)pdrawList, pos, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderCheckMark")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderCheckMarkNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, uint, float, void>)vt[1311])(drawList, pos, col, sz);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, uint, float, void>)vt[1311])((nint)drawList, pos, col, sz);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderCheckMark")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderCheckMark([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz)
		{
			RenderCheckMarkNative(drawList, pos, col, sz);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderCheckMark")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderCheckMark([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderCheckMarkNative((ImDrawList*)pdrawList, pos, col, sz);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowPointingAt")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderArrowPointingAtNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "half_sz")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 halfSz, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir direction, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, ImGuiDir, uint, void>)vt[1312])(drawList, pos, halfSz, direction, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, ImGuiDir, uint, void>)vt[1312])((nint)drawList, pos, halfSz, direction, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowPointingAt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrowPointingAt([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "half_sz")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 halfSz, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir direction, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			RenderArrowPointingAtNative(drawList, pos, halfSz, direction, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowPointingAt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrowPointingAt([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "half_sz")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 halfSz, [NativeName(NativeNameType.Param, "direction")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir direction, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderArrowPointingAtNative((ImDrawList*)pdrawList, pos, halfSz, direction, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowDockMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderArrowDockMenuNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, uint, void>)vt[1313])(drawList, pMin, sz, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, uint, void>)vt[1313])((nint)drawList, pMin, sz, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowDockMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrowDockMenu([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			RenderArrowDockMenuNative(drawList, pMin, sz, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderArrowDockMenu")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderArrowDockMenu([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "sz")] [NativeName(NativeNameType.Type, "float")] float sz, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderArrowDockMenuNative((ImDrawList*)pdrawList, pMin, sz, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledRangeH")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderRectFilledRangeHNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "x_start_norm")] [NativeName(NativeNameType.Type, "float")] float xStartNorm, [NativeName(NativeNameType.Param, "x_end_norm")] [NativeName(NativeNameType.Type, "float")] float xEndNorm, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImRect, uint, float, float, float, void>)vt[1314])(drawList, rect, col, xStartNorm, xEndNorm, rounding);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, uint, float, float, float, void>)vt[1314])((nint)drawList, rect, col, xStartNorm, xEndNorm, rounding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledRangeH")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderRectFilledRangeH([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "x_start_norm")] [NativeName(NativeNameType.Type, "float")] float xStartNorm, [NativeName(NativeNameType.Param, "x_end_norm")] [NativeName(NativeNameType.Type, "float")] float xEndNorm, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			RenderRectFilledRangeHNative(drawList, rect, col, xStartNorm, xEndNorm, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledRangeH")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderRectFilledRangeH([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rect, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "x_start_norm")] [NativeName(NativeNameType.Type, "float")] float xStartNorm, [NativeName(NativeNameType.Param, "x_end_norm")] [NativeName(NativeNameType.Type, "float")] float xEndNorm, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderRectFilledRangeHNative((ImDrawList*)pdrawList, rect, col, xStartNorm, xEndNorm, rounding);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledWithHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderRectFilledWithHoleNative([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect outer, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect inner, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImRect, ImRect, uint, float, void>)vt[1315])(drawList, outer, inner, col, rounding);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImRect, ImRect, uint, float, void>)vt[1315])((nint)drawList, outer, inner, col, rounding);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledWithHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderRectFilledWithHole([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect outer, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect inner, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			RenderRectFilledWithHoleNative(drawList, outer, inner, col, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderRectFilledWithHole")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderRectFilledWithHole([NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect outer, [NativeName(NativeNameType.Param, "inner")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect inner, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				RenderRectFilledWithHoleNative((ImDrawList*)pdrawList, outer, inner, col, rounding);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcRoundingFlagsForRectInRect")]
		[return: NativeName(NativeNameType.Type, "ImDrawFlags")]
		internal static ImDrawFlags CalcRoundingFlagsForRectInRectNative([NativeName(NativeNameType.Param, "r_in")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rIn, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, ImRect, float, ImDrawFlags>)vt[1316])(rIn, rOuter, threshold);
			#else
			return (ImDrawFlags)((delegate* unmanaged[Cdecl]<ImRect, ImRect, float, ImDrawFlags>)vt[1316])(rIn, rOuter, threshold);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCalcRoundingFlagsForRectInRect")]
		[return: NativeName(NativeNameType.Type, "ImDrawFlags")]
		public static ImDrawFlags CalcRoundingFlagsForRectInRect([NativeName(NativeNameType.Param, "r_in")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rIn, [NativeName(NativeNameType.Param, "r_outer")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect rOuter, [NativeName(NativeNameType.Param, "threshold")] [NativeName(NativeNameType.Type, "float")] float threshold)
		{
			ImDrawFlags ret = CalcRoundingFlagsForRectInRectNative(rIn, rOuter, threshold);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextExNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, ImGuiTextFlags, void>)vt[1317])(text, textEnd, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImGuiTextFlags, void>)vt[1317])((nint)text, (nint)textEnd, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			TextExNative(text, textEnd, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				TextExNative((byte*)ptext, textEnd, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptext = text)
			{
				TextExNative((byte*)ptext, textEnd, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextExNative(pStr0, textEnd, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				TextExNative(text, (byte*)ptextEnd, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				TextExNative(text, (byte*)ptextEnd, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextExNative(text, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					TextExNative((byte*)ptext, (byte*)ptextEnd, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					TextExNative((byte*)ptext, (byte*)ptextEnd, flags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextEx([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTextFlags")] ImGuiTextFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			TextExNative(pStr0, pStr1, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ButtonExNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiButtonFlags, byte>)vt[1318])(label, sizeArg, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiButtonFlags, byte>)vt[1318])((nint)label, sizeArg, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte ret = ButtonExNative(label, sizeArg, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ButtonExNative((byte*)plabel, sizeArg, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ButtonExNative((byte*)plabel, sizeArg, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonEx([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ButtonExNative(pStr0, sizeArg, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ArrowButtonExNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDir, Vector2, ImGuiButtonFlags, byte>)vt[1319])(strId, dir, sizeArg, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDir, Vector2, ImGuiButtonFlags, byte>)vt[1319])((nint)strId, dir, sizeArg, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButtonEx([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte ret = ArrowButtonExNative(strId, dir, sizeArg, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButtonEx([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ArrowButtonExNative((byte*)pstrId, dir, sizeArg, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButtonEx([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ArrowButtonExNative((byte*)pstrId, dir, sizeArg, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButtonEx([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ArrowButtonExNative(pStr0, dir, sizeArg, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImageButtonExNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, ImGuiButtonFlags, byte>)vt[1320])(id, textureId, imageSize, uv0, uv1, bgCol, tintCol, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, ImGuiButtonFlags, byte>)vt[1320])(id, textureId, imageSize, uv0, uv1, bgCol, tintCol, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButtonEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButtonEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte ret = ImageButtonExNative(id, textureId, imageSize, uv0, uv1, bgCol, tintCol, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeparatorExNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSeparatorFlags")] ImGuiSeparatorFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSeparatorFlags, float, void>)vt[1321])(flags, thickness);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiSeparatorFlags, float, void>)vt[1321])(flags, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorEx([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSeparatorFlags")] ImGuiSeparatorFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			SeparatorExNative(flags, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeparatorTextExNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, byte*, float, void>)vt[1322])(id, label, labelEnd, extraWidth);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, float, void>)vt[1322])(id, (nint)label, (nint)labelEnd, extraWidth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			SeparatorTextExNative(id, label, labelEnd, extraWidth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabel = &label)
			{
				SeparatorTextExNative(id, (byte*)plabel, labelEnd, extraWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabel = label)
			{
				SeparatorTextExNative(id, (byte*)plabel, labelEnd, extraWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextExNative(id, pStr0, labelEnd, extraWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabelEnd = &labelEnd)
			{
				SeparatorTextExNative(id, label, (byte*)plabelEnd, extraWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabelEnd = labelEnd)
			{
				SeparatorTextExNative(id, label, (byte*)plabelEnd, extraWidth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] string labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextExNative(id, label, pStr0, extraWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* plabelEnd = &labelEnd)
				{
					SeparatorTextExNative(id, (byte*)plabel, (byte*)plabelEnd, extraWidth);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* plabelEnd = labelEnd)
				{
					SeparatorTextExNative(id, (byte*)plabel, (byte*)plabelEnd, extraWidth);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorTextEx")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorTextEx([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] string labelEnd, [NativeName(NativeNameType.Param, "extra_width")] [NativeName(NativeNameType.Type, "float")] float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (labelEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(labelEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SeparatorTextExNative(id, pStr0, pStr1, extraWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckboxFlagsS64PtrNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] long* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, long*, long, byte>)vt[1323])(label, flags, flagsValue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, long, byte>)vt[1323])((nint)label, (nint)flags, flagsValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] long* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			byte ret = CheckboxFlagsS64PtrNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] long* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsS64PtrNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] long* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			fixed (byte* plabel = label)
			{
				byte ret = CheckboxFlagsS64PtrNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] long* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsS64PtrNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] ref long flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			fixed (long* pflags = &flags)
			{
				byte ret = CheckboxFlagsS64PtrNative(label, (long*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] ref long flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (long* pflags = &flags)
				{
					byte ret = CheckboxFlagsS64PtrNative((byte*)plabel, (long*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] ref long flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			fixed (byte* plabel = label)
			{
				fixed (long* pflags = &flags)
				{
					byte ret = CheckboxFlagsS64PtrNative((byte*)plabel, (long*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_S64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsS64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImS64*")] ref long flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImS64")] long flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (long* pflags = &flags)
			{
				byte ret = CheckboxFlagsS64PtrNative(pStr0, (long*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckboxFlagsU64PtrNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ulong* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ulong*, ulong, byte>)vt[1324])(label, flags, flagsValue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, ulong, byte>)vt[1324])((nint)label, (nint)flags, flagsValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ulong* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			byte ret = CheckboxFlagsU64PtrNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ulong* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsU64PtrNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ulong* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			fixed (byte* plabel = label)
			{
				byte ret = CheckboxFlagsU64PtrNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ulong* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsU64PtrNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ref ulong flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			fixed (ulong* pflags = &flags)
			{
				byte ret = CheckboxFlagsU64PtrNative(label, (ulong*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ref ulong flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (ulong* pflags = &flags)
				{
					byte ret = CheckboxFlagsU64PtrNative((byte*)plabel, (ulong*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ref ulong flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			fixed (byte* plabel = label)
			{
				fixed (ulong* pflags = &flags)
				{
					byte ret = CheckboxFlagsU64PtrNative((byte*)plabel, (ulong*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_U64Ptr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlagsU64Ptr([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImU64*")] ref ulong flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "ImU64")] ulong flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ulong* pflags = &flags)
			{
				byte ret = CheckboxFlagsU64PtrNative(pStr0, (ulong*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCloseButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CloseButtonNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Vector2, byte>)vt[1325])(id, pos);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, Vector2, byte>)vt[1325])(id, pos);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCloseButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CloseButton([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos)
		{
			byte ret = CloseButtonNative(id, pos);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCollapseButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CollapseButtonNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "dock_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* dockNode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, Vector2, ImGuiDockNode*, byte>)vt[1326])(id, pos, dockNode);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, Vector2, nint, byte>)vt[1326])(id, pos, (nint)dockNode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCollapseButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CollapseButton([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "dock_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ImGuiDockNode* dockNode)
		{
			byte ret = CollapseButtonNative(id, pos, dockNode);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCollapseButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CollapseButton([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "dock_node")] [NativeName(NativeNameType.Type, "ImGuiDockNode*")] ref ImGuiDockNode dockNode)
		{
			fixed (ImGuiDockNode* pdockNode = &dockNode)
			{
				byte ret = CollapseButtonNative(id, pos, (ImGuiDockNode*)pdockNode);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollbar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScrollbarNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiAxis, void>)vt[1327])(axis);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiAxis, void>)vt[1327])(axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollbar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Scrollbar([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			ScrollbarNative(axis);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollbarEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ScrollbarExNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "p_scroll_v")] [NativeName(NativeNameType.Type, "ImS64*")] long* pScrollV, [NativeName(NativeNameType.Param, "avail_v")] [NativeName(NativeNameType.Type, "ImS64")] long availV, [NativeName(NativeNameType.Param, "contents_v")] [NativeName(NativeNameType.Type, "ImS64")] long contentsV, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiAxis, long*, long, long, ImDrawFlags, byte>)vt[1328])(bb, id, axis, pScrollV, availV, contentsV, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiAxis, nint, long, long, ImDrawFlags, byte>)vt[1328])(bb, id, axis, (nint)pScrollV, availV, contentsV, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollbarEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ScrollbarEx([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "p_scroll_v")] [NativeName(NativeNameType.Type, "ImS64*")] long* pScrollV, [NativeName(NativeNameType.Param, "avail_v")] [NativeName(NativeNameType.Type, "ImS64")] long availV, [NativeName(NativeNameType.Param, "contents_v")] [NativeName(NativeNameType.Type, "ImS64")] long contentsV, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			byte ret = ScrollbarExNative(bb, id, axis, pScrollV, availV, contentsV, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igScrollbarEx")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ScrollbarEx([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "p_scroll_v")] [NativeName(NativeNameType.Type, "ImS64*")] ref long pScrollV, [NativeName(NativeNameType.Param, "avail_v")] [NativeName(NativeNameType.Type, "ImS64")] long availV, [NativeName(NativeNameType.Param, "contents_v")] [NativeName(NativeNameType.Type, "ImS64")] long contentsV, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (long* ppScrollV = &pScrollV)
			{
				byte ret = ScrollbarExNative(bb, id, axis, (long*)ppScrollV, availV, contentsV, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetWindowScrollbarRectNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImRect*, ImGuiWindow*, ImGuiAxis, void>)vt[1329])(pOut, window, axis);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImGuiAxis, void>)vt[1329])((nint)pOut, (nint)window, axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect GetWindowScrollbarRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			ImRect ret;
			GetWindowScrollbarRectNative(&ret, window, axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetWindowScrollbarRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			GetWindowScrollbarRectNative(pOut, window, axis);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetWindowScrollbarRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				GetWindowScrollbarRectNative((ImRect*)ppOut, window, axis);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImRect GetWindowScrollbarRect([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				ImRect ret;
				GetWindowScrollbarRectNative(&ret, (ImGuiWindow*)pwindow, axis);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetWindowScrollbarRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GetWindowScrollbarRectNative(pOut, (ImGuiWindow*)pwindow, axis);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetWindowScrollbarRect([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect pOut, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			fixed (ImRect* ppOut = &pOut)
			{
				fixed (ImGuiWindow* pwindow = &window)
				{
					GetWindowScrollbarRectNative((ImRect*)ppOut, (ImGuiWindow*)pwindow, axis);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetWindowScrollbarIDNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiAxis, uint>)vt[1330])(window, axis);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, ImGuiAxis, uint>)vt[1330])((nint)window, axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowScrollbarID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			uint ret = GetWindowScrollbarIDNative(window, axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowScrollbarID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowScrollbarID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				uint ret = GetWindowScrollbarIDNative((ImGuiWindow*)pwindow, axis);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeCornerID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetWindowResizeCornerIDNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, int, uint>)vt[1331])(window, n);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[1331])((nint)window, n);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeCornerID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowResizeCornerID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			uint ret = GetWindowResizeCornerIDNative(window, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeCornerID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowResizeCornerID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "int")] int n)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				uint ret = GetWindowResizeCornerIDNative((ImGuiWindow*)pwindow, n);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeBorderID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetWindowResizeBorderIDNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiDir, uint>)vt[1332])(window, dir);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, ImGuiDir, uint>)vt[1332])((nint)window, dir);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeBorderID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowResizeBorderID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ImGuiWindow* window, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			uint ret = GetWindowResizeBorderIDNative(window, dir);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetWindowResizeBorderID")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetWindowResizeBorderID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "ImGuiWindow*")] ref ImGuiWindow window, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				uint ret = GetWindowResizeBorderIDNative((ImGuiWindow*)pwindow, dir);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ButtonBehaviorNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "out_hovered")] [NativeName(NativeNameType.Type, "bool*")] bool* outHovered, [NativeName(NativeNameType.Param, "out_held")] [NativeName(NativeNameType.Type, "bool*")] bool* outHeld, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, bool*, bool*, ImGuiButtonFlags, byte>)vt[1333])(bb, id, outHovered, outHeld, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, nint, nint, ImGuiButtonFlags, byte>)vt[1333])(bb, id, (nint)outHovered, (nint)outHeld, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "out_hovered")] [NativeName(NativeNameType.Type, "bool*")] bool* outHovered, [NativeName(NativeNameType.Param, "out_held")] [NativeName(NativeNameType.Type, "bool*")] bool* outHeld, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte ret = ButtonBehaviorNative(bb, id, outHovered, outHeld, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "out_hovered")] [NativeName(NativeNameType.Type, "bool*")] ref bool outHovered, [NativeName(NativeNameType.Param, "out_held")] [NativeName(NativeNameType.Type, "bool*")] bool* outHeld, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				byte ret = ButtonBehaviorNative(bb, id, (bool*)poutHovered, outHeld, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "out_hovered")] [NativeName(NativeNameType.Type, "bool*")] bool* outHovered, [NativeName(NativeNameType.Param, "out_held")] [NativeName(NativeNameType.Type, "bool*")] ref bool outHeld, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (bool* poutHeld = &outHeld)
			{
				byte ret = ButtonBehaviorNative(bb, id, outHovered, (bool*)poutHeld, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igButtonBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ButtonBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "out_hovered")] [NativeName(NativeNameType.Type, "bool*")] ref bool outHovered, [NativeName(NativeNameType.Param, "out_held")] [NativeName(NativeNameType.Type, "bool*")] ref bool outHeld, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (bool* poutHovered = &outHovered)
			{
				fixed (bool* poutHeld = &outHeld)
				{
					byte ret = ButtonBehaviorNative(bb, id, (bool*)poutHovered, (bool*)poutHeld, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DragBehaviorNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, void*, float, void*, void*, byte*, ImGuiSliderFlags, byte>)vt[1334])(id, dataType, pV, vSpeed, pMin, pMax, format, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, nint, float, nint, nint, nint, ImGuiSliderFlags, byte>)vt[1334])(id, dataType, (nint)pV, vSpeed, (nint)pMin, (nint)pMax, (nint)format, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, format, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			fixed (byte* pformat = format)
			{
				byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDragBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DragBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "v_speed")] [NativeName(NativeNameType.Type, "float")] float vSpeed, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte SliderBehaviorNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* outGrabBb)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiDataType, void*, void*, void*, byte*, ImGuiSliderFlags, ImRect*, byte>)vt[1335])(bb, id, dataType, pV, pMin, pMax, format, flags, outGrabBb);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiDataType, nint, nint, nint, nint, ImGuiSliderFlags, nint, byte>)vt[1335])(bb, id, dataType, (nint)pV, (nint)pMin, (nint)pMax, (nint)format, flags, (nint)outGrabBb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* outGrabBb)
		{
			byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, format, flags, outGrabBb);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* outGrabBb)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, outGrabBb);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* outGrabBb)
		{
			fixed (byte* pformat = format)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, outGrabBb);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ImRect* outGrabBb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, pStr0, flags, outGrabBb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect outGrabBb)
		{
			fixed (ImRect* poutGrabBb = &outGrabBb)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, format, flags, (ImRect*)poutGrabBb);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect outGrabBb)
		{
			fixed (byte* pformat = &format)
			{
				fixed (ImRect* poutGrabBb = &outGrabBb)
				{
					byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, (ImRect*)poutGrabBb);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect outGrabBb)
		{
			fixed (byte* pformat = format)
			{
				fixed (ImRect* poutGrabBb = &outGrabBb)
				{
					byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, (ImRect*)poutGrabBb);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSliderBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SliderBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_v")] [NativeName(NativeNameType.Type, "void*")] void* pV, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const void*")] void* pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const void*")] void* pMax, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiSliderFlags")] ImGuiSliderFlags flags, [NativeName(NativeNameType.Param, "out_grab_bb")] [NativeName(NativeNameType.Type, "ImRect*")] ref ImRect outGrabBb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* poutGrabBb = &outGrabBb)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, pStr0, flags, (ImRect*)poutGrabBb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSplitterBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte SplitterBehaviorNative([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "size1")] [NativeName(NativeNameType.Type, "float*")] float* size1, [NativeName(NativeNameType.Param, "size2")] [NativeName(NativeNameType.Type, "float*")] float* size2, [NativeName(NativeNameType.Param, "min_size1")] [NativeName(NativeNameType.Type, "float")] float minsize1, [NativeName(NativeNameType.Param, "min_size2")] [NativeName(NativeNameType.Type, "float")] float minsize2, [NativeName(NativeNameType.Param, "hover_extend")] [NativeName(NativeNameType.Type, "float")] float hoverExtend, [NativeName(NativeNameType.Param, "hover_visibility_delay")] [NativeName(NativeNameType.Type, "float")] float hoverVisibilityDelay, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "ImU32")] uint bgCol)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiAxis, float*, float*, float, float, float, float, uint, byte>)vt[1336])(bb, id, axis, size1, size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ImRect, uint, ImGuiAxis, nint, nint, float, float, float, float, uint, byte>)vt[1336])(bb, id, axis, (nint)size1, (nint)size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSplitterBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SplitterBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "size1")] [NativeName(NativeNameType.Type, "float*")] float* size1, [NativeName(NativeNameType.Param, "size2")] [NativeName(NativeNameType.Type, "float*")] float* size2, [NativeName(NativeNameType.Param, "min_size1")] [NativeName(NativeNameType.Type, "float")] float minsize1, [NativeName(NativeNameType.Param, "min_size2")] [NativeName(NativeNameType.Type, "float")] float minsize2, [NativeName(NativeNameType.Param, "hover_extend")] [NativeName(NativeNameType.Type, "float")] float hoverExtend, [NativeName(NativeNameType.Param, "hover_visibility_delay")] [NativeName(NativeNameType.Type, "float")] float hoverVisibilityDelay, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "ImU32")] uint bgCol)
		{
			byte ret = SplitterBehaviorNative(bb, id, axis, size1, size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSplitterBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SplitterBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "size1")] [NativeName(NativeNameType.Type, "float*")] ref float size1, [NativeName(NativeNameType.Param, "size2")] [NativeName(NativeNameType.Type, "float*")] float* size2, [NativeName(NativeNameType.Param, "min_size1")] [NativeName(NativeNameType.Type, "float")] float minsize1, [NativeName(NativeNameType.Param, "min_size2")] [NativeName(NativeNameType.Type, "float")] float minsize2, [NativeName(NativeNameType.Param, "hover_extend")] [NativeName(NativeNameType.Type, "float")] float hoverExtend, [NativeName(NativeNameType.Param, "hover_visibility_delay")] [NativeName(NativeNameType.Type, "float")] float hoverVisibilityDelay, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "ImU32")] uint bgCol)
		{
			fixed (float* psize1 = &size1)
			{
				byte ret = SplitterBehaviorNative(bb, id, axis, (float*)psize1, size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSplitterBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SplitterBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "size1")] [NativeName(NativeNameType.Type, "float*")] float* size1, [NativeName(NativeNameType.Param, "size2")] [NativeName(NativeNameType.Type, "float*")] ref float size2, [NativeName(NativeNameType.Param, "min_size1")] [NativeName(NativeNameType.Type, "float")] float minsize1, [NativeName(NativeNameType.Param, "min_size2")] [NativeName(NativeNameType.Type, "float")] float minsize2, [NativeName(NativeNameType.Param, "hover_extend")] [NativeName(NativeNameType.Type, "float")] float hoverExtend, [NativeName(NativeNameType.Param, "hover_visibility_delay")] [NativeName(NativeNameType.Type, "float")] float hoverVisibilityDelay, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "ImU32")] uint bgCol)
		{
			fixed (float* psize2 = &size2)
			{
				byte ret = SplitterBehaviorNative(bb, id, axis, size1, (float*)psize2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSplitterBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SplitterBehavior([NativeName(NativeNameType.Param, "bb")] [NativeName(NativeNameType.Type, "const ImRect")] ImRect bb, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImGuiAxis")] ImGuiAxis axis, [NativeName(NativeNameType.Param, "size1")] [NativeName(NativeNameType.Type, "float*")] ref float size1, [NativeName(NativeNameType.Param, "size2")] [NativeName(NativeNameType.Type, "float*")] ref float size2, [NativeName(NativeNameType.Param, "min_size1")] [NativeName(NativeNameType.Type, "float")] float minsize1, [NativeName(NativeNameType.Param, "min_size2")] [NativeName(NativeNameType.Type, "float")] float minsize2, [NativeName(NativeNameType.Param, "hover_extend")] [NativeName(NativeNameType.Type, "float")] float hoverExtend, [NativeName(NativeNameType.Param, "hover_visibility_delay")] [NativeName(NativeNameType.Type, "float")] float hoverVisibilityDelay, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "ImU32")] uint bgCol)
		{
			fixed (float* psize1 = &size1)
			{
				fixed (float* psize2 = &size2)
				{
					byte ret = SplitterBehaviorNative(bb, id, axis, (float*)psize1, (float*)psize2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TreeNodeBehaviorNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiTreeNodeFlags, byte*, byte*, byte>)vt[1337])(id, flags, label, labelEnd);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImGuiTreeNodeFlags, nint, nint, byte>)vt[1337])(id, flags, (nint)label, (nint)labelEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd)
		{
			byte ret = TreeNodeBehaviorNative(id, flags, label, labelEnd);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, labelEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, labelEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] byte* labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, pStr0, labelEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelEnd)
		{
			fixed (byte* plabelEnd = &labelEnd)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, label, (byte*)plabelEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelEnd)
		{
			fixed (byte* plabelEnd = labelEnd)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, label, (byte*)plabelEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] string labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelEnd)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* plabelEnd = &labelEnd)
				{
					byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, (byte*)plabelEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelEnd)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* plabelEnd = labelEnd)
				{
					byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, (byte*)plabelEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeBehavior")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeBehavior([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "label_end")] [NativeName(NativeNameType.Type, "const char*")] string labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (labelEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(labelEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreePushOverrideID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TreePushOverrideIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1338])(id);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)vt[1338])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreePushOverrideID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TreePushOverrideID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			TreePushOverrideIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeGetOpen")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TreeNodeGetOpenNative([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)vt[1339])(storageId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)vt[1339])(storageId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeGetOpen")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeGetOpen([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId)
		{
			byte ret = TreeNodeGetOpenNative(storageId);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeSetOpen")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TreeNodeSetOpenNative([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId, [NativeName(NativeNameType.Param, "open")] [NativeName(NativeNameType.Type, "bool")] byte open)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, void>)vt[1340])(storageId, open);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, void>)vt[1340])(storageId, open);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeSetOpen")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TreeNodeSetOpen([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId, [NativeName(NativeNameType.Param, "open")] [NativeName(NativeNameType.Type, "bool")] bool open)
		{
			TreeNodeSetOpenNative(storageId, open ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeUpdateNextOpen")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TreeNodeUpdateNextOpenNative([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiTreeNodeFlags, byte>)vt[1341])(storageId, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ImGuiTreeNodeFlags, byte>)vt[1341])(storageId, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTreeNodeUpdateNextOpen")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TreeNodeUpdateNextOpen([NativeName(NativeNameType.Param, "storage_id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint storageId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiTreeNodeFlags")] ImGuiTreeNodeFlags flags)
		{
			byte ret = TreeNodeUpdateNextOpenNative(storageId, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeGetInfo")]
		[return: NativeName(NativeNameType.Type, "const ImGuiDataTypeInfo*")]
		internal static ImGuiDataTypeInfo* DataTypeGetInfoNative([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiDataType, ImGuiDataTypeInfo*>)vt[1342])(dataType);
			#else
			return (ImGuiDataTypeInfo*)((delegate* unmanaged[Cdecl]<ImGuiDataType, nint>)vt[1342])(dataType);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeGetInfo")]
		[return: NativeName(NativeNameType.Type, "const ImGuiDataTypeInfo*")]
		public static ImGuiDataTypeInfo* DataTypeGetInfo([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType)
		{
			ImGuiDataTypeInfo* ret = DataTypeGetInfoNative(dataType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyOp")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DataTypeApplyOpNative([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "op")] [NativeName(NativeNameType.Type, "int")] int op, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "void*")] void* output, [NativeName(NativeNameType.Param, "arg_1")] [NativeName(NativeNameType.Type, "const void*")] void* arg1, [NativeName(NativeNameType.Param, "arg_2")] [NativeName(NativeNameType.Type, "const void*")] void* arg2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDataType, int, void*, void*, void*, void>)vt[1343])(dataType, op, output, arg1, arg2);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiDataType, int, nint, nint, nint, void>)vt[1343])(dataType, op, (nint)output, (nint)arg1, (nint)arg2);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyOp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DataTypeApplyOp([NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "op")] [NativeName(NativeNameType.Type, "int")] int op, [NativeName(NativeNameType.Param, "output")] [NativeName(NativeNameType.Type, "void*")] void* output, [NativeName(NativeNameType.Param, "arg_1")] [NativeName(NativeNameType.Type, "const void*")] void* arg1, [NativeName(NativeNameType.Param, "arg_2")] [NativeName(NativeNameType.Type, "const void*")] void* arg2)
		{
			DataTypeApplyOpNative(dataType, op, output, arg1, arg2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DataTypeApplyFromTextNative([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDataType, void*, byte*, void*, byte>)vt[1344])(buf, dataType, pData, format, pDataWhenEmpty);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDataType, nint, nint, nint, byte>)vt[1344])((nint)buf, dataType, (nint)pData, (nint)format, (nint)pDataWhenEmpty);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, format, pDataWhenEmpty);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pbuf = &buf)
			{
				byte ret = DataTypeApplyFromTextNative((byte*)pbuf, dataType, pData, format, pDataWhenEmpty);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pbuf = buf)
			{
				byte ret = DataTypeApplyFromTextNative((byte*)pbuf, dataType, pData, format, pDataWhenEmpty);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] byte* format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DataTypeApplyFromTextNative(pStr0, dataType, pData, format, pDataWhenEmpty);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, (byte*)pformat, pDataWhenEmpty);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pformat = format)
			{
				byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, (byte*)pformat, pDataWhenEmpty);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] string format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, pStr0, pDataWhenEmpty);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDataTypeApplyFromText")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DataTypeApplyFromText([NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "data_type")] [NativeName(NativeNameType.Type, "ImGuiDataType")] ImGuiDataType dataType, [NativeName(NativeNameType.Param, "p_data")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "const char*")] ref byte format, [NativeName(NativeNameType.Param, "p_data_when_empty")] [NativeName(NativeNameType.Type, "void*")] void* pDataWhenEmpty)
		{
			fixed (byte* pbuf = &buf)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = DataTypeApplyFromTextNative((byte*)pbuf, dataType, pData, (byte*)pformat, pDataWhenEmpty);
					return ret != 0;
				}
			}
		}
	}
}
