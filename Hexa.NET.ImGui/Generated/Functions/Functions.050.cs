// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string c_strS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(c_strNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void appendNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*, byte*, void>)vt[471])(self, str, strEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[471])((nint)self, (nint)str, (nint)strEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			appendNative(self, str, strEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			appendNative(self, str, (byte*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				appendNative((ImGuiTextBuffer*)pself, str, strEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				appendNative((ImGuiTextBuffer*)pself, str, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (byte* pstr = &str)
			{
				appendNative(self, (byte*)pstr, strEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				appendNative(self, (byte*)pstr, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (byte* pstr = str)
			{
				appendNative(self, (byte*)pstr, strEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				appendNative(self, (byte*)pstr, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendNative(self, pStr0, strEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, strEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, strEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, pStr0, strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (byte* pstrEnd = &strEnd)
			{
				appendNative(self, str, (byte*)pstrEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strEnd)
		{
			fixed (byte* pstrEnd = strEnd)
			{
				appendNative(self, str, (byte*)pstrEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendNative(self, str, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					appendNative((ImGuiTextBuffer*)pself, str, (byte*)pstrEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstrEnd = strEnd)
				{
					appendNative((ImGuiTextBuffer*)pself, str, (byte*)pstrEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (strEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(strEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, str, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pstrEnd = &strEnd)
				{
					appendNative(self, (byte*)pstr, (byte*)pstrEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strEnd)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte* pstrEnd = strEnd)
				{
					appendNative(self, (byte*)pstr, (byte*)pstrEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			appendNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					fixed (byte* pstrEnd = &strEnd)
					{
						appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, (byte*)pstrEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					fixed (byte* pstrEnd = strEnd)
					{
						appendNative((ImGuiTextBuffer*)pself, (byte*)pstr, (byte*)pstrEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_append")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void append([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str, [NativeName(NativeNameType.Param, "str_end")] [NativeName(NativeNameType.Type, "const char*")] string strEnd)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (strEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(strEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(strEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				appendNative((ImGuiTextBuffer*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void appendfvNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*, nint, void>)vt[472])(self, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[472])((nint)self, (nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			appendfvNative(self, fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				appendfvNative((ImGuiTextBuffer*)pself, fmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				appendfvNative(self, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				appendfvNative(self, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendfvNative(self, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pfmt = &fmt)
				{
					appendfvNative((ImGuiTextBuffer*)pself, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				fixed (byte* pfmt = fmt)
				{
					appendfvNative((ImGuiTextBuffer*)pself, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_appendfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void appendfv([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				appendfvNative((ImGuiTextBuffer*)pself, pStr0, args);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		internal static ImGuiStoragePair* ImGuiStoragePairNative([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, ImGuiStoragePair*>)vt[473])(key, val);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<uint, int, nint>)vt[473])(key, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImGuiStoragePair([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			ImGuiStoragePair* ret = ImGuiStoragePairNative(key, val);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStoragePair*, void>)vt[474])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[474])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ImGuiStoragePair* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStoragePair*")] ref ImGuiStoragePair self)
		{
			fixed (ImGuiStoragePair* pself = &self)
			{
				DestroyNative((ImGuiStoragePair*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Float")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		internal static ImGuiStoragePair* ImGuiStoragePairNative([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, float, ImGuiStoragePair*>)vt[475])(key, val);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<uint, float, nint>)vt[475])(key, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Float")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImGuiStoragePair([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			ImGuiStoragePair* ret = ImGuiStoragePairNative(key, val);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		internal static ImGuiStoragePair* ImGuiStoragePairNative([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, ImGuiStoragePair*>)vt[476])(key, val);
			#else
			return (ImGuiStoragePair*)((delegate* unmanaged[Cdecl]<uint, nint, nint>)vt[476])(key, (nint)val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStoragePair_ImGuiStoragePair_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiStoragePair*")]
		public static ImGuiStoragePair* ImGuiStoragePair([NativeName(NativeNameType.Param, "_key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "_val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			ImGuiStoragePair* ret = ImGuiStoragePairNative(key, val);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, void>)vt[477])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[477])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				ClearNative((ImGuiStorage*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int GetIntNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, int, int>)vt[478])(self, key, defaultVal);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, uint, int, int>)vt[478])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			int ret = GetIntNative(self, key, defaultVal);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			int ret = GetIntNative(self, key, (int)(0));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int ret = GetIntNative((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetInt")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int ret = GetIntNative((ImGuiStorage*)pself, key, (int)(0));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetIntNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, int, void>)vt[479])(self, key, val);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, int, void>)vt[479])((nint)self, key, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			SetIntNative(self, key, val);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				SetIntNative((ImGuiStorage*)pself, key, val);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte GetBoolNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] byte defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, byte, byte>)vt[480])(self, key, defaultVal);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, uint, byte, byte>)vt[480])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			byte ret = GetBoolNative(self, key, defaultVal ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			byte ret = GetBoolNative(self, key, (byte)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				byte ret = GetBoolNative((ImGuiStorage*)pself, key, defaultVal ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				byte ret = GetBoolNative((ImGuiStorage*)pself, key, (byte)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetBool")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetBoolNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "bool")] byte val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, byte, void>)vt[481])(self, key, val);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, byte, void>)vt[481])((nint)self, key, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetBool")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "bool")] bool val)
		{
			SetBoolNative(self, key, val ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetBool")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetBool([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "bool")] bool val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				SetBoolNative((ImGuiStorage*)pself, key, val ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetFloatNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, float, float>)vt[482])(self, key, defaultVal);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, uint, float, float>)vt[482])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			float ret = GetFloatNative(self, key, defaultVal);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			float ret = GetFloatNative(self, key, (float)(0.0f));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float ret = GetFloatNative((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloat")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float ret = GetFloatNative((ImGuiStorage*)pself, key, (float)(0.0f));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetFloatNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, float, void>)vt[483])(self, key, val);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, float, void>)vt[483])((nint)self, key, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			SetFloatNative(self, key, val);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetFloat([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "float")] float val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				SetFloatNative((ImGuiStorage*)pself, key, val);
			}
		}

		/// <summary>
		/// default_val is NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* GetVoidPtrNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, void*>)vt[484])(self, key);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)vt[484])((nint)self, key);
			#endif
		}

		/// <summary>
		/// default_val is NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetVoidPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			void* ret = GetVoidPtrNative(self, key);
			return ret;
		}

		/// <summary>
		/// default_val is NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* GetVoidPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				void* ret = GetVoidPtrNative((ImGuiStorage*)pself, key);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetVoidPtrNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, void*, void>)vt[485])(self, key, val);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, nint, void>)vt[485])((nint)self, key, (nint)val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetVoidPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			SetVoidPtrNative(self, key, val);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetVoidPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetVoidPtr([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "void*")] void* val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				SetVoidPtrNative((ImGuiStorage*)pself, key, val);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		internal static int* GetIntRefNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, int, int*>)vt[486])(self, key, defaultVal);
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint, uint, int, nint>)vt[486])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* GetIntRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			int* ret = GetIntRefNative(self, key, defaultVal);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* GetIntRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			int* ret = GetIntRefNative(self, key, (int)(0));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* GetIntRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "int")] int defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int* ret = GetIntRefNative((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetIntRef")]
		[return: NativeName(NativeNameType.Type, "int*")]
		public static int* GetIntRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				int* ret = GetIntRefNative((ImGuiStorage*)pself, key, (int)(0));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		internal static bool* GetBoolRefNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] byte defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, byte, bool*>)vt[487])(self, key, defaultVal);
			#else
			return (bool*)((delegate* unmanaged[Cdecl]<nint, uint, byte, nint>)vt[487])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public static bool* GetBoolRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			bool* ret = GetBoolRefNative(self, key, defaultVal ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public static bool* GetBoolRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			bool* ret = GetBoolRefNative(self, key, (byte)(0));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public static bool* GetBoolRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "bool")] bool defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				bool* ret = GetBoolRefNative((ImGuiStorage*)pself, key, defaultVal ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetBoolRef")]
		[return: NativeName(NativeNameType.Type, "bool*")]
		public static bool* GetBoolRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				bool* ret = GetBoolRefNative((ImGuiStorage*)pself, key, (byte)(0));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		internal static float* GetFloatRefNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, float, float*>)vt[488])(self, key, defaultVal);
			#else
			return (float*)((delegate* unmanaged[Cdecl]<nint, uint, float, nint>)vt[488])((nint)self, key, defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* GetFloatRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			float* ret = GetFloatRefNative(self, key, defaultVal);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* GetFloatRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			float* ret = GetFloatRefNative(self, key, (float)(0.0f));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* GetFloatRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "float")] float defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float* ret = GetFloatRefNative((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetFloatRef")]
		[return: NativeName(NativeNameType.Type, "float*")]
		public static float* GetFloatRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				float* ret = GetFloatRefNative((ImGuiStorage*)pself, key, (float)(0.0f));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		internal static void** GetVoidPtrRefNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "void*")] void* defaultVal)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStorage*, uint, void*, void**>)vt[489])(self, key, defaultVal);
			#else
			return (void**)((delegate* unmanaged[Cdecl]<nint, uint, nint, nint>)vt[489])((nint)self, key, (nint)defaultVal);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** GetVoidPtrRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "void*")] void* defaultVal)
		{
			void** ret = GetVoidPtrRefNative(self, key, defaultVal);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** GetVoidPtrRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			void** ret = GetVoidPtrRefNative(self, key, (void*)(default));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** GetVoidPtrRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key, [NativeName(NativeNameType.Param, "default_val")] [NativeName(NativeNameType.Type, "void*")] void* defaultVal)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				void** ret = GetVoidPtrRefNative((ImGuiStorage*)pself, key, defaultVal);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_GetVoidPtrRef")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** GetVoidPtrRef([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiID")] uint key)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				void** ret = GetVoidPtrRefNative((ImGuiStorage*)pself, key, (void*)(default));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_BuildSortByKey")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BuildSortByKeyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, void>)vt[490])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[490])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_BuildSortByKey")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildSortByKey([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self)
		{
			BuildSortByKeyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_BuildSortByKey")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BuildSortByKey([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				BuildSortByKeyNative((ImGuiStorage*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetAllInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAllIntNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, int, void>)vt[491])(self, val);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[491])((nint)self, val);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetAllInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAllInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ImGuiStorage* self, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			SetAllIntNative(self, val);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStorage_SetAllInt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAllInt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStorage*")] ref ImGuiStorage self, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "int")] int val)
		{
			fixed (ImGuiStorage* pself = &self)
			{
				SetAllIntNative((ImGuiStorage*)pself, val);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_ImGuiListClipper")]
		[return: NativeName(NativeNameType.Type, "ImGuiListClipper*")]
		internal static ImGuiListClipper* ImGuiListClipperNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiListClipper*>)vt[492])();
			#else
			return (ImGuiListClipper*)((delegate* unmanaged[Cdecl]<nint>)vt[492])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_ImGuiListClipper")]
		[return: NativeName(NativeNameType.Type, "ImGuiListClipper*")]
		public static ImGuiListClipper* ImGuiListClipper()
		{
			ImGuiListClipper* ret = ImGuiListClipperNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, void>)vt[493])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[493])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				DestroyNative((ImGuiListClipper*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, int, float, void>)vt[494])(self, itemsCount, itemsHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, float, void>)vt[494])((nint)self, itemsCount, itemsHeight);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			BeginNative(self, itemsCount, itemsHeight);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			BeginNative(self, itemsCount, (float)(-1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount, [NativeName(NativeNameType.Param, "items_height")] [NativeName(NativeNameType.Type, "float")] float itemsHeight)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				BeginNative((ImGuiListClipper*)pself, itemsCount, itemsHeight);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Begin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self, [NativeName(NativeNameType.Param, "items_count")] [NativeName(NativeNameType.Type, "int")] int itemsCount)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				BeginNative((ImGuiListClipper*)pself, itemsCount, (float)(-1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, void>)vt[495])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[495])((nint)self);
			#endif
		}

		/// <summary>
		/// Automatically called on the last call of Step() that returns false.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void End([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			EndNative(self);
		}

		/// <summary>
		/// Automatically called on the last call of Step() that returns false.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_End")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void End([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				EndNative((ImGuiListClipper*)pself);
			}
		}

		/// <summary>
		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte StepNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiListClipper*, byte>)vt[496])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[496])((nint)self);
			#endif
		}

		/// <summary>
		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Step([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self)
		{
			byte ret = StepNative(self);
			return ret != 0;
		}

		/// <summary>
		/// Call until it returns false. The DisplayStartDisplayEnd fields will be set and you can processdraw those items.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_Step")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Step([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				byte ret = StepNative((ImGuiListClipper*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void IncludeItemByIndexNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, int, void>)vt[497])(self, itemIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[497])((nint)self, itemIndex);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void IncludeItemByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			IncludeItemByIndexNative(self, itemIndex);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void IncludeItemByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				IncludeItemByIndexNative((ImGuiListClipper*)pself, itemIndex);
			}
		}

		/// <summary>
		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemsByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void IncludeItemsByIndexNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, int, int, void>)vt[498])(self, itemBegin, itemEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[498])((nint)self, itemBegin, itemEnd);
			#endif
		}

		/// <summary>
		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemsByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void IncludeItemsByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			IncludeItemsByIndexNative(self, itemBegin, itemEnd);
		}

		/// <summary>
		/// item_end is exclusive e.g. use (42, 42+1) to make item 42 never clipped.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_IncludeItemsByIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void IncludeItemsByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self, [NativeName(NativeNameType.Param, "item_begin")] [NativeName(NativeNameType.Type, "int")] int itemBegin, [NativeName(NativeNameType.Param, "item_end")] [NativeName(NativeNameType.Type, "int")] int itemEnd)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				IncludeItemsByIndexNative((ImGuiListClipper*)pself, itemBegin, itemEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_SeekCursorForItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeekCursorForItemNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiListClipper*, int, void>)vt[499])(self, itemIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[499])((nint)self, itemIndex);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_SeekCursorForItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeekCursorForItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ImGuiListClipper* self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			SeekCursorForItemNative(self, itemIndex);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiListClipper_SeekCursorForItem")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeekCursorForItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiListClipper*")] ref ImGuiListClipper self, [NativeName(NativeNameType.Param, "item_index")] [NativeName(NativeNameType.Type, "int")] int itemIndex)
		{
			fixed (ImGuiListClipper* pself = &self)
			{
				SeekCursorForItemNative((ImGuiListClipper*)pself, itemIndex);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Nil")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		internal static ImColor* ImColorNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImColor*>)vt[500])();
			#else
			return (ImColor*)((delegate* unmanaged[Cdecl]<nint>)vt[500])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Nil")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor()
		{
			ImColor* ret = ImColorNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImColor*, void>)vt[501])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[501])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ref ImColor self)
		{
			fixed (ImColor* pself = &self)
			{
				DestroyNative((ImColor*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Float")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		internal static ImColor* ImColorNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "float")] float r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "float")] float g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "float")] float b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImColor*>)vt[502])(r, g, b, a);
			#else
			return (ImColor*)((delegate* unmanaged[Cdecl]<float, float, float, float, nint>)vt[502])(r, g, b, a);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Float")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "float")] float r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "float")] float g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "float")] float b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			ImColor* ret = ImColorNative(r, g, b, a);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Float")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "float")] float r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "float")] float g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "float")] float b)
		{
			ImColor* ret = ImColorNative(r, g, b, (float)(1.0f));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Vec4")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		internal static ImColor* ImColorNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4, ImColor*>)vt[503])(col);
			#else
			return (ImColor*)((delegate* unmanaged[Cdecl]<Vector4, nint>)vt[503])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Vec4")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			ImColor* ret = ImColorNative(col);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Int")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		internal static ImColor* ImColorNative([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "int")] int r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "int")] int g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "int")] int b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "int")] int a)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, ImColor*>)vt[504])(r, g, b, a);
			#else
			return (ImColor*)((delegate* unmanaged[Cdecl]<int, int, int, int, nint>)vt[504])(r, g, b, a);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Int")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "int")] int r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "int")] int g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "int")] int b, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "int")] int a)
		{
			ImColor* ret = ImColorNative(r, g, b, a);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_Int")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "int")] int r, [NativeName(NativeNameType.Param, "g")] [NativeName(NativeNameType.Type, "int")] int g, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "int")] int b)
		{
			ImColor* ret = ImColorNative(r, g, b, (int)(255));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_U32")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		internal static ImColor* ImColorNative([NativeName(NativeNameType.Param, "rgba")] [NativeName(NativeNameType.Type, "ImU32")] uint rgba)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImColor*>)vt[505])(rgba);
			#else
			return (ImColor*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[505])(rgba);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_ImColor_U32")]
		[return: NativeName(NativeNameType.Type, "ImColor*")]
		public static ImColor* ImColor([NativeName(NativeNameType.Param, "rgba")] [NativeName(NativeNameType.Type, "ImU32")] uint rgba)
		{
			ImColor* ret = ImColorNative(rgba);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetHSVNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* self, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImColor*, float, float, float, float, void>)vt[506])(self, h, s, v, a);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, float, float, void>)vt[506])((nint)self, h, s, v, a);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHSV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* self, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			SetHSVNative(self, h, s, v, a);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHSV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* self, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			SetHSVNative(self, h, s, v, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHSV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ref ImColor self, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* pself = &self)
			{
				SetHSVNative((ImColor*)pself, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_SetHSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetHSV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImColor*")] ref ImColor self, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* pself = &self)
			{
				SetHSVNative((ImColor*)pself, h, s, v, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void HSVNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* pOut, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImColor*, float, float, float, float, void>)vt[507])(pOut, h, s, v, a);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, float, float, void>)vt[507])((nint)pOut, h, s, v, a);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HSV([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* pOut, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			HSVNative(pOut, h, s, v, a);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HSV([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImColor*")] ImColor* pOut, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			HSVNative(pOut, h, s, v, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HSV([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImColor*")] ref ImColor pOut, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "float")] float a)
		{
			fixed (ImColor* ppOut = &pOut)
			{
				HSVNative((ImColor*)ppOut, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImColor_HSV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void HSV([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImColor*")] ref ImColor pOut, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "float")] float h, [NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "float")] float s, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImColor* ppOut = &pOut)
			{
				HSVNative((ImColor*)ppOut, h, s, v, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage")]
		[return: NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")]
		internal static ImGuiSelectionBasicStorage* ImGuiSelectionBasicStorageNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*>)vt[508])();
			#else
			return (ImGuiSelectionBasicStorage*)((delegate* unmanaged[Cdecl]<nint>)vt[508])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage")]
		[return: NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")]
		public static ImGuiSelectionBasicStorage* ImGuiSelectionBasicStorage()
		{
			ImGuiSelectionBasicStorage* ret = ImGuiSelectionBasicStorageNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, void>)vt[509])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[509])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				DestroyNative((ImGuiSelectionBasicStorage*)pself);
			}
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ApplyRequestsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, ImGuiMultiSelectIO*, void>)vt[510])(self, msIo);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[510])((nint)self, (nint)msIo);
			#endif
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			ApplyRequestsNative(self, msIo);
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				ApplyRequestsNative((ImGuiSelectionBasicStorage*)pself, msIo);
			}
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
			{
				ApplyRequestsNative(self, (ImGuiMultiSelectIO*)pmsIo);
			}
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
				{
					ApplyRequestsNative((ImGuiSelectionBasicStorage*)pself, (ImGuiMultiSelectIO*)pmsIo);
				}
			}
		}

		/// <summary>
		/// Query if an item id is in selection.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ContainsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, uint, byte>)vt[511])(self, id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, uint, byte>)vt[511])((nint)self, id);
			#endif
		}

		/// <summary>
		/// Query if an item id is in selection.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			byte ret = ContainsNative(self, id);
			return ret != 0;
		}

		/// <summary>
		/// Query if an item id is in selection.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				byte ret = ContainsNative((ImGuiSelectionBasicStorage*)pself, id);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, void>)vt[512])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[512])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear selection<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// Clear selection<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				ClearNative((ImGuiSelectionBasicStorage*)pself);
			}
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SwapNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, ImGuiSelectionBasicStorage*, void>)vt[513])(self, r);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[513])((nint)self, (nint)r);
			#endif
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* r)
		{
			SwapNative(self, r);
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* r)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				SwapNative((ImGuiSelectionBasicStorage*)pself, r);
			}
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage r)
		{
			fixed (ImGuiSelectionBasicStorage* pr = &r)
			{
				SwapNative(self, (ImGuiSelectionBasicStorage*)pr);
			}
		}

		/// <summary>
		/// Swap two selections<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_Swap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Swap([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage r)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				fixed (ImGuiSelectionBasicStorage* pr = &r)
				{
					SwapNative((ImGuiSelectionBasicStorage*)pself, (ImGuiSelectionBasicStorage*)pr);
				}
			}
		}

		/// <summary>
		/// Addremove an item from selection (generally done by ApplyRequests() function)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_SetItemSelected")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetItemSelectedNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] byte selected)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, uint, byte, void>)vt[514])(self, id, selected);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, byte, void>)vt[514])((nint)self, id, selected);
			#endif
		}

		/// <summary>
		/// Addremove an item from selection (generally done by ApplyRequests() function)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_SetItemSelected")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetItemSelected([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected)
		{
			SetItemSelectedNative(self, id, selected ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Addremove an item from selection (generally done by ApplyRequests() function)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_SetItemSelected")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetItemSelected([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id, [NativeName(NativeNameType.Param, "selected")] [NativeName(NativeNameType.Type, "bool")] bool selected)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				SetItemSelectedNative((ImGuiSelectionBasicStorage*)pself, id, selected ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte GetNextSelectedItemNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, void**, uint*, byte>)vt[515])(self, opaqueIt, outId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)vt[515])((nint)self, (nint)opaqueIt, (nint)outId);
			#endif
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetNextSelectedItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outId)
		{
			byte ret = GetNextSelectedItemNative(self, opaqueIt, outId);
			return ret != 0;
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetNextSelectedItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] uint* outId)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				byte ret = GetNextSelectedItemNative((ImGuiSelectionBasicStorage*)pself, opaqueIt, outId);
				return ret != 0;
			}
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetNextSelectedItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outId)
		{
			fixed (uint* poutId = &outId)
			{
				byte ret = GetNextSelectedItemNative(self, opaqueIt, (uint*)poutId);
				return ret != 0;
			}
		}

		/// <summary>
		/// Iterate selection with 'void* it = NULL; ImGuiId id; while (selection.GetNextSelectedItem(&amp;it, &amp;id))  ... '<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetNextSelectedItem")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetNextSelectedItem([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "opaque_it")] [NativeName(NativeNameType.Type, "void**")] void** opaqueIt, [NativeName(NativeNameType.Param, "out_id")] [NativeName(NativeNameType.Type, "ImGuiID*")] ref uint outId)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				fixed (uint* poutId = &outId)
				{
					byte ret = GetNextSelectedItemNative((ImGuiSelectionBasicStorage*)pself, opaqueIt, (uint*)poutId);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Convert index to item id based on provided adapter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetStorageIdFromIndex")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetStorageIdFromIndexNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSelectionBasicStorage*, int, uint>)vt[516])(self, idx);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, int, uint>)vt[516])((nint)self, idx);
			#endif
		}

		/// <summary>
		/// Convert index to item id based on provided adapter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetStorageIdFromIndex")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetStorageIdFromIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ImGuiSelectionBasicStorage* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			uint ret = GetStorageIdFromIndexNative(self, idx);
			return ret;
		}

		/// <summary>
		/// Convert index to item id based on provided adapter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionBasicStorage_GetStorageIdFromIndex")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetStorageIdFromIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionBasicStorage*")] ref ImGuiSelectionBasicStorage self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "int")] int idx)
		{
			fixed (ImGuiSelectionBasicStorage* pself = &self)
			{
				uint ret = GetStorageIdFromIndexNative((ImGuiSelectionBasicStorage*)pself, idx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage")]
		[return: NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")]
		internal static ImGuiSelectionExternalStorage* ImGuiSelectionExternalStorageNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiSelectionExternalStorage*>)vt[517])();
			#else
			return (ImGuiSelectionExternalStorage*)((delegate* unmanaged[Cdecl]<nint>)vt[517])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage")]
		[return: NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")]
		public static ImGuiSelectionExternalStorage* ImGuiSelectionExternalStorage()
		{
			ImGuiSelectionExternalStorage* ret = ImGuiSelectionExternalStorageNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ImGuiSelectionExternalStorage* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionExternalStorage*, void>)vt[518])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[518])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ImGuiSelectionExternalStorage* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ref ImGuiSelectionExternalStorage self)
		{
			fixed (ImGuiSelectionExternalStorage* pself = &self)
			{
				DestroyNative((ImGuiSelectionExternalStorage*)pself);
			}
		}

		/// <summary>
		/// Apply selection requests coming from BeginMultiSelect() and EndMultiSelect() functions. It uses 'items_count' passed to BeginMultiSelect()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ApplyRequestsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ImGuiSelectionExternalStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiSelectionExternalStorage*, ImGuiMultiSelectIO*, void>)vt[519])(self, msIo);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[519])((nint)self, (nint)msIo);
			#endif
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ImGuiSelectionExternalStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			ApplyRequestsNative(self, msIo);
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ref ImGuiSelectionExternalStorage self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ImGuiMultiSelectIO* msIo)
		{
			fixed (ImGuiSelectionExternalStorage* pself = &self)
			{
				ApplyRequestsNative((ImGuiSelectionExternalStorage*)pself, msIo);
			}
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ImGuiSelectionExternalStorage* self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
			{
				ApplyRequestsNative(self, (ImGuiMultiSelectIO*)pmsIo);
			}
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiSelectionExternalStorage_ApplyRequests")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ApplyRequests([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiSelectionExternalStorage*")] ref ImGuiSelectionExternalStorage self, [NativeName(NativeNameType.Param, "ms_io")] [NativeName(NativeNameType.Type, "ImGuiMultiSelectIO*")] ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiSelectionExternalStorage* pself = &self)
			{
				fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
				{
					ApplyRequestsNative((ImGuiSelectionExternalStorage*)pself, (ImGuiMultiSelectIO*)pmsIo);
				}
			}
		}

		/// <summary>
		/// Also ensure our padding fields are zeroed<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_ImDrawCmd")]
		[return: NativeName(NativeNameType.Type, "ImDrawCmd*")]
		internal static ImDrawCmd* ImDrawCmdNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawCmd*>)vt[520])();
			#else
			return (ImDrawCmd*)((delegate* unmanaged[Cdecl]<nint>)vt[520])();
			#endif
		}

		/// <summary>
		/// Also ensure our padding fields are zeroed<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_ImDrawCmd")]
		[return: NativeName(NativeNameType.Type, "ImDrawCmd*")]
		public static ImDrawCmd* ImDrawCmd()
		{
			ImDrawCmd* ret = ImDrawCmdNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ImDrawCmd* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawCmd*, void>)vt[521])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[521])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ImDrawCmd* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ref ImDrawCmd self)
		{
			fixed (ImDrawCmd* pself = &self)
			{
				DestroyNative((ImDrawCmd*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		internal static ImTextureID GetTexIDNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ImDrawCmd* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawCmd*, ImTextureID>)vt[522])(self);
			#else
			return (ImTextureID)((delegate* unmanaged[Cdecl]<nint, ImTextureID>)vt[522])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		public static ImTextureID GetTexID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ImDrawCmd* self)
		{
			ImTextureID ret = GetTexIDNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawCmd_GetTexID")]
		[return: NativeName(NativeNameType.Type, "ImTextureID")]
		public static ImTextureID GetTexID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawCmd*")] ref ImDrawCmd self)
		{
			fixed (ImDrawCmd* pself = &self)
			{
				ImTextureID ret = GetTexIDNative((ImDrawCmd*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ImDrawListSplitter")]
		[return: NativeName(NativeNameType.Type, "ImDrawListSplitter*")]
		internal static ImDrawListSplitter* ImDrawListSplitterNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawListSplitter*>)vt[523])();
			#else
			return (ImDrawListSplitter*)((delegate* unmanaged[Cdecl]<nint>)vt[523])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ImDrawListSplitter")]
		[return: NativeName(NativeNameType.Type, "ImDrawListSplitter*")]
		public static ImDrawListSplitter* ImDrawListSplitter()
		{
			ImDrawListSplitter* ret = ImDrawListSplitterNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, void>)vt[524])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[524])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				DestroyNative((ImDrawListSplitter*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, void>)vt[525])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[525])((nint)self);
			#endif
		}

		/// <summary>
		/// Do not clear Channels[] so our allocations are reused next frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// Do not clear Channels[] so our allocations are reused next frame<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ClearNative((ImDrawListSplitter*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearFreeMemoryNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, void>)vt[526])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[526])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self)
		{
			ClearFreeMemoryNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_ClearFreeMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearFreeMemory([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				ClearFreeMemoryNative((ImDrawListSplitter*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SplitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, ImDrawList*, int, void>)vt[527])(self, drawList, count);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[527])((nint)self, (nint)drawList, count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			SplitNative(self, drawList, count);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				SplitNative((ImDrawListSplitter*)pself, drawList, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				SplitNative(self, (ImDrawList*)pdrawList, count);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					SplitNative((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList, count);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MergeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, ImDrawList*, void>)vt[528])(self, drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[528])((nint)self, (nint)drawList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Merge([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			MergeNative(self, drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Merge([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				MergeNative((ImDrawListSplitter*)pself, drawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Merge([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				MergeNative(self, (ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_Merge")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Merge([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					MergeNative((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetCurrentChannelNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawListSplitter*, ImDrawList*, int, void>)vt[529])(self, drawList, channelIdx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)vt[529])((nint)self, (nint)drawList, channelIdx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentChannel([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			SetCurrentChannelNative(self, drawList, channelIdx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentChannel([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				SetCurrentChannelNative((ImDrawListSplitter*)pself, drawList, channelIdx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentChannel([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ImDrawListSplitter* self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				SetCurrentChannelNative(self, (ImDrawList*)pdrawList, channelIdx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawListSplitter_SetCurrentChannel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentChannel([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawListSplitter*")] ref ImDrawListSplitter self, [NativeName(NativeNameType.Param, "draw_list")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList drawList, [NativeName(NativeNameType.Param, "channel_idx")] [NativeName(NativeNameType.Type, "int")] int channelIdx)
		{
			fixed (ImDrawListSplitter* pself = &self)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					SetCurrentChannelNative((ImDrawListSplitter*)pself, (ImDrawList*)pdrawList, channelIdx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_ImDrawList")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		internal static ImDrawList* ImDrawListNative([NativeName(NativeNameType.Param, "shared_data")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* sharedData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawListSharedData*, ImDrawList*>)vt[530])(sharedData);
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[530])((nint)sharedData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_ImDrawList")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public static ImDrawList* ImDrawList([NativeName(NativeNameType.Param, "shared_data")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ImDrawListSharedData* sharedData)
		{
			ImDrawList* ret = ImDrawListNative(sharedData);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_ImDrawList")]
		[return: NativeName(NativeNameType.Type, "ImDrawList*")]
		public static ImDrawList* ImDrawList([NativeName(NativeNameType.Param, "shared_data")] [NativeName(NativeNameType.Type, "ImDrawListSharedData*")] ref ImDrawListSharedData sharedData)
		{
			fixed (ImDrawListSharedData* psharedData = &sharedData)
			{
				ImDrawList* ret = ImDrawListNative((ImDrawListSharedData*)psharedData);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[531])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[531])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				DestroyNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushClipRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax, [NativeName(NativeNameType.Param, "intersect_with_current_clip_rect")] [NativeName(NativeNameType.Type, "bool")] byte intersectWithCurrentClipRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, byte, void>)vt[532])(self, clipRectMin, clipRectMax, intersectWithCurrentClipRect);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, byte, void>)vt[532])((nint)self, clipRectMin, clipRectMax, intersectWithCurrentClipRect);
			#endif
		}

		/// <summary>
		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax, [NativeName(NativeNameType.Param, "intersect_with_current_clip_rect")] [NativeName(NativeNameType.Type, "bool")] bool intersectWithCurrentClipRect)
		{
			PushClipRectNative(self, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax)
		{
			PushClipRectNative(self, clipRectMin, clipRectMax, (byte)(0));
		}

		/// <summary>
		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax, [NativeName(NativeNameType.Param, "intersect_with_current_clip_rect")] [NativeName(NativeNameType.Type, "bool")] bool intersectWithCurrentClipRect)
		{
			fixed (ImDrawList* pself = &self)
			{
				PushClipRectNative((ImDrawList*)pself, clipRectMin, clipRectMax, intersectWithCurrentClipRect ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "clip_rect_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMin, [NativeName(NativeNameType.Param, "clip_rect_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 clipRectMax)
		{
			fixed (ImDrawList* pself = &self)
			{
				PushClipRectNative((ImDrawList*)pself, clipRectMin, clipRectMax, (byte)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRectFullScreen")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushClipRectFullScreenNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[533])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[533])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRectFullScreen")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRectFullScreen([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			PushClipRectFullScreenNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushClipRectFullScreen")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushClipRectFullScreen([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				PushClipRectFullScreenNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PopClipRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[534])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[534])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			PopClipRectNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopClipRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopClipRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				PopClipRectNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushTextureIDNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImTextureID, void>)vt[535])(self, textureId);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImTextureID, void>)vt[535])((nint)self, textureId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId)
		{
			PushTextureIDNative(self, textureId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PushTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID textureId)
		{
			fixed (ImDrawList* pself = &self)
			{
				PushTextureIDNative((ImDrawList*)pself, textureId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PopTextureIDNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)vt[536])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[536])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			PopTextureIDNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_PopTextureID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopTextureID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				PopTextureIDNative((ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetClipRectMinNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImDrawList*, void>)vt[537])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[537])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			GetClipRectMinNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				GetClipRectMinNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				GetClipRectMinNative(pOut, (ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMin")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMin([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImDrawList* pself = &self)
				{
					GetClipRectMinNative((Vector2*)ppOut, (ImDrawList*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetClipRectMaxNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, ImDrawList*, void>)vt[538])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[538])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			GetClipRectMaxNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				GetClipRectMaxNative((Vector2*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (ImDrawList* pself = &self)
			{
				GetClipRectMaxNative(pOut, (ImDrawList*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_GetClipRectMax")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetClipRectMax([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec2*")] ref Vector2 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self)
		{
			fixed (Vector2* ppOut = &pOut)
			{
				fixed (ImDrawList* pself = &self)
				{
					GetClipRectMaxNative((Vector2*)ppOut, (ImDrawList*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddLineNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, void>)vt[539])(self, p1, p2, col, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, void>)vt[539])((nint)self, p1, p2, col, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddLine([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddLineNative(self, p1, p2, col, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddLine([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddLineNative(self, p1, p2, col, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddLine([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddLineNative((ImDrawList*)pself, p1, p2, col, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddLine([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddLineNative((ImDrawList*)pself, p1, p2, col, (float)(1.0f));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddRectNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, ImDrawFlags, float, void>)vt[540])(self, pMin, pMax, col, rounding, flags, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, ImDrawFlags, float, void>)vt[540])((nint)self, pMin, pMax, col, rounding, flags, thickness);
			#endif
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddRectNative(self, pMin, pMax, col, rounding, flags, thickness);
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			AddRectNative(self, pMin, pMax, col, rounding, flags, (float)(1.0f));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			AddRectNative(self, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddRectNative(self, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddRectNative(self, pMin, pMax, col, (float)(0.0f), flags, thickness);
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, rounding, flags, thickness);
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, rounding, flags, (float)(1.0f));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0), (float)(1.0f));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags, (float)(1.0f));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0), thickness);
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRect([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectNative((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags, thickness);
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddRectFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, ImDrawFlags, void>)vt[541])(self, pMin, pMax, col, rounding, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, ImDrawFlags, void>)vt[541])((nint)self, pMin, pMax, col, rounding, flags);
			#endif
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			AddRectFilledNative(self, pMin, pMax, col, rounding, flags);
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			AddRectFilledNative(self, pMin, pMax, col, rounding, (ImDrawFlags)(0));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddRectFilledNative(self, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			AddRectFilledNative(self, pMin, pMax, col, (float)(0.0f), flags);
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectFilledNative((ImDrawList*)pself, pMin, pMax, col, rounding, flags);
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rounding")] [NativeName(NativeNameType.Type, "float")] float rounding)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectFilledNative((ImDrawList*)pself, pMin, pMax, col, rounding, (ImDrawFlags)(0));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectFilledNative((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), (ImDrawFlags)(0));
			}
		}

		/// <summary>
		/// a: upper-left, b: lower-right (== upper-left + size)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImDrawFlags")] ImDrawFlags flags)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectFilledNative((ImDrawList*)pself, pMin, pMax, col, (float)(0.0f), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilledMultiColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddRectFilledMultiColorNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col_upr_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprLeft, [NativeName(NativeNameType.Param, "col_upr_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprRight, [NativeName(NativeNameType.Param, "col_bot_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotRight, [NativeName(NativeNameType.Param, "col_bot_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotLeft)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, uint, uint, uint, void>)vt[542])(self, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, uint, uint, uint, void>)vt[542])((nint)self, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilledMultiColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilledMultiColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col_upr_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprLeft, [NativeName(NativeNameType.Param, "col_upr_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprRight, [NativeName(NativeNameType.Param, "col_bot_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotRight, [NativeName(NativeNameType.Param, "col_bot_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotLeft)
		{
			AddRectFilledMultiColorNative(self, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddRectFilledMultiColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddRectFilledMultiColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p_min")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMin, [NativeName(NativeNameType.Param, "p_max")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pMax, [NativeName(NativeNameType.Param, "col_upr_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprLeft, [NativeName(NativeNameType.Param, "col_upr_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colUprRight, [NativeName(NativeNameType.Param, "col_bot_right")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotRight, [NativeName(NativeNameType.Param, "col_bot_left")] [NativeName(NativeNameType.Type, "ImU32")] uint colBotLeft)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddRectFilledMultiColorNative((ImDrawList*)pself, pMin, pMax, colUprLeft, colUprRight, colBotRight, colBotLeft);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddQuadNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, Vector2, uint, float, void>)vt[543])(self, p1, p2, p3, p4, col, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, uint, float, void>)vt[543])((nint)self, p1, p2, p3, p4, col, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddQuadNative(self, p1, p2, p3, p4, col, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddQuadNative(self, p1, p2, p3, p4, col, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddQuadNative((ImDrawList*)pself, p1, p2, p3, p4, col, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuad")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuad([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddQuadNative((ImDrawList*)pself, p1, p2, p3, p4, col, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuadFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddQuadFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[544])(self, p1, p2, p3, p4, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, Vector2, uint, void>)vt[544])((nint)self, p1, p2, p3, p4, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuadFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuadFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddQuadFilledNative(self, p1, p2, p3, p4, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddQuadFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddQuadFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "p4")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p4, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddQuadFilledNative((ImDrawList*)pself, p1, p2, p3, p4, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddTriangleNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, uint, float, void>)vt[545])(self, p1, p2, p3, col, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, uint, float, void>)vt[545])((nint)self, p1, p2, p3, col, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddTriangleNative(self, p1, p2, p3, col, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddTriangleNative(self, p1, p2, p3, col, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddTriangleNative((ImDrawList*)pself, p1, p2, p3, col, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddTriangleNative((ImDrawList*)pself, p1, p2, p3, col, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddTriangleFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, Vector2, uint, void>)vt[546])(self, p1, p2, p3, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, Vector2, uint, void>)vt[546])((nint)self, p1, p2, p3, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddTriangleFilledNative(self, p1, p2, p3, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddTriangleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddTriangleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p1, [NativeName(NativeNameType.Param, "p2")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p2, [NativeName(NativeNameType.Param, "p3")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 p3, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddTriangleFilledNative((ImDrawList*)pself, p1, p2, p3, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddCircleNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, uint, int, float, void>)vt[547])(self, center, radius, col, numSegments, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, uint, int, float, void>)vt[547])((nint)self, center, radius, col, numSegments, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddCircleNative(self, center, radius, col, numSegments, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddCircleNative(self, center, radius, col, numSegments, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddCircleNative(self, center, radius, col, (int)(0), (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddCircleNative(self, center, radius, col, (int)(0), thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleNative((ImDrawList*)pself, center, radius, col, numSegments, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleNative((ImDrawList*)pself, center, radius, col, numSegments, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleNative((ImDrawList*)pself, center, radius, col, (int)(0), (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircle([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleNative((ImDrawList*)pself, center, radius, col, (int)(0), thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddCircleFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, uint, int, void>)vt[548])(self, center, radius, col, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, uint, int, void>)vt[548])((nint)self, center, radius, col, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddCircleFilledNative(self, center, radius, col, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddCircleFilledNative(self, center, radius, col, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleFilledNative((ImDrawList*)pself, center, radius, col, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddCircleFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddCircleFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddCircleFilledNative((ImDrawList*)pself, center, radius, col, (int)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddNgonNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, uint, int, float, void>)vt[549])(self, center, radius, col, numSegments, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, uint, int, float, void>)vt[549])((nint)self, center, radius, col, numSegments, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddNgonNative(self, center, radius, col, numSegments, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddNgonNative(self, center, radius, col, numSegments, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddNgonNative((ImDrawList*)pself, center, radius, col, numSegments, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgon")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddNgonNative((ImDrawList*)pself, center, radius, col, numSegments, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgonFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddNgonFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, float, uint, int, void>)vt[550])(self, center, radius, col, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, float, uint, int, void>)vt[550])((nint)self, center, radius, col, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgonFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgonFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddNgonFilledNative(self, center, radius, col, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddNgonFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddNgonFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "float")] float radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddNgonFilledNative((ImDrawList*)pself, center, radius, col, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddEllipseNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, int, float, void>)vt[551])(self, center, radius, col, rot, numSegments, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, int, float, void>)vt[551])((nint)self, center, radius, col, rot, numSegments, thickness);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddEllipseNative(self, center, radius, col, rot, numSegments, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddEllipseNative(self, center, radius, col, rot, numSegments, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot)
		{
			AddEllipseNative(self, center, radius, col, rot, (int)(0), (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddEllipseNative(self, center, radius, col, (float)(0.0f), (int)(0), (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddEllipseNative(self, center, radius, col, (float)(0.0f), numSegments, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddEllipseNative(self, center, radius, col, rot, (int)(0), thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			AddEllipseNative(self, center, radius, col, (float)(0.0f), numSegments, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, rot, numSegments, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, rot, numSegments, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, rot, (int)(0), (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, (float)(0.0f), (int)(0), (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, (float)(0.0f), numSegments, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, rot, (int)(0), thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments, [NativeName(NativeNameType.Param, "thickness")] [NativeName(NativeNameType.Type, "float")] float thickness)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseNative((ImDrawList*)pself, center, radius, col, (float)(0.0f), numSegments, thickness);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddEllipseFilledNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, Vector2, uint, float, int, void>)vt[552])(self, center, radius, col, rot, numSegments);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, Vector2, uint, float, int, void>)vt[552])((nint)self, center, radius, col, rot, numSegments);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddEllipseFilledNative(self, center, radius, col, rot, numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot)
		{
			AddEllipseFilledNative(self, center, radius, col, rot, (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			AddEllipseFilledNative(self, center, radius, col, (float)(0.0f), (int)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			AddEllipseFilledNative(self, center, radius, col, (float)(0.0f), numSegments);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseFilledNative((ImDrawList*)pself, center, radius, col, rot, numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "rot")] [NativeName(NativeNameType.Type, "float")] float rot)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseFilledNative((ImDrawList*)pself, center, radius, col, rot, (int)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseFilledNative((ImDrawList*)pself, center, radius, col, (float)(0.0f), (int)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddEllipseFilled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddEllipseFilled([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "center")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 center, [NativeName(NativeNameType.Param, "radius")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 radius, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "num_segments")] [NativeName(NativeNameType.Type, "int")] int numSegments)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddEllipseFilledNative((ImDrawList*)pself, center, radius, col, (float)(0.0f), numSegments);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddTextNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, Vector2, uint, byte*, byte*, void>)vt[553])(self, pos, col, textBegin, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, Vector2, uint, nint, nint, void>)vt[553])((nint)self, pos, col, (nint)textBegin, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			AddTextNative(self, pos, col, textBegin, textEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			AddTextNative(self, pos, col, textBegin, (byte*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddTextNative((ImDrawList*)pself, pos, col, textBegin, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* textBegin)
		{
			fixed (ImDrawList* pself = &self)
			{
				AddTextNative((ImDrawList*)pself, pos, col, textBegin, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (byte* ptextBegin = &textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptextBegin = textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textBegin)
		{
			fixed (byte* ptextBegin = textBegin)
			{
				AddTextNative(self, pos, col, (byte*)ptextBegin, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pos, col, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ImDrawList* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] string textBegin)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddTextNative(self, pos, col, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative((ImDrawList*)pself, pos, col, (byte*)ptextBegin, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte textBegin)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (byte* ptextBegin = &textBegin)
				{
					AddTextNative((ImDrawList*)pself, pos, col, (byte*)ptextBegin, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textBegin, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (byte* ptextBegin = textBegin)
				{
					AddTextNative((ImDrawList*)pself, pos, col, (byte*)ptextBegin, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImDrawList_AddText_Vec2")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddText([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImDrawList*")] ref ImDrawList self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 pos, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "ImU32")] uint col, [NativeName(NativeNameType.Param, "text_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textBegin)
		{
			fixed (ImDrawList* pself = &self)
			{
				fixed (byte* ptextBegin = textBegin)
				{
					AddTextNative((ImDrawList*)pself, pos, col, (byte*)ptextBegin, (byte*)(default));
				}
			}
		}
	}
}
