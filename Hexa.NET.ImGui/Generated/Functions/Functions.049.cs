// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLog")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugLogNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[396])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[396])((nint)fmt);
			#endif
		}

		/// <summary>
		/// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLog")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			DebugLogNative(fmt);
		}

		/// <summary>
		/// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLog")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				DebugLogNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLog")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				DebugLogNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Call via IMGUI_DEBUG_LOG() for maximum stripping in caller code!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLog")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLog([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugLogNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLogV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugLogVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[397])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[397])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLogV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLogV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			DebugLogVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLogV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLogV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				DebugLogVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLogV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLogV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				DebugLogVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugLogV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugLogV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugLogVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetAllocatorFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAllocatorFunctionsNative([NativeName(NativeNameType.Param, "alloc_func")] [NativeName(NativeNameType.Type, "ImGuiMemAllocFunc")] ImGuiMemAllocFunc allocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "ImGuiMemFreeFunc")] ImGuiMemFreeFunc freeFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<ulong, void*, void*>, delegate*<void*, void*, void>, void*, void>)vt[398])((delegate*<ulong, void*, void*>)Utils.GetFunctionPointerForDelegate(allocFunc), (delegate*<void*, void*, void>)Utils.GetFunctionPointerForDelegate(freeFunc), userData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[398])((nint)Utils.GetFunctionPointerForDelegate(allocFunc), (nint)Utils.GetFunctionPointerForDelegate(freeFunc), (nint)userData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetAllocatorFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAllocatorFunctions([NativeName(NativeNameType.Param, "alloc_func")] [NativeName(NativeNameType.Type, "ImGuiMemAllocFunc")] ImGuiMemAllocFunc allocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "ImGuiMemFreeFunc")] ImGuiMemFreeFunc freeFunc, [NativeName(NativeNameType.Param, "user_data")] [NativeName(NativeNameType.Type, "void*")] void* userData)
		{
			SetAllocatorFunctionsNative(allocFunc, freeFunc, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetAllocatorFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAllocatorFunctions([NativeName(NativeNameType.Param, "alloc_func")] [NativeName(NativeNameType.Type, "ImGuiMemAllocFunc")] ImGuiMemAllocFunc allocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "ImGuiMemFreeFunc")] ImGuiMemFreeFunc freeFunc)
		{
			SetAllocatorFunctionsNative(allocFunc, freeFunc, (void*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetAllocatorFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetAllocatorFunctionsNative([NativeName(NativeNameType.Param, "p_alloc_func")] [NativeName(NativeNameType.Type, "ImGuiMemAllocFunc*")] delegate*<ulong, void*, void*>* pAllocFunc, [NativeName(NativeNameType.Param, "p_free_func")] [NativeName(NativeNameType.Type, "ImGuiMemFreeFunc*")] delegate*<void*, void*, void>* pFreeFunc, [NativeName(NativeNameType.Param, "p_user_data")] [NativeName(NativeNameType.Type, "void**")] void** pUserData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<ulong, void*, void*>*, delegate*<void*, void*, void>*, void**, void>)vt[399])(pAllocFunc, pFreeFunc, pUserData);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[399])((nint)pAllocFunc, (nint)pFreeFunc, (nint)pUserData);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetAllocatorFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetAllocatorFunctions([NativeName(NativeNameType.Param, "p_alloc_func")] [NativeName(NativeNameType.Type, "ImGuiMemAllocFunc*")] delegate*<ulong, void*, void*>* pAllocFunc, [NativeName(NativeNameType.Param, "p_free_func")] [NativeName(NativeNameType.Type, "ImGuiMemFreeFunc*")] delegate*<void*, void*, void>* pFreeFunc, [NativeName(NativeNameType.Param, "p_user_data")] [NativeName(NativeNameType.Type, "void**")] void** pUserData)
		{
			GetAllocatorFunctionsNative(pAllocFunc, pFreeFunc, pUserData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMemAlloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* MemAllocNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, void*>)vt[400])(size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<ulong, nint>)vt[400])(size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMemAlloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* MemAlloc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size)
		{
			void* ret = MemAllocNative(size);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMemAlloc")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* MemAlloc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = MemAllocNative(size);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMemFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void MemFreeNative([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)vt[401])(ptr);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[401])((nint)ptr);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igMemFree")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MemFree([NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			MemFreeNative(ptr);
		}

		/// <summary>
		/// platformrenderer functions, for backend to setup + viewports list.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPlatformIO")]
		[return: NativeName(NativeNameType.Type, "ImGuiPlatformIO*")]
		internal static ImGuiPlatformIO* GetPlatformIONative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPlatformIO*>)vt[402])();
			#else
			return (ImGuiPlatformIO*)((delegate* unmanaged[Cdecl]<nint>)vt[402])();
			#endif
		}

		/// <summary>
		/// platformrenderer functions, for backend to setup + viewports list.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetPlatformIO")]
		[return: NativeName(NativeNameType.Type, "ImGuiPlatformIO*")]
		public static ImGuiPlatformIO* GetPlatformIO()
		{
			ImGuiPlatformIO* ret = GetPlatformIONative();
			return ret;
		}

		/// <summary>
		/// call in main loop. will call CreateWindowResizeWindowetc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdatePlatformWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UpdatePlatformWindowsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[403])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[403])();
			#endif
		}

		/// <summary>
		/// call in main loop. will call CreateWindowResizeWindowetc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igUpdatePlatformWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdatePlatformWindows()
		{
			UpdatePlatformWindowsNative();
		}

		/// <summary>
		/// call in main loop. will call RenderWindowSwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderPlatformWindowsDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void RenderPlatformWindowsDefaultNative([NativeName(NativeNameType.Param, "platform_render_arg")] [NativeName(NativeNameType.Type, "void*")] void* platformRenderArg, [NativeName(NativeNameType.Param, "renderer_render_arg")] [NativeName(NativeNameType.Type, "void*")] void* rendererRenderArg)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void*, void>)vt[404])(platformRenderArg, rendererRenderArg);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[404])((nint)platformRenderArg, (nint)rendererRenderArg);
			#endif
		}

		/// <summary>
		/// call in main loop. will call RenderWindowSwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderPlatformWindowsDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderPlatformWindowsDefault([NativeName(NativeNameType.Param, "platform_render_arg")] [NativeName(NativeNameType.Type, "void*")] void* platformRenderArg, [NativeName(NativeNameType.Param, "renderer_render_arg")] [NativeName(NativeNameType.Type, "void*")] void* rendererRenderArg)
		{
			RenderPlatformWindowsDefaultNative(platformRenderArg, rendererRenderArg);
		}

		/// <summary>
		/// call in main loop. will call RenderWindowSwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderPlatformWindowsDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderPlatformWindowsDefault([NativeName(NativeNameType.Param, "platform_render_arg")] [NativeName(NativeNameType.Type, "void*")] void* platformRenderArg)
		{
			RenderPlatformWindowsDefaultNative(platformRenderArg, (void*)(default));
		}

		/// <summary>
		/// call in main loop. will call RenderWindowSwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRenderPlatformWindowsDefault")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RenderPlatformWindowsDefault()
		{
			RenderPlatformWindowsDefaultNative((void*)(default), (void*)(default));
		}

		/// <summary>
		/// call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDestroyPlatformWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyPlatformWindowsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[405])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[405])();
			#endif
		}

		/// <summary>
		/// call DestroyWindow platform functions for all viewports. call from backend Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDestroyPlatformWindows")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyPlatformWindows()
		{
			DestroyPlatformWindowsNative();
		}

		/// <summary>
		/// this is a helper for backends.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindViewportByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewport*")]
		internal static ImGuiViewport* FindViewportByIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ImGuiViewport*>)vt[406])(id);
			#else
			return (ImGuiViewport*)((delegate* unmanaged[Cdecl]<uint, nint>)vt[406])(id);
			#endif
		}

		/// <summary>
		/// this is a helper for backends.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindViewportByID")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewport*")]
		public static ImGuiViewport* FindViewportByID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			ImGuiViewport* ret = FindViewportByIDNative(id);
			return ret;
		}

		/// <summary>
		/// this is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindViewportByPlatformHandle")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewport*")]
		internal static ImGuiViewport* FindViewportByPlatformHandleNative([NativeName(NativeNameType.Param, "platform_handle")] [NativeName(NativeNameType.Type, "void*")] void* platformHandle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, ImGuiViewport*>)vt[407])(platformHandle);
			#else
			return (ImGuiViewport*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[407])((nint)platformHandle);
			#endif
		}

		/// <summary>
		/// this is a helper for backends. the type platform_handle is decided by the backend (e.g. HWND, MyWindow*, GLFWwindow* etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igFindViewportByPlatformHandle")]
		[return: NativeName(NativeNameType.Type, "ImGuiViewport*")]
		public static ImGuiViewport* FindViewportByPlatformHandle([NativeName(NativeNameType.Param, "platform_handle")] [NativeName(NativeNameType.Type, "void*")] void* platformHandle)
		{
			ImGuiViewport* ret = FindViewportByPlatformHandleNative(platformHandle);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_ImGuiTableSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")]
		internal static ImGuiTableSortSpecs* ImGuiTableSortSpecsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableSortSpecs*>)vt[408])();
			#else
			return (ImGuiTableSortSpecs*)((delegate* unmanaged[Cdecl]<nint>)vt[408])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_ImGuiTableSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")]
		public static ImGuiTableSortSpecs* ImGuiTableSortSpecs()
		{
			ImGuiTableSortSpecs* ret = ImGuiTableSortSpecsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")] ImGuiTableSortSpecs* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSortSpecs*, void>)vt[409])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[409])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")] ImGuiTableSortSpecs* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableSortSpecs*")] ref ImGuiTableSortSpecs self)
		{
			fixed (ImGuiTableSortSpecs* pself = &self)
			{
				DestroyNative((ImGuiTableSortSpecs*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")]
		internal static ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTableColumnSortSpecs*>)vt[410])();
			#else
			return (ImGuiTableColumnSortSpecs*)((delegate* unmanaged[Cdecl]<nint>)vt[410])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs")]
		[return: NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")]
		public static ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs()
		{
			ImGuiTableColumnSortSpecs* ret = ImGuiTableColumnSortSpecsNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")] ImGuiTableColumnSortSpecs* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableColumnSortSpecs*, void>)vt[411])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[411])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")] ImGuiTableColumnSortSpecs* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTableColumnSortSpecs_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTableColumnSortSpecs*")] ref ImGuiTableColumnSortSpecs self)
		{
			fixed (ImGuiTableColumnSortSpecs* pself = &self)
			{
				DestroyNative((ImGuiTableColumnSortSpecs*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_ImGuiStyle")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyle*")]
		internal static ImGuiStyle* ImGuiStyleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiStyle*>)vt[412])();
			#else
			return (ImGuiStyle*)((delegate* unmanaged[Cdecl]<nint>)vt[412])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_ImGuiStyle")]
		[return: NativeName(NativeNameType.Type, "ImGuiStyle*")]
		public static ImGuiStyle* ImGuiStyle()
		{
			ImGuiStyle* ret = ImGuiStyleNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ImGuiStyle* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, void>)vt[413])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[413])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ImGuiStyle* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ref ImGuiStyle self)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				DestroyNative((ImGuiStyle*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_ScaleAllSizes")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ScaleAllSizesNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ImGuiStyle* self, [NativeName(NativeNameType.Param, "scale_factor")] [NativeName(NativeNameType.Type, "float")] float scaleFactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStyle*, float, void>)vt[414])(self, scaleFactor);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)vt[414])((nint)self, scaleFactor);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_ScaleAllSizes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleAllSizes([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ImGuiStyle* self, [NativeName(NativeNameType.Param, "scale_factor")] [NativeName(NativeNameType.Type, "float")] float scaleFactor)
		{
			ScaleAllSizesNative(self, scaleFactor);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiStyle_ScaleAllSizes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ScaleAllSizes([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiStyle*")] ref ImGuiStyle self, [NativeName(NativeNameType.Param, "scale_factor")] [NativeName(NativeNameType.Type, "float")] float scaleFactor)
		{
			fixed (ImGuiStyle* pself = &self)
			{
				ScaleAllSizesNative((ImGuiStyle*)pself, scaleFactor);
			}
		}

		/// <summary>
		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddKeyEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] byte down)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, byte, void>)vt[415])(self, key, down);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, byte, void>)vt[415])((nint)self, key, down);
			#endif
		}

		/// <summary>
		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddKeyEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			AddKeyEventNative(self, key, down ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddKeyEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddKeyEventNative((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyAnalogEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddKeyAnalogEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] byte down, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, byte, float, void>)vt[416])(self, key, down, v);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, byte, float, void>)vt[416])((nint)self, key, down, v);
			#endif
		}

		/// <summary>
		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyAnalogEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddKeyAnalogEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			AddKeyAnalogEventNative(self, key, down ? (byte)1 : (byte)0, v);
		}

		/// <summary>
		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddKeyAnalogEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddKeyAnalogEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "float")] float v)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddKeyAnalogEventNative((ImGuiIO*)pself, key, down ? (byte)1 : (byte)0, v);
			}
		}

		/// <summary>
		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMousePosEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddMousePosEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, float, float, void>)vt[417])(self, x, y);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[417])((nint)self, x, y);
			#endif
		}

		/// <summary>
		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMousePosEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMousePosEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			AddMousePosEventNative(self, x, y);
		}

		/// <summary>
		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMousePosEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMousePosEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMousePosEventNative((ImGuiIO*)pself, x, y);
			}
		}

		/// <summary>
		/// Queue a mouse button change<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseButtonEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddMouseButtonEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] byte down)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, int, byte, void>)vt[418])(self, button, down);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, byte, void>)vt[418])((nint)self, button, down);
			#endif
		}

		/// <summary>
		/// Queue a mouse button change<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseButtonEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseButtonEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			AddMouseButtonEventNative(self, button, down ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a mouse button change<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseButtonEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseButtonEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "down")] [NativeName(NativeNameType.Type, "bool")] bool down)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseButtonEventNative((ImGuiIO*)pself, button, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseWheelEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddMouseWheelEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "wheel_x")] [NativeName(NativeNameType.Type, "float")] float wheelX, [NativeName(NativeNameType.Param, "wheel_y")] [NativeName(NativeNameType.Type, "float")] float wheelY)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, float, float, void>)vt[419])(self, wheelX, wheelY);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)vt[419])((nint)self, wheelX, wheelY);
			#endif
		}

		/// <summary>
		/// Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseWheelEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseWheelEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "wheel_x")] [NativeName(NativeNameType.Type, "float")] float wheelX, [NativeName(NativeNameType.Param, "wheel_y")] [NativeName(NativeNameType.Type, "float")] float wheelY)
		{
			AddMouseWheelEventNative(self, wheelX, wheelY);
		}

		/// <summary>
		/// Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseWheelEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseWheelEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "wheel_x")] [NativeName(NativeNameType.Type, "float")] float wheelX, [NativeName(NativeNameType.Param, "wheel_y")] [NativeName(NativeNameType.Type, "float")] float wheelY)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseWheelEventNative((ImGuiIO*)pself, wheelX, wheelY);
			}
		}

		/// <summary>
		/// Queue a mouse source change (MouseTouchScreenPen)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseSourceEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddMouseSourceEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ImGuiMouseSource")] ImGuiMouseSource source)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiMouseSource, void>)vt[420])(self, source);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiMouseSource, void>)vt[420])((nint)self, source);
			#endif
		}

		/// <summary>
		/// Queue a mouse source change (MouseTouchScreenPen)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseSourceEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseSourceEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ImGuiMouseSource")] ImGuiMouseSource source)
		{
			AddMouseSourceEventNative(self, source);
		}

		/// <summary>
		/// Queue a mouse source change (MouseTouchScreenPen)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseSourceEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseSourceEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "ImGuiMouseSource")] ImGuiMouseSource source)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseSourceEventNative((ImGuiIO*)pself, source);
			}
		}

		/// <summary>
		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseViewportEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddMouseViewportEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, uint, void>)vt[421])(self, id);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[421])((nint)self, id);
			#endif
		}

		/// <summary>
		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseViewportEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseViewportEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			AddMouseViewportEventNative(self, id);
		}

		/// <summary>
		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddMouseViewportEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddMouseViewportEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImGuiID")] uint id)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddMouseViewportEventNative((ImGuiIO*)pself, id);
			}
		}

		/// <summary>
		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddFocusEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddFocusEventNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "focused")] [NativeName(NativeNameType.Type, "bool")] byte focused)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte, void>)vt[422])(self, focused);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[422])((nint)self, focused);
			#endif
		}

		/// <summary>
		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddFocusEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddFocusEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "focused")] [NativeName(NativeNameType.Type, "bool")] bool focused)
		{
			AddFocusEventNative(self, focused ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddFocusEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddFocusEvent([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "focused")] [NativeName(NativeNameType.Type, "bool")] bool focused)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddFocusEventNative((ImGuiIO*)pself, focused ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a new character input<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacter")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddInputCharacterNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, uint, void>)vt[423])(self, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, uint, void>)vt[423])((nint)self, c);
			#endif
		}

		/// <summary>
		/// Queue a new character input<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharacter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			AddInputCharacterNative(self, c);
		}

		/// <summary>
		/// Queue a new character input<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharacter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "unsigned int")] uint c)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharacterNative((ImGuiIO*)pself, c);
			}
		}

		/// <summary>
		/// Queue a new character input from a UTF-16 character, it can be a surrogate<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacterUTF16")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddInputCharacterUTF16Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar16")] ushort c)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ushort, void>)vt[424])(self, c);
			#else
			((delegate* unmanaged[Cdecl]<nint, ushort, void>)vt[424])((nint)self, c);
			#endif
		}

		/// <summary>
		/// Queue a new character input from a UTF-16 character, it can be a surrogate<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacterUTF16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharacterUTF16([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar16")] ushort c)
		{
			AddInputCharacterUTF16Native(self, c);
		}

		/// <summary>
		/// Queue a new character input from a UTF-16 character, it can be a surrogate<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharacterUTF16")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharacterUTF16([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "ImWchar16")] ushort c)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharacterUTF16Native((ImGuiIO*)pself, c);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AddInputCharactersUTF8Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte*, void>)vt[425])(self, str);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[425])((nint)self, (nint)str);
			#endif
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			AddInputCharactersUTF8Native(self, str);
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] byte* str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				AddInputCharactersUTF8Native((ImGuiIO*)pself, str);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				AddInputCharactersUTF8Native(self, (byte*)pstr);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				AddInputCharactersUTF8Native(self, (byte*)pstr);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AddInputCharactersUTF8Native(self, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ref byte str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				fixed (byte* pstr = &str)
				{
					AddInputCharactersUTF8Native((ImGuiIO*)pself, (byte*)pstr);
				}
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				fixed (byte* pstr = str)
				{
					AddInputCharactersUTF8Native((ImGuiIO*)pself, (byte*)pstr);
				}
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_AddInputCharactersUTF8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AddInputCharactersUTF8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "const char*")] string str)
		{
			fixed (ImGuiIO* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AddInputCharactersUTF8Native((ImGuiIO*)pself, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetKeyEventNativeDataNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode, [NativeName(NativeNameType.Param, "native_legacy_index")] [NativeName(NativeNameType.Type, "int")] int nativeLegacyIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, ImGuiKey, int, int, int, void>)vt[426])(self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImGuiKey, int, int, int, void>)vt[426])((nint)self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			#endif
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyEventNativeData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode, [NativeName(NativeNameType.Param, "native_legacy_index")] [NativeName(NativeNameType.Type, "int")] int nativeLegacyIndex)
		{
			SetKeyEventNativeDataNative(self, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyEventNativeData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode)
		{
			SetKeyEventNativeDataNative(self, key, nativeKeycode, nativeScancode, (int)(-1));
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyEventNativeData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode, [NativeName(NativeNameType.Param, "native_legacy_index")] [NativeName(NativeNameType.Type, "int")] int nativeLegacyIndex)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetKeyEventNativeDataNative((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetKeyEventNativeData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetKeyEventNativeData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "ImGuiKey")] ImGuiKey key, [NativeName(NativeNameType.Param, "native_keycode")] [NativeName(NativeNameType.Type, "int")] int nativeKeycode, [NativeName(NativeNameType.Param, "native_scancode")] [NativeName(NativeNameType.Type, "int")] int nativeScancode)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetKeyEventNativeDataNative((ImGuiIO*)pself, key, nativeKeycode, nativeScancode, (int)(-1));
			}
		}

		/// <summary>
		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetAppAcceptingEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetAppAcceptingEventsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "accepting_events")] [NativeName(NativeNameType.Type, "bool")] byte acceptingEvents)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, byte, void>)vt[427])(self, acceptingEvents);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, void>)vt[427])((nint)self, acceptingEvents);
			#endif
		}

		/// <summary>
		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetAppAcceptingEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAppAcceptingEvents([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self, [NativeName(NativeNameType.Param, "accepting_events")] [NativeName(NativeNameType.Type, "bool")] bool acceptingEvents)
		{
			SetAppAcceptingEventsNative(self, acceptingEvents ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_SetAppAcceptingEvents")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetAppAcceptingEvents([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self, [NativeName(NativeNameType.Param, "accepting_events")] [NativeName(NativeNameType.Type, "bool")] bool acceptingEvents)
		{
			fixed (ImGuiIO* pself = &self)
			{
				SetAppAcceptingEventsNative((ImGuiIO*)pself, acceptingEvents ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Clear all incoming events.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearEventsQueue")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearEventsQueueNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[428])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[428])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear all incoming events.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearEventsQueue")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearEventsQueue([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			ClearEventsQueueNative(self);
		}

		/// <summary>
		/// Clear all incoming events.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearEventsQueue")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearEventsQueue([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearEventsQueueNative((ImGuiIO*)pself);
			}
		}

		/// <summary>
		/// Clear current keyboardgamepad state + current frame text input buffer. Equivalent to releasing all keysbuttons.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearInputKeysNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[429])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[429])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear current keyboardgamepad state + current frame text input buffer. Equivalent to releasing all keysbuttons.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputKeys([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			ClearInputKeysNative(self);
		}

		/// <summary>
		/// Clear current keyboardgamepad state + current frame text input buffer. Equivalent to releasing all keysbuttons.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputKeys")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputKeys([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearInputKeysNative((ImGuiIO*)pself);
			}
		}

		/// <summary>
		/// Clear current mouse state.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputMouse")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearInputMouseNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[430])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[430])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear current mouse state.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputMouse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputMouse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			ClearInputMouseNative(self);
		}

		/// <summary>
		/// Clear current mouse state.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ClearInputMouse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputMouse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				ClearInputMouseNative((ImGuiIO*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ImGuiIO")]
		[return: NativeName(NativeNameType.Type, "ImGuiIO*")]
		internal static ImGuiIO* ImGuiIONative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiIO*>)vt[431])();
			#else
			return (ImGuiIO*)((delegate* unmanaged[Cdecl]<nint>)vt[431])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_ImGuiIO")]
		[return: NativeName(NativeNameType.Type, "ImGuiIO*")]
		public static ImGuiIO* ImGuiIO()
		{
			ImGuiIO* ret = ImGuiIONative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiIO*, void>)vt[432])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[432])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ImGuiIO* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiIO_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiIO*")] ref ImGuiIO self)
		{
			fixed (ImGuiIO* pself = &self)
			{
				DestroyNative((ImGuiIO*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ImGuiInputTextCallbackData")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")]
		internal static ImGuiInputTextCallbackData* ImGuiInputTextCallbackDataNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*>)vt[433])();
			#else
			return (ImGuiInputTextCallbackData*)((delegate* unmanaged[Cdecl]<nint>)vt[433])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ImGuiInputTextCallbackData")]
		[return: NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")]
		public static ImGuiInputTextCallbackData* ImGuiInputTextCallbackData()
		{
			ImGuiInputTextCallbackData* ret = ImGuiInputTextCallbackDataNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[434])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[434])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				DestroyNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DeleteCharsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, int, int, void>)vt[435])(self, pos, bytesCount);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)vt[435])((nint)self, pos, bytesCount);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			DeleteCharsNative(self, pos, bytesCount);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_DeleteChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DeleteChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "bytes_count")] [NativeName(NativeNameType.Type, "int")] int bytesCount)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				DeleteCharsNative((ImGuiInputTextCallbackData*)pself, pos, bytesCount);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void InsertCharsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, int, byte*, byte*, void>)vt[436])(self, pos, text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, nint, void>)vt[436])((nint)self, pos, (nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			InsertCharsNative(self, pos, text, textEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			InsertCharsNative(self, pos, text, (byte*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				InsertCharsNative(self, pos, (byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, textEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)(default));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				InsertCharsNative(self, pos, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				InsertCharsNative(self, pos, text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertCharsNative(self, pos, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					InsertCharsNative(self, pos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					InsertCharsNative(self, pos, (byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			InsertCharsNative(self, pos, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, (byte*)ptext, (byte*)ptextEnd);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_InsertChars")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void InsertChars([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self, [NativeName(NativeNameType.Param, "pos")] [NativeName(NativeNameType.Type, "int")] int pos, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				InsertCharsNative((ImGuiInputTextCallbackData*)pself, pos, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SelectAllNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[437])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[437])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SelectAll([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			SelectAllNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_SelectAll")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SelectAll([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				SelectAllNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearSelectionNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, void>)vt[438])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[438])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearSelection([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			ClearSelectionNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_ClearSelection")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearSelection([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				ClearSelectionNative((ImGuiInputTextCallbackData*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte HasSelectionNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiInputTextCallbackData*, byte>)vt[439])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[439])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool HasSelection([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ImGuiInputTextCallbackData* self)
		{
			byte ret = HasSelectionNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiInputTextCallbackData_HasSelection")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool HasSelection([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiInputTextCallbackData*")] ref ImGuiInputTextCallbackData self)
		{
			fixed (ImGuiInputTextCallbackData* pself = &self)
			{
				byte ret = HasSelectionNative((ImGuiInputTextCallbackData*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_ImGuiWindowClass")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowClass*")]
		internal static ImGuiWindowClass* ImGuiWindowClassNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiWindowClass*>)vt[440])();
			#else
			return (ImGuiWindowClass*)((delegate* unmanaged[Cdecl]<nint>)vt[440])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_ImGuiWindowClass")]
		[return: NativeName(NativeNameType.Type, "ImGuiWindowClass*")]
		public static ImGuiWindowClass* ImGuiWindowClass()
		{
			ImGuiWindowClass* ret = ImGuiWindowClassNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiWindowClass*")] ImGuiWindowClass* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowClass*, void>)vt[441])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[441])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiWindowClass*")] ImGuiWindowClass* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiWindowClass_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiWindowClass*")] ref ImGuiWindowClass self)
		{
			fixed (ImGuiWindowClass* pself = &self)
			{
				DestroyNative((ImGuiWindowClass*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_ImGuiPayload")]
		[return: NativeName(NativeNameType.Type, "ImGuiPayload*")]
		internal static ImGuiPayload* ImGuiPayloadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*>)vt[442])();
			#else
			return (ImGuiPayload*)((delegate* unmanaged[Cdecl]<nint>)vt[442])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_ImGuiPayload")]
		[return: NativeName(NativeNameType.Type, "ImGuiPayload*")]
		public static ImGuiPayload* ImGuiPayload()
		{
			ImGuiPayload* ret = ImGuiPayloadNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPayload*, void>)vt[443])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[443])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				DestroyNative((ImGuiPayload*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPayload*, void>)vt[444])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[444])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				ClearNative((ImGuiPayload*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsDataTypeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte*, byte>)vt[445])(self, type);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[445])((nint)self, (nint)type);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* type)
		{
			byte ret = IsDataTypeNative(self, type);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] byte* type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsDataTypeNative((ImGuiPayload*)pself, type);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ref byte type)
		{
			fixed (byte* ptype = &type)
			{
				byte ret = IsDataTypeNative(self, (byte*)ptype);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> type)
		{
			fixed (byte* ptype = type)
			{
				byte ret = IsDataTypeNative(self, (byte*)ptype);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] string type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (type != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = IsDataTypeNative(self, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ref byte type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				fixed (byte* ptype = &type)
				{
					byte ret = IsDataTypeNative((ImGuiPayload*)pself, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				fixed (byte* ptype = type)
				{
					byte ret = IsDataTypeNative((ImGuiPayload*)pself, (byte*)ptype);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDataType")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDataType([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "const char*")] string type)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (type != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(type);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(type, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = IsDataTypeNative((ImGuiPayload*)pself, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsPreviewNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte>)vt[446])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[446])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPreview([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			byte ret = IsPreviewNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsPreview")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsPreview([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsPreviewNative((ImGuiPayload*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsDeliveryNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiPayload*, byte>)vt[447])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[447])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDelivery([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ImGuiPayload* self)
		{
			byte ret = IsDeliveryNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiPayload_IsDelivery")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsDelivery([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiPayload*")] ref ImGuiPayload self)
		{
			fixed (ImGuiPayload* pself = &self)
			{
				byte ret = IsDeliveryNative((ImGuiPayload*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_ImGuiOnceUponAFrame")]
		[return: NativeName(NativeNameType.Type, "ImGuiOnceUponAFrame*")]
		internal static ImGuiOnceUponAFrame* ImGuiOnceUponAFrameNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiOnceUponAFrame*>)vt[448])();
			#else
			return (ImGuiOnceUponAFrame*)((delegate* unmanaged[Cdecl]<nint>)vt[448])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_ImGuiOnceUponAFrame")]
		[return: NativeName(NativeNameType.Type, "ImGuiOnceUponAFrame*")]
		public static ImGuiOnceUponAFrame* ImGuiOnceUponAFrame()
		{
			ImGuiOnceUponAFrame* ret = ImGuiOnceUponAFrameNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiOnceUponAFrame*")] ImGuiOnceUponAFrame* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOnceUponAFrame*, void>)vt[449])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[449])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiOnceUponAFrame*")] ImGuiOnceUponAFrame* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiOnceUponAFrame_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiOnceUponAFrame*")] ref ImGuiOnceUponAFrame self)
		{
			fixed (ImGuiOnceUponAFrame* pself = &self)
			{
				DestroyNative((ImGuiOnceUponAFrame*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		internal static ImGuiTextFilter* ImGuiTextFilterNative([NativeName(NativeNameType.Param, "default_filter")] [NativeName(NativeNameType.Type, "const char*")] byte* defaultFilter)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiTextFilter*>)vt[450])(defaultFilter);
			#else
			return (ImGuiTextFilter*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[450])((nint)defaultFilter);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		public static ImGuiTextFilter* ImGuiTextFilter([NativeName(NativeNameType.Param, "default_filter")] [NativeName(NativeNameType.Type, "const char*")] byte* defaultFilter)
		{
			ImGuiTextFilter* ret = ImGuiTextFilterNative(defaultFilter);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		public static ImGuiTextFilter* ImGuiTextFilter()
		{
			ImGuiTextFilter* ret = ImGuiTextFilter((string)"");
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		public static ImGuiTextFilter* ImGuiTextFilter([NativeName(NativeNameType.Param, "default_filter")] [NativeName(NativeNameType.Type, "const char*")] ref byte defaultFilter)
		{
			fixed (byte* pdefaultFilter = &defaultFilter)
			{
				ImGuiTextFilter* ret = ImGuiTextFilterNative((byte*)pdefaultFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		public static ImGuiTextFilter* ImGuiTextFilter([NativeName(NativeNameType.Param, "default_filter")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> defaultFilter)
		{
			fixed (byte* pdefaultFilter = defaultFilter)
			{
				ImGuiTextFilter* ret = ImGuiTextFilterNative((byte*)pdefaultFilter);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_ImGuiTextFilter")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextFilter*")]
		public static ImGuiTextFilter* ImGuiTextFilter([NativeName(NativeNameType.Param, "default_filter")] [NativeName(NativeNameType.Type, "const char*")] string defaultFilter)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (defaultFilter != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(defaultFilter);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(defaultFilter, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextFilter* ret = ImGuiTextFilterNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[451])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[451])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				DestroyNative((ImGuiTextFilter*)pself);
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DrawNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte*, float, byte>)vt[452])(self, label, width);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, float, byte>)vt[452])((nint)self, (nint)label, width);
			#endif
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			byte ret = DrawNative(self, label, width);
			return ret != 0;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = DrawNative(self, label, (float)(0.0f));
			return ret != 0;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			bool ret = Draw(self, (string)"Filter(inc,-exc)", (float)(0.0f));
			return ret;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			bool ret = Draw(self, (string)"Filter(inc,-exc)", width);
			return ret;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = DrawNative((ImGuiTextFilter*)pself, label, width);
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = DrawNative((ImGuiTextFilter*)pself, label, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				bool ret = Draw((ImGuiTextFilter*)pself, (string)"Filter(inc,-exc)", (float)(0.0f));
				return ret;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				bool ret = Draw((ImGuiTextFilter*)pself, (string)"Filter(inc,-exc)", width);
				return ret;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DrawNative(self, (byte*)plabel, width);
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DrawNative(self, (byte*)plabel, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DrawNative(self, (byte*)plabel, width);
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DrawNative(self, (byte*)plabel, (float)(0.0f));
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DrawNative(self, pStr0, width);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DrawNative(self, pStr0, (float)(0.0f));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = &label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, width);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* plabel = label)
				{
					byte ret = DrawNative((ImGuiTextFilter*)pself, (byte*)plabel, (float)(0.0f));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "float")] float width)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DrawNative((ImGuiTextFilter*)pself, pStr0, width);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Helper calling InputText+Build<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Draw")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Draw([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DrawNative((ImGuiTextFilter*)pself, pStr0, (float)(0.0f));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte PassFilterNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte*, byte*, byte>)vt[453])(self, text, textEnd);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)vt[453])((nint)self, (nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte ret = PassFilterNative(self, text, textEnd);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			byte ret = PassFilterNative(self, text, (byte*)(default));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, textEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)(default));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, textEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, (byte*)(default));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, textEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				byte ret = PassFilterNative(self, (byte*)ptext, (byte*)(default));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, textEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)(default));
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, (byte*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				byte ret = PassFilterNative(self, text, (byte*)ptextEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				byte ret = PassFilterNative(self, text, (byte*)ptextEnd);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = PassFilterNative(self, text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (textEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, text, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					byte ret = PassFilterNative(self, (byte*)ptext, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					byte ret = PassFilterNative(self, (byte*)ptext, (byte*)ptextEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = PassFilterNative(self, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = &text)
				{
					fixed (byte* ptextEnd = &textEnd)
					{
						byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				fixed (byte* ptext = text)
				{
					fixed (byte* ptextEnd = textEnd)
					{
						byte ret = PassFilterNative((ImGuiTextFilter*)pself, (byte*)ptext, (byte*)ptextEnd);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_PassFilter")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PassFilter([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self, [NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (textEnd != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(textEnd);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = PassFilterNative((ImGuiTextFilter*)pself, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Build")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BuildNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[454])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[454])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Build")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Build([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			BuildNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Build")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Build([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				BuildNative((ImGuiTextFilter*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, void>)vt[455])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[455])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				ClearNative((ImGuiTextFilter*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_IsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsActiveNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextFilter*, byte>)vt[456])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[456])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_IsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsActive([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ImGuiTextFilter* self)
		{
			byte ret = IsActiveNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextFilter_IsActive")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsActive([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextFilter*")] ref ImGuiTextFilter self)
		{
			fixed (ImGuiTextFilter* pself = &self)
			{
				byte ret = IsActiveNative((ImGuiTextFilter*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Nil")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		internal static ImGuiTextRange* ImGuiTextRangeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextRange*>)vt[457])();
			#else
			return (ImGuiTextRange*)((delegate* unmanaged[Cdecl]<nint>)vt[457])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Nil")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange()
		{
			ImGuiTextRange* ret = ImGuiTextRangeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextRange*, void>)vt[458])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[458])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				DestroyNative((ImGuiTextRange*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		internal static ImGuiTextRange* ImGuiTextRangeNative([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] byte* b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] byte* e)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, ImGuiTextRange*>)vt[459])(b, e);
			#else
			return (ImGuiTextRange*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)vt[459])((nint)b, (nint)e);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] byte* b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] byte* e)
		{
			ImGuiTextRange* ret = ImGuiTextRangeNative(b, e);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] ref byte b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] byte* e)
		{
			fixed (byte* pb = &b)
			{
				ImGuiTextRange* ret = ImGuiTextRangeNative((byte*)pb, e);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] byte* e)
		{
			fixed (byte* pb = b)
			{
				ImGuiTextRange* ret = ImGuiTextRangeNative((byte*)pb, e);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] string b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] byte* e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (b != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(b);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(b, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextRange* ret = ImGuiTextRangeNative(pStr0, e);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] byte* b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] ref byte e)
		{
			fixed (byte* pe = &e)
			{
				ImGuiTextRange* ret = ImGuiTextRangeNative(b, (byte*)pe);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] byte* b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> e)
		{
			fixed (byte* pe = e)
			{
				ImGuiTextRange* ret = ImGuiTextRangeNative(b, (byte*)pe);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] byte* b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] string e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (e != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(e);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(e, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGuiTextRange* ret = ImGuiTextRangeNative(b, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] ref byte b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] ref byte e)
		{
			fixed (byte* pb = &b)
			{
				fixed (byte* pe = &e)
				{
					ImGuiTextRange* ret = ImGuiTextRangeNative((byte*)pb, (byte*)pe);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> e)
		{
			fixed (byte* pb = b)
			{
				fixed (byte* pe = e)
				{
					ImGuiTextRange* ret = ImGuiTextRangeNative((byte*)pb, (byte*)pe);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_ImGuiTextRange_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextRange*")]
		public static ImGuiTextRange* ImGuiTextRange([NativeName(NativeNameType.Param, "_b")] [NativeName(NativeNameType.Type, "const char*")] string b, [NativeName(NativeNameType.Param, "_e")] [NativeName(NativeNameType.Type, "const char*")] string e)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (b != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(b);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(b, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (e != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(e);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(e, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			ImGuiTextRange* ret = ImGuiTextRangeNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte emptyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextRange*, byte>)vt[460])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[460])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool empty([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self)
		{
			byte ret = emptyNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool empty([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ref ImGuiTextRange self)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				byte ret = emptyNative((ImGuiTextRange*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void splitNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self, [NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ImVectorImGuiTextRange* output)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextRange*, byte, ImVectorImGuiTextRange*, void>)vt[461])(self, separator, output);
			#else
			((delegate* unmanaged[Cdecl]<nint, byte, nint, void>)vt[461])((nint)self, separator, (nint)output);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self, [NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ImVectorImGuiTextRange* output)
		{
			splitNative(self, separator, output);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ref ImGuiTextRange self, [NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ImVectorImGuiTextRange* output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				splitNative((ImGuiTextRange*)pself, separator, output);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ImGuiTextRange* self, [NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ref ImVectorImGuiTextRange output)
		{
			fixed (ImVectorImGuiTextRange* poutput = &output)
			{
				splitNative(self, separator, (ImVectorImGuiTextRange*)poutput);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextRange_split")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void split([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextRange*")] ref ImGuiTextRange self, [NativeName(NativeNameType.Param, "separator")] [NativeName(NativeNameType.Type, "char")] byte separator, [NativeName(NativeNameType.Param, "out")] [NativeName(NativeNameType.Type, "ImVector_ImGuiTextRange*")] ref ImVectorImGuiTextRange output)
		{
			fixed (ImGuiTextRange* pself = &self)
			{
				fixed (ImVectorImGuiTextRange* poutput = &output)
				{
					splitNative((ImGuiTextRange*)pself, separator, (ImVectorImGuiTextRange*)poutput);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_ImGuiTextBuffer")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextBuffer*")]
		internal static ImGuiTextBuffer* ImGuiTextBufferNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*>)vt[462])();
			#else
			return (ImGuiTextBuffer*)((delegate* unmanaged[Cdecl]<nint>)vt[462])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_ImGuiTextBuffer")]
		[return: NativeName(NativeNameType.Type, "ImGuiTextBuffer*")]
		public static ImGuiTextBuffer* ImGuiTextBuffer()
		{
			ImGuiTextBuffer* ret = ImGuiTextBufferNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, void>)vt[463])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[463])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				DestroyNative((ImGuiTextBuffer*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* beginNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[464])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[464])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			byte* ret = beginNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string beginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			string ret = Utils.DecodeStringUTF8(beginNative(self));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* begin([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = beginNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_begin")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string beginS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(beginNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		/// <summary>
		/// Buf is zero-terminated, so end() will point on the zero-terminator<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* endNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[465])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[465])((nint)self);
			#endif
		}

		/// <summary>
		/// Buf is zero-terminated, so end() will point on the zero-terminator<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* end([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			byte* ret = endNative(self);
			return ret;
		}

		/// <summary>
		/// Buf is zero-terminated, so end() will point on the zero-terminator<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string endS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			string ret = Utils.DecodeStringUTF8(endNative(self));
			return ret;
		}

		/// <summary>
		/// Buf is zero-terminated, so end() will point on the zero-terminator<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* end([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = endNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Buf is zero-terminated, so end() will point on the zero-terminator<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_end")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string endS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				string ret = Utils.DecodeStringUTF8(endNative((ImGuiTextBuffer*)pself));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int sizeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, int>)vt[466])(self);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[466])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int size([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			int ret = sizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_size")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int size([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				int ret = sizeNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte emptyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte>)vt[467])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[467])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool empty([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			byte ret = emptyNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_empty")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool empty([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte ret = emptyNative((ImGuiTextBuffer*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void clearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, void>)vt[468])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[468])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			clearNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				clearNative((ImGuiTextBuffer*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_reserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void reserveNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "capacity")] [NativeName(NativeNameType.Type, "int")] int capacity)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, int, void>)vt[469])(self, capacity);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[469])((nint)self, capacity);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_reserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void reserve([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self, [NativeName(NativeNameType.Param, "capacity")] [NativeName(NativeNameType.Type, "int")] int capacity)
		{
			reserveNative(self, capacity);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_reserve")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void reserve([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self, [NativeName(NativeNameType.Param, "capacity")] [NativeName(NativeNameType.Type, "int")] int capacity)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				reserveNative((ImGuiTextBuffer*)pself, capacity);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* c_strNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImGuiTextBuffer*, byte*>)vt[470])(self);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[470])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* c_str([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			byte* ret = c_strNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string c_strS([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ImGuiTextBuffer* self)
		{
			string ret = Utils.DecodeStringUTF8(c_strNative(self));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImGuiTextBuffer_c_str")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* c_str([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImGuiTextBuffer*")] ref ImGuiTextBuffer self)
		{
			fixed (ImGuiTextBuffer* pself = &self)
			{
				byte* ret = c_strNative((ImGuiTextBuffer*)pself);
				return ret;
			}
		}
	}
}
