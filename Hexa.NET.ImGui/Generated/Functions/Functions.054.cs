// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, filename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative(self, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromFileTTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, (byte*)pfilename, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromFileTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromFileTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromFileTTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryTTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, void*, int, float, ImFontConfig*, char*, ImFont*>)vt[624])(self, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, int, float, nint, nint, nint>)vt[624])((nint)self, (nint)fontData, fontDataSize, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryTTFNative(self, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg-&gt;FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font_data")] [NativeName(NativeNameType.Type, "void*")] void* fontData, [NativeName(NativeNameType.Param, "font_data_size")] [NativeName(NativeNameType.Type, "int")] int fontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryTTFNative((ImFontAtlas*)pself, fontData, fontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryCompressedTTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, void*, int, float, ImFontConfig*, char*, ImFont*>)vt[625])(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, int, float, nint, nint, nint>)vt[625])((nint)self, (nint)compressedFontData, compressedFontDataSize, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedTTFNative(self, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedTTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedTTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data")] [NativeName(NativeNameType.Type, "const void*")] void* compressedFontData, [NativeName(NativeNameType.Param, "compressed_font_data_size")] [NativeName(NativeNameType.Type, "int")] int compressedFontDataSize, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedTTFNative((ImFontAtlas*)pself, compressedFontData, compressedFontDataSize, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		internal static ImFont* AddFontFromMemoryCompressedBase85TTFNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte*, float, ImFontConfig*, char*, ImFont*>)vt[626])(self, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
			#else
			return (ImFont*)((delegate* unmanaged[Cdecl]<nint, nint, float, nint, nint, nint>)vt[626])((nint)self, (nint)compressedFontDatabase85, sizePixels, (nint)fontCfg, (nint)glyphRanges);
			#endif
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] char* glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, glyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)(default));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (char* pglyphRanges = &glyphRanges)
			{
				ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, fontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ImFontConfig* fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, fontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)(default), (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] byte* compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, compressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
			{
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (compressedFontDatabase85 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImFontConfig* pfontCfg = &fontCfg)
			{
				fixed (char* pglyphRanges = &glyphRanges)
				{
					ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative(self, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ref byte compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = &compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte* pcompressedFontDatabase85 = compressedFontDatabase85)
				{
					fixed (ImFontConfig* pfontCfg = &fontCfg)
					{
						fixed (char* pglyphRanges = &glyphRanges)
						{
							ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, (byte*)pcompressedFontDatabase85, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
		[return: NativeName(NativeNameType.Type, "ImFont*")]
		public static ImFont* AddFontFromMemoryCompressedBase85TTF([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "compressed_font_data_base85")] [NativeName(NativeNameType.Type, "const char*")] string compressedFontDatabase85, [NativeName(NativeNameType.Param, "size_pixels")] [NativeName(NativeNameType.Type, "float")] float sizePixels, [NativeName(NativeNameType.Param, "font_cfg")] [NativeName(NativeNameType.Type, "const ImFontConfig*")] ref ImFontConfig fontCfg, [NativeName(NativeNameType.Param, "glyph_ranges")] [NativeName(NativeNameType.Type, "const ImWchar*")] ref char glyphRanges)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (compressedFontDatabase85 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(compressedFontDatabase85);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(compressedFontDatabase85, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (ImFontConfig* pfontCfg = &fontCfg)
				{
					fixed (char* pglyphRanges = &glyphRanges)
					{
						ImFont* ret = AddFontFromMemoryCompressedBase85TTFNative((ImFontAtlas*)pself, pStr0, sizePixels, (ImFontConfig*)pfontCfg, (char*)pglyphRanges);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearInputDataNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[627])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[627])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			ClearInputDataNative(self);
		}

		/// <summary>
		/// Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearInputData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearInputData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ClearInputDataNative((ImFontAtlas*)pself);
			}
		}

		/// <summary>
		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearTexDataNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[628])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[628])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearTexData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			ClearTexDataNative(self);
		}

		/// <summary>
		/// Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearTexData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearTexData([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ClearTexDataNative((ImFontAtlas*)pself);
			}
		}

		/// <summary>
		/// Clear output font data (glyphs storage, UV coordinates).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearFontsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[629])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[629])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear output font data (glyphs storage, UV coordinates).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearFonts([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			ClearFontsNative(self);
		}

		/// <summary>
		/// Clear output font data (glyphs storage, UV coordinates).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_ClearFonts")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ClearFonts([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ClearFontsNative((ImFontAtlas*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ClearNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)vt[630])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[630])((nint)self);
			#endif
		}

		/// <summary>
		/// Clear all input and output.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			ClearNative(self);
		}

		/// <summary>
		/// Clear all input and output.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Clear")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Clear([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ClearNative((ImFontAtlas*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte BuildNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte>)vt[631])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[631])((nint)self);
			#endif
		}

		/// <summary>
		/// Build pixels data. This is called automatically for you by the GetTexData*** functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Build([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			byte ret = BuildNative(self);
			return ret != 0;
		}

		/// <summary>
		/// Build pixels data. This is called automatically for you by the GetTexData*** functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_Build")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Build([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte ret = BuildNative((ImFontAtlas*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetTexDataAsAlpha8Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte**, int*, int*, int*, void>)vt[632])(self, outPixels, outWidth, outHeight, outBytesPerPixel);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, void>)vt[632])((nint)self, (nint)outPixels, (nint)outWidth, (nint)outHeight, (nint)outBytesPerPixel);
			#endif
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			GetTexDataAsAlpha8Native(self, outPixels, outWidth, outHeight, outBytesPerPixel);
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			GetTexDataAsAlpha8Native(self, outPixels, outWidth, outHeight, (int*)(default));
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				GetTexDataAsAlpha8Native(self, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (int* poutHeight = &outHeight)
			{
				GetTexDataAsAlpha8Native(self, outPixels, outWidth, (int*)poutHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutBytesPerPixel = &outBytesPerPixel)
			{
				GetTexDataAsAlpha8Native(self, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsAlpha8Native(self, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsAlpha8Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsAlpha8Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsAlpha8Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 1 byte per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsAlpha8")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsAlpha8([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								GetTexDataAsAlpha8Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void GetTexDataAsRGBA32Native([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte**, int*, int*, int*, void>)vt[633])(self, outPixels, outWidth, outHeight, outBytesPerPixel);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, void>)vt[633])((nint)self, (nint)outPixels, (nint)outWidth, (nint)outHeight, (nint)outBytesPerPixel);
			#endif
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			GetTexDataAsRGBA32Native(self, outPixels, outWidth, outHeight, outBytesPerPixel);
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			GetTexDataAsRGBA32Native(self, outPixels, outWidth, outHeight, (int*)(default));
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, outHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				GetTexDataAsRGBA32Native(self, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (int* poutHeight = &outHeight)
			{
				GetTexDataAsRGBA32Native(self, outPixels, outWidth, (int*)poutHeight, (int*)(default));
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] int* outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, outBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)(default));
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutBytesPerPixel = &outBytesPerPixel)
			{
				GetTexDataAsRGBA32Native(self, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] int* outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, outHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutHeight = &outHeight)
			{
				fixed (int* poutBytesPerPixel = &outBytesPerPixel)
				{
					GetTexDataAsRGBA32Native(self, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native(self, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] int* outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, outWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (int* poutWidth = &outWidth)
			{
				fixed (int* poutHeight = &outHeight)
				{
					fixed (int* poutBytesPerPixel = &outBytesPerPixel)
					{
						GetTexDataAsRGBA32Native(self, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsRGBA32Native((ImFontAtlas*)pself, outPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (byte** poutPixels = &outPixels)
			{
				fixed (int* poutWidth = &outWidth)
				{
					fixed (int* poutHeight = &outHeight)
					{
						fixed (int* poutBytesPerPixel = &outBytesPerPixel)
						{
							GetTexDataAsRGBA32Native(self, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
						}
					}
				}
			}
		}

		/// <summary>
		/// 4 bytes-per-pixel<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetTexDataAsRGBA32")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetTexDataAsRGBA32([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "out_pixels")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* outPixels, [NativeName(NativeNameType.Param, "out_width")] [NativeName(NativeNameType.Type, "int*")] ref int outWidth, [NativeName(NativeNameType.Param, "out_height")] [NativeName(NativeNameType.Type, "int*")] ref int outHeight, [NativeName(NativeNameType.Param, "out_bytes_per_pixel")] [NativeName(NativeNameType.Type, "int*")] ref int outBytesPerPixel)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (byte** poutPixels = &outPixels)
				{
					fixed (int* poutWidth = &outWidth)
					{
						fixed (int* poutHeight = &outHeight)
						{
							fixed (int* poutBytesPerPixel = &outBytesPerPixel)
							{
								GetTexDataAsRGBA32Native((ImFontAtlas*)pself, (byte**)poutPixels, (int*)poutWidth, (int*)poutHeight, (int*)poutBytesPerPixel);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte IsBuiltNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, byte>)vt[634])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[634])((nint)self);
			#endif
		}

		/// <summary>
		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsBuilt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			byte ret = IsBuiltNative(self);
			return ret != 0;
		}

		/// <summary>
		/// Bit ambiguous: used to detect when user didn't build texture but effectively we should check TexID != 0 except that would be backend dependent...<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_IsBuilt")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsBuilt([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				byte ret = IsBuiltNative((ImFontAtlas*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetTexIDNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImTextureID, void>)vt[635])(self, id);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImTextureID, void>)vt[635])((nint)self, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTexID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID id)
		{
			SetTexIDNative(self, id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_SetTexID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetTexID([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID id)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				SetTexIDNative((ImFontAtlas*)pself, id);
			}
		}

		/// <summary>
		/// Basic Latin, Extended Latin<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesDefaultNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[636])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[636])((nint)self);
			#endif
		}

		/// <summary>
		/// Basic Latin, Extended Latin<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesDefaultNative(self);
			return ret;
		}

		/// <summary>
		/// Basic Latin, Extended Latin<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesDefault")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesDefault([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesDefaultNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Greek and Coptic<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesGreekNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[637])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[637])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Greek and Coptic<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesGreek([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesGreekNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Greek and Coptic<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesGreek")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesGreek([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesGreekNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Korean characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesKoreanNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[638])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[638])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Korean characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesKorean([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesKoreanNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Korean characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesKorean")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesKorean([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesKoreanNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesJapaneseNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[639])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[639])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesJapanese([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesJapaneseNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesJapanese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesJapanese([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesJapaneseNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesChineseFullNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[640])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[640])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesChineseFull([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesChineseFullNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + full set of about 21000 CJK Unified Ideographs<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseFull")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesChineseFull([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesChineseFullNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesChineseSimplifiedCommonNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[641])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[641])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesChineseSimplifiedCommon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesChineseSimplifiedCommonNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Half-Width + Japanese HiraganaKatakana + set of 2500 CJK Unified Ideographs for common simplified Chinese<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesChineseSimplifiedCommon([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesChineseSimplifiedCommonNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + about 400 Cyrillic characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesCyrillicNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[642])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[642])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + about 400 Cyrillic characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesCyrillic([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesCyrillicNative(self);
			return ret;
		}

		/// <summary>
		/// Default + about 400 Cyrillic characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesCyrillic")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesCyrillic([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesCyrillicNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Thai characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesThaiNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[643])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[643])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Thai characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesThai([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesThaiNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Thai characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesThai")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesThai([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesThaiNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// Default + Vietnamese characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		internal static char* GetGlyphRangesVietnameseNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, char*>)vt[644])(self);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[644])((nint)self);
			#endif
		}

		/// <summary>
		/// Default + Vietnamese characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesVietnamese([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self)
		{
			char* ret = GetGlyphRangesVietnameseNative(self);
			return ret;
		}

		/// <summary>
		/// Default + Vietnamese characters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetGlyphRangesVietnamese")]
		[return: NativeName(NativeNameType.Type, "const ImWchar*")]
		public static char* GetGlyphRangesVietnamese([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				char* ret = GetGlyphRangesVietnameseNative((ImFontAtlas*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AddCustomRectRegularNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int>)vt[645])(self, width, height);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)vt[645])((nint)self, width, height);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectRegular([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			int ret = AddCustomRectRegularNative(self, width, height);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectRegular")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectRegular([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = AddCustomRectRegularNative((ImFontAtlas*)pself, width, height);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AddCustomRectFontGlyphNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, char, int, int, float, Vector2, int>)vt[646])(self, font, id, width, height, advanceX, offset);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, char, int, int, float, Vector2, int>)vt[646])((nint)self, (nint)font, id, width, height, advanceX, offset);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			int ret = AddCustomRectFontGlyphNative(self, font, id, width, height, advanceX, offset);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			int ret = AddCustomRectFontGlyphNative(self, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = AddCustomRectFontGlyphNative((ImFontAtlas*)pself, font, id, width, height, advanceX, offset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ImFont* font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				int ret = AddCustomRectFontGlyphNative((ImFontAtlas*)pself, font, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFont* pfont = &font)
			{
				int ret = AddCustomRectFontGlyphNative(self, (ImFont*)pfont, id, width, height, advanceX, offset);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFont* pfont = &font)
			{
				int ret = AddCustomRectFontGlyphNative(self, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 offset)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = AddCustomRectFontGlyphNative((ImFontAtlas*)pself, (ImFont*)pfont, id, width, height, advanceX, offset);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_AddCustomRectFontGlyph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddCustomRectFontGlyph([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "font")] [NativeName(NativeNameType.Type, "ImFont*")] ref ImFont font, [NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "ImWchar")] char id, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "advance_x")] [NativeName(NativeNameType.Type, "float")] float advanceX)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				fixed (ImFont* pfont = &font)
				{
					int ret = AddCustomRectFontGlyphNative((ImFontAtlas*)pself, (ImFont*)pfont, id, width, height, advanceX, (Vector2)(new Vector2(0,0)));
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		internal static ImFontAtlasCustomRect* GetCustomRectByIndexNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, ImFontAtlasCustomRect*>)vt[647])(self, index);
			#else
			return (ImFontAtlasCustomRect*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[647])((nint)self, index);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public static ImFontAtlasCustomRect* GetCustomRectByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			ImFontAtlasCustomRect* ret = GetCustomRectByIndexNative(self, index);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_GetCustomRectByIndex")]
		[return: NativeName(NativeNameType.Type, "ImFontAtlasCustomRect*")]
		public static ImFontAtlasCustomRect* GetCustomRectByIndex([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				ImFontAtlasCustomRect* ret = GetCustomRectByIndexNative((ImFontAtlas*)pself, index);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void CalcCustomRectUVNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontAtlasCustomRect*, Vector2*, Vector2*, void>)vt[648])(self, rect, outUvMin, outUvMax);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)vt[648])((nint)self, (nint)rect, (nint)outUvMin, (nint)outUvMax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcCustomRectUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ImFontAtlas* self, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			CalcCustomRectUVNative(self, rect, outUvMin, outUvMax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImFontAtlas_CalcCustomRectUV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CalcCustomRectUV([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImFontAtlas*")] ref ImFontAtlas self, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "const ImFontAtlasCustomRect*")] ImFontAtlasCustomRect* rect, [NativeName(NativeNameType.Param, "out_uv_min")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMin, [NativeName(NativeNameType.Param, "out_uv_max")] [NativeName(NativeNameType.Type, "ImVec2*")] Vector2* outUvMax)
		{
			fixed (ImFontAtlas* pself = &self)
			{
				CalcCustomRectUVNative((ImFontAtlas*)pself, rect, outUvMin, outUvMax);
			}
		}
	}
}
