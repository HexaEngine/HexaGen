// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetClipboardText")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GetClipboardTextS()
		{
			string ret = Utils.DecodeStringUTF8(GetClipboardTextNative());
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetClipboardText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SetClipboardTextNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[387])(text);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[387])((nint)text);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetClipboardText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetClipboardText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			SetClipboardTextNative(text);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetClipboardText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetClipboardText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				SetClipboardTextNative((byte*)ptext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetClipboardText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetClipboardText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				SetClipboardTextNative((byte*)ptext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igSetClipboardText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetClipboardText([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetClipboardTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LoadIniSettingsFromDiskNative([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* iniFilename)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[388])(iniFilename);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[388])((nint)iniFilename);
			#endif
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* iniFilename)
		{
			LoadIniSettingsFromDiskNative(iniFilename);
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte iniFilename)
		{
			fixed (byte* piniFilename = &iniFilename)
			{
				LoadIniSettingsFromDiskNative((byte*)piniFilename);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> iniFilename)
		{
			fixed (byte* piniFilename = iniFilename)
			{
				LoadIniSettingsFromDiskNative((byte*)piniFilename);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] string iniFilename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromDiskNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LoadIniSettingsFromMemoryNative([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] byte* iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] ulong iniSize)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, ulong, void>)vt[389])(iniData, iniSize);
			#else
			((delegate* unmanaged[Cdecl]<nint, ulong, void>)vt[389])((nint)iniData, iniSize);
			#endif
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] byte* iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] ulong iniSize)
		{
			LoadIniSettingsFromMemoryNative(iniData, iniSize);
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] byte* iniData)
		{
			LoadIniSettingsFromMemoryNative(iniData, (ulong)(0));
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ref byte iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] ulong iniSize)
		{
			fixed (byte* piniData = &iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ref byte iniData)
		{
			fixed (byte* piniData = &iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, (ulong)(0));
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] ulong iniSize)
		{
			fixed (byte* piniData = iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> iniData)
		{
			fixed (byte* piniData = iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, (ulong)(0));
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] string iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] ulong iniSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniData != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniData);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniData, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromMemoryNative(pStr0, iniSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] string iniData)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniData != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniData);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniData, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromMemoryNative(pStr0, (ulong)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] byte* iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] nuint iniSize)
		{
			LoadIniSettingsFromMemoryNative(iniData, iniSize);
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ref byte iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] nuint iniSize)
		{
			fixed (byte* piniData = &iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] nuint iniSize)
		{
			fixed (byte* piniData = iniData)
			{
				LoadIniSettingsFromMemoryNative((byte*)piniData, iniSize);
			}
		}

		/// <summary>
		/// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLoadIniSettingsFromMemory")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LoadIniSettingsFromMemory([NativeName(NativeNameType.Param, "ini_data")] [NativeName(NativeNameType.Type, "const char*")] string iniData, [NativeName(NativeNameType.Param, "ini_size")] [NativeName(NativeNameType.Type, "size_t")] nuint iniSize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniData != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniData);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniData, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadIniSettingsFromMemoryNative(pStr0, iniSize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SaveIniSettingsToDiskNative([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* iniFilename)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[390])(iniFilename);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[390])((nint)iniFilename);
			#endif
		}

		/// <summary>
		/// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SaveIniSettingsToDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* iniFilename)
		{
			SaveIniSettingsToDiskNative(iniFilename);
		}

		/// <summary>
		/// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SaveIniSettingsToDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte iniFilename)
		{
			fixed (byte* piniFilename = &iniFilename)
			{
				SaveIniSettingsToDiskNative((byte*)piniFilename);
			}
		}

		/// <summary>
		/// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SaveIniSettingsToDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> iniFilename)
		{
			fixed (byte* piniFilename = iniFilename)
			{
				SaveIniSettingsToDiskNative((byte*)piniFilename);
			}
		}

		/// <summary>
		/// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToDisk")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SaveIniSettingsToDisk([NativeName(NativeNameType.Param, "ini_filename")] [NativeName(NativeNameType.Type, "const char*")] string iniFilename)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (iniFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(iniFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(iniFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SaveIniSettingsToDiskNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SaveIniSettingsToMemoryNative([NativeName(NativeNameType.Param, "out_ini_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outIniSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong*, byte*>)vt[391])(outIniSize);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[391])((nint)outIniSize);
			#endif
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SaveIniSettingsToMemory([NativeName(NativeNameType.Param, "out_ini_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outIniSize)
		{
			byte* ret = SaveIniSettingsToMemoryNative(outIniSize);
			return ret;
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SaveIniSettingsToMemory()
		{
			byte* ret = SaveIniSettingsToMemoryNative((ulong*)(default));
			return ret;
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SaveIniSettingsToMemoryS()
		{
			string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative((ulong*)(default)));
			return ret;
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SaveIniSettingsToMemoryS([NativeName(NativeNameType.Param, "out_ini_size")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outIniSize)
		{
			string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative(outIniSize));
			return ret;
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SaveIniSettingsToMemory([NativeName(NativeNameType.Param, "out_ini_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outIniSize)
		{
			fixed (nuint* poutIniSize = &outIniSize)
			{
				byte* ret = SaveIniSettingsToMemoryNative((ulong*)poutIniSize);
				return ret;
			}
		}

		/// <summary>
		/// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSaveIniSettingsToMemory")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SaveIniSettingsToMemoryS([NativeName(NativeNameType.Param, "out_ini_size")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outIniSize)
		{
			fixed (nuint* poutIniSize = &outIniSize)
			{
				string ret = Utils.DecodeStringUTF8(SaveIniSettingsToMemoryNative((ulong*)poutIniSize));
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextEncoding")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugTextEncodingNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[392])(text);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[392])((nint)text);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextEncoding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextEncoding([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			DebugTextEncodingNative(text);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextEncoding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextEncoding([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				DebugTextEncodingNative((byte*)ptext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextEncoding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextEncoding([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				DebugTextEncodingNative((byte*)ptext);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugTextEncoding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugTextEncoding([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextEncodingNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugFlashStyleColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugFlashStyleColorNative([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiCol")] ImGuiCol idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiCol, void>)vt[393])(idx);
			#else
			((delegate* unmanaged[Cdecl]<ImGuiCol, void>)vt[393])(idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugFlashStyleColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugFlashStyleColor([NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImGuiCol")] ImGuiCol idx)
		{
			DebugFlashStyleColorNative(idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugStartItemPicker")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DebugStartItemPickerNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[394])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[394])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugStartItemPicker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DebugStartItemPicker()
		{
			DebugStartItemPickerNative();
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte DebugCheckVersionAndDataLayoutNative([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ulong, ulong, ulong, ulong, ulong, ulong, byte>)vt[395])(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ulong, ulong, ulong, ulong, ulong, ulong, byte>)vt[395])((nint)versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			#endif
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] ulong szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] nuint szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] nuint szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] ulong szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] byte* versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte ret = DebugCheckVersionAndDataLayoutNative(versionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			return ret != 0;
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ref byte versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = &versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			fixed (byte* pversionStr = versionStr)
			{
				byte ret = DebugCheckVersionAndDataLayoutNative((byte*)pversionStr, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
				return ret != 0;
			}
		}

		/// <summary>
		/// This is called by IMGUI_CHECKVERSION() macro.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDebugCheckVersionAndDataLayout")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DebugCheckVersionAndDataLayout([NativeName(NativeNameType.Param, "version_str")] [NativeName(NativeNameType.Type, "const char*")] string versionStr, [NativeName(NativeNameType.Param, "sz_io")] [NativeName(NativeNameType.Type, "size_t")] ulong szIo, [NativeName(NativeNameType.Param, "sz_style")] [NativeName(NativeNameType.Type, "size_t")] ulong szStyle, [NativeName(NativeNameType.Param, "sz_vec2")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec2, [NativeName(NativeNameType.Param, "sz_vec4")] [NativeName(NativeNameType.Type, "size_t")] nuint szvec4, [NativeName(NativeNameType.Param, "sz_drawvert")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawvert, [NativeName(NativeNameType.Param, "sz_drawidx")] [NativeName(NativeNameType.Type, "size_t")] nuint szDrawidx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (versionStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(versionStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(versionStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugCheckVersionAndDataLayoutNative(pStr0, szIo, szStyle, szvec2, szvec4, szDrawvert, szDrawidx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}
	}
}
