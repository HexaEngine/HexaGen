// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// undo a SameLine() or force a new line when in a horizontal-layout context.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igNewLine")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void NewLine()
		{
			NewLineNative();
		}

		/// <summary>
		/// add vertical spacing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SpacingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[109])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[109])();
			#endif
		}

		/// <summary>
		/// add vertical spacing.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSpacing")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Spacing()
		{
			SpacingNative();
		}

		/// <summary>
		/// add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDummy")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void DummyNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[110])(size);
			#else
			((delegate* unmanaged[Cdecl]<Vector2, void>)vt[110])(size);
			#endif
		}

		/// <summary>
		/// add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igDummy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Dummy([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			DummyNative(size);
		}

		/// <summary>
		/// move content position toward the right, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIndent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void IndentNative([NativeName(NativeNameType.Param, "indent_w")] [NativeName(NativeNameType.Type, "float")] float indentW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)vt[111])(indentW);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)vt[111])(indentW);
			#endif
		}

		/// <summary>
		/// move content position toward the right, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIndent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Indent([NativeName(NativeNameType.Param, "indent_w")] [NativeName(NativeNameType.Type, "float")] float indentW)
		{
			IndentNative(indentW);
		}

		/// <summary>
		/// move content position toward the right, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igIndent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Indent()
		{
			IndentNative((float)(0.0f));
		}

		/// <summary>
		/// move content position back to the left, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igUnindent")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void UnindentNative([NativeName(NativeNameType.Param, "indent_w")] [NativeName(NativeNameType.Type, "float")] float indentW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)vt[112])(indentW);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)vt[112])(indentW);
			#endif
		}

		/// <summary>
		/// move content position back to the left, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igUnindent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Unindent([NativeName(NativeNameType.Param, "indent_w")] [NativeName(NativeNameType.Type, "float")] float indentW)
		{
			UnindentNative(indentW);
		}

		/// <summary>
		/// move content position back to the left, by indent_w, or style.IndentSpacing if indent_w &lt;= 0<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igUnindent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Unindent()
		{
			UnindentNative((float)(0.0f));
		}

		/// <summary>
		/// lock horizontal starting position<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginGroup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BeginGroupNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[113])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[113])();
			#endif
		}

		/// <summary>
		/// lock horizontal starting position<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBeginGroup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BeginGroup()
		{
			BeginGroupNative();
		}

		/// <summary>
		/// unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndGroup")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void EndGroupNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[114])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[114])();
			#endif
		}

		/// <summary>
		/// unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igEndGroup")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndGroup()
		{
			EndGroupNative();
		}

		/// <summary>
		/// vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igAlignTextToFramePadding")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AlignTextToFramePaddingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[115])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[115])();
			#endif
		}

		/// <summary>
		/// vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igAlignTextToFramePadding")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AlignTextToFramePadding()
		{
			AlignTextToFramePaddingNative();
		}

		/// <summary>
		/// ~ FontSize<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTextLineHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetTextLineHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[116])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[116])();
			#endif
		}

		/// <summary>
		/// ~ FontSize<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTextLineHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetTextLineHeight()
		{
			float ret = GetTextLineHeightNative();
			return ret;
		}

		/// <summary>
		/// ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTextLineHeightWithSpacing")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetTextLineHeightWithSpacingNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[117])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[117])();
			#endif
		}

		/// <summary>
		/// ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetTextLineHeightWithSpacing")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetTextLineHeightWithSpacing()
		{
			float ret = GetTextLineHeightWithSpacingNative();
			return ret;
		}

		/// <summary>
		/// ~ FontSize + style.FramePadding.y * 2<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFrameHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetFrameHeightNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[118])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[118])();
			#endif
		}

		/// <summary>
		/// ~ FontSize + style.FramePadding.y * 2<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFrameHeight")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFrameHeight()
		{
			float ret = GetFrameHeightNative();
			return ret;
		}

		/// <summary>
		/// ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFrameHeightWithSpacing")]
		[return: NativeName(NativeNameType.Type, "float")]
		internal static float GetFrameHeightWithSpacingNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)vt[119])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)vt[119])();
			#endif
		}

		/// <summary>
		/// ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetFrameHeightWithSpacing")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetFrameHeightWithSpacing()
		{
			float ret = GetFrameHeightWithSpacingNative();
			return ret;
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushIDNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[120])(strId);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[120])((nint)strId);
			#endif
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			PushIDNative(strId);
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				PushIDNative((byte*)pstrId);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				PushIDNative((byte*)pstrId);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Str")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushIDNative([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[121])(strIdBegin, strIdEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[121])((nint)strIdBegin, (nint)strIdEnd);
			#endif
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			PushIDNative(strIdBegin, strIdEnd);
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				PushIDNative((byte*)pstrIdBegin, strIdEnd);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				PushIDNative((byte*)pstrIdBegin, strIdEnd);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(pStr0, strIdEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				PushIDNative(strIdBegin, (byte*)pstrIdEnd);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd)
		{
			fixed (byte* pstrIdEnd = strIdEnd)
			{
				PushIDNative(strIdBegin, (byte*)pstrIdEnd);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushIDNative(strIdBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					PushIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
				}
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				fixed (byte* pstrIdEnd = strIdEnd)
				{
					PushIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
				}
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_StrStr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			PushIDNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Ptr")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushIDNative([NativeName(NativeNameType.Param, "ptr_id")] [NativeName(NativeNameType.Type, "const void*")] void* ptrId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)vt[122])(ptrId);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[122])((nint)ptrId);
			#endif
		}

		/// <summary>
		/// push pointer into the ID stack (will hash pointer).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Ptr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "ptr_id")] [NativeName(NativeNameType.Type, "const void*")] void* ptrId)
		{
			PushIDNative(ptrId);
		}

		/// <summary>
		/// push string into the ID stack (will hash string).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Int")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PushIDNative([NativeName(NativeNameType.Param, "int_id")] [NativeName(NativeNameType.Type, "int")] int intId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)vt[123])(intId);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)vt[123])(intId);
			#endif
		}

		/// <summary>
		/// push integer into the ID stack (will hash integer).<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPushID_Int")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PushID([NativeName(NativeNameType.Param, "int_id")] [NativeName(NativeNameType.Type, "int")] int intId)
		{
			PushIDNative(intId);
		}

		/// <summary>
		/// pop from the ID stack.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopID")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PopIDNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[124])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[124])();
			#endif
		}

		/// <summary>
		/// pop from the ID stack.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igPopID")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PopID()
		{
			PopIDNative();
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint>)vt[125])(strId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)vt[125])((nint)strId);
			#endif
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId)
		{
			uint ret = GetIDNative(strId);
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId)
		{
			fixed (byte* pstrId = &strId)
			{
				uint ret = GetIDNative((byte*)pstrId);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId)
		{
			fixed (byte* pstrId = strId)
			{
				uint ret = GetIDNative((byte*)pstrId);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Str")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDNative([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, uint>)vt[126])(strIdBegin, strIdEnd);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)vt[126])((nint)strIdBegin, (nint)strIdEnd);
			#endif
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			uint ret = GetIDNative(strIdBegin, strIdEnd);
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				uint ret = GetIDNative((byte*)pstrIdBegin, strIdEnd);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				uint ret = GetIDNative((byte*)pstrIdBegin, strIdEnd);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDNative(pStr0, strIdEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd)
		{
			fixed (byte* pstrIdEnd = &strIdEnd)
			{
				uint ret = GetIDNative(strIdBegin, (byte*)pstrIdEnd);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd)
		{
			fixed (byte* pstrIdEnd = strIdEnd)
			{
				uint ret = GetIDNative(strIdBegin, (byte*)pstrIdEnd);
				return ret;
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] byte* strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetIDNative(strIdBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte strIdEnd)
		{
			fixed (byte* pstrIdBegin = &strIdBegin)
			{
				fixed (byte* pstrIdEnd = &strIdEnd)
				{
					uint ret = GetIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strIdEnd)
		{
			fixed (byte* pstrIdBegin = strIdBegin)
			{
				fixed (byte* pstrIdEnd = strIdEnd)
				{
					uint ret = GetIDNative((byte*)pstrIdBegin, (byte*)pstrIdEnd);
					return ret;
				}
			}
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_StrStr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "str_id_begin")] [NativeName(NativeNameType.Type, "const char*")] string strIdBegin, [NativeName(NativeNameType.Param, "str_id_end")] [NativeName(NativeNameType.Type, "const char*")] string strIdEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strIdBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strIdBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strIdBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (strIdEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(strIdEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(strIdEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			uint ret = GetIDNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDNative([NativeName(NativeNameType.Param, "ptr_id")] [NativeName(NativeNameType.Type, "const void*")] void* ptrId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint>)vt[127])(ptrId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)vt[127])((nint)ptrId);
			#endif
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Ptr")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "ptr_id")] [NativeName(NativeNameType.Type, "const void*")] void* ptrId)
		{
			uint ret = GetIDNative(ptrId);
			return ret;
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		internal static uint GetIDNative([NativeName(NativeNameType.Param, "int_id")] [NativeName(NativeNameType.Type, "int")] int intId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint>)vt[128])(intId);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, uint>)vt[128])(intId);
			#endif
		}

		/// <summary>
		/// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igGetID_Int")]
		[return: NativeName(NativeNameType.Type, "ImGuiID")]
		public static uint GetID([NativeName(NativeNameType.Param, "int_id")] [NativeName(NativeNameType.Type, "int")] int intId)
		{
			uint ret = GetIDNative(intId);
			return ret;
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextUnformattedNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[129])(text, textEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[129])((nint)text, (nint)textEnd);
			#endif
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			TextUnformattedNative(text, textEnd);
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text)
		{
			TextUnformattedNative(text, (byte*)(default));
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = &text)
			{
				TextUnformattedNative((byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				TextUnformattedNative((byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			fixed (byte* ptext = text)
			{
				TextUnformattedNative((byte*)ptext, textEnd);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				TextUnformattedNative((byte*)ptext, (byte*)(default));
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] byte* textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(pStr0, textEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				TextUnformattedNative(text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptextEnd = textEnd)
			{
				TextUnformattedNative(text, (byte*)ptextEnd);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] byte* text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextUnformattedNative(text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ref byte text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ref byte textEnd)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					TextUnformattedNative((byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> textEnd)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* ptextEnd = textEnd)
				{
					TextUnformattedNative((byte*)ptext, (byte*)ptextEnd);
				}
			}
		}

		/// <summary>
		/// raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextUnformatted")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextUnformatted([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "const char*")] string text, [NativeName(NativeNameType.Param, "text_end")] [NativeName(NativeNameType.Type, "const char*")] string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			TextUnformattedNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// formatted text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[130])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[130])((nint)fmt);
			#endif
		}

		/// <summary>
		/// formatted text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Text([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			TextNative(fmt);
		}

		/// <summary>
		/// formatted text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Text([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// formatted text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Text([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// formatted text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Text([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[131])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[131])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			TextVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColored")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextColoredNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4, byte*, void>)vt[132])(col, fmt);
			#else
			((delegate* unmanaged[Cdecl]<Vector4, nint, void>)vt[132])(col, (nint)fmt);
			#endif
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColored")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColored([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			TextColoredNative(col, fmt);
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColored")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColored([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextColoredNative(col, (byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColored")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColored([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TextColoredNative(col, (byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColored")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColored([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextColoredNative(col, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColoredV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextColoredVNative([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4, byte*, nint, void>)vt[133])(col, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<Vector4, nint, nint, void>)vt[133])(col, (nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColoredV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColoredV([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			TextColoredVNative(col, fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColoredV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColoredV([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextColoredVNative(col, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColoredV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColoredV([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TextColoredVNative(col, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextColoredV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextColoredV([NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextColoredVNative(col, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextDisabledNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[134])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[134])((nint)fmt);
			#endif
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabled([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			TextDisabledNative(fmt);
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabled([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextDisabledNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabled([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TextDisabledNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabled([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextDisabledNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabledV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextDisabledVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[135])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[135])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabledV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabledV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			TextDisabledVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabledV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabledV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextDisabledVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabledV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabledV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TextDisabledVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextDisabledV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextDisabledV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextDisabledVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextWrappedNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[136])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[136])((nint)fmt);
			#endif
		}

		/// <summary>
		/// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrapped([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			TextWrappedNative(fmt);
		}

		/// <summary>
		/// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrapped([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextWrappedNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrapped([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TextWrappedNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrapped")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrapped([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextWrappedNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrappedV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextWrappedVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[137])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[137])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrappedV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrappedV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			TextWrappedVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrappedV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrappedV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				TextWrappedVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrappedV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrappedV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				TextWrappedVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextWrappedV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextWrappedV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextWrappedVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LabelTextNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[138])(label, fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[138])((nint)label, (nint)fmt);
			#endif
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			LabelTextNative(label, fmt);
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			fixed (byte* plabel = &label)
			{
				LabelTextNative((byte*)plabel, fmt);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			fixed (byte* plabel = label)
			{
				LabelTextNative((byte*)plabel, fmt);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextNative(pStr0, fmt);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				LabelTextNative(label, (byte*)pfmt);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				LabelTextNative(label, (byte*)pfmt);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pfmt = &fmt)
				{
					LabelTextNative((byte*)plabel, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pfmt = fmt)
				{
					LabelTextNative((byte*)plabel, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// display text+label aligned the same way as value+label widgets<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LabelTextNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void LabelTextVNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, nint, void>)vt[139])(label, fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)vt[139])((nint)label, (nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			LabelTextVNative(label, fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* plabel = &label)
			{
				LabelTextVNative((byte*)plabel, fmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* plabel = label)
			{
				LabelTextVNative((byte*)plabel, fmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextVNative(pStr0, fmt, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				LabelTextVNative(label, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				LabelTextVNative(label, (byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelTextVNative(label, pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pfmt = &fmt)
				{
					LabelTextVNative((byte*)plabel, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pfmt = fmt)
				{
					LabelTextVNative((byte*)plabel, (byte*)pfmt, args);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igLabelTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LabelTextV([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			LabelTextVNative(pStr0, pStr1, args);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// shortcut for Bullet()+Text()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BulletTextNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[140])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[140])((nint)fmt);
			#endif
		}

		/// <summary>
		/// shortcut for Bullet()+Text()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt)
		{
			BulletTextNative(fmt);
		}

		/// <summary>
		/// shortcut for Bullet()+Text()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				BulletTextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for Bullet()+Text()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				BulletTextNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// shortcut for Bullet()+Text()<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletText([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BulletTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BulletTextVNative([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, nint, void>)vt[141])(fmt, args);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[141])((nint)fmt, args);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] byte* fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			BulletTextVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ref byte fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = &fmt)
			{
				BulletTextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			fixed (byte* pfmt = fmt)
			{
				BulletTextVNative((byte*)pfmt, args);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igBulletTextV")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void BulletTextV([NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "const char*")] string fmt, [NativeName(NativeNameType.Param, "args")] [NativeName(NativeNameType.Type, "va_list")] nint args)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BulletTextVNative(pStr0, args);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// currently: formatted text with an horizontal line<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorText")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SeparatorTextNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)vt[142])(label);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[142])((nint)label);
			#endif
		}

		/// <summary>
		/// currently: formatted text with an horizontal line<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			SeparatorTextNative(label);
		}

		/// <summary>
		/// currently: formatted text with an horizontal line<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				SeparatorTextNative((byte*)plabel);
			}
		}

		/// <summary>
		/// currently: formatted text with an horizontal line<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				SeparatorTextNative((byte*)plabel);
			}
		}

		/// <summary>
		/// currently: formatted text with an horizontal line<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSeparatorText")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SeparatorText([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, byte>)vt[143])(label, size);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, byte>)vt[143])((nint)label, size);
			#endif
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte ret = ButtonNative(label, size);
			return ret != 0;
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = ButtonNative(label, (Vector2)(new Vector2(0,0)));
			return ret != 0;
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ButtonNative((byte*)plabel, size);
				return ret != 0;
			}
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = ButtonNative((byte*)plabel, (Vector2)(new Vector2(0,0)));
				return ret != 0;
			}
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ButtonNative((byte*)plabel, size);
				return ret != 0;
			}
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = ButtonNative((byte*)plabel, (Vector2)(new Vector2(0,0)));
				return ret != 0;
			}
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ButtonNative(pStr0, size);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// button<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Button([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ButtonNative(pStr0, (Vector2)(new Vector2(0,0)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// button with (FramePadding.y == 0) to easily embed within text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSmallButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte SmallButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[144])(label);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[144])((nint)label);
			#endif
		}

		/// <summary>
		/// button with (FramePadding.y == 0) to easily embed within text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSmallButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SmallButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = SmallButtonNative(label);
			return ret != 0;
		}

		/// <summary>
		/// button with (FramePadding.y == 0) to easily embed within text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSmallButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SmallButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = SmallButtonNative((byte*)plabel);
				return ret != 0;
			}
		}

		/// <summary>
		/// button with (FramePadding.y == 0) to easily embed within text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSmallButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SmallButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = SmallButtonNative((byte*)plabel);
				return ret != 0;
			}
		}

		/// <summary>
		/// button with (FramePadding.y == 0) to easily embed within text<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igSmallButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SmallButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SmallButtonNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte InvisibleButtonNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, ImGuiButtonFlags, byte>)vt[145])(strId, size, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, ImGuiButtonFlags, byte>)vt[145])((nint)strId, size, flags);
			#endif
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte ret = InvisibleButtonNative(strId, size, flags);
			return ret != 0;
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte ret = InvisibleButtonNative(strId, size, (ImGuiButtonFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, (ImGuiButtonFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = InvisibleButtonNative((byte*)pstrId, size, (ImGuiButtonFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImGuiButtonFlags")] ImGuiButtonFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InvisibleButtonNative(pStr0, size, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igInvisibleButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool InvisibleButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = InvisibleButtonNative(pStr0, size, (ImGuiButtonFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// square button with an arrow shape<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ArrowButtonNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImGuiDir, byte>)vt[146])(strId, dir);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImGuiDir, byte>)vt[146])((nint)strId, dir);
			#endif
		}

		/// <summary>
		/// square button with an arrow shape<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			byte ret = ArrowButtonNative(strId, dir);
			return ret != 0;
		}

		/// <summary>
		/// square button with an arrow shape<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ArrowButtonNative((byte*)pstrId, dir);
				return ret != 0;
			}
		}

		/// <summary>
		/// square button with an arrow shape<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ArrowButtonNative((byte*)pstrId, dir);
				return ret != 0;
			}
		}

		/// <summary>
		/// square button with an arrow shape<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igArrowButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ArrowButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "dir")] [NativeName(NativeNameType.Type, "ImGuiDir")] ImGuiDir dir)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ArrowButtonNative(pStr0, dir);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckboxNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] bool* v)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, bool*, byte>)vt[147])(label, v);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)vt[147])((nint)label, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] bool* v)
		{
			byte ret = CheckboxNative(label, v);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] bool* v)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxNative((byte*)plabel, v);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] bool* v)
		{
			fixed (byte* plabel = label)
			{
				byte ret = CheckboxNative((byte*)plabel, v);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] bool* v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxNative(pStr0, v);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] ref bool v)
		{
			fixed (bool* pv = &v)
			{
				byte ret = CheckboxNative(label, (bool*)pv);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] ref bool v)
		{
			fixed (byte* plabel = &label)
			{
				fixed (bool* pv = &v)
				{
					byte ret = CheckboxNative((byte*)plabel, (bool*)pv);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] ref bool v)
		{
			fixed (byte* plabel = label)
			{
				fixed (bool* pv = &v)
				{
					byte ret = CheckboxNative((byte*)plabel, (bool*)pv);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckbox")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Checkbox([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "bool*")] ref bool v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (bool* pv = &v)
			{
				byte ret = CheckboxNative(pStr0, (bool*)pv);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckboxFlagsNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] int* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int, byte>)vt[148])(label, flags, flagsValue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, int, byte>)vt[148])((nint)label, (nint)flags, flagsValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] int* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			byte ret = CheckboxFlagsNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] int* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] int* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			fixed (byte* plabel = label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] int* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] ref int flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			fixed (int* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(label, (int*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] ref int flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (int*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] ref int flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (int*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int*")] ref int flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "int")] int flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(pStr0, (int*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte CheckboxFlagsNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, uint*, uint, byte>)vt[149])(label, flags, flagsValue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, uint, byte>)vt[149])((nint)label, (nint)flags, flagsValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			byte ret = CheckboxFlagsNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			fixed (byte* plabel = label)
			{
				byte ret = CheckboxFlagsNative((byte*)plabel, flags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CheckboxFlagsNative(pStr0, flags, flagsValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			fixed (uint* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(label, (uint*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			fixed (byte* plabel = &label)
			{
				fixed (uint* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (uint*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			fixed (byte* plabel = label)
			{
				fixed (uint* pflags = &flags)
				{
					byte ret = CheckboxFlagsNative((byte*)plabel, (uint*)pflags, flagsValue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igCheckboxFlags_UintPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool CheckboxFlags([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint flags, [NativeName(NativeNameType.Param, "flags_value")] [NativeName(NativeNameType.Type, "unsigned int")] uint flagsValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (uint* pflags = &flags)
			{
				byte ret = CheckboxFlagsNative(pStr0, (uint*)pflags, flagsValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_Bool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RadioButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "bool")] byte active)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte, byte>)vt[150])(label, active);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)vt[150])((nint)label, active);
			#endif
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_Bool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "bool")] bool active)
		{
			byte ret = RadioButtonNative(label, active ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_Bool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "bool")] bool active)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = RadioButtonNative((byte*)plabel, active ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_Bool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "bool")] bool active)
		{
			fixed (byte* plabel = label)
			{
				byte ret = RadioButtonNative((byte*)plabel, active ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_Bool")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "active")] [NativeName(NativeNameType.Type, "bool")] bool active)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RadioButtonNative(pStr0, active ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// use with e.g. if (RadioButton("one", my_value==1))  my_value = 1;<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte RadioButtonNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] int* v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int*, int, byte>)vt[151])(label, v, vButton);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, int, byte>)vt[151])((nint)label, (nint)v, vButton);
			#endif
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] int* v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			byte ret = RadioButtonNative(label, v, vButton);
			return ret != 0;
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] int* v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = RadioButtonNative((byte*)plabel, v, vButton);
				return ret != 0;
			}
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] int* v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			fixed (byte* plabel = label)
			{
				byte ret = RadioButtonNative((byte*)plabel, v, vButton);
				return ret != 0;
			}
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] int* v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RadioButtonNative(pStr0, v, vButton);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] ref int v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			fixed (int* pv = &v)
			{
				byte ret = RadioButtonNative(label, (int*)pv, vButton);
				return ret != 0;
			}
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] ref int v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			fixed (byte* plabel = &label)
			{
				fixed (int* pv = &v)
				{
					byte ret = RadioButtonNative((byte*)plabel, (int*)pv, vButton);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] ref int v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			fixed (byte* plabel = label)
			{
				fixed (int* pv = &v)
				{
					byte ret = RadioButtonNative((byte*)plabel, (int*)pv, vButton);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// shortcut to handle the above pattern when value is an integer<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igRadioButton_IntPtr")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RadioButton([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "int*")] ref int v, [NativeName(NativeNameType.Param, "v_button")] [NativeName(NativeNameType.Type, "int")] int vButton)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pv = &v)
			{
				byte ret = RadioButtonNative(pStr0, (int*)pv, vButton);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ProgressBarNative([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] byte* overlay)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, Vector2, byte*, void>)vt[152])(fraction, sizeArg, overlay);
			#else
			((delegate* unmanaged[Cdecl]<float, Vector2, nint, void>)vt[152])(fraction, sizeArg, (nint)overlay);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] byte* overlay)
		{
			ProgressBarNative(fraction, sizeArg, overlay);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg)
		{
			ProgressBarNative(fraction, sizeArg, (byte*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction)
		{
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), (byte*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] byte* overlay)
		{
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), overlay);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] ref byte overlay)
		{
			fixed (byte* poverlay = &overlay)
			{
				ProgressBarNative(fraction, sizeArg, (byte*)poverlay);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] ref byte overlay)
		{
			fixed (byte* poverlay = &overlay)
			{
				ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), (byte*)poverlay);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> overlay)
		{
			fixed (byte* poverlay = overlay)
			{
				ProgressBarNative(fraction, sizeArg, (byte*)poverlay);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> overlay)
		{
			fixed (byte* poverlay = overlay)
			{
				ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), (byte*)poverlay);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "size_arg")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 sizeArg, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] string overlay)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlay != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlay);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlay, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgressBarNative(fraction, sizeArg, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igProgressBar")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ProgressBar([NativeName(NativeNameType.Param, "fraction")] [NativeName(NativeNameType.Type, "float")] float fraction, [NativeName(NativeNameType.Param, "overlay")] [NativeName(NativeNameType.Type, "const char*")] string overlay)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlay != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlay);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlay, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgressBarNative(fraction, (Vector2)(new Vector2(-float.MinValue,0)), pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBullet")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void BulletNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[153])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[153])();
			#endif
		}

		/// <summary>
		/// draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igBullet")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Bullet()
		{
			BulletNative();
		}

		/// <summary>
		/// hyperlink text button, return true when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLink")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte TextLinkNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)vt[154])(label);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)vt[154])((nint)label);
			#endif
		}

		/// <summary>
		/// hyperlink text button, return true when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLink")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TextLink([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			byte ret = TextLinkNative(label);
			return ret != 0;
		}

		/// <summary>
		/// hyperlink text button, return true when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLink")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TextLink([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TextLinkNative((byte*)plabel);
				return ret != 0;
			}
		}

		/// <summary>
		/// hyperlink text button, return true when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLink")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TextLink([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				byte ret = TextLinkNative((byte*)plabel);
				return ret != 0;
			}
		}

		/// <summary>
		/// hyperlink text button, return true when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLink")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool TextLink([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TextLinkNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void TextLinkOpenURLNative([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)vt[155])(label, url);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[155])((nint)label, (nint)url);
			#endif
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			TextLinkOpenURLNative(label, url);
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			TextLinkOpenURLNative(label, (byte*)(default));
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			fixed (byte* plabel = &label)
			{
				TextLinkOpenURLNative((byte*)plabel, url);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				TextLinkOpenURLNative((byte*)plabel, (byte*)(default));
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			fixed (byte* plabel = label)
			{
				TextLinkOpenURLNative((byte*)plabel, url);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				TextLinkOpenURLNative((byte*)plabel, (byte*)(default));
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] byte* url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(pStr0, url);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(pStr0, (byte*)(default));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] ref byte url)
		{
			fixed (byte* purl = &url)
			{
				TextLinkOpenURLNative(label, (byte*)purl);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> url)
		{
			fixed (byte* purl = url)
			{
				TextLinkOpenURLNative(label, (byte*)purl);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] string url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (url != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(url);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(url, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextLinkOpenURLNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] ref byte url)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* purl = &url)
				{
					TextLinkOpenURLNative((byte*)plabel, (byte*)purl);
				}
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> url)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* purl = url)
				{
					TextLinkOpenURLNative((byte*)plabel, (byte*)purl);
				}
			}
		}

		/// <summary>
		/// hyperlink text button, automatically open fileurl when clicked<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "igTextLinkOpenURL")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TextLinkOpenURL([NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "url")] [NativeName(NativeNameType.Type, "const char*")] string url)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (url != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(url);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(url, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			TextLinkOpenURLNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ImageNative([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "border_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 borderCol)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, void>)vt[156])(userTextureId, imageSize, uv0, uv1, tintCol, borderCol);
			#else
			((delegate* unmanaged[Cdecl]<ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, void>)vt[156])(userTextureId, imageSize, uv0, uv1, tintCol, borderCol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "border_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 borderCol)
		{
			ImageNative(userTextureId, imageSize, uv0, uv1, tintCol, borderCol);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			ImageNative(userTextureId, imageSize, uv0, uv1, tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1)
		{
			ImageNative(userTextureId, imageSize, uv0, uv1, (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0)
		{
			ImageNative(userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize)
		{
			ImageNative(userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(1,1,1,1)), (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			ImageNative(userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			ImageNative(userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, (Vector4)(new Vector4(0,0,0,0)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "border_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 borderCol)
		{
			ImageNative(userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), tintCol, borderCol);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Image([NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol, [NativeName(NativeNameType.Param, "border_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 borderCol)
		{
			ImageNative(userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), tintCol, borderCol);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		internal static byte ImageButtonNative([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, byte>)vt[157])(strId, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImTextureID, Vector2, Vector2, Vector2, Vector4, Vector4, byte>)vt[157])((nint)strId, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, uv1, bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, uv1, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, tintCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] byte* strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte ret = ImageButtonNative(strId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, tintCol);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = &strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, uv1, (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), (Vector4)(new Vector4(0,0,0,0)), (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, (Vector4)(new Vector4(1,1,1,1)));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, uv0, (Vector2)(new Vector2(1,1)), bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			fixed (byte* pstrId = strId)
			{
				byte ret = ImageButtonNative((byte*)pstrId, userTextureId, imageSize, (Vector2)(new Vector2(0,0)), (Vector2)(new Vector2(1,1)), bgCol, tintCol);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol, [NativeName(NativeNameType.Param, "tint_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 tintCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, uv0, uv1, bgCol, tintCol);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "igImageButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ImageButton([NativeName(NativeNameType.Param, "str_id")] [NativeName(NativeNameType.Type, "const char*")] string strId, [NativeName(NativeNameType.Param, "user_texture_id")] [NativeName(NativeNameType.Type, "ImTextureID")] ImTextureID userTextureId, [NativeName(NativeNameType.Param, "image_size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 imageSize, [NativeName(NativeNameType.Param, "uv0")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv0, [NativeName(NativeNameType.Param, "uv1")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 uv1, [NativeName(NativeNameType.Param, "bg_col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 bgCol)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (strId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(strId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(strId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ImageButtonNative(pStr0, userTextureId, imageSize, uv0, uv1, bgCol, (Vector4)(new Vector4(1,1,1,1)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}
	}
}
