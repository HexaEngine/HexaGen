// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGui
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderTextEllipsis")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderTextEllipsisNative(ImDrawList* drawList, Vector2 posMin, Vector2 posMax, float clipMaxX, float ellipsisMaxX, byte* text, byte* textEnd, Vector2* textSizeIfKnown);

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  byte* textEnd,  Vector2* textSizeIfKnown)
		{
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, textSizeIfKnown);
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  ref byte text,  byte* textEnd,  Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, textSizeIfKnown);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  string text,  byte* textEnd,  Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, textSizeIfKnown);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  ref byte textEnd,  Vector2* textSizeIfKnown)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, textSizeIfKnown);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  string textEnd,  Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, textSizeIfKnown);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  ref byte text,  ref byte textEnd,  Vector2* textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, textSizeIfKnown);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  string text,  string textEnd,  Vector2* textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, textSizeIfKnown);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  byte* textEnd,  ref Vector2 textSizeIfKnown)
		{
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, textEnd, (Vector2*)ptextSizeIfKnown);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  ref byte text,  byte* textEnd,  ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, textEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  string text,  byte* textEnd,  ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, textEnd, (Vector2*)ptextSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  ref byte textEnd,  ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
				{
					RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  byte* text,  string textEnd,  ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, text, pStr0, (Vector2*)ptextSizeIfKnown);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  ref byte text,  ref byte textEnd,  ref Vector2 textSizeIfKnown)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* ptextEnd = &textEnd)
				{
					fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
					{
						RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, (byte*)ptext, (byte*)ptextEnd, (Vector2*)ptextSizeIfKnown);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void RenderTextEllipsis( ImDrawList* drawList,  Vector2 posMin,  Vector2 posMax,  float clipMaxX,  float ellipsisMaxX,  string text,  string textEnd,  ref Vector2 textSizeIfKnown)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (textEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(textEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Vector2* ptextSizeIfKnown = &textSizeIfKnown)
			{
				RenderTextEllipsisNative(drawList, posMin, posMax, clipMaxX, ellipsisMaxX, pStr0, pStr1, (Vector2*)ptextSizeIfKnown);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderFrame")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderFrameNative(Vector2 pMin, Vector2 pMax, uint fillCol, byte border, float rounding);

		/// <summary>/// To be documented./// </summary>		public static void RenderFrame( Vector2 pMin,  Vector2 pMax,  uint fillCol,  bool border,  float rounding)
		{
			RenderFrameNative(pMin, pMax, fillCol, border ? (byte)1 : (byte)0, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderFrameBorder")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderFrameBorderNative(Vector2 pMin, Vector2 pMax, float rounding);

		/// <summary>/// To be documented./// </summary>		public static void RenderFrameBorder( Vector2 pMin,  Vector2 pMax,  float rounding)
		{
			RenderFrameBorderNative(pMin, pMax, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderColorRectWithAlphaCheckerboard")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderColorRectWithAlphaCheckerboardNative(ImDrawList* drawList, Vector2 pMin, Vector2 pMax, uint fillCol, float gridStep, Vector2 gridOff, float rounding, int flags);

		/// <summary>/// To be documented./// </summary>		public static void RenderColorRectWithAlphaCheckerboard( ImDrawList* drawList,  Vector2 pMin,  Vector2 pMax,  uint fillCol,  float gridStep,  Vector2 gridOff,  float rounding,  int flags)
		{
			RenderColorRectWithAlphaCheckerboardNative(drawList, pMin, pMax, fillCol, gridStep, gridOff, rounding, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderNavHighlight")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderNavHighlightNative(ImRect bb, uint id, int flags);

		/// <summary>/// To be documented./// </summary>		public static void RenderNavHighlight( ImRect bb,  uint id,  int flags)
		{
			RenderNavHighlightNative(bb, id, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igFindRenderedTextEnd")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte* FindRenderedTextEndNative(byte* text, byte* textEnd);

		/// <summary>/// To be documented./// </summary>		public static byte* FindRenderedTextEnd( byte* text,  byte* textEnd)
		{
			byte* ret = FindRenderedTextEndNative(text, textEnd);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string FindRenderedTextEndS( byte* text,  byte* textEnd)
		{
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, textEnd));
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static byte* FindRenderedTextEnd( byte* text,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				byte* ret = FindRenderedTextEndNative(text, (byte*)ptextEnd);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static string FindRenderedTextEndS( byte* text,  ref byte textEnd)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, (byte*)ptextEnd));
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static byte* FindRenderedTextEnd( byte* text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = FindRenderedTextEndNative(text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static string FindRenderedTextEndS( byte* text,  string textEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(FindRenderedTextEndNative(text, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderMouseCursor")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderMouseCursorNative(Vector2 pos, float scale, int mouseCursor, uint colFill, uint colBorder, uint colShadow);

		/// <summary>/// To be documented./// </summary>		public static void RenderMouseCursor( Vector2 pos,  float scale,  int mouseCursor,  uint colFill,  uint colBorder,  uint colShadow)
		{
			RenderMouseCursorNative(pos, scale, mouseCursor, colFill, colBorder, colShadow);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderArrow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderArrowNative(ImDrawList* drawList, Vector2 pos, uint col, int dir, float scale);

		/// <summary>/// To be documented./// </summary>		public static void RenderArrow( ImDrawList* drawList,  Vector2 pos,  uint col,  int dir,  float scale)
		{
			RenderArrowNative(drawList, pos, col, dir, scale);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderBullet")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderBulletNative(ImDrawList* drawList, Vector2 pos, uint col);

		/// <summary>/// To be documented./// </summary>		public static void RenderBullet( ImDrawList* drawList,  Vector2 pos,  uint col)
		{
			RenderBulletNative(drawList, pos, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderCheckMark")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderCheckMarkNative(ImDrawList* drawList, Vector2 pos, uint col, float sz);

		/// <summary>/// To be documented./// </summary>		public static void RenderCheckMark( ImDrawList* drawList,  Vector2 pos,  uint col,  float sz)
		{
			RenderCheckMarkNative(drawList, pos, col, sz);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderArrowPointingAt")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderArrowPointingAtNative(ImDrawList* drawList, Vector2 pos, Vector2 halfSz, int direction, uint col);

		/// <summary>/// To be documented./// </summary>		public static void RenderArrowPointingAt( ImDrawList* drawList,  Vector2 pos,  Vector2 halfSz,  int direction,  uint col)
		{
			RenderArrowPointingAtNative(drawList, pos, halfSz, direction, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderArrowDockMenu")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderArrowDockMenuNative(ImDrawList* drawList, Vector2 pMin, float sz, uint col);

		/// <summary>/// To be documented./// </summary>		public static void RenderArrowDockMenu( ImDrawList* drawList,  Vector2 pMin,  float sz,  uint col)
		{
			RenderArrowDockMenuNative(drawList, pMin, sz, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderRectFilledRangeH")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderRectFilledRangeHNative(ImDrawList* drawList, ImRect rect, uint col, float xStartNorm, float xEndNorm, float rounding);

		/// <summary>/// To be documented./// </summary>		public static void RenderRectFilledRangeH( ImDrawList* drawList,  ImRect rect,  uint col,  float xStartNorm,  float xEndNorm,  float rounding)
		{
			RenderRectFilledRangeHNative(drawList, rect, col, xStartNorm, xEndNorm, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igRenderRectFilledWithHole")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void RenderRectFilledWithHoleNative(ImDrawList* drawList, ImRect outer, ImRect inner, uint col, float rounding);

		/// <summary>/// To be documented./// </summary>		public static void RenderRectFilledWithHole( ImDrawList* drawList,  ImRect outer,  ImRect inner,  uint col,  float rounding)
		{
			RenderRectFilledWithHoleNative(drawList, outer, inner, col, rounding);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCalcRoundingFlagsForRectInRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int CalcRoundingFlagsForRectInRectNative(ImRect rIn, ImRect rOuter, float threshold);

		/// <summary>/// To be documented./// </summary>		public static int CalcRoundingFlagsForRectInRect( ImRect rIn,  ImRect rOuter,  float threshold)
		{
			int ret = CalcRoundingFlagsForRectInRectNative(rIn, rOuter, threshold);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTextEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TextExNative(byte* text, byte* textEnd, int flags);

		/// <summary>/// To be documented./// </summary>		public static void TextEx( byte* text,  byte* textEnd,  int flags)
		{
			TextExNative(text, textEnd, flags);
		}

		/// <summary>/// To be documented./// </summary>		public static void TextEx( byte* text,  ref byte textEnd,  int flags)
		{
			fixed (byte* ptextEnd = &textEnd)
			{
				TextExNative(text, (byte*)ptextEnd, flags);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void TextEx( byte* text,  string textEnd,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (textEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(textEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(textEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TextExNative(text, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igButtonEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ButtonExNative(byte* label, Vector2 sizeArg, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool ButtonEx( byte* label,  Vector2 sizeArg,  int flags)
		{
			byte ret = ButtonExNative(label, sizeArg, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igArrowButtonEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ArrowButtonExNative(byte* strId, int dir, Vector2 sizeArg, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool ArrowButtonEx( byte* strId,  int dir,  Vector2 sizeArg,  int flags)
		{
			byte ret = ArrowButtonExNative(strId, dir, sizeArg, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImageButtonEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ImageButtonExNative(uint id, ImTextureID textureId, Vector2 imageSize, Vector2 uv0, Vector2 uv1, Vector4 bgCol, Vector4 tintCol, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool ImageButtonEx( uint id,  ImTextureID textureId,  Vector2 imageSize,  Vector2 uv0,  Vector2 uv1,  Vector4 bgCol,  Vector4 tintCol,  int flags)
		{
			byte ret = ImageButtonExNative(id, textureId, imageSize, uv0, uv1, bgCol, tintCol, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSeparatorEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SeparatorExNative(int flags, float thickness);

		/// <summary>/// To be documented./// </summary>		public static void SeparatorEx( int flags,  float thickness)
		{
			SeparatorExNative(flags, thickness);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSeparatorTextEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SeparatorTextExNative(uint id, byte* label, byte* labelEnd, float extraWidth);

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  byte* label,  byte* labelEnd,  float extraWidth)
		{
			SeparatorTextExNative(id, label, labelEnd, extraWidth);
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  ref byte label,  byte* labelEnd,  float extraWidth)
		{
			fixed (byte* plabel = &label)
			{
				SeparatorTextExNative(id, (byte*)plabel, labelEnd, extraWidth);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  string label,  byte* labelEnd,  float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextExNative(id, pStr0, labelEnd, extraWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  byte* label,  ref byte labelEnd,  float extraWidth)
		{
			fixed (byte* plabelEnd = &labelEnd)
			{
				SeparatorTextExNative(id, label, (byte*)plabelEnd, extraWidth);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  byte* label,  string labelEnd,  float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SeparatorTextExNative(id, label, pStr0, extraWidth);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  ref byte label,  ref byte labelEnd,  float extraWidth)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* plabelEnd = &labelEnd)
				{
					SeparatorTextExNative(id, (byte*)plabel, (byte*)plabelEnd, extraWidth);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void SeparatorTextEx( uint id,  string label,  string labelEnd,  float extraWidth)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (labelEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(labelEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SeparatorTextExNative(id, pStr0, pStr1, extraWidth);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCheckboxFlags_S64Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte CheckboxFlagsS64PtrNative(byte* label, long* flags, long flagsValue);

		/// <summary>/// To be documented./// </summary>		public static bool CheckboxFlagsS64Ptr( byte* label,  long* flags,  long flagsValue)
		{
			byte ret = CheckboxFlagsS64PtrNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool CheckboxFlagsS64Ptr( byte* label,  ref long flags,  long flagsValue)
		{
			fixed (long* pflags = &flags)
			{
				byte ret = CheckboxFlagsS64PtrNative(label, (long*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCheckboxFlags_U64Ptr")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte CheckboxFlagsU64PtrNative(byte* label, ulong* flags, ulong flagsValue);

		/// <summary>/// To be documented./// </summary>		public static bool CheckboxFlagsU64Ptr( byte* label,  ulong* flags,  ulong flagsValue)
		{
			byte ret = CheckboxFlagsU64PtrNative(label, flags, flagsValue);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool CheckboxFlagsU64Ptr( byte* label,  ref ulong flags,  ulong flagsValue)
		{
			fixed (ulong* pflags = &flags)
			{
				byte ret = CheckboxFlagsU64PtrNative(label, (ulong*)pflags, flagsValue);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCloseButton")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte CloseButtonNative(uint id, Vector2 pos);

		/// <summary>/// To be documented./// </summary>		public static bool CloseButton( uint id,  Vector2 pos)
		{
			byte ret = CloseButtonNative(id, pos);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igCollapseButton")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte CollapseButtonNative(uint id, Vector2 pos, ImGuiDockNode* dockNode);

		/// <summary>/// To be documented./// </summary>		public static bool CollapseButton( uint id,  Vector2 pos,  ImGuiDockNode* dockNode)
		{
			byte ret = CollapseButtonNative(id, pos, dockNode);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool CollapseButton( uint id,  Vector2 pos,  ref ImGuiDockNode dockNode)
		{
			fixed (ImGuiDockNode* pdockNode = &dockNode)
			{
				byte ret = CollapseButtonNative(id, pos, (ImGuiDockNode*)pdockNode);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollbar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ScrollbarNative(ImGuiAxis axis);

		/// <summary>/// To be documented./// </summary>		public static void Scrollbar( ImGuiAxis axis)
		{
			ScrollbarNative(axis);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igScrollbarEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ScrollbarExNative(ImRect bb, uint id, ImGuiAxis axis, long* pScrollV, long availV, long contentsV, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool ScrollbarEx( ImRect bb,  uint id,  ImGuiAxis axis,  long* pScrollV,  long availV,  long contentsV,  int flags)
		{
			byte ret = ScrollbarExNative(bb, id, axis, pScrollV, availV, contentsV, flags);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool ScrollbarEx( ImRect bb,  uint id,  ImGuiAxis axis,  ref long pScrollV,  long availV,  long contentsV,  int flags)
		{
			fixed (long* ppScrollV = &pScrollV)
			{
				byte ret = ScrollbarExNative(bb, id, axis, (long*)ppScrollV, availV, contentsV, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowScrollbarRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GetWindowScrollbarRectNative(ImRect* pOut, ImGuiWindow* window, ImGuiAxis axis);

		/// <summary>/// To be documented./// </summary>		public static void GetWindowScrollbarRect( ImRect* pOut,  ImGuiWindow* window,  ImGuiAxis axis)
		{
			GetWindowScrollbarRectNative(pOut, window, axis);
		}

		/// <summary>/// To be documented./// </summary>		public static void GetWindowScrollbarRect( ImRect* pOut,  ref ImGuiWindow window,  ImGuiAxis axis)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GetWindowScrollbarRectNative(pOut, (ImGuiWindow*)pwindow, axis);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowScrollbarID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetWindowScrollbarIDNative(ImGuiWindow* window, ImGuiAxis axis);

		/// <summary>/// To be documented./// </summary>		public static uint GetWindowScrollbarID( ImGuiWindow* window,  ImGuiAxis axis)
		{
			uint ret = GetWindowScrollbarIDNative(window, axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowResizeCornerID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetWindowResizeCornerIDNative(ImGuiWindow* window, int n);

		/// <summary>/// To be documented./// </summary>		public static uint GetWindowResizeCornerID( ImGuiWindow* window,  int n)
		{
			uint ret = GetWindowResizeCornerIDNative(window, n);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetWindowResizeBorderID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial uint GetWindowResizeBorderIDNative(ImGuiWindow* window, int dir);

		/// <summary>/// To be documented./// </summary>		public static uint GetWindowResizeBorderID( ImGuiWindow* window,  int dir)
		{
			uint ret = GetWindowResizeBorderIDNative(window, dir);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igButtonBehavior")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte ButtonBehaviorNative(ImRect bb, uint id, byte* outHovered, byte* outHeld, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool ButtonBehavior( ImRect bb,  uint id,  byte* outHovered,  byte* outHeld,  int flags)
		{
			byte ret = ButtonBehaviorNative(bb, id, outHovered, outHeld, flags);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool ButtonBehavior( ImRect bb,  uint id,  ref byte outHovered,  byte* outHeld,  int flags)
		{
			fixed (byte* poutHovered = &outHovered)
			{
				byte ret = ButtonBehaviorNative(bb, id, (byte*)poutHovered, outHeld, flags);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool ButtonBehavior( ImRect bb,  uint id,  byte* outHovered,  ref byte outHeld,  int flags)
		{
			fixed (byte* poutHeld = &outHeld)
			{
				byte ret = ButtonBehaviorNative(bb, id, outHovered, (byte*)poutHeld, flags);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool ButtonBehavior( ImRect bb,  uint id,  ref byte outHovered,  ref byte outHeld,  int flags)
		{
			fixed (byte* poutHovered = &outHovered)
			{
				fixed (byte* poutHeld = &outHeld)
				{
					byte ret = ButtonBehaviorNative(bb, id, (byte*)poutHovered, (byte*)poutHeld, flags);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDragBehavior")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DragBehaviorNative(uint id, int dataType, void* pV, float vSpeed, void* pMin, void* pMax, byte* format, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool DragBehavior( uint id,  int dataType,  void* pV,  float vSpeed,  void* pMin,  void* pMax,  byte* format,  int flags)
		{
			byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, format, flags);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool DragBehavior( uint id,  int dataType,  void* pV,  float vSpeed,  void* pMin,  void* pMax,  ref byte format,  int flags)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, (byte*)pformat, flags);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DragBehavior( uint id,  int dataType,  void* pV,  float vSpeed,  void* pMin,  void* pMax,  string format,  int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DragBehaviorNative(id, dataType, pV, vSpeed, pMin, pMax, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSliderBehavior")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SliderBehaviorNative(ImRect bb, uint id, int dataType, void* pV, void* pMin, void* pMax, byte* format, int flags, ImRect* outGrabBb);

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  byte* format,  int flags,  ImRect* outGrabBb)
		{
			byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, format, flags, outGrabBb);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  ref byte format,  int flags,  ImRect* outGrabBb)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, outGrabBb);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  string format,  int flags,  ImRect* outGrabBb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, pStr0, flags, outGrabBb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  byte* format,  int flags,  ref ImRect outGrabBb)
		{
			fixed (ImRect* poutGrabBb = &outGrabBb)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, format, flags, (ImRect*)poutGrabBb);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  ref byte format,  int flags,  ref ImRect outGrabBb)
		{
			fixed (byte* pformat = &format)
			{
				fixed (ImRect* poutGrabBb = &outGrabBb)
				{
					byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, (byte*)pformat, flags, (ImRect*)poutGrabBb);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool SliderBehavior( ImRect bb,  uint id,  int dataType,  void* pV,  void* pMin,  void* pMax,  string format,  int flags,  ref ImRect outGrabBb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (ImRect* poutGrabBb = &outGrabBb)
			{
				byte ret = SliderBehaviorNative(bb, id, dataType, pV, pMin, pMax, pStr0, flags, (ImRect*)poutGrabBb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSplitterBehavior")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte SplitterBehaviorNative(ImRect bb, uint id, ImGuiAxis axis, float* size1, float* size2, float minsize1, float minsize2, float hoverExtend, float hoverVisibilityDelay, uint bgCol);

		/// <summary>/// To be documented./// </summary>		public static bool SplitterBehavior( ImRect bb,  uint id,  ImGuiAxis axis,  float* size1,  float* size2,  float minsize1,  float minsize2,  float hoverExtend,  float hoverVisibilityDelay,  uint bgCol)
		{
			byte ret = SplitterBehaviorNative(bb, id, axis, size1, size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool SplitterBehavior( ImRect bb,  uint id,  ImGuiAxis axis,  ref float size1,  float* size2,  float minsize1,  float minsize2,  float hoverExtend,  float hoverVisibilityDelay,  uint bgCol)
		{
			fixed (float* psize1 = &size1)
			{
				byte ret = SplitterBehaviorNative(bb, id, axis, (float*)psize1, size2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool SplitterBehavior( ImRect bb,  uint id,  ImGuiAxis axis,  float* size1,  ref float size2,  float minsize1,  float minsize2,  float hoverExtend,  float hoverVisibilityDelay,  uint bgCol)
		{
			fixed (float* psize2 = &size2)
			{
				byte ret = SplitterBehaviorNative(bb, id, axis, size1, (float*)psize2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool SplitterBehavior( ImRect bb,  uint id,  ImGuiAxis axis,  ref float size1,  ref float size2,  float minsize1,  float minsize2,  float hoverExtend,  float hoverVisibilityDelay,  uint bgCol)
		{
			fixed (float* psize1 = &size1)
			{
				fixed (float* psize2 = &size2)
				{
					byte ret = SplitterBehaviorNative(bb, id, axis, (float*)psize1, (float*)psize2, minsize1, minsize2, hoverExtend, hoverVisibilityDelay, bgCol);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTreeNodeBehavior")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TreeNodeBehaviorNative(uint id, int flags, byte* label, byte* labelEnd);

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  byte* label,  byte* labelEnd)
		{
			byte ret = TreeNodeBehaviorNative(id, flags, label, labelEnd);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  ref byte label,  byte* labelEnd)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, labelEnd);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  string label,  byte* labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, pStr0, labelEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  byte* label,  ref byte labelEnd)
		{
			fixed (byte* plabelEnd = &labelEnd)
			{
				byte ret = TreeNodeBehaviorNative(id, flags, label, (byte*)plabelEnd);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  byte* label,  string labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  ref byte label,  ref byte labelEnd)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* plabelEnd = &labelEnd)
				{
					byte ret = TreeNodeBehaviorNative(id, flags, (byte*)plabel, (byte*)plabelEnd);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeBehavior( uint id,  int flags,  string label,  string labelEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (labelEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(labelEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(labelEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = TreeNodeBehaviorNative(id, flags, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTreePushOverrideID")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TreePushOverrideIDNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void TreePushOverrideID( uint id)
		{
			TreePushOverrideIDNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTreeNodeSetOpen")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void TreeNodeSetOpenNative(uint id, byte open);

		/// <summary>/// To be documented./// </summary>		public static void TreeNodeSetOpen( uint id,  bool open)
		{
			TreeNodeSetOpenNative(id, open ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTreeNodeUpdateNextOpen")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TreeNodeUpdateNextOpenNative(uint id, int flags);

		/// <summary>/// To be documented./// </summary>		public static bool TreeNodeUpdateNextOpen( uint id,  int flags)
		{
			byte ret = TreeNodeUpdateNextOpenNative(id, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igSetNextItemSelectionUserData")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void SetNextItemSelectionUserDataNative(ImGuiSelectionUserData selectionUserData);

		/// <summary>/// To be documented./// </summary>		public static void SetNextItemSelectionUserData( ImGuiSelectionUserData selectionUserData)
		{
			SetNextItemSelectionUserDataNative(selectionUserData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDataTypeGetInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiDataTypeInfo* DataTypeGetInfoNative(int dataType);

		/// <summary>/// To be documented./// </summary>		public static ImGuiDataTypeInfo* DataTypeGetInfo( int dataType)
		{
			ImGuiDataTypeInfo* ret = DataTypeGetInfoNative(dataType);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDataTypeApplyOp")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DataTypeApplyOpNative(int dataType, int op, void* output, void* arg1, void* arg2);

		/// <summary>/// To be documented./// </summary>		public static void DataTypeApplyOp( int dataType,  int op,  void* output,  void* arg1,  void* arg2)
		{
			DataTypeApplyOpNative(dataType, op, output, arg1, arg2);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDataTypeApplyFromText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DataTypeApplyFromTextNative(byte* buf, int dataType, void* pData, byte* format);

		/// <summary>/// To be documented./// </summary>		public static bool DataTypeApplyFromText( byte* buf,  int dataType,  void* pData,  byte* format)
		{
			byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, format);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool DataTypeApplyFromText( byte* buf,  int dataType,  void* pData,  ref byte format)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, (byte*)pformat);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool DataTypeApplyFromText( byte* buf,  int dataType,  void* pData,  string format)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DataTypeApplyFromTextNative(buf, dataType, pData, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDataTypeCompare")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int DataTypeCompareNative(int dataType, void* arg1, void* arg2);

		/// <summary>/// To be documented./// </summary>		public static int DataTypeCompare( int dataType,  void* arg1,  void* arg2)
		{
			int ret = DataTypeCompareNative(dataType, arg1, arg2);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDataTypeClamp")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte DataTypeClampNative(int dataType, void* pData, void* pMin, void* pMax);

		/// <summary>/// To be documented./// </summary>		public static bool DataTypeClamp( int dataType,  void* pData,  void* pMin,  void* pMax)
		{
			byte ret = DataTypeClampNative(dataType, pData, pMin, pMax);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igInputTextDeactivateHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void InputTextDeactivateHookNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static void InputTextDeactivateHook( uint id)
		{
			InputTextDeactivateHookNative(id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTempInputScalar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TempInputScalarNative(ImRect bb, uint id, byte* label, int dataType, void* pData, byte* format, void* pClampMin, void* pClampMax);

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  byte* label,  int dataType,  void* pData,  byte* format,  void* pClampMin,  void* pClampMax)
		{
			byte ret = TempInputScalarNative(bb, id, label, dataType, pData, format, pClampMin, pClampMax);
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  ref byte label,  int dataType,  void* pData,  byte* format,  void* pClampMin,  void* pClampMax)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, format, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  string label,  int dataType,  void* pData,  byte* format,  void* pClampMin,  void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, pStr0, dataType, pData, format, pClampMin, pClampMax);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  byte* label,  int dataType,  void* pData,  ref byte format,  void* pClampMin,  void* pClampMax)
		{
			fixed (byte* pformat = &format)
			{
				byte ret = TempInputScalarNative(bb, id, label, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
				return ret != 0;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  byte* label,  int dataType,  void* pData,  string format,  void* pClampMin,  void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (format != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(format);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(format, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, label, dataType, pData, pStr0, pClampMin, pClampMax);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  ref byte label,  int dataType,  void* pData,  ref byte format,  void* pClampMin,  void* pClampMax)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pformat = &format)
				{
					byte ret = TempInputScalarNative(bb, id, (byte*)plabel, dataType, pData, (byte*)pformat, pClampMin, pClampMax);
					return ret != 0;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static bool TempInputScalar( ImRect bb,  uint id,  string label,  int dataType,  void* pData,  string format,  void* pClampMin,  void* pClampMax)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (format != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(format);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(format, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = TempInputScalarNative(bb, id, pStr0, dataType, pData, pStr1, pClampMin, pClampMax);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igTempInputIsActive")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte TempInputIsActiveNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static bool TempInputIsActive( uint id)
		{
			byte ret = TempInputIsActiveNative(id);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGetInputTextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImGuiInputTextState* GetInputTextStateNative(uint id);

		/// <summary>/// To be documented./// </summary>		public static ImGuiInputTextState* GetInputTextState( uint id)
		{
			ImGuiInputTextState* ret = GetInputTextStateNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igColorTooltip")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ColorTooltipNative(byte* text, float* col, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ColorTooltip( byte* text,  float* col,  int flags)
		{
			ColorTooltipNative(text, col, flags);
		}

		/// <summary>/// To be documented./// </summary>		public static void ColorTooltip( byte* text,  ref float col,  int flags)
		{
			fixed (float* pcol = &col)
			{
				ColorTooltipNative(text, (float*)pcol, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igColorEditOptionsPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ColorEditOptionsPopupNative(float* col, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ColorEditOptionsPopup( float* col,  int flags)
		{
			ColorEditOptionsPopupNative(col, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igColorPickerOptionsPopup")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ColorPickerOptionsPopupNative(float* refCol, int flags);

		/// <summary>/// To be documented./// </summary>		public static void ColorPickerOptionsPopup( float* refCol,  int flags)
		{
			ColorPickerOptionsPopupNative(refCol, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igPlotEx")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial int PlotExNative(ImGuiPlotType plotType, byte* label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, byte* overlayText, float scaleMin, float scaleMax, Vector2 sizeArg);

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  byte* label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  byte* overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  ref byte label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  byte* overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  string label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  byte* overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, overlayText, scaleMin, scaleMax, sizeArg);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  byte* label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  ref byte overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			fixed (byte* poverlayText = &overlayText)
			{
				int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
				return ret;
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  byte* label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  string overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (overlayText != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(overlayText);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(overlayText, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = PlotExNative(plotType, label, valuesGetter, data, valuesCount, valuesOffset, pStr0, scaleMin, scaleMax, sizeArg);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  ref byte label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  ref byte overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poverlayText = &overlayText)
				{
					int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
					return ret;
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static int PlotEx( ImGuiPlotType plotType,  string label,  delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter,  void* data,  int valuesCount,  int valuesOffset,  string overlayText,  float scaleMin,  float scaleMax,  Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (overlayText != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(overlayText);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(overlayText, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, pStr1, scaleMin, scaleMax, sizeArg);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShadeVertsLinearColorGradientKeepAlpha")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShadeVertsLinearColorGradientKeepAlphaNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 gradientp0, Vector2 gradientp1, uint col0, uint col1);

		/// <summary>/// To be documented./// </summary>		public static void ShadeVertsLinearColorGradientKeepAlpha( ImDrawList* drawList,  int vertStartIdx,  int vertEndIdx,  Vector2 gradientp0,  Vector2 gradientp1,  uint col0,  uint col1)
		{
			ShadeVertsLinearColorGradientKeepAlphaNative(drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShadeVertsLinearUV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShadeVertsLinearUVNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, byte clamp);

		/// <summary>/// To be documented./// </summary>		public static void ShadeVertsLinearUV( ImDrawList* drawList,  int vertStartIdx,  int vertEndIdx,  Vector2 a,  Vector2 b,  Vector2 uvA,  Vector2 uvB,  bool clamp)
		{
			ShadeVertsLinearUVNative(drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShadeVertsTransformPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShadeVertsTransformPosNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 pivotIn, float cosA, float sinA, Vector2 pivotOut);

		/// <summary>/// To be documented./// </summary>		public static void ShadeVertsTransformPos( ImDrawList* drawList,  int vertStartIdx,  int vertEndIdx,  Vector2 pivotIn,  float cosA,  float sinA,  Vector2 pivotOut)
		{
			ShadeVertsTransformPosNative(drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGcCompactTransientMiscBuffers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GcCompactTransientMiscBuffersNative();

		/// <summary>/// To be documented./// </summary>		public static void GcCompactTransientMiscBuffers()
		{
			GcCompactTransientMiscBuffersNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGcCompactTransientWindowBuffers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GcCompactTransientWindowBuffersNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void GcCompactTransientWindowBuffers( ImGuiWindow* window)
		{
			GcCompactTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGcAwakeTransientWindowBuffers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void GcAwakeTransientWindowBuffersNative(ImGuiWindow* window);

		/// <summary>/// To be documented./// </summary>		public static void GcAwakeTransientWindowBuffers( ImGuiWindow* window)
		{
			GcAwakeTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugLog")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugLogNative(byte* fmt);

		/// <summary>/// To be documented./// </summary>		public static void DebugLog( byte* fmt)
		{
			DebugLogNative(fmt);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugLogV")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugLogVNative(byte* fmt, nuint args);

		/// <summary>/// To be documented./// </summary>		public static void DebugLogV( byte* fmt,  nuint args)
		{
			DebugLogVNative(fmt, args);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugAllocHook")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugAllocHookNative(ImGuiDebugAllocInfo* info, int frameCount, void* ptr, ulong size);

		/// <summary>/// To be documented./// </summary>		public static void DebugAllocHook( ImGuiDebugAllocInfo* info,  int frameCount,  void* ptr,  ulong size)
		{
			DebugAllocHookNative(info, frameCount, ptr, size);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugAllocHook( ImGuiDebugAllocInfo* info,  int frameCount,  void* ptr,  nuint size)
		{
			DebugAllocHookNative(info, frameCount, ptr, size);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igErrorCheckEndFrameRecover")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ErrorCheckEndFrameRecoverNative(ImGuiErrorLogCallback logCallback, void* userData);

		/// <summary>/// To be documented./// </summary>		public static void ErrorCheckEndFrameRecover( ImGuiErrorLogCallback logCallback,  void* userData)
		{
			ErrorCheckEndFrameRecoverNative(logCallback, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igErrorCheckEndWindowRecover")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ErrorCheckEndWindowRecoverNative(ImGuiErrorLogCallback logCallback, void* userData);

		/// <summary>/// To be documented./// </summary>		public static void ErrorCheckEndWindowRecover( ImGuiErrorLogCallback logCallback,  void* userData)
		{
			ErrorCheckEndWindowRecoverNative(logCallback, userData);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igErrorCheckUsingSetCursorPosToExtendParentBoundaries")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative();

		/// <summary>/// To be documented./// </summary>		public static void ErrorCheckUsingSetCursorPosToExtendParentBoundaries()
		{
			ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugDrawCursorPos")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugDrawCursorPosNative(uint col);

		/// <summary>/// To be documented./// </summary>		public static void DebugDrawCursorPos( uint col)
		{
			DebugDrawCursorPosNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugDrawLineExtents")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugDrawLineExtentsNative(uint col);

		/// <summary>/// To be documented./// </summary>		public static void DebugDrawLineExtents( uint col)
		{
			DebugDrawLineExtentsNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugDrawItemRect")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugDrawItemRectNative(uint col);

		/// <summary>/// To be documented./// </summary>		public static void DebugDrawItemRect( uint col)
		{
			DebugDrawItemRectNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugLocateItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugLocateItemNative(uint targetId);

		/// <summary>/// To be documented./// </summary>		public static void DebugLocateItem( uint targetId)
		{
			DebugLocateItemNative(targetId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugLocateItemOnHover")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugLocateItemOnHoverNative(uint targetId);

		/// <summary>/// To be documented./// </summary>		public static void DebugLocateItemOnHover( uint targetId)
		{
			DebugLocateItemOnHoverNative(targetId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugLocateItemResolveWithLastItem")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugLocateItemResolveWithLastItemNative();

		/// <summary>/// To be documented./// </summary>		public static void DebugLocateItemResolveWithLastItem()
		{
			DebugLocateItemResolveWithLastItemNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugStartItemPicker")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugStartItemPickerNative();

		/// <summary>/// To be documented./// </summary>		public static void DebugStartItemPicker()
		{
			DebugStartItemPickerNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igShowFontAtlas")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ShowFontAtlasNative(ImFontAtlas* atlas);

		/// <summary>/// To be documented./// </summary>		public static void ShowFontAtlas( ImFontAtlas* atlas)
		{
			ShowFontAtlasNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugHookIdInfo")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugHookIdInfoNative(uint id, int dataType, void* dataId, void* dataIdEnd);

		/// <summary>/// To be documented./// </summary>		public static void DebugHookIdInfo( uint id,  int dataType,  void* dataId,  void* dataIdEnd)
		{
			DebugHookIdInfoNative(id, dataType, dataId, dataIdEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeColumns")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeColumnsNative(ImGuiOldColumns* columns);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeColumns( ImGuiOldColumns* columns)
		{
			DebugNodeColumnsNative(columns);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeDockNode")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeDockNodeNative(ImGuiDockNode* node, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDockNode( ImGuiDockNode* node,  byte* label)
		{
			DebugNodeDockNodeNative(node, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDockNode( ImGuiDockNode* node,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDockNodeNative(node, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDockNode( ImGuiDockNode* node,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDockNodeNative(node, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeDrawList")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeDrawListNative(ImGuiWindow* window, ImGuiViewportP* viewport, ImDrawList* drawList, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ImDrawList* drawList,  byte* label)
		{
			DebugNodeDrawListNative(window, viewport, drawList, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ImDrawList* drawList,  byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, label);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ref ImDrawList drawList,  byte* label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, label);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ref ImDrawList drawList,  byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, label);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ImDrawList* drawList,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDrawListNative(window, viewport, drawList, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ImDrawList* drawList,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDrawListNative(window, viewport, drawList, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ImDrawList* drawList,  ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ImDrawList* drawList,  string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ref ImDrawList drawList,  ref byte label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ImGuiViewportP* viewport,  ref ImDrawList drawList,  string label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ref ImDrawList drawList,  ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawList( ImGuiWindow* window,  ref ImGuiViewportP viewport,  ref ImDrawList drawList,  string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeDrawCmdShowMeshAndBoundingBox")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeDrawCmdShowMeshAndBoundingBoxNative(ImDrawList* outDrawList, ImDrawList* drawList, ImDrawCmd* drawCmd, byte showMesh, byte showAabb);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawCmdShowMeshAndBoundingBox( ImDrawList* outDrawList,  ImDrawList* drawList,  ImDrawCmd* drawCmd,  bool showMesh,  bool showAabb)
		{
			DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawCmdShowMeshAndBoundingBox( ImDrawList* outDrawList,  ref ImDrawList drawList,  ImDrawCmd* drawCmd,  bool showMesh,  bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawCmdShowMeshAndBoundingBox( ImDrawList* outDrawList,  ImDrawList* drawList,  ref ImDrawCmd drawCmd,  bool showMesh,  bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeDrawCmdShowMeshAndBoundingBox( ImDrawList* outDrawList,  ref ImDrawList drawList,  ref ImDrawCmd drawCmd,  bool showMesh,  bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeFontNative(ImFont* font);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeFont( ImFont* font)
		{
			DebugNodeFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeFontGlyph")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeFontGlyphNative(ImFont* font, ImFontGlyph* glyph);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeFontGlyph( ImFont* font,  ImFontGlyph* glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeFontGlyph( ImFont* font,  ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeStorage")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeStorageNative(ImGuiStorage* storage, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeStorage( ImGuiStorage* storage,  byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeStorage( ImGuiStorage* storage,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeStorage( ImGuiStorage* storage,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeTabBar")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTabBarNative(ImGuiTabBar* tabBar, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTabBar( ImGuiTabBar* tabBar,  byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTabBar( ImGuiTabBar* tabBar,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTabBar( ImGuiTabBar* tabBar,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTableNative(ImGuiTable* table);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTable( ImGuiTable* table)
		{
			DebugNodeTableNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeTableSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTableSettingsNative(ImGuiTableSettings* settings);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTableSettings( ImGuiTableSettings* settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeInputTextState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeInputTextStateNative(ImGuiInputTextState* state);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeInputTextState( ImGuiInputTextState* state)
		{
			DebugNodeInputTextStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeTypingSelectState")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeTypingSelectStateNative(ImGuiTypingSelectState* state);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeTypingSelectState( ImGuiTypingSelectState* state)
		{
			DebugNodeTypingSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindow")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowNative(ImGuiWindow* window, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindow( ImGuiWindow* window,  byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindow( ImGuiWindow* window,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindow( ImGuiWindow* window,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowSettings")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowSettingsNative(ImGuiWindowSettings* settings);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowSettings( ImGuiWindowSettings* settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowsList")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowsListNative(ImVectorImGuiWindowPtr* windows, byte* label);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowsList( ImVectorImGuiWindowPtr* windows,  byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowsList( ImVectorImGuiWindowPtr* windows,  ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowsList( ImVectorImGuiWindowPtr* windows,  string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeWindowsListByBeginStackParent")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeWindowsListByBeginStackParentNative(ImGuiWindow** windows, int windowsSize, ImGuiWindow* parentInBeginStack);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowsListByBeginStackParent( ImGuiWindow** windows,  int windowsSize,  ImGuiWindow* parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeWindowsListByBeginStackParent( ImGuiWindow** windows,  int windowsSize,  ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugNodeViewport")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugNodeViewportNative(ImGuiViewportP* viewport);

		/// <summary>/// To be documented./// </summary>		public static void DebugNodeViewport( ImGuiViewportP* viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugRenderKeyboardPreview")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugRenderKeyboardPreviewNative(ImDrawList* drawList);

		/// <summary>/// To be documented./// </summary>		public static void DebugRenderKeyboardPreview( ImDrawList* drawList)
		{
			DebugRenderKeyboardPreviewNative(drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igDebugRenderViewportThumbnail")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void DebugRenderViewportThumbnailNative(ImDrawList* drawList, ImGuiViewportP* viewport, ImRect bb);

		/// <summary>/// To be documented./// </summary>		public static void DebugRenderViewportThumbnail( ImDrawList* drawList,  ImGuiViewportP* viewport,  ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		/// <summary>/// To be documented./// </summary>		public static void DebugRenderViewportThumbnail( ImDrawList* drawList,  ref ImGuiViewportP viewport,  ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igIsKeyPressedMap")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial byte IsKeyPressedMapNative(ImGuiKey key, byte repeat);

		/// <summary>/// To be documented./// </summary>		public static bool IsKeyPressedMap( ImGuiKey key,  bool repeat)
		{
			byte ret = IsKeyPressedMapNative(key, repeat ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasGetBuilderForStbTruetype")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetypeNative();

		/// <summary>/// To be documented./// </summary>		public static ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()
		{
			ImFontBuilderIO* ret = ImFontAtlasGetBuilderForStbTruetypeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasUpdateConfigDataPointers")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasUpdateConfigDataPointersNative(ImFontAtlas* atlas);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasUpdateConfigDataPointers( ImFontAtlas* atlas)
		{
			ImFontAtlasUpdateConfigDataPointersNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildInit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildInitNative(ImFontAtlas* atlas);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildInit( ImFontAtlas* atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildSetupFont")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildSetupFontNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* fontConfig, float ascent, float descent);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildSetupFont( ImFontAtlas* atlas,  ImFont* font,  ImFontConfig* fontConfig,  float ascent,  float descent)
		{
			ImFontAtlasBuildSetupFontNative(atlas, font, fontConfig, ascent, descent);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildSetupFont( ImFontAtlas* atlas,  ref ImFont font,  ImFontConfig* fontConfig,  float ascent,  float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, fontConfig, ascent, descent);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildSetupFont( ImFontAtlas* atlas,  ImFont* font,  ref ImFontConfig fontConfig,  float ascent,  float descent)
		{
			fixed (ImFontConfig* pfontConfig = &fontConfig)
			{
				ImFontAtlasBuildSetupFontNative(atlas, font, (ImFontConfig*)pfontConfig, ascent, descent);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildSetupFont( ImFontAtlas* atlas,  ref ImFont font,  ref ImFontConfig fontConfig,  float ascent,  float descent)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* pfontConfig = &fontConfig)
				{
					ImFontAtlasBuildSetupFontNative(atlas, (ImFont*)pfont, (ImFontConfig*)pfontConfig, ascent, descent);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildPackCustomRects")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildPackCustomRectsNative(ImFontAtlas* atlas, void* stbrpContextOpaque);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildPackCustomRects( ImFontAtlas* atlas,  void* stbrpContextOpaque)
		{
			ImFontAtlasBuildPackCustomRectsNative(atlas, stbrpContextOpaque);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildFinish")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildFinishNative(ImFontAtlas* atlas);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildFinish( ImFontAtlas* atlas)
		{
			ImFontAtlasBuildFinishNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildRender8bppRectFromString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildRender8BppRectFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, byte inMarkerPixelValue);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender8BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  byte* inStr,  byte inMarkerChar,  byte inMarkerPixelValue)
		{
			ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender8BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  ref byte inStr,  byte inMarkerChar,  byte inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender8BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  string inStr,  byte inMarkerChar,  byte inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender8BppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildRender32bppRectFromString")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildRender32BppRectFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar, uint inMarkerPixelValue);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender32BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  byte* inStr,  byte inMarkerChar,  uint inMarkerPixelValue)
		{
			ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar, inMarkerPixelValue);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender32BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  ref byte inStr,  byte inMarkerChar,  uint inMarkerPixelValue)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar, inMarkerPixelValue);
			}
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildRender32BppRectFromString( ImFontAtlas* atlas,  int x,  int y,  int w,  int h,  string inStr,  byte inMarkerChar,  uint inMarkerPixelValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRender32BppRectFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar, inMarkerPixelValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildMultiplyCalcLookupTable")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildMultiplyCalcLookupTableNative(byte* outTable, float inMultiplyFactor);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildMultiplyCalcLookupTable( byte* outTable,  float inMultiplyFactor)
		{
			ImFontAtlasBuildMultiplyCalcLookupTableNative(outTable, inMultiplyFactor);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igImFontAtlasBuildMultiplyRectAlpha8")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImFontAtlasBuildMultiplyRectAlpha8Native(byte* table, byte* pixels, int x, int y, int w, int h, int stride);

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildMultiplyRectAlpha8( byte* table,  byte* pixels,  int x,  int y,  int w,  int h,  int stride)
		{
			ImFontAtlasBuildMultiplyRectAlpha8Native(table, pixels, x, y, w, h, stride);
		}

		/// <summary>/// To be documented./// </summary>		public static void ImFontAtlasBuildMultiplyRectAlpha8( byte* table,  ref byte pixels,  int x,  int y,  int w,  int h,  int stride)
		{
			fixed (byte* ppixels = &pixels)
			{
				ImFontAtlasBuildMultiplyRectAlpha8Native(table, (byte*)ppixels, x, y, w, h, stride);
			}
		}

		/// <summary>
		/// //////////////////////hand written functions<br/>
		/// no LogTextV<br/>
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igLogText")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void LogTextNative(byte* fmt);

		public static void LogText( byte* fmt)
		{
			LogTextNative(fmt);
		}

		/// <summary>
		/// no appendfV<br/>
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImGuiTextBuffer_appendf")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void appendfNative(ImGuiTextBuffer* buffer, byte* fmt);

		public static void appendf( ImGuiTextBuffer* buffer,  byte* fmt)
		{
			appendfNative(buffer, fmt);
		}

		public static void appendf( ImGuiTextBuffer* buffer,  ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				appendfNative(buffer, (byte*)pfmt);
			}
		}

		public static void appendf( ImGuiTextBuffer* buffer,  string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			appendfNative(buffer, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// for getting FLT_MAX in bindings<br/>
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGET_FLT_MAX")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GETFLTMAXNative();

		/// <summary>/// for getting FLT_MAX in bindings<br/>/// </summary>		public static float GETFLTMAX()
		{
			float ret = GETFLTMAXNative();
			return ret;
		}

		/// <summary>
		/// for getting FLT_MIN in bindings<br/>
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "igGET_FLT_MIN")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial float GETFLTMINNative();

		/// <summary>/// for getting FLT_MIN in bindings<br/>/// </summary>		public static float GETFLTMIN()
		{
			float ret = GETFLTMINNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_create")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial ImVectorImWchar* ImVectorImWcharCreateNative();

		/// <summary>/// To be documented./// </summary>		public static ImVectorImWchar* ImVectorImWcharCreate()
		{
			ImVectorImWchar* ret = ImVectorImWcharCreateNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_destroy")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharDestroyNative(ImVectorImWchar* self);

		/// <summary>/// To be documented./// </summary>		public static void ImVectorImWcharDestroy( ImVectorImWchar* self)
		{
			ImVectorImWcharDestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_Init")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharInitNative(ImVectorImWchar* p);

		/// <summary>/// To be documented./// </summary>		public static void ImVectorImWcharInit( ImVectorImWchar* p)
		{
			ImVectorImWcharInitNative(p);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[LibraryImport(LibName, EntryPoint = "ImVector_ImWchar_UnInit")]
		[UnmanagedCallConv(CallConvs = new Type[] {typeof(System.Runtime.CompilerServices.CallConvCdecl)})]
		internal static partial void ImVectorImWcharUnInitNative(ImVectorImWchar* p);

		/// <summary>/// To be documented./// </summary>		public static void ImVectorImWcharUnInit( ImVectorImWchar* p)
		{
			ImVectorImWcharUnInitNative(p);
		}

	}
}
